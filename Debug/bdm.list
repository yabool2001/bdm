
bdm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c70  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08004d30  08004d30  00014d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f48  08004f48  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08004f48  08004f48  00014f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f50  08004f50  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f50  08004f50  00014f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f54  08004f54  00014f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08004f58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  2000007c  08004fd4  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  08004fd4  00020368  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000101db  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b0b  00000000  00000000  0003027f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  00031d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b98  00000000  00000000  000329c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000148e1  00000000  00000000  00033558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000baa0  00000000  00000000  00047e39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080487  00000000  00000000  000538d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3d60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003078  00000000  00000000  000d3db4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000007c 	.word	0x2000007c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004d18 	.word	0x08004d18

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000080 	.word	0x20000080
 8000104:	08004d18 	.word	0x08004d18

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	1c08      	adds	r0, r1, #0
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	; (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f82e 	bl	80004a8 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_lmul>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	0415      	lsls	r5, r2, #16
 800045c:	0c2d      	lsrs	r5, r5, #16
 800045e:	000f      	movs	r7, r1
 8000460:	0001      	movs	r1, r0
 8000462:	002e      	movs	r6, r5
 8000464:	46c6      	mov	lr, r8
 8000466:	4684      	mov	ip, r0
 8000468:	0400      	lsls	r0, r0, #16
 800046a:	0c14      	lsrs	r4, r2, #16
 800046c:	0c00      	lsrs	r0, r0, #16
 800046e:	0c09      	lsrs	r1, r1, #16
 8000470:	4346      	muls	r6, r0
 8000472:	434d      	muls	r5, r1
 8000474:	4360      	muls	r0, r4
 8000476:	4361      	muls	r1, r4
 8000478:	1940      	adds	r0, r0, r5
 800047a:	0c34      	lsrs	r4, r6, #16
 800047c:	1824      	adds	r4, r4, r0
 800047e:	b500      	push	{lr}
 8000480:	42a5      	cmp	r5, r4
 8000482:	d903      	bls.n	800048c <__aeabi_lmul+0x34>
 8000484:	2080      	movs	r0, #128	; 0x80
 8000486:	0240      	lsls	r0, r0, #9
 8000488:	4680      	mov	r8, r0
 800048a:	4441      	add	r1, r8
 800048c:	0c25      	lsrs	r5, r4, #16
 800048e:	186d      	adds	r5, r5, r1
 8000490:	4661      	mov	r1, ip
 8000492:	4359      	muls	r1, r3
 8000494:	437a      	muls	r2, r7
 8000496:	0430      	lsls	r0, r6, #16
 8000498:	1949      	adds	r1, r1, r5
 800049a:	0424      	lsls	r4, r4, #16
 800049c:	0c00      	lsrs	r0, r0, #16
 800049e:	1820      	adds	r0, r4, r0
 80004a0:	1889      	adds	r1, r1, r2
 80004a2:	bc80      	pop	{r7}
 80004a4:	46b8      	mov	r8, r7
 80004a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080004a8 <__udivmoddi4>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	4657      	mov	r7, sl
 80004ac:	464e      	mov	r6, r9
 80004ae:	4645      	mov	r5, r8
 80004b0:	46de      	mov	lr, fp
 80004b2:	b5e0      	push	{r5, r6, r7, lr}
 80004b4:	0004      	movs	r4, r0
 80004b6:	000d      	movs	r5, r1
 80004b8:	4692      	mov	sl, r2
 80004ba:	4699      	mov	r9, r3
 80004bc:	b083      	sub	sp, #12
 80004be:	428b      	cmp	r3, r1
 80004c0:	d830      	bhi.n	8000524 <__udivmoddi4+0x7c>
 80004c2:	d02d      	beq.n	8000520 <__udivmoddi4+0x78>
 80004c4:	4649      	mov	r1, r9
 80004c6:	4650      	mov	r0, sl
 80004c8:	f000 f8d8 	bl	800067c <__clzdi2>
 80004cc:	0029      	movs	r1, r5
 80004ce:	0006      	movs	r6, r0
 80004d0:	0020      	movs	r0, r4
 80004d2:	f000 f8d3 	bl	800067c <__clzdi2>
 80004d6:	1a33      	subs	r3, r6, r0
 80004d8:	4698      	mov	r8, r3
 80004da:	3b20      	subs	r3, #32
 80004dc:	469b      	mov	fp, r3
 80004de:	d433      	bmi.n	8000548 <__udivmoddi4+0xa0>
 80004e0:	465a      	mov	r2, fp
 80004e2:	4653      	mov	r3, sl
 80004e4:	4093      	lsls	r3, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	001f      	movs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d83a      	bhi.n	800056a <__udivmoddi4+0xc2>
 80004f4:	42af      	cmp	r7, r5
 80004f6:	d100      	bne.n	80004fa <__udivmoddi4+0x52>
 80004f8:	e078      	b.n	80005ec <__udivmoddi4+0x144>
 80004fa:	465b      	mov	r3, fp
 80004fc:	1ba4      	subs	r4, r4, r6
 80004fe:	41bd      	sbcs	r5, r7
 8000500:	2b00      	cmp	r3, #0
 8000502:	da00      	bge.n	8000506 <__udivmoddi4+0x5e>
 8000504:	e075      	b.n	80005f2 <__udivmoddi4+0x14a>
 8000506:	2200      	movs	r2, #0
 8000508:	2300      	movs	r3, #0
 800050a:	9200      	str	r2, [sp, #0]
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	2301      	movs	r3, #1
 8000510:	465a      	mov	r2, fp
 8000512:	4093      	lsls	r3, r2
 8000514:	9301      	str	r3, [sp, #4]
 8000516:	2301      	movs	r3, #1
 8000518:	4642      	mov	r2, r8
 800051a:	4093      	lsls	r3, r2
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	e028      	b.n	8000572 <__udivmoddi4+0xca>
 8000520:	4282      	cmp	r2, r0
 8000522:	d9cf      	bls.n	80004c4 <__udivmoddi4+0x1c>
 8000524:	2200      	movs	r2, #0
 8000526:	2300      	movs	r3, #0
 8000528:	9200      	str	r2, [sp, #0]
 800052a:	9301      	str	r3, [sp, #4]
 800052c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <__udivmoddi4+0x8e>
 8000532:	601c      	str	r4, [r3, #0]
 8000534:	605d      	str	r5, [r3, #4]
 8000536:	9800      	ldr	r0, [sp, #0]
 8000538:	9901      	ldr	r1, [sp, #4]
 800053a:	b003      	add	sp, #12
 800053c:	bcf0      	pop	{r4, r5, r6, r7}
 800053e:	46bb      	mov	fp, r7
 8000540:	46b2      	mov	sl, r6
 8000542:	46a9      	mov	r9, r5
 8000544:	46a0      	mov	r8, r4
 8000546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000548:	4642      	mov	r2, r8
 800054a:	2320      	movs	r3, #32
 800054c:	1a9b      	subs	r3, r3, r2
 800054e:	4652      	mov	r2, sl
 8000550:	40da      	lsrs	r2, r3
 8000552:	4641      	mov	r1, r8
 8000554:	0013      	movs	r3, r2
 8000556:	464a      	mov	r2, r9
 8000558:	408a      	lsls	r2, r1
 800055a:	0017      	movs	r7, r2
 800055c:	4642      	mov	r2, r8
 800055e:	431f      	orrs	r7, r3
 8000560:	4653      	mov	r3, sl
 8000562:	4093      	lsls	r3, r2
 8000564:	001e      	movs	r6, r3
 8000566:	42af      	cmp	r7, r5
 8000568:	d9c4      	bls.n	80004f4 <__udivmoddi4+0x4c>
 800056a:	2200      	movs	r2, #0
 800056c:	2300      	movs	r3, #0
 800056e:	9200      	str	r2, [sp, #0]
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	4643      	mov	r3, r8
 8000574:	2b00      	cmp	r3, #0
 8000576:	d0d9      	beq.n	800052c <__udivmoddi4+0x84>
 8000578:	07fb      	lsls	r3, r7, #31
 800057a:	0872      	lsrs	r2, r6, #1
 800057c:	431a      	orrs	r2, r3
 800057e:	4646      	mov	r6, r8
 8000580:	087b      	lsrs	r3, r7, #1
 8000582:	e00e      	b.n	80005a2 <__udivmoddi4+0xfa>
 8000584:	42ab      	cmp	r3, r5
 8000586:	d101      	bne.n	800058c <__udivmoddi4+0xe4>
 8000588:	42a2      	cmp	r2, r4
 800058a:	d80c      	bhi.n	80005a6 <__udivmoddi4+0xfe>
 800058c:	1aa4      	subs	r4, r4, r2
 800058e:	419d      	sbcs	r5, r3
 8000590:	2001      	movs	r0, #1
 8000592:	1924      	adds	r4, r4, r4
 8000594:	416d      	adcs	r5, r5
 8000596:	2100      	movs	r1, #0
 8000598:	3e01      	subs	r6, #1
 800059a:	1824      	adds	r4, r4, r0
 800059c:	414d      	adcs	r5, r1
 800059e:	2e00      	cmp	r6, #0
 80005a0:	d006      	beq.n	80005b0 <__udivmoddi4+0x108>
 80005a2:	42ab      	cmp	r3, r5
 80005a4:	d9ee      	bls.n	8000584 <__udivmoddi4+0xdc>
 80005a6:	3e01      	subs	r6, #1
 80005a8:	1924      	adds	r4, r4, r4
 80005aa:	416d      	adcs	r5, r5
 80005ac:	2e00      	cmp	r6, #0
 80005ae:	d1f8      	bne.n	80005a2 <__udivmoddi4+0xfa>
 80005b0:	9800      	ldr	r0, [sp, #0]
 80005b2:	9901      	ldr	r1, [sp, #4]
 80005b4:	465b      	mov	r3, fp
 80005b6:	1900      	adds	r0, r0, r4
 80005b8:	4169      	adcs	r1, r5
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	db24      	blt.n	8000608 <__udivmoddi4+0x160>
 80005be:	002b      	movs	r3, r5
 80005c0:	465a      	mov	r2, fp
 80005c2:	4644      	mov	r4, r8
 80005c4:	40d3      	lsrs	r3, r2
 80005c6:	002a      	movs	r2, r5
 80005c8:	40e2      	lsrs	r2, r4
 80005ca:	001c      	movs	r4, r3
 80005cc:	465b      	mov	r3, fp
 80005ce:	0015      	movs	r5, r2
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	db2a      	blt.n	800062a <__udivmoddi4+0x182>
 80005d4:	0026      	movs	r6, r4
 80005d6:	409e      	lsls	r6, r3
 80005d8:	0033      	movs	r3, r6
 80005da:	0026      	movs	r6, r4
 80005dc:	4647      	mov	r7, r8
 80005de:	40be      	lsls	r6, r7
 80005e0:	0032      	movs	r2, r6
 80005e2:	1a80      	subs	r0, r0, r2
 80005e4:	4199      	sbcs	r1, r3
 80005e6:	9000      	str	r0, [sp, #0]
 80005e8:	9101      	str	r1, [sp, #4]
 80005ea:	e79f      	b.n	800052c <__udivmoddi4+0x84>
 80005ec:	42a3      	cmp	r3, r4
 80005ee:	d8bc      	bhi.n	800056a <__udivmoddi4+0xc2>
 80005f0:	e783      	b.n	80004fa <__udivmoddi4+0x52>
 80005f2:	4642      	mov	r2, r8
 80005f4:	2320      	movs	r3, #32
 80005f6:	2100      	movs	r1, #0
 80005f8:	1a9b      	subs	r3, r3, r2
 80005fa:	2200      	movs	r2, #0
 80005fc:	9100      	str	r1, [sp, #0]
 80005fe:	9201      	str	r2, [sp, #4]
 8000600:	2201      	movs	r2, #1
 8000602:	40da      	lsrs	r2, r3
 8000604:	9201      	str	r2, [sp, #4]
 8000606:	e786      	b.n	8000516 <__udivmoddi4+0x6e>
 8000608:	4642      	mov	r2, r8
 800060a:	2320      	movs	r3, #32
 800060c:	1a9b      	subs	r3, r3, r2
 800060e:	002a      	movs	r2, r5
 8000610:	4646      	mov	r6, r8
 8000612:	409a      	lsls	r2, r3
 8000614:	0023      	movs	r3, r4
 8000616:	40f3      	lsrs	r3, r6
 8000618:	4644      	mov	r4, r8
 800061a:	4313      	orrs	r3, r2
 800061c:	002a      	movs	r2, r5
 800061e:	40e2      	lsrs	r2, r4
 8000620:	001c      	movs	r4, r3
 8000622:	465b      	mov	r3, fp
 8000624:	0015      	movs	r5, r2
 8000626:	2b00      	cmp	r3, #0
 8000628:	dad4      	bge.n	80005d4 <__udivmoddi4+0x12c>
 800062a:	4642      	mov	r2, r8
 800062c:	002f      	movs	r7, r5
 800062e:	2320      	movs	r3, #32
 8000630:	0026      	movs	r6, r4
 8000632:	4097      	lsls	r7, r2
 8000634:	1a9b      	subs	r3, r3, r2
 8000636:	40de      	lsrs	r6, r3
 8000638:	003b      	movs	r3, r7
 800063a:	4333      	orrs	r3, r6
 800063c:	e7cd      	b.n	80005da <__udivmoddi4+0x132>
 800063e:	46c0      	nop			; (mov r8, r8)

08000640 <__clzsi2>:
 8000640:	211c      	movs	r1, #28
 8000642:	2301      	movs	r3, #1
 8000644:	041b      	lsls	r3, r3, #16
 8000646:	4298      	cmp	r0, r3
 8000648:	d301      	bcc.n	800064e <__clzsi2+0xe>
 800064a:	0c00      	lsrs	r0, r0, #16
 800064c:	3910      	subs	r1, #16
 800064e:	0a1b      	lsrs	r3, r3, #8
 8000650:	4298      	cmp	r0, r3
 8000652:	d301      	bcc.n	8000658 <__clzsi2+0x18>
 8000654:	0a00      	lsrs	r0, r0, #8
 8000656:	3908      	subs	r1, #8
 8000658:	091b      	lsrs	r3, r3, #4
 800065a:	4298      	cmp	r0, r3
 800065c:	d301      	bcc.n	8000662 <__clzsi2+0x22>
 800065e:	0900      	lsrs	r0, r0, #4
 8000660:	3904      	subs	r1, #4
 8000662:	a202      	add	r2, pc, #8	; (adr r2, 800066c <__clzsi2+0x2c>)
 8000664:	5c10      	ldrb	r0, [r2, r0]
 8000666:	1840      	adds	r0, r0, r1
 8000668:	4770      	bx	lr
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	02020304 	.word	0x02020304
 8000670:	01010101 	.word	0x01010101
	...

0800067c <__clzdi2>:
 800067c:	b510      	push	{r4, lr}
 800067e:	2900      	cmp	r1, #0
 8000680:	d103      	bne.n	800068a <__clzdi2+0xe>
 8000682:	f7ff ffdd 	bl	8000640 <__clzsi2>
 8000686:	3020      	adds	r0, #32
 8000688:	e002      	b.n	8000690 <__clzdi2+0x14>
 800068a:	1c08      	adds	r0, r1, #0
 800068c:	f7ff ffd8 	bl	8000640 <__clzsi2>
 8000690:	bd10      	pop	{r4, pc}
 8000692:	46c0      	nop			; (mov r8, r8)

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000698:	f001 fa24 	bl	8001ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069c:	f000 f828 	bl	80006f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a0:	f000 f912 	bl	80008c8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80006a4:	f000 f878 	bl	8000798 <MX_SPI1_Init>
  MX_USART5_UART_Init();
 80006a8:	f000 f8de 	bl	8000868 <MX_USART5_UART_Init>
  MX_USART4_UART_Init();
 80006ac:	f000 f8ac 	bl	8000808 <MX_USART4_UART_Init>
  /* USER CODE BEGIN 2 */

	/* IIS2DLPC configuration */
	iis2dlpc_ctx.write_reg = platform_write ;
 80006b0:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <main+0x4c>)
 80006b2:	4a0c      	ldr	r2, [pc, #48]	; (80006e4 <main+0x50>)
 80006b4:	601a      	str	r2, [r3, #0]
	iis2dlpc_ctx.read_reg = platform_read ;
 80006b6:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <main+0x4c>)
 80006b8:	4a0b      	ldr	r2, [pc, #44]	; (80006e8 <main+0x54>)
 80006ba:	605a      	str	r2, [r3, #4]
	iis2dlpc_ctx.handle = &IIS2DLPC_BUS ;
 80006bc:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <main+0x4c>)
 80006be:	4a0b      	ldr	r2, [pc, #44]	; (80006ec <main+0x58>)
 80006c0:	609a      	str	r2, [r3, #8]
	iis2dlpc_conf_set () ;
 80006c2:	f000 faab 	bl	8000c1c <iis2dlpc_conf_set>
	iis2dlpc_int_notification_set ( &iis2dlpc_ctx , IIS2DLPC_LIR ) ;
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <main+0x4c>)
 80006c8:	2101      	movs	r1, #1
 80006ca:	0018      	movs	r0, r3
 80006cc:	f001 f8d7 	bl	800187e <iis2dlpc_int_notification_set>
	iis2dlpc_conf_print () ;
 80006d0:	f000 fb10 	bl	8000cf4 <iis2dlpc_conf_print>

	/* BG96 configuration */
	bg96_ps_on () ;
 80006d4:	f000 fc4e 	bl	8000f74 <bg96_ps_on>
	uart_rx_buff_print () ;
 80006d8:	f000 fc06 	bl	8000ee8 <uart_rx_buff_print>
	//bg96_uart1_tx_ati () ;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80006dc:	e7fe      	b.n	80006dc <main+0x48>
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	200001cc 	.word	0x200001cc
 80006e4:	08000a51 	.word	0x08000a51
 80006e8:	08000ac1 	.word	0x08000ac1
 80006ec:	200002fc 	.word	0x200002fc

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b590      	push	{r4, r7, lr}
 80006f2:	b095      	sub	sp, #84	; 0x54
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	2418      	movs	r4, #24
 80006f8:	193b      	adds	r3, r7, r4
 80006fa:	0018      	movs	r0, r3
 80006fc:	2338      	movs	r3, #56	; 0x38
 80006fe:	001a      	movs	r2, r3
 8000700:	2100      	movs	r1, #0
 8000702:	f003 fedb 	bl	80044bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	0018      	movs	r0, r3
 800070a:	2314      	movs	r3, #20
 800070c:	001a      	movs	r2, r3
 800070e:	2100      	movs	r1, #0
 8000710:	f003 fed4 	bl	80044bc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <SystemClock_Config+0xa0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a1e      	ldr	r2, [pc, #120]	; (8000794 <SystemClock_Config+0xa4>)
 800071a:	401a      	ands	r2, r3
 800071c:	4b1c      	ldr	r3, [pc, #112]	; (8000790 <SystemClock_Config+0xa0>)
 800071e:	2180      	movs	r1, #128	; 0x80
 8000720:	0109      	lsls	r1, r1, #4
 8000722:	430a      	orrs	r2, r1
 8000724:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000726:	0021      	movs	r1, r4
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2210      	movs	r2, #16
 800072c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800072e:	187b      	adds	r3, r7, r1
 8000730:	2201      	movs	r2, #1
 8000732:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000734:	187b      	adds	r3, r7, r1
 8000736:	2200      	movs	r2, #0
 8000738:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800073a:	187b      	adds	r3, r7, r1
 800073c:	22a0      	movs	r2, #160	; 0xa0
 800073e:	0212      	lsls	r2, r2, #8
 8000740:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2200      	movs	r2, #0
 8000746:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	187b      	adds	r3, r7, r1
 800074a:	0018      	movs	r0, r3
 800074c:	f001 fd10 	bl	8002170 <HAL_RCC_OscConfig>
 8000750:	1e03      	subs	r3, r0, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000754:	f000 fcee 	bl	8001134 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	220f      	movs	r2, #15
 800075c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	2200      	movs	r2, #0
 8000762:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	2200      	movs	r2, #0
 800076e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	2100      	movs	r1, #0
 800077a:	0018      	movs	r0, r3
 800077c:	f002 f8cc 	bl	8002918 <HAL_RCC_ClockConfig>
 8000780:	1e03      	subs	r3, r0, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000784:	f000 fcd6 	bl	8001134 <Error_Handler>
  }
}
 8000788:	46c0      	nop			; (mov r8, r8)
 800078a:	46bd      	mov	sp, r7
 800078c:	b015      	add	sp, #84	; 0x54
 800078e:	bd90      	pop	{r4, r7, pc}
 8000790:	40007000 	.word	0x40007000
 8000794:	ffffe7ff 	.word	0xffffe7ff

08000798 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800079c:	4b18      	ldr	r3, [pc, #96]	; (8000800 <MX_SPI1_Init+0x68>)
 800079e:	4a19      	ldr	r2, [pc, #100]	; (8000804 <MX_SPI1_Init+0x6c>)
 80007a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007a2:	4b17      	ldr	r3, [pc, #92]	; (8000800 <MX_SPI1_Init+0x68>)
 80007a4:	2282      	movs	r2, #130	; 0x82
 80007a6:	0052      	lsls	r2, r2, #1
 80007a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007aa:	4b15      	ldr	r3, [pc, #84]	; (8000800 <MX_SPI1_Init+0x68>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b0:	4b13      	ldr	r3, [pc, #76]	; (8000800 <MX_SPI1_Init+0x68>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007b6:	4b12      	ldr	r3, [pc, #72]	; (8000800 <MX_SPI1_Init+0x68>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007bc:	4b10      	ldr	r3, [pc, #64]	; (8000800 <MX_SPI1_Init+0x68>)
 80007be:	2200      	movs	r2, #0
 80007c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_SPI1_Init+0x68>)
 80007c4:	2280      	movs	r2, #128	; 0x80
 80007c6:	0092      	lsls	r2, r2, #2
 80007c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <MX_SPI1_Init+0x68>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d0:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <MX_SPI1_Init+0x68>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d6:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <MX_SPI1_Init+0x68>)
 80007d8:	2200      	movs	r2, #0
 80007da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007dc:	4b08      	ldr	r3, [pc, #32]	; (8000800 <MX_SPI1_Init+0x68>)
 80007de:	2200      	movs	r2, #0
 80007e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007e2:	4b07      	ldr	r3, [pc, #28]	; (8000800 <MX_SPI1_Init+0x68>)
 80007e4:	2207      	movs	r2, #7
 80007e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007e8:	4b05      	ldr	r3, [pc, #20]	; (8000800 <MX_SPI1_Init+0x68>)
 80007ea:	0018      	movs	r0, r3
 80007ec:	f002 fab8 	bl	8002d60 <HAL_SPI_Init>
 80007f0:	1e03      	subs	r3, r0, #0
 80007f2:	d001      	beq.n	80007f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007f4:	f000 fc9e 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007f8:	46c0      	nop			; (mov r8, r8)
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	200002fc 	.word	0x200002fc
 8000804:	40013000 	.word	0x40013000

08000808 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_USART4_UART_Init+0x58>)
 800080e:	4a15      	ldr	r2, [pc, #84]	; (8000864 <MX_USART4_UART_Init+0x5c>)
 8000810:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000812:	4b13      	ldr	r3, [pc, #76]	; (8000860 <MX_USART4_UART_Init+0x58>)
 8000814:	22e1      	movs	r2, #225	; 0xe1
 8000816:	0252      	lsls	r2, r2, #9
 8000818:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_USART4_UART_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_USART4_UART_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_USART4_UART_Init+0x58>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_USART4_UART_Init+0x58>)
 800082e:	220c      	movs	r2, #12
 8000830:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <MX_USART4_UART_Init+0x58>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_USART4_UART_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <MX_USART4_UART_Init+0x58>)
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_USART4_UART_Init+0x58>)
 8000846:	2200      	movs	r2, #0
 8000848:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800084a:	4b05      	ldr	r3, [pc, #20]	; (8000860 <MX_USART4_UART_Init+0x58>)
 800084c:	0018      	movs	r0, r3
 800084e:	f003 f891 	bl	8003974 <HAL_UART_Init>
 8000852:	1e03      	subs	r3, r0, #0
 8000854:	d001      	beq.n	800085a <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 8000856:	f000 fc6d 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000278 	.word	0x20000278
 8000864:	40004c00 	.word	0x40004c00

08000868 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 800086c:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_USART5_UART_Init+0x58>)
 800086e:	4a15      	ldr	r2, [pc, #84]	; (80008c4 <MX_USART5_UART_Init+0x5c>)
 8000870:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <MX_USART5_UART_Init+0x58>)
 8000874:	2296      	movs	r2, #150	; 0x96
 8000876:	0192      	lsls	r2, r2, #6
 8000878:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_USART5_UART_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_USART5_UART_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_USART5_UART_Init+0x58>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_USART5_UART_Init+0x58>)
 800088e:	220c      	movs	r2, #12
 8000890:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <MX_USART5_UART_Init+0x58>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_USART5_UART_Init+0x58>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <MX_USART5_UART_Init+0x58>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_USART5_UART_Init+0x58>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80008aa:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <MX_USART5_UART_Init+0x58>)
 80008ac:	0018      	movs	r0, r3
 80008ae:	f003 f861 	bl	8003974 <HAL_UART_Init>
 80008b2:	1e03      	subs	r3, r0, #0
 80008b4:	d001      	beq.n	80008ba <MX_USART5_UART_Init+0x52>
  {
    Error_Handler();
 80008b6:	f000 fc3d 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	200001f4 	.word	0x200001f4
 80008c4:	40005000 	.word	0x40005000

080008c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c8:	b590      	push	{r4, r7, lr}
 80008ca:	b089      	sub	sp, #36	; 0x24
 80008cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	240c      	movs	r4, #12
 80008d0:	193b      	adds	r3, r7, r4
 80008d2:	0018      	movs	r0, r3
 80008d4:	2314      	movs	r3, #20
 80008d6:	001a      	movs	r2, r3
 80008d8:	2100      	movs	r1, #0
 80008da:	f003 fdef 	bl	80044bc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008de:	4b58      	ldr	r3, [pc, #352]	; (8000a40 <MX_GPIO_Init+0x178>)
 80008e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008e2:	4b57      	ldr	r3, [pc, #348]	; (8000a40 <MX_GPIO_Init+0x178>)
 80008e4:	2180      	movs	r1, #128	; 0x80
 80008e6:	430a      	orrs	r2, r1
 80008e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80008ea:	4b55      	ldr	r3, [pc, #340]	; (8000a40 <MX_GPIO_Init+0x178>)
 80008ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ee:	2280      	movs	r2, #128	; 0x80
 80008f0:	4013      	ands	r3, r2
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	4b52      	ldr	r3, [pc, #328]	; (8000a40 <MX_GPIO_Init+0x178>)
 80008f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008fa:	4b51      	ldr	r3, [pc, #324]	; (8000a40 <MX_GPIO_Init+0x178>)
 80008fc:	2101      	movs	r1, #1
 80008fe:	430a      	orrs	r2, r1
 8000900:	62da      	str	r2, [r3, #44]	; 0x2c
 8000902:	4b4f      	ldr	r3, [pc, #316]	; (8000a40 <MX_GPIO_Init+0x178>)
 8000904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000906:	2201      	movs	r2, #1
 8000908:	4013      	ands	r3, r2
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	4b4c      	ldr	r3, [pc, #304]	; (8000a40 <MX_GPIO_Init+0x178>)
 8000910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000912:	4b4b      	ldr	r3, [pc, #300]	; (8000a40 <MX_GPIO_Init+0x178>)
 8000914:	2102      	movs	r1, #2
 8000916:	430a      	orrs	r2, r1
 8000918:	62da      	str	r2, [r3, #44]	; 0x2c
 800091a:	4b49      	ldr	r3, [pc, #292]	; (8000a40 <MX_GPIO_Init+0x178>)
 800091c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800091e:	2202      	movs	r2, #2
 8000920:	4013      	ands	r3, r2
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BG96_UART1_AP_READY_GPIO_Port, BG96_UART1_AP_READY_Pin, GPIO_PIN_RESET);
 8000926:	4b47      	ldr	r3, [pc, #284]	; (8000a44 <MX_GPIO_Init+0x17c>)
 8000928:	2200      	movs	r2, #0
 800092a:	2101      	movs	r1, #1
 800092c:	0018      	movs	r0, r3
 800092e:	f001 fbe6 	bl	80020fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BG96_PWRKEY_Pin|BG96_RESET_N_Pin|IIS2DLPC_CS_Pin|BG96_UART1_DTR_Pin
 8000932:	4945      	ldr	r1, [pc, #276]	; (8000a48 <MX_GPIO_Init+0x180>)
 8000934:	4b45      	ldr	r3, [pc, #276]	; (8000a4c <MX_GPIO_Init+0x184>)
 8000936:	2200      	movs	r2, #0
 8000938:	0018      	movs	r0, r3
 800093a:	f001 fbe0 	bl	80020fe <HAL_GPIO_WritePin>
                          |BG96_PS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IIS2DLPC_SHDN_GPIO_Port, IIS2DLPC_SHDN_Pin, GPIO_PIN_RESET);
 800093e:	2380      	movs	r3, #128	; 0x80
 8000940:	0059      	lsls	r1, r3, #1
 8000942:	23a0      	movs	r3, #160	; 0xa0
 8000944:	05db      	lsls	r3, r3, #23
 8000946:	2200      	movs	r2, #0
 8000948:	0018      	movs	r0, r3
 800094a:	f001 fbd8 	bl	80020fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BG96_UART1_AP_READY_Pin */
  GPIO_InitStruct.Pin = BG96_UART1_AP_READY_Pin;
 800094e:	193b      	adds	r3, r7, r4
 8000950:	2201      	movs	r2, #1
 8000952:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000954:	193b      	adds	r3, r7, r4
 8000956:	2201      	movs	r2, #1
 8000958:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	193b      	adds	r3, r7, r4
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	193b      	adds	r3, r7, r4
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BG96_UART1_AP_READY_GPIO_Port, &GPIO_InitStruct);
 8000966:	193b      	adds	r3, r7, r4
 8000968:	4a36      	ldr	r2, [pc, #216]	; (8000a44 <MX_GPIO_Init+0x17c>)
 800096a:	0019      	movs	r1, r3
 800096c:	0010      	movs	r0, r2
 800096e:	f001 fa2b 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BG96_PWRKEY_Pin BG96_RESET_N_Pin IIS2DLPC_CS_Pin BG96_UART1_DTR_Pin
                           BG96_PS_Pin */
  GPIO_InitStruct.Pin = BG96_PWRKEY_Pin|BG96_RESET_N_Pin|IIS2DLPC_CS_Pin|BG96_UART1_DTR_Pin
 8000972:	193b      	adds	r3, r7, r4
 8000974:	4a34      	ldr	r2, [pc, #208]	; (8000a48 <MX_GPIO_Init+0x180>)
 8000976:	601a      	str	r2, [r3, #0]
                          |BG96_PS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000978:	193b      	adds	r3, r7, r4
 800097a:	2201      	movs	r2, #1
 800097c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	193b      	adds	r3, r7, r4
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	193b      	adds	r3, r7, r4
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098a:	193b      	adds	r3, r7, r4
 800098c:	4a2f      	ldr	r2, [pc, #188]	; (8000a4c <MX_GPIO_Init+0x184>)
 800098e:	0019      	movs	r1, r3
 8000990:	0010      	movs	r0, r2
 8000992:	f001 fa19 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BG96_STATUS_Pin */
  GPIO_InitStruct.Pin = BG96_STATUS_Pin;
 8000996:	193b      	adds	r3, r7, r4
 8000998:	2204      	movs	r2, #4
 800099a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099c:	193b      	adds	r3, r7, r4
 800099e:	2200      	movs	r2, #0
 80009a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	2201      	movs	r2, #1
 80009a6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BG96_STATUS_GPIO_Port, &GPIO_InitStruct);
 80009a8:	193b      	adds	r3, r7, r4
 80009aa:	4a28      	ldr	r2, [pc, #160]	; (8000a4c <MX_GPIO_Init+0x184>)
 80009ac:	0019      	movs	r1, r3
 80009ae:	0010      	movs	r0, r2
 80009b0:	f001 fa0a 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BG96_UART1_DCD_Pin */
  GPIO_InitStruct.Pin = BG96_UART1_DCD_Pin;
 80009b4:	0021      	movs	r1, r4
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2280      	movs	r2, #128	; 0x80
 80009ba:	01d2      	lsls	r2, r2, #7
 80009bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009be:	000c      	movs	r4, r1
 80009c0:	193b      	adds	r3, r7, r4
 80009c2:	2200      	movs	r2, #0
 80009c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	193b      	adds	r3, r7, r4
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BG96_UART1_DCD_GPIO_Port, &GPIO_InitStruct);
 80009cc:	193b      	adds	r3, r7, r4
 80009ce:	4a1f      	ldr	r2, [pc, #124]	; (8000a4c <MX_GPIO_Init+0x184>)
 80009d0:	0019      	movs	r1, r3
 80009d2:	0010      	movs	r0, r2
 80009d4:	f001 f9f8 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IIS2DLPC_SHDN_Pin */
  GPIO_InitStruct.Pin = IIS2DLPC_SHDN_Pin;
 80009d8:	0021      	movs	r1, r4
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	2280      	movs	r2, #128	; 0x80
 80009de:	0052      	lsls	r2, r2, #1
 80009e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	000c      	movs	r4, r1
 80009e4:	193b      	adds	r3, r7, r4
 80009e6:	2201      	movs	r2, #1
 80009e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	193b      	adds	r3, r7, r4
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	193b      	adds	r3, r7, r4
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(IIS2DLPC_SHDN_GPIO_Port, &GPIO_InitStruct);
 80009f6:	193a      	adds	r2, r7, r4
 80009f8:	23a0      	movs	r3, #160	; 0xa0
 80009fa:	05db      	lsls	r3, r3, #23
 80009fc:	0011      	movs	r1, r2
 80009fe:	0018      	movs	r0, r3
 8000a00:	f001 f9e2 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IIS2DLPC_INT1_Pin */
  GPIO_InitStruct.Pin = IIS2DLPC_INT1_Pin;
 8000a04:	0021      	movs	r1, r4
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2280      	movs	r2, #128	; 0x80
 8000a0a:	0052      	lsls	r2, r2, #1
 8000a0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2288      	movs	r2, #136	; 0x88
 8000a12:	0352      	lsls	r2, r2, #13
 8000a14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IIS2DLPC_INT1_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	4a0b      	ldr	r2, [pc, #44]	; (8000a4c <MX_GPIO_Init+0x184>)
 8000a20:	0019      	movs	r1, r3
 8000a22:	0010      	movs	r0, r2
 8000a24:	f001 f9d0 	bl	8001dc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 0);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2102      	movs	r1, #2
 8000a2c:	2007      	movs	r0, #7
 8000a2e:	f001 f999 	bl	8001d64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000a32:	2007      	movs	r0, #7
 8000a34:	f001 f9ab 	bl	8001d8e <HAL_NVIC_EnableIRQ>

}
 8000a38:	46c0      	nop			; (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	b009      	add	sp, #36	; 0x24
 8000a3e:	bd90      	pop	{r4, r7, pc}
 8000a40:	40021000 	.word	0x40021000
 8000a44:	50001c00 	.word	0x50001c00
 8000a48:	00009803 	.word	0x00009803
 8000a4c:	50000400 	.word	0x50000400

08000a50 <platform_write>:
 * @param  bufp      pointer to data to write in register reg
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write ( void *handle , uint8_t reg , const uint8_t *bufp , uint16_t len )
{
 8000a50:	b5b0      	push	{r4, r5, r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	0008      	movs	r0, r1
 8000a5a:	607a      	str	r2, [r7, #4]
 8000a5c:	0019      	movs	r1, r3
 8000a5e:	240b      	movs	r4, #11
 8000a60:	193b      	adds	r3, r7, r4
 8000a62:	1c02      	adds	r2, r0, #0
 8000a64:	701a      	strb	r2, [r3, #0]
 8000a66:	2508      	movs	r5, #8
 8000a68:	197b      	adds	r3, r7, r5
 8000a6a:	1c0a      	adds	r2, r1, #0
 8000a6c:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin	( IIS2DLPC_CS_GPIO_Port , IIS2DLPC_CS_Pin , GPIO_PIN_RESET ) ;
 8000a6e:	2380      	movs	r3, #128	; 0x80
 8000a70:	011b      	lsls	r3, r3, #4
 8000a72:	4812      	ldr	r0, [pc, #72]	; (8000abc <platform_write+0x6c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	0019      	movs	r1, r3
 8000a78:	f001 fb41 	bl	80020fe <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 8000a7c:	2014      	movs	r0, #20
 8000a7e:	f001 f8a1 	bl	8001bc4 <HAL_Delay>
	HAL_SPI_Transmit	( handle , &reg , 1 , 1000 ) ;
 8000a82:	23fa      	movs	r3, #250	; 0xfa
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	1939      	adds	r1, r7, r4
 8000a88:	68f8      	ldr	r0, [r7, #12]
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	f002 f9fc 	bl	8002e88 <HAL_SPI_Transmit>
	HAL_SPI_Transmit	( handle , (uint8_t*) bufp , len , 1000 ) ;
 8000a90:	23fa      	movs	r3, #250	; 0xfa
 8000a92:	009c      	lsls	r4, r3, #2
 8000a94:	197b      	adds	r3, r7, r5
 8000a96:	881a      	ldrh	r2, [r3, #0]
 8000a98:	6879      	ldr	r1, [r7, #4]
 8000a9a:	68f8      	ldr	r0, [r7, #12]
 8000a9c:	0023      	movs	r3, r4
 8000a9e:	f002 f9f3 	bl	8002e88 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin	( IIS2DLPC_CS_GPIO_Port , IIS2DLPC_CS_Pin , GPIO_PIN_SET) ;
 8000aa2:	2380      	movs	r3, #128	; 0x80
 8000aa4:	011b      	lsls	r3, r3, #4
 8000aa6:	4805      	ldr	r0, [pc, #20]	; (8000abc <platform_write+0x6c>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	0019      	movs	r1, r3
 8000aac:	f001 fb27 	bl	80020fe <HAL_GPIO_WritePin>

	return 0;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	b004      	add	sp, #16
 8000ab8:	bdb0      	pop	{r4, r5, r7, pc}
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	50000400 	.word	0x50000400

08000ac0 <platform_read>:
 * @param  bufp      pointer to buffer that store the data read
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read ( void *handle , uint8_t reg , uint8_t *bufp , uint16_t len )
{
 8000ac0:	b5b0      	push	{r4, r5, r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	0008      	movs	r0, r1
 8000aca:	607a      	str	r2, [r7, #4]
 8000acc:	0019      	movs	r1, r3
 8000ace:	240b      	movs	r4, #11
 8000ad0:	193b      	adds	r3, r7, r4
 8000ad2:	1c02      	adds	r2, r0, #0
 8000ad4:	701a      	strb	r2, [r3, #0]
 8000ad6:	2508      	movs	r5, #8
 8000ad8:	197b      	adds	r3, r7, r5
 8000ada:	1c0a      	adds	r2, r1, #0
 8000adc:	801a      	strh	r2, [r3, #0]
	reg |= 0x80;
 8000ade:	193b      	adds	r3, r7, r4
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2280      	movs	r2, #128	; 0x80
 8000ae4:	4252      	negs	r2, r2
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	193b      	adds	r3, r7, r4
 8000aec:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin ( IIS2DLPC_CS_GPIO_Port , IIS2DLPC_CS_Pin , GPIO_PIN_RESET) ;
 8000aee:	2380      	movs	r3, #128	; 0x80
 8000af0:	011b      	lsls	r3, r3, #4
 8000af2:	4812      	ldr	r0, [pc, #72]	; (8000b3c <platform_read+0x7c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	0019      	movs	r1, r3
 8000af8:	f001 fb01 	bl	80020fe <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 8000afc:	2014      	movs	r0, #20
 8000afe:	f001 f861 	bl	8001bc4 <HAL_Delay>
	HAL_SPI_Transmit ( handle , &reg , 1 , 1000 ) ;
 8000b02:	23fa      	movs	r3, #250	; 0xfa
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	1939      	adds	r1, r7, r4
 8000b08:	68f8      	ldr	r0, [r7, #12]
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f002 f9bc 	bl	8002e88 <HAL_SPI_Transmit>
	HAL_SPI_Receive ( handle , bufp , len , 1000 ) ;
 8000b10:	23fa      	movs	r3, #250	; 0xfa
 8000b12:	009c      	lsls	r4, r3, #2
 8000b14:	197b      	adds	r3, r7, r5
 8000b16:	881a      	ldrh	r2, [r3, #0]
 8000b18:	6879      	ldr	r1, [r7, #4]
 8000b1a:	68f8      	ldr	r0, [r7, #12]
 8000b1c:	0023      	movs	r3, r4
 8000b1e:	f002 fb09 	bl	8003134 <HAL_SPI_Receive>
	HAL_GPIO_WritePin ( IIS2DLPC_CS_GPIO_Port , IIS2DLPC_CS_Pin , GPIO_PIN_SET) ;
 8000b22:	2380      	movs	r3, #128	; 0x80
 8000b24:	011b      	lsls	r3, r3, #4
 8000b26:	4805      	ldr	r0, [pc, #20]	; (8000b3c <platform_read+0x7c>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	0019      	movs	r1, r3
 8000b2c:	f001 fae7 	bl	80020fe <HAL_GPIO_WritePin>

	return 0;
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	0018      	movs	r0, r3
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b004      	add	sp, #16
 8000b38:	bdb0      	pop	{r4, r5, r7, pc}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	50000400 	.word	0x50000400

08000b40 <iis2dlpc_int1_print>:

static uint8_t iis2dlpc_int1_print ( void )
{
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
	uint8_t r = (uint8_t)HAL_GPIO_ReadPin ( IIS2DLPC_INT1_GPIO_Port , IIS2DLPC_INT1_Pin ) ;
 8000b46:	1dfc      	adds	r4, r7, #7
 8000b48:	2380      	movs	r3, #128	; 0x80
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	4a0f      	ldr	r2, [pc, #60]	; (8000b8c <iis2dlpc_int1_print+0x4c>)
 8000b4e:	0019      	movs	r1, r3
 8000b50:	0010      	movs	r0, r2
 8000b52:	f001 fab7 	bl	80020c4 <HAL_GPIO_ReadPin>
 8000b56:	0003      	movs	r3, r0
 8000b58:	7023      	strb	r3, [r4, #0]
	sprintf ( (char *)uart_tx_buff , "IIS2DLPC_INT1_Pin: %d\r\n" , r ) ;
 8000b5a:	1dfb      	adds	r3, r7, #7
 8000b5c:	781a      	ldrb	r2, [r3, #0]
 8000b5e:	490c      	ldr	r1, [pc, #48]	; (8000b90 <iis2dlpc_int1_print+0x50>)
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <iis2dlpc_int1_print+0x54>)
 8000b62:	0018      	movs	r0, r3
 8000b64:	f003 fcb2 	bl	80044cc <siprintf>
	dbg_tx ( uart_tx_buff , strlen ( (char const*)uart_tx_buff ) ) ;
 8000b68:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <iis2dlpc_int1_print+0x54>)
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f7ff facc 	bl	8000108 <strlen>
 8000b70:	0003      	movs	r3, r0
 8000b72:	b29a      	uxth	r2, r3
 8000b74:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <iis2dlpc_int1_print+0x54>)
 8000b76:	0011      	movs	r1, r2
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f000 f99f 	bl	8000ebc <dbg_tx>
	return r ;
 8000b7e:	1dfb      	adds	r3, r7, #7
 8000b80:	781b      	ldrb	r3, [r3, #0]
}
 8000b82:	0018      	movs	r0, r3
 8000b84:	46bd      	mov	sp, r7
 8000b86:	b003      	add	sp, #12
 8000b88:	bd90      	pop	{r4, r7, pc}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	50000400 	.word	0x50000400
 8000b90:	08004d30 	.word	0x08004d30
 8000b94:	2000009c 	.word	0x2000009c

08000b98 <iis2dlpc_temp_print>:

/* get and print to dbg IIS2DLPC raw temp */
static void iis2dlpc_temp_print ( void )
{
 8000b98:	b590      	push	{r4, r7, lr}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
	iis2dlpc_temperature_raw_get ( &iis2dlpc_ctx , &iis2dlpc_temp_reg ) ;
 8000b9e:	4a1b      	ldr	r2, [pc, #108]	; (8000c0c <iis2dlpc_temp_print+0x74>)
 8000ba0:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <iis2dlpc_temp_print+0x78>)
 8000ba2:	0011      	movs	r1, r2
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f000 fd8c 	bl	80016c2 <iis2dlpc_temperature_raw_get>

	int8_t temp_integer = iis2dlpc_temp_reg >> 8 ;
 8000baa:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <iis2dlpc_temp_print+0x74>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	5e9b      	ldrsh	r3, [r3, r2]
 8000bb0:	121b      	asrs	r3, r3, #8
 8000bb2:	b21a      	sxth	r2, r3
 8000bb4:	1dfb      	adds	r3, r7, #7
 8000bb6:	701a      	strb	r2, [r3, #0]
	uint8_t temp_fraction = (uint8_t)iis2dlpc_temp_reg ;
 8000bb8:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <iis2dlpc_temp_print+0x74>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	5e9a      	ldrsh	r2, [r3, r2]
 8000bbe:	1dbb      	adds	r3, r7, #6
 8000bc0:	701a      	strb	r2, [r3, #0]

	sprintf ( (char *)uart_tx_buff , "IIS2DLPC temp is %d.%d\r\n" , 25 + temp_integer , temp_fraction * 10 / 255 ) ;
 8000bc2:	1dfb      	adds	r3, r7, #7
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	b25b      	sxtb	r3, r3
 8000bc8:	3319      	adds	r3, #25
 8000bca:	001c      	movs	r4, r3
 8000bcc:	1dbb      	adds	r3, r7, #6
 8000bce:	781a      	ldrb	r2, [r3, #0]
 8000bd0:	0013      	movs	r3, r2
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	189b      	adds	r3, r3, r2
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	21ff      	movs	r1, #255	; 0xff
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f7ff fb30 	bl	8000240 <__divsi3>
 8000be0:	0003      	movs	r3, r0
 8000be2:	490c      	ldr	r1, [pc, #48]	; (8000c14 <iis2dlpc_temp_print+0x7c>)
 8000be4:	480c      	ldr	r0, [pc, #48]	; (8000c18 <iis2dlpc_temp_print+0x80>)
 8000be6:	0022      	movs	r2, r4
 8000be8:	f003 fc70 	bl	80044cc <siprintf>
	dbg_tx ( uart_tx_buff , strlen ( (char const*)uart_tx_buff ) ) ;
 8000bec:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <iis2dlpc_temp_print+0x80>)
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f7ff fa8a 	bl	8000108 <strlen>
 8000bf4:	0003      	movs	r3, r0
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <iis2dlpc_temp_print+0x80>)
 8000bfa:	0011      	movs	r1, r2
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f000 f95d 	bl	8000ebc <dbg_tx>
}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b003      	add	sp, #12
 8000c08:	bd90      	pop	{r4, r7, pc}
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	200001ca 	.word	0x200001ca
 8000c10:	200001cc 	.word	0x200001cc
 8000c14:	08004d48 	.word	0x08004d48
 8000c18:	2000009c 	.word	0x2000009c

08000c1c <iis2dlpc_conf_set>:

static void	iis2dlpc_conf_set ( void )
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	iis2dlpc_device_id_get ( &iis2dlpc_ctx , &iis2dlpc_whoami_reg ) ;
 8000c20:	4a2e      	ldr	r2, [pc, #184]	; (8000cdc <iis2dlpc_conf_set+0xc0>)
 8000c22:	4b2f      	ldr	r3, [pc, #188]	; (8000ce0 <iis2dlpc_conf_set+0xc4>)
 8000c24:	0011      	movs	r1, r2
 8000c26:	0018      	movs	r0, r3
 8000c28:	f000 fd72 	bl	8001710 <iis2dlpc_device_id_get>
	if ( iis2dlpc_whoami_reg == IIS2DLPC_ID )
 8000c2c:	4b2b      	ldr	r3, [pc, #172]	; (8000cdc <iis2dlpc_conf_set+0xc0>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b44      	cmp	r3, #68	; 0x44
 8000c32:	d112      	bne.n	8000c5a <iis2dlpc_conf_set+0x3e>
	{
		sprintf ( (char*)uart_tx_buff , "Hello! My name is %d\n", iis2dlpc_whoami_reg ) ;
 8000c34:	4b29      	ldr	r3, [pc, #164]	; (8000cdc <iis2dlpc_conf_set+0xc0>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	001a      	movs	r2, r3
 8000c3a:	492a      	ldr	r1, [pc, #168]	; (8000ce4 <iis2dlpc_conf_set+0xc8>)
 8000c3c:	4b2a      	ldr	r3, [pc, #168]	; (8000ce8 <iis2dlpc_conf_set+0xcc>)
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f003 fc44 	bl	80044cc <siprintf>
		dbg_tx ( uart_tx_buff, strlen ( (char const*)uart_tx_buff) ) ;
 8000c44:	4b28      	ldr	r3, [pc, #160]	; (8000ce8 <iis2dlpc_conf_set+0xcc>)
 8000c46:	0018      	movs	r0, r3
 8000c48:	f7ff fa5e 	bl	8000108 <strlen>
 8000c4c:	0003      	movs	r3, r0
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	4b25      	ldr	r3, [pc, #148]	; (8000ce8 <iis2dlpc_conf_set+0xcc>)
 8000c52:	0011      	movs	r1, r2
 8000c54:	0018      	movs	r0, r3
 8000c56:	f000 f931 	bl	8000ebc <dbg_tx>
	else
	{
		/* manage here device not found */
	}
	/*Restore default configuration */
	iis2dlpc_reset_set ( &iis2dlpc_ctx , PROPERTY_ENABLE ) ;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <iis2dlpc_conf_set+0xc4>)
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f000 fd68 	bl	8001734 <iis2dlpc_reset_set>
	do {
		iis2dlpc_reset_get ( &iis2dlpc_ctx, &rst ) ;
 8000c64:	4a21      	ldr	r2, [pc, #132]	; (8000cec <iis2dlpc_conf_set+0xd0>)
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <iis2dlpc_conf_set+0xc4>)
 8000c68:	0011      	movs	r1, r2
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f000 fd92 	bl	8001794 <iis2dlpc_reset_get>
	} while ( rst ) ;
 8000c70:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <iis2dlpc_conf_set+0xd0>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d1f5      	bne.n	8000c64 <iis2dlpc_conf_set+0x48>
	/*Set full scale */
	iis2dlpc_full_scale_set ( &iis2dlpc_ctx , IIS2DLPC_2g ) ;
 8000c78:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <iis2dlpc_conf_set+0xc4>)
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f000 fcde 	bl	800163e <iis2dlpc_full_scale_set>
	/*Configure power mode */
	iis2dlpc_power_mode_set ( &iis2dlpc_ctx , IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit ) ;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <iis2dlpc_conf_set+0xc4>)
 8000c84:	2110      	movs	r1, #16
 8000c86:	0018      	movs	r0, r3
 8000c88:	f000 fc15 	bl	80014b6 <iis2dlpc_power_mode_set>
	/*Set Output Data Rate */
	iis2dlpc_data_rate_set ( &iis2dlpc_ctx , IIS2DLPC_XL_ODR_200Hz );
 8000c8c:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <iis2dlpc_conf_set+0xc4>)
 8000c8e:	2106      	movs	r1, #6
 8000c90:	0018      	movs	r0, r3
 8000c92:	f000 fc7c 	bl	800158e <iis2dlpc_data_rate_set>
	/*Apply high-pass digital filter on Wake-Up function */
	iis2dlpc_filter_path_set ( &iis2dlpc_ctx , IIS2DLPC_HIGH_PASS_ON_OUT ) ;
 8000c96:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <iis2dlpc_conf_set+0xc4>)
 8000c98:	2110      	movs	r1, #16
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f000 fd95 	bl	80017ca <iis2dlpc_filter_path_set>
	 * is generated for each X,Y,Z filtered data exceeding the
	 * configured threshold
	*/
	// default iis2dlpc_wkup_dur_set(&dev_ctx, 0);
	// range is 0-3
	iis2dlpc_wkup_dur_set ( &iis2dlpc_ctx , IIS2DLPC_WAKEUP_DUR ) ;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <iis2dlpc_conf_set+0xc4>)
 8000ca2:	2103      	movs	r1, #3
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f000 feec 	bl	8001a82 <iis2dlpc_wkup_dur_set>
	/* Set wake-up threshold
	 * Set Wake-Up threshold: 1 LSb corresponds to FS_XL/2^6
	 */
	// default iis2dlpc_wkup_threshold_set ( &iis2dlpc_ctx , 2 ) ;
	// range is 0-63
	iis2dlpc_wkup_threshold_set ( &iis2dlpc_ctx , IIS2DLPC_WAKEUP_THS ) ;
 8000caa:	4b0d      	ldr	r3, [pc, #52]	; (8000ce0 <iis2dlpc_conf_set+0xc4>)
 8000cac:	2104      	movs	r1, #4
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f000 fe9c 	bl	80019ec <iis2dlpc_wkup_threshold_set>
	/*Enable interrupt generation on Wake-Up INT1 pin */
	iis2dlpc_pin_int1_route_get ( &iis2dlpc_ctx , &iis2dlpc_int_route.ctrl4_int1_pad_ctrl ) ;
 8000cb4:	4a0e      	ldr	r2, [pc, #56]	; (8000cf0 <iis2dlpc_conf_set+0xd4>)
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <iis2dlpc_conf_set+0xc4>)
 8000cb8:	0011      	movs	r1, r2
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f000 fe84 	bl	80019c8 <iis2dlpc_pin_int1_route_get>
	iis2dlpc_int_route.ctrl4_int1_pad_ctrl.int1_wu = PROPERTY_ENABLE ;
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <iis2dlpc_conf_set+0xd4>)
 8000cc2:	781a      	ldrb	r2, [r3, #0]
 8000cc4:	2120      	movs	r1, #32
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	701a      	strb	r2, [r3, #0]
	iis2dlpc_pin_int1_route_set ( &iis2dlpc_ctx , &iis2dlpc_int_route.ctrl4_int1_pad_ctrl ) ;
 8000cca:	4a09      	ldr	r2, [pc, #36]	; (8000cf0 <iis2dlpc_conf_set+0xd4>)
 8000ccc:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <iis2dlpc_conf_set+0xc4>)
 8000cce:	0011      	movs	r1, r2
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	f000 fe04 	bl	80018de <iis2dlpc_pin_int1_route_set>
}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	200001c8 	.word	0x200001c8
 8000ce0:	200001cc 	.word	0x200001cc
 8000ce4:	08004d64 	.word	0x08004d64
 8000ce8:	2000009c 	.word	0x2000009c
 8000cec:	200001c9 	.word	0x200001c9
 8000cf0:	200001d8 	.word	0x200001d8

08000cf4 <iis2dlpc_conf_print>:

static void	iis2dlpc_conf_print	( void )
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	iis2dlpc_wkup_threshold_get ( &iis2dlpc_ctx , &reg8bit ) ;
 8000cf8:	4a65      	ldr	r2, [pc, #404]	; (8000e90 <iis2dlpc_conf_print+0x19c>)
 8000cfa:	4b66      	ldr	r3, [pc, #408]	; (8000e94 <iis2dlpc_conf_print+0x1a0>)
 8000cfc:	0011      	movs	r1, r2
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f000 fea4 	bl	8001a4c <iis2dlpc_wkup_threshold_get>
	sprintf ( (char *)uart_tx_buff , "WAKE_UP_THS: %d\r\n" , reg8bit ) ;
 8000d04:	4b62      	ldr	r3, [pc, #392]	; (8000e90 <iis2dlpc_conf_print+0x19c>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	001a      	movs	r2, r3
 8000d0a:	4963      	ldr	r1, [pc, #396]	; (8000e98 <iis2dlpc_conf_print+0x1a4>)
 8000d0c:	4b63      	ldr	r3, [pc, #396]	; (8000e9c <iis2dlpc_conf_print+0x1a8>)
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f003 fbdc 	bl	80044cc <siprintf>
	dbg_tx ( uart_tx_buff , strlen ( (char const*)uart_tx_buff ) ) ;
 8000d14:	4b61      	ldr	r3, [pc, #388]	; (8000e9c <iis2dlpc_conf_print+0x1a8>)
 8000d16:	0018      	movs	r0, r3
 8000d18:	f7ff f9f6 	bl	8000108 <strlen>
 8000d1c:	0003      	movs	r3, r0
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	4b5e      	ldr	r3, [pc, #376]	; (8000e9c <iis2dlpc_conf_print+0x1a8>)
 8000d22:	0011      	movs	r1, r2
 8000d24:	0018      	movs	r0, r3
 8000d26:	f000 f8c9 	bl	8000ebc <dbg_tx>

	iis2dlpc_read_reg ( &iis2dlpc_ctx , IIS2DLPC_CTRL1 , &reg8bit , 1 ) ;
 8000d2a:	4a59      	ldr	r2, [pc, #356]	; (8000e90 <iis2dlpc_conf_print+0x19c>)
 8000d2c:	4859      	ldr	r0, [pc, #356]	; (8000e94 <iis2dlpc_conf_print+0x1a0>)
 8000d2e:	2301      	movs	r3, #1
 8000d30:	2120      	movs	r1, #32
 8000d32:	f000 fb7e 	bl	8001432 <iis2dlpc_read_reg>
	sprintf ( (char *)uart_tx_buff , "CTRL1: %d\r\n" , reg8bit ) ;
 8000d36:	4b56      	ldr	r3, [pc, #344]	; (8000e90 <iis2dlpc_conf_print+0x19c>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	001a      	movs	r2, r3
 8000d3c:	4958      	ldr	r1, [pc, #352]	; (8000ea0 <iis2dlpc_conf_print+0x1ac>)
 8000d3e:	4b57      	ldr	r3, [pc, #348]	; (8000e9c <iis2dlpc_conf_print+0x1a8>)
 8000d40:	0018      	movs	r0, r3
 8000d42:	f003 fbc3 	bl	80044cc <siprintf>
	dbg_tx ( uart_tx_buff , strlen ( (char const*)uart_tx_buff ) ) ;
 8000d46:	4b55      	ldr	r3, [pc, #340]	; (8000e9c <iis2dlpc_conf_print+0x1a8>)
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f7ff f9dd 	bl	8000108 <strlen>
 8000d4e:	0003      	movs	r3, r0
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	4b52      	ldr	r3, [pc, #328]	; (8000e9c <iis2dlpc_conf_print+0x1a8>)
 8000d54:	0011      	movs	r1, r2
 8000d56:	0018      	movs	r0, r3
 8000d58:	f000 f8b0 	bl	8000ebc <dbg_tx>

	iis2dlpc_read_reg ( &iis2dlpc_ctx , IIS2DLPC_CTRL3 , &reg8bit , 1 ) ;
 8000d5c:	4a4c      	ldr	r2, [pc, #304]	; (8000e90 <iis2dlpc_conf_print+0x19c>)
 8000d5e:	484d      	ldr	r0, [pc, #308]	; (8000e94 <iis2dlpc_conf_print+0x1a0>)
 8000d60:	2301      	movs	r3, #1
 8000d62:	2122      	movs	r1, #34	; 0x22
 8000d64:	f000 fb65 	bl	8001432 <iis2dlpc_read_reg>
	sprintf ( (char *)uart_tx_buff , "CTRL3: %d\r\n" , reg8bit ) ;
 8000d68:	4b49      	ldr	r3, [pc, #292]	; (8000e90 <iis2dlpc_conf_print+0x19c>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	001a      	movs	r2, r3
 8000d6e:	494d      	ldr	r1, [pc, #308]	; (8000ea4 <iis2dlpc_conf_print+0x1b0>)
 8000d70:	4b4a      	ldr	r3, [pc, #296]	; (8000e9c <iis2dlpc_conf_print+0x1a8>)
 8000d72:	0018      	movs	r0, r3
 8000d74:	f003 fbaa 	bl	80044cc <siprintf>
	dbg_tx ( uart_tx_buff , strlen ( (char const*)uart_tx_buff ) ) ;
 8000d78:	4b48      	ldr	r3, [pc, #288]	; (8000e9c <iis2dlpc_conf_print+0x1a8>)
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f7ff f9c4 	bl	8000108 <strlen>
 8000d80:	0003      	movs	r3, r0
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	4b45      	ldr	r3, [pc, #276]	; (8000e9c <iis2dlpc_conf_print+0x1a8>)
 8000d86:	0011      	movs	r1, r2
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f000 f897 	bl	8000ebc <dbg_tx>

	iis2dlpc_read_reg ( &iis2dlpc_ctx , IIS2DLPC_CTRL4_INT1_PAD_CTRL , &reg8bit , 1 ) ;
 8000d8e:	4a40      	ldr	r2, [pc, #256]	; (8000e90 <iis2dlpc_conf_print+0x19c>)
 8000d90:	4840      	ldr	r0, [pc, #256]	; (8000e94 <iis2dlpc_conf_print+0x1a0>)
 8000d92:	2301      	movs	r3, #1
 8000d94:	2123      	movs	r1, #35	; 0x23
 8000d96:	f000 fb4c 	bl	8001432 <iis2dlpc_read_reg>
	sprintf ( (char *)uart_tx_buff , "CTRL4: %d\r\n" , reg8bit ) ;
 8000d9a:	4b3d      	ldr	r3, [pc, #244]	; (8000e90 <iis2dlpc_conf_print+0x19c>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	001a      	movs	r2, r3
 8000da0:	4941      	ldr	r1, [pc, #260]	; (8000ea8 <iis2dlpc_conf_print+0x1b4>)
 8000da2:	4b3e      	ldr	r3, [pc, #248]	; (8000e9c <iis2dlpc_conf_print+0x1a8>)
 8000da4:	0018      	movs	r0, r3
 8000da6:	f003 fb91 	bl	80044cc <siprintf>
	dbg_tx ( uart_tx_buff , strlen ( (char const*)uart_tx_buff ) ) ;
 8000daa:	4b3c      	ldr	r3, [pc, #240]	; (8000e9c <iis2dlpc_conf_print+0x1a8>)
 8000dac:	0018      	movs	r0, r3
 8000dae:	f7ff f9ab 	bl	8000108 <strlen>
 8000db2:	0003      	movs	r3, r0
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	4b39      	ldr	r3, [pc, #228]	; (8000e9c <iis2dlpc_conf_print+0x1a8>)
 8000db8:	0011      	movs	r1, r2
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f000 f87e 	bl	8000ebc <dbg_tx>

	iis2dlpc_read_reg ( &iis2dlpc_ctx , IIS2DLPC_CTRL5_INT2_PAD_CTRL , &reg8bit , 1 ) ;
 8000dc0:	4a33      	ldr	r2, [pc, #204]	; (8000e90 <iis2dlpc_conf_print+0x19c>)
 8000dc2:	4834      	ldr	r0, [pc, #208]	; (8000e94 <iis2dlpc_conf_print+0x1a0>)
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	2124      	movs	r1, #36	; 0x24
 8000dc8:	f000 fb33 	bl	8001432 <iis2dlpc_read_reg>
	sprintf ( (char *)uart_tx_buff , "CTRL5: %d\r\n" , reg8bit ) ;
 8000dcc:	4b30      	ldr	r3, [pc, #192]	; (8000e90 <iis2dlpc_conf_print+0x19c>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	001a      	movs	r2, r3
 8000dd2:	4936      	ldr	r1, [pc, #216]	; (8000eac <iis2dlpc_conf_print+0x1b8>)
 8000dd4:	4b31      	ldr	r3, [pc, #196]	; (8000e9c <iis2dlpc_conf_print+0x1a8>)
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f003 fb78 	bl	80044cc <siprintf>
	dbg_tx ( uart_tx_buff , strlen ( (char const*)uart_tx_buff ) ) ;
 8000ddc:	4b2f      	ldr	r3, [pc, #188]	; (8000e9c <iis2dlpc_conf_print+0x1a8>)
 8000dde:	0018      	movs	r0, r3
 8000de0:	f7ff f992 	bl	8000108 <strlen>
 8000de4:	0003      	movs	r3, r0
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	4b2c      	ldr	r3, [pc, #176]	; (8000e9c <iis2dlpc_conf_print+0x1a8>)
 8000dea:	0011      	movs	r1, r2
 8000dec:	0018      	movs	r0, r3
 8000dee:	f000 f865 	bl	8000ebc <dbg_tx>

	iis2dlpc_read_reg ( &iis2dlpc_ctx , IIS2DLPC_CTRL6 , &reg8bit , 1 ) ;
 8000df2:	4a27      	ldr	r2, [pc, #156]	; (8000e90 <iis2dlpc_conf_print+0x19c>)
 8000df4:	4827      	ldr	r0, [pc, #156]	; (8000e94 <iis2dlpc_conf_print+0x1a0>)
 8000df6:	2301      	movs	r3, #1
 8000df8:	2125      	movs	r1, #37	; 0x25
 8000dfa:	f000 fb1a 	bl	8001432 <iis2dlpc_read_reg>
	sprintf ( (char *)uart_tx_buff , "CTRL6: %d\r\n" , reg8bit ) ;
 8000dfe:	4b24      	ldr	r3, [pc, #144]	; (8000e90 <iis2dlpc_conf_print+0x19c>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	001a      	movs	r2, r3
 8000e04:	492a      	ldr	r1, [pc, #168]	; (8000eb0 <iis2dlpc_conf_print+0x1bc>)
 8000e06:	4b25      	ldr	r3, [pc, #148]	; (8000e9c <iis2dlpc_conf_print+0x1a8>)
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f003 fb5f 	bl	80044cc <siprintf>
	dbg_tx ( uart_tx_buff , strlen ( (char const*)uart_tx_buff ) ) ;
 8000e0e:	4b23      	ldr	r3, [pc, #140]	; (8000e9c <iis2dlpc_conf_print+0x1a8>)
 8000e10:	0018      	movs	r0, r3
 8000e12:	f7ff f979 	bl	8000108 <strlen>
 8000e16:	0003      	movs	r3, r0
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	4b20      	ldr	r3, [pc, #128]	; (8000e9c <iis2dlpc_conf_print+0x1a8>)
 8000e1c:	0011      	movs	r1, r2
 8000e1e:	0018      	movs	r0, r3
 8000e20:	f000 f84c 	bl	8000ebc <dbg_tx>

	iis2dlpc_read_reg ( &iis2dlpc_ctx , IIS2DLPC_STATUS , &reg8bit , 1 ) ;
 8000e24:	4a1a      	ldr	r2, [pc, #104]	; (8000e90 <iis2dlpc_conf_print+0x19c>)
 8000e26:	481b      	ldr	r0, [pc, #108]	; (8000e94 <iis2dlpc_conf_print+0x1a0>)
 8000e28:	2301      	movs	r3, #1
 8000e2a:	2127      	movs	r1, #39	; 0x27
 8000e2c:	f000 fb01 	bl	8001432 <iis2dlpc_read_reg>
	sprintf ( (char *)uart_tx_buff , "STATUS: %d\r\n" , reg8bit ) ;
 8000e30:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <iis2dlpc_conf_print+0x19c>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	001a      	movs	r2, r3
 8000e36:	491f      	ldr	r1, [pc, #124]	; (8000eb4 <iis2dlpc_conf_print+0x1c0>)
 8000e38:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <iis2dlpc_conf_print+0x1a8>)
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f003 fb46 	bl	80044cc <siprintf>
	dbg_tx ( uart_tx_buff , strlen ( (char const*)uart_tx_buff ) ) ;
 8000e40:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <iis2dlpc_conf_print+0x1a8>)
 8000e42:	0018      	movs	r0, r3
 8000e44:	f7ff f960 	bl	8000108 <strlen>
 8000e48:	0003      	movs	r3, r0
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <iis2dlpc_conf_print+0x1a8>)
 8000e4e:	0011      	movs	r1, r2
 8000e50:	0018      	movs	r0, r3
 8000e52:	f000 f833 	bl	8000ebc <dbg_tx>

	iis2dlpc_read_reg ( &iis2dlpc_ctx , IIS2DLPC_WAKE_UP_SRC , &reg8bit , 1 ) ;
 8000e56:	4a0e      	ldr	r2, [pc, #56]	; (8000e90 <iis2dlpc_conf_print+0x19c>)
 8000e58:	480e      	ldr	r0, [pc, #56]	; (8000e94 <iis2dlpc_conf_print+0x1a0>)
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	2138      	movs	r1, #56	; 0x38
 8000e5e:	f000 fae8 	bl	8001432 <iis2dlpc_read_reg>
	sprintf ( (char *)uart_tx_buff , "WAKE_UP_SRC: %d\r\n" , reg8bit ) ;
 8000e62:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <iis2dlpc_conf_print+0x19c>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	001a      	movs	r2, r3
 8000e68:	4913      	ldr	r1, [pc, #76]	; (8000eb8 <iis2dlpc_conf_print+0x1c4>)
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <iis2dlpc_conf_print+0x1a8>)
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f003 fb2d 	bl	80044cc <siprintf>
	dbg_tx ( uart_tx_buff , strlen ( (char const*)uart_tx_buff ) ) ;
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <iis2dlpc_conf_print+0x1a8>)
 8000e74:	0018      	movs	r0, r3
 8000e76:	f7ff f947 	bl	8000108 <strlen>
 8000e7a:	0003      	movs	r3, r0
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <iis2dlpc_conf_print+0x1a8>)
 8000e80:	0011      	movs	r1, r2
 8000e82:	0018      	movs	r0, r3
 8000e84:	f000 f81a 	bl	8000ebc <dbg_tx>
}
 8000e88:	46c0      	nop			; (mov r8, r8)
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	20000098 	.word	0x20000098
 8000e94:	200001cc 	.word	0x200001cc
 8000e98:	08004d7c 	.word	0x08004d7c
 8000e9c:	2000009c 	.word	0x2000009c
 8000ea0:	08004d90 	.word	0x08004d90
 8000ea4:	08004d9c 	.word	0x08004d9c
 8000ea8:	08004da8 	.word	0x08004da8
 8000eac:	08004db4 	.word	0x08004db4
 8000eb0:	08004dc0 	.word	0x08004dc0
 8000eb4:	08004dcc 	.word	0x08004dcc
 8000eb8:	08004ddc 	.word	0x08004ddc

08000ebc <dbg_tx>:
 *
 */

/* DBG functions */
static void dbg_tx ( uint8_t* tx_buff , uint16_t len )
{
 8000ebc:	b590      	push	{r4, r7, lr}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	000a      	movs	r2, r1
 8000ec6:	1cbb      	adds	r3, r7, #2
 8000ec8:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit ( &DBG , tx_buff , len , 1000 ) ;
 8000eca:	23fa      	movs	r3, #250	; 0xfa
 8000ecc:	009c      	lsls	r4, r3, #2
 8000ece:	1cbb      	adds	r3, r7, #2
 8000ed0:	881a      	ldrh	r2, [r3, #0]
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	4803      	ldr	r0, [pc, #12]	; (8000ee4 <dbg_tx+0x28>)
 8000ed6:	0023      	movs	r3, r4
 8000ed8:	f002 fda0 	bl	8003a1c <HAL_UART_Transmit>
}
 8000edc:	46c0      	nop			; (mov r8, r8)
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	b003      	add	sp, #12
 8000ee2:	bd90      	pop	{r4, r7, pc}
 8000ee4:	200001f4 	.word	0x200001f4

08000ee8 <uart_rx_buff_print>:
	sprintf ( (char*)uart_tx_buff , message ) ;
	dbg_tx ( uart_tx_buff , strlen ( (char const*)uart_tx_buff ) ) ;
}
*/
static void uart_rx_buff_print ( void )
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	sprintf ( (char *)uart_tx_buff , "UART Rx: %s\r\n" , (const char*)uart_rx_buff ) ;
 8000eec:	4a09      	ldr	r2, [pc, #36]	; (8000f14 <uart_rx_buff_print+0x2c>)
 8000eee:	490a      	ldr	r1, [pc, #40]	; (8000f18 <uart_rx_buff_print+0x30>)
 8000ef0:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <uart_rx_buff_print+0x34>)
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f003 faea 	bl	80044cc <siprintf>
	dbg_tx ( uart_tx_buff , (uint16_t)strlen ( (const char*)uart_tx_buff ) ) ;
 8000ef8:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <uart_rx_buff_print+0x34>)
 8000efa:	0018      	movs	r0, r3
 8000efc:	f7ff f904 	bl	8000108 <strlen>
 8000f00:	0003      	movs	r3, r0
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <uart_rx_buff_print+0x34>)
 8000f06:	0011      	movs	r1, r2
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f7ff ffd7 	bl	8000ebc <dbg_tx>
}
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000000 	.word	0x20000000
 8000f18:	08004df0 	.word	0x08004df0
 8000f1c:	2000009c 	.word	0x2000009c

08000f20 <bg96_status_print>:

/* BG96 function */
static uint8_t bg96_status_print ( void )
{
 8000f20:	b590      	push	{r4, r7, lr}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
	uint8_t r = (uint8_t)HAL_GPIO_ReadPin ( BG96_STATUS_GPIO_Port , BG96_STATUS_Pin ) ;
 8000f26:	1dfc      	adds	r4, r7, #7
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <bg96_status_print+0x48>)
 8000f2a:	2104      	movs	r1, #4
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f001 f8c9 	bl	80020c4 <HAL_GPIO_ReadPin>
 8000f32:	0003      	movs	r3, r0
 8000f34:	7023      	strb	r3, [r4, #0]
	sprintf ( (char *)uart_tx_buff , "BG96_STATUS_Pin: %d\r\n" , r ) ;
 8000f36:	1dfb      	adds	r3, r7, #7
 8000f38:	781a      	ldrb	r2, [r3, #0]
 8000f3a:	490c      	ldr	r1, [pc, #48]	; (8000f6c <bg96_status_print+0x4c>)
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <bg96_status_print+0x50>)
 8000f3e:	0018      	movs	r0, r3
 8000f40:	f003 fac4 	bl	80044cc <siprintf>
	dbg_tx ( uart_tx_buff , strlen ( (char const*)uart_tx_buff ) ) ;
 8000f44:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <bg96_status_print+0x50>)
 8000f46:	0018      	movs	r0, r3
 8000f48:	f7ff f8de 	bl	8000108 <strlen>
 8000f4c:	0003      	movs	r3, r0
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <bg96_status_print+0x50>)
 8000f52:	0011      	movs	r1, r2
 8000f54:	0018      	movs	r0, r3
 8000f56:	f7ff ffb1 	bl	8000ebc <dbg_tx>
	return r ;
 8000f5a:	1dfb      	adds	r3, r7, #7
 8000f5c:	781b      	ldrb	r3, [r3, #0]
}
 8000f5e:	0018      	movs	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	b003      	add	sp, #12
 8000f64:	bd90      	pop	{r4, r7, pc}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	50000400 	.word	0x50000400
 8000f6c:	08004e00 	.word	0x08004e00
 8000f70:	2000009c 	.word	0x2000009c

08000f74 <bg96_ps_on>:
static uint8_t bg96_ps_on ( void )
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
	bg96_status_print () ;
 8000f78:	f7ff ffd2 	bl	8000f20 <bg96_status_print>
	HAL_GPIO_WritePin ( BG96_PS_GPIO_Port , BG96_PS_Pin , GPIO_PIN_SET ) ;
 8000f7c:	2380      	movs	r3, #128	; 0x80
 8000f7e:	021b      	lsls	r3, r3, #8
 8000f80:	4816      	ldr	r0, [pc, #88]	; (8000fdc <bg96_ps_on+0x68>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	0019      	movs	r1, r3
 8000f86:	f001 f8ba 	bl	80020fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( BG96_RESET_N_GPIO_Port , BG96_RESET_N_Pin , GPIO_PIN_SET ) ;
 8000f8a:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <bg96_ps_on+0x68>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2102      	movs	r1, #2
 8000f90:	0018      	movs	r0, r3
 8000f92:	f001 f8b4 	bl	80020fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( BG96_PWRKEY_GPIO_Port , BG96_PWRKEY_Pin , GPIO_PIN_SET ) ;
 8000f96:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <bg96_ps_on+0x68>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f001 f8ae 	bl	80020fe <HAL_GPIO_WritePin>
	HAL_Delay ( 35 ) ;
 8000fa2:	2023      	movs	r0, #35	; 0x23
 8000fa4:	f000 fe0e 	bl	8001bc4 <HAL_Delay>
	HAL_GPIO_WritePin ( BG96_PWRKEY_GPIO_Port , BG96_PWRKEY_Pin , GPIO_PIN_RESET ) ;
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <bg96_ps_on+0x68>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	2101      	movs	r1, #1
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f001 f8a5 	bl	80020fe <HAL_GPIO_WritePin>
	HAL_Delay ( 550 ) ;
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <bg96_ps_on+0x6c>)
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f000 fe04 	bl	8001bc4 <HAL_Delay>
	HAL_GPIO_WritePin ( BG96_PWRKEY_GPIO_Port , BG96_PWRKEY_Pin , GPIO_PIN_SET ) ;
 8000fbc:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <bg96_ps_on+0x68>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	f001 f89b 	bl	80020fe <HAL_GPIO_WritePin>
	HAL_Delay ( 4500 ) ;
 8000fc8:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <bg96_ps_on+0x70>)
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f000 fdfa 	bl	8001bc4 <HAL_Delay>
	return bg96_status_print () ;
 8000fd0:	f7ff ffa6 	bl	8000f20 <bg96_status_print>
 8000fd4:	0003      	movs	r3, r0

}
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	50000400 	.word	0x50000400
 8000fe0:	00000226 	.word	0x00000226
 8000fe4:	00001194 	.word	0x00001194

08000fe8 <HAL_GPIO_EXTI_Callback>:
	bg96_uart1_tx ( uart_tx_buff , strlen ( (const char *)uart_tx_buff ) ) ;
}

/* EXTI_Callback functions */
void HAL_GPIO_EXTI_Callback ( uint16_t GPIO_Pin )
{
 8000fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fea:	b087      	sub	sp, #28
 8000fec:	af04      	add	r7, sp, #16
 8000fee:	0002      	movs	r2, r0
 8000ff0:	1dbb      	adds	r3, r7, #6
 8000ff2:	801a      	strh	r2, [r3, #0]
	sprintf ( (char*)uart_tx_buff , "INT on GPIO_Pin %d detected!\n" , GPIO_Pin ) ;
 8000ff4:	1dbb      	adds	r3, r7, #6
 8000ff6:	881a      	ldrh	r2, [r3, #0]
 8000ff8:	4948      	ldr	r1, [pc, #288]	; (800111c <HAL_GPIO_EXTI_Callback+0x134>)
 8000ffa:	4b49      	ldr	r3, [pc, #292]	; (8001120 <HAL_GPIO_EXTI_Callback+0x138>)
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f003 fa65 	bl	80044cc <siprintf>
	dbg_tx ( uart_tx_buff, strlen ( (char const*)uart_tx_buff) ) ;
 8001002:	4b47      	ldr	r3, [pc, #284]	; (8001120 <HAL_GPIO_EXTI_Callback+0x138>)
 8001004:	0018      	movs	r0, r3
 8001006:	f7ff f87f 	bl	8000108 <strlen>
 800100a:	0003      	movs	r3, r0
 800100c:	b29a      	uxth	r2, r3
 800100e:	4b44      	ldr	r3, [pc, #272]	; (8001120 <HAL_GPIO_EXTI_Callback+0x138>)
 8001010:	0011      	movs	r1, r2
 8001012:	0018      	movs	r0, r3
 8001014:	f7ff ff52 	bl	8000ebc <dbg_tx>

	iis2dlpc_all_sources_get ( &iis2dlpc_ctx , &all_source ) ;
 8001018:	4a42      	ldr	r2, [pc, #264]	; (8001124 <HAL_GPIO_EXTI_Callback+0x13c>)
 800101a:	4b43      	ldr	r3, [pc, #268]	; (8001128 <HAL_GPIO_EXTI_Callback+0x140>)
 800101c:	0011      	movs	r1, r2
 800101e:	0018      	movs	r0, r3
 8001020:	f000 fb3d 	bl	800169e <iis2dlpc_all_sources_get>

	sprintf ( (char*)uart_tx_buff , "Wake up SRC[FF_IA,SS_IA,WU_IA,X_WU,Y_WU,Z_WU]: %d%d%d%d%d%d\n" , all_source.wake_up_src.ff_ia , all_source.wake_up_src.sleep_state_ia , all_source.wake_up_src.wu_ia , all_source.wake_up_src.x_wu , all_source.wake_up_src.y_wu , all_source.wake_up_src.z_wu ) ;
 8001024:	4b3f      	ldr	r3, [pc, #252]	; (8001124 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001026:	785b      	ldrb	r3, [r3, #1]
 8001028:	069b      	lsls	r3, r3, #26
 800102a:	0fdb      	lsrs	r3, r3, #31
 800102c:	b2db      	uxtb	r3, r3
 800102e:	001e      	movs	r6, r3
 8001030:	4b3c      	ldr	r3, [pc, #240]	; (8001124 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001032:	785b      	ldrb	r3, [r3, #1]
 8001034:	06db      	lsls	r3, r3, #27
 8001036:	0fdb      	lsrs	r3, r3, #31
 8001038:	b2db      	uxtb	r3, r3
 800103a:	469c      	mov	ip, r3
 800103c:	4b39      	ldr	r3, [pc, #228]	; (8001124 <HAL_GPIO_EXTI_Callback+0x13c>)
 800103e:	785b      	ldrb	r3, [r3, #1]
 8001040:	071b      	lsls	r3, r3, #28
 8001042:	0fdb      	lsrs	r3, r3, #31
 8001044:	b2db      	uxtb	r3, r3
 8001046:	001a      	movs	r2, r3
 8001048:	4b36      	ldr	r3, [pc, #216]	; (8001124 <HAL_GPIO_EXTI_Callback+0x13c>)
 800104a:	785b      	ldrb	r3, [r3, #1]
 800104c:	075b      	lsls	r3, r3, #29
 800104e:	0fdb      	lsrs	r3, r3, #31
 8001050:	b2db      	uxtb	r3, r3
 8001052:	001c      	movs	r4, r3
 8001054:	4b33      	ldr	r3, [pc, #204]	; (8001124 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001056:	785b      	ldrb	r3, [r3, #1]
 8001058:	079b      	lsls	r3, r3, #30
 800105a:	0fdb      	lsrs	r3, r3, #31
 800105c:	b2db      	uxtb	r3, r3
 800105e:	001d      	movs	r5, r3
 8001060:	4b30      	ldr	r3, [pc, #192]	; (8001124 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001062:	785b      	ldrb	r3, [r3, #1]
 8001064:	07db      	lsls	r3, r3, #31
 8001066:	0fdb      	lsrs	r3, r3, #31
 8001068:	b2db      	uxtb	r3, r3
 800106a:	4930      	ldr	r1, [pc, #192]	; (800112c <HAL_GPIO_EXTI_Callback+0x144>)
 800106c:	482c      	ldr	r0, [pc, #176]	; (8001120 <HAL_GPIO_EXTI_Callback+0x138>)
 800106e:	9303      	str	r3, [sp, #12]
 8001070:	9502      	str	r5, [sp, #8]
 8001072:	9401      	str	r4, [sp, #4]
 8001074:	9200      	str	r2, [sp, #0]
 8001076:	4663      	mov	r3, ip
 8001078:	0032      	movs	r2, r6
 800107a:	f003 fa27 	bl	80044cc <siprintf>
	dbg_tx ( uart_tx_buff, strlen ( (char const*)uart_tx_buff) ) ;
 800107e:	4b28      	ldr	r3, [pc, #160]	; (8001120 <HAL_GPIO_EXTI_Callback+0x138>)
 8001080:	0018      	movs	r0, r3
 8001082:	f7ff f841 	bl	8000108 <strlen>
 8001086:	0003      	movs	r3, r0
 8001088:	b29a      	uxth	r2, r3
 800108a:	4b25      	ldr	r3, [pc, #148]	; (8001120 <HAL_GPIO_EXTI_Callback+0x138>)
 800108c:	0011      	movs	r1, r2
 800108e:	0018      	movs	r0, r3
 8001090:	f7ff ff14 	bl	8000ebc <dbg_tx>

	sprintf ( (char*)uart_tx_buff , "6D[XL,HX,YL,YH,ZL,ZH]: %d%d%d%d%d%d\n" , all_source.sixd_src.xl , all_source.sixd_src.xh , all_source.sixd_src.yl , all_source.sixd_src.yh , all_source.sixd_src.zl , all_source.sixd_src.zh ) ;
 8001094:	4b23      	ldr	r3, [pc, #140]	; (8001124 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001096:	78db      	ldrb	r3, [r3, #3]
 8001098:	07db      	lsls	r3, r3, #31
 800109a:	0fdb      	lsrs	r3, r3, #31
 800109c:	b2db      	uxtb	r3, r3
 800109e:	001e      	movs	r6, r3
 80010a0:	4b20      	ldr	r3, [pc, #128]	; (8001124 <HAL_GPIO_EXTI_Callback+0x13c>)
 80010a2:	78db      	ldrb	r3, [r3, #3]
 80010a4:	079b      	lsls	r3, r3, #30
 80010a6:	0fdb      	lsrs	r3, r3, #31
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	469c      	mov	ip, r3
 80010ac:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <HAL_GPIO_EXTI_Callback+0x13c>)
 80010ae:	78db      	ldrb	r3, [r3, #3]
 80010b0:	075b      	lsls	r3, r3, #29
 80010b2:	0fdb      	lsrs	r3, r3, #31
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	001a      	movs	r2, r3
 80010b8:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <HAL_GPIO_EXTI_Callback+0x13c>)
 80010ba:	78db      	ldrb	r3, [r3, #3]
 80010bc:	071b      	lsls	r3, r3, #28
 80010be:	0fdb      	lsrs	r3, r3, #31
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	001c      	movs	r4, r3
 80010c4:	4b17      	ldr	r3, [pc, #92]	; (8001124 <HAL_GPIO_EXTI_Callback+0x13c>)
 80010c6:	78db      	ldrb	r3, [r3, #3]
 80010c8:	06db      	lsls	r3, r3, #27
 80010ca:	0fdb      	lsrs	r3, r3, #31
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	001d      	movs	r5, r3
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <HAL_GPIO_EXTI_Callback+0x13c>)
 80010d2:	78db      	ldrb	r3, [r3, #3]
 80010d4:	069b      	lsls	r3, r3, #26
 80010d6:	0fdb      	lsrs	r3, r3, #31
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	4915      	ldr	r1, [pc, #84]	; (8001130 <HAL_GPIO_EXTI_Callback+0x148>)
 80010dc:	4810      	ldr	r0, [pc, #64]	; (8001120 <HAL_GPIO_EXTI_Callback+0x138>)
 80010de:	9303      	str	r3, [sp, #12]
 80010e0:	9502      	str	r5, [sp, #8]
 80010e2:	9401      	str	r4, [sp, #4]
 80010e4:	9200      	str	r2, [sp, #0]
 80010e6:	4663      	mov	r3, ip
 80010e8:	0032      	movs	r2, r6
 80010ea:	f003 f9ef 	bl	80044cc <siprintf>
	dbg_tx ( uart_tx_buff, strlen ( (char const*)uart_tx_buff) ) ;
 80010ee:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <HAL_GPIO_EXTI_Callback+0x138>)
 80010f0:	0018      	movs	r0, r3
 80010f2:	f7ff f809 	bl	8000108 <strlen>
 80010f6:	0003      	movs	r3, r0
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <HAL_GPIO_EXTI_Callback+0x138>)
 80010fc:	0011      	movs	r1, r2
 80010fe:	0018      	movs	r0, r3
 8001100:	f7ff fedc 	bl	8000ebc <dbg_tx>

	iis2dlpc_temp_print();
 8001104:	f7ff fd48 	bl	8000b98 <iis2dlpc_temp_print>
	iis2dlpc_int1_print();
 8001108:	f7ff fd1a 	bl	8000b40 <iis2dlpc_int1_print>
	bg96_status_print () ;
 800110c:	f7ff ff08 	bl	8000f20 <bg96_status_print>
	uart_rx_buff_print () ;
 8001110:	f7ff feea 	bl	8000ee8 <uart_rx_buff_print>
}
 8001114:	46c0      	nop			; (mov r8, r8)
 8001116:	46bd      	mov	sp, r7
 8001118:	b003      	add	sp, #12
 800111a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800111c:	08004e20 	.word	0x08004e20
 8001120:	2000009c 	.word	0x2000009c
 8001124:	200001dc 	.word	0x200001dc
 8001128:	200001cc 	.word	0x200001cc
 800112c:	08004e40 	.word	0x08004e40
 8001130:	08004e80 	.word	0x08004e80

08001134 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001138:	b672      	cpsid	i
}
 800113a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800113c:	e7fe      	b.n	800113c <Error_Handler+0x8>
	...

08001140 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001144:	4b07      	ldr	r3, [pc, #28]	; (8001164 <HAL_MspInit+0x24>)
 8001146:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_MspInit+0x24>)
 800114a:	2101      	movs	r1, #1
 800114c:	430a      	orrs	r2, r1
 800114e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001150:	4b04      	ldr	r3, [pc, #16]	; (8001164 <HAL_MspInit+0x24>)
 8001152:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001154:	4b03      	ldr	r3, [pc, #12]	; (8001164 <HAL_MspInit+0x24>)
 8001156:	2180      	movs	r1, #128	; 0x80
 8001158:	0549      	lsls	r1, r1, #21
 800115a:	430a      	orrs	r2, r1
 800115c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40021000 	.word	0x40021000

08001168 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b089      	sub	sp, #36	; 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	240c      	movs	r4, #12
 8001172:	193b      	adds	r3, r7, r4
 8001174:	0018      	movs	r0, r3
 8001176:	2314      	movs	r3, #20
 8001178:	001a      	movs	r2, r3
 800117a:	2100      	movs	r1, #0
 800117c:	f003 f99e 	bl	80044bc <memset>
  if(hspi->Instance==SPI1)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a18      	ldr	r2, [pc, #96]	; (80011e8 <HAL_SPI_MspInit+0x80>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d129      	bne.n	80011de <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800118a:	4b18      	ldr	r3, [pc, #96]	; (80011ec <HAL_SPI_MspInit+0x84>)
 800118c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800118e:	4b17      	ldr	r3, [pc, #92]	; (80011ec <HAL_SPI_MspInit+0x84>)
 8001190:	2180      	movs	r1, #128	; 0x80
 8001192:	0149      	lsls	r1, r1, #5
 8001194:	430a      	orrs	r2, r1
 8001196:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001198:	4b14      	ldr	r3, [pc, #80]	; (80011ec <HAL_SPI_MspInit+0x84>)
 800119a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800119c:	4b13      	ldr	r3, [pc, #76]	; (80011ec <HAL_SPI_MspInit+0x84>)
 800119e:	2101      	movs	r1, #1
 80011a0:	430a      	orrs	r2, r1
 80011a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <HAL_SPI_MspInit+0x84>)
 80011a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a8:	2201      	movs	r2, #1
 80011aa:	4013      	ands	r3, r2
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011b0:	0021      	movs	r1, r4
 80011b2:	187b      	adds	r3, r7, r1
 80011b4:	22e0      	movs	r2, #224	; 0xe0
 80011b6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	187b      	adds	r3, r7, r1
 80011ba:	2202      	movs	r2, #2
 80011bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	187b      	adds	r3, r7, r1
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c4:	187b      	adds	r3, r7, r1
 80011c6:	2203      	movs	r2, #3
 80011c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80011ca:	187b      	adds	r3, r7, r1
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d0:	187a      	adds	r2, r7, r1
 80011d2:	23a0      	movs	r3, #160	; 0xa0
 80011d4:	05db      	lsls	r3, r3, #23
 80011d6:	0011      	movs	r1, r2
 80011d8:	0018      	movs	r0, r3
 80011da:	f000 fdf5 	bl	8001dc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	46bd      	mov	sp, r7
 80011e2:	b009      	add	sp, #36	; 0x24
 80011e4:	bd90      	pop	{r4, r7, pc}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	40013000 	.word	0x40013000
 80011ec:	40021000 	.word	0x40021000

080011f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f0:	b590      	push	{r4, r7, lr}
 80011f2:	b08b      	sub	sp, #44	; 0x2c
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	2414      	movs	r4, #20
 80011fa:	193b      	adds	r3, r7, r4
 80011fc:	0018      	movs	r0, r3
 80011fe:	2314      	movs	r3, #20
 8001200:	001a      	movs	r2, r3
 8001202:	2100      	movs	r1, #0
 8001204:	f003 f95a 	bl	80044bc <memset>
  if(huart->Instance==USART4)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a40      	ldr	r2, [pc, #256]	; (8001310 <HAL_UART_MspInit+0x120>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d14b      	bne.n	80012aa <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART4_MspInit 0 */

  /* USER CODE END USART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART4_CLK_ENABLE();
 8001212:	4b40      	ldr	r3, [pc, #256]	; (8001314 <HAL_UART_MspInit+0x124>)
 8001214:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001216:	4b3f      	ldr	r3, [pc, #252]	; (8001314 <HAL_UART_MspInit+0x124>)
 8001218:	2180      	movs	r1, #128	; 0x80
 800121a:	0309      	lsls	r1, r1, #12
 800121c:	430a      	orrs	r2, r1
 800121e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001220:	4b3c      	ldr	r3, [pc, #240]	; (8001314 <HAL_UART_MspInit+0x124>)
 8001222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001224:	4b3b      	ldr	r3, [pc, #236]	; (8001314 <HAL_UART_MspInit+0x124>)
 8001226:	2101      	movs	r1, #1
 8001228:	430a      	orrs	r2, r1
 800122a:	62da      	str	r2, [r3, #44]	; 0x2c
 800122c:	4b39      	ldr	r3, [pc, #228]	; (8001314 <HAL_UART_MspInit+0x124>)
 800122e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001230:	2201      	movs	r2, #1
 8001232:	4013      	ands	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001238:	4b36      	ldr	r3, [pc, #216]	; (8001314 <HAL_UART_MspInit+0x124>)
 800123a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800123c:	4b35      	ldr	r3, [pc, #212]	; (8001314 <HAL_UART_MspInit+0x124>)
 800123e:	2102      	movs	r1, #2
 8001240:	430a      	orrs	r2, r1
 8001242:	62da      	str	r2, [r3, #44]	; 0x2c
 8001244:	4b33      	ldr	r3, [pc, #204]	; (8001314 <HAL_UART_MspInit+0x124>)
 8001246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001248:	2202      	movs	r2, #2
 800124a:	4013      	ands	r3, r2
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> USART4_TX
    PA1     ------> USART4_RX
    PA15     ------> USART4_RTS
    PB7     ------> USART4_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15;
 8001250:	193b      	adds	r3, r7, r4
 8001252:	4a31      	ldr	r2, [pc, #196]	; (8001318 <HAL_UART_MspInit+0x128>)
 8001254:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	193b      	adds	r3, r7, r4
 8001258:	2202      	movs	r2, #2
 800125a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	193b      	adds	r3, r7, r4
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001262:	193b      	adds	r3, r7, r4
 8001264:	2203      	movs	r2, #3
 8001266:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8001268:	193b      	adds	r3, r7, r4
 800126a:	2206      	movs	r2, #6
 800126c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126e:	193a      	adds	r2, r7, r4
 8001270:	23a0      	movs	r3, #160	; 0xa0
 8001272:	05db      	lsls	r3, r3, #23
 8001274:	0011      	movs	r1, r2
 8001276:	0018      	movs	r0, r3
 8001278:	f000 fda6 	bl	8001dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800127c:	0021      	movs	r1, r4
 800127e:	187b      	adds	r3, r7, r1
 8001280:	2280      	movs	r2, #128	; 0x80
 8001282:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	187b      	adds	r3, r7, r1
 8001286:	2202      	movs	r2, #2
 8001288:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	187b      	adds	r3, r7, r1
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001290:	187b      	adds	r3, r7, r1
 8001292:	2203      	movs	r2, #3
 8001294:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8001296:	187b      	adds	r3, r7, r1
 8001298:	2206      	movs	r2, #6
 800129a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129c:	187b      	adds	r3, r7, r1
 800129e:	4a1f      	ldr	r2, [pc, #124]	; (800131c <HAL_UART_MspInit+0x12c>)
 80012a0:	0019      	movs	r1, r3
 80012a2:	0010      	movs	r0, r2
 80012a4:	f000 fd90 	bl	8001dc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 80012a8:	e02d      	b.n	8001306 <HAL_UART_MspInit+0x116>
  else if(huart->Instance==USART5)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a1c      	ldr	r2, [pc, #112]	; (8001320 <HAL_UART_MspInit+0x130>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d128      	bne.n	8001306 <HAL_UART_MspInit+0x116>
    __HAL_RCC_USART5_CLK_ENABLE();
 80012b4:	4b17      	ldr	r3, [pc, #92]	; (8001314 <HAL_UART_MspInit+0x124>)
 80012b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012b8:	4b16      	ldr	r3, [pc, #88]	; (8001314 <HAL_UART_MspInit+0x124>)
 80012ba:	2180      	movs	r1, #128	; 0x80
 80012bc:	0349      	lsls	r1, r1, #13
 80012be:	430a      	orrs	r2, r1
 80012c0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c2:	4b14      	ldr	r3, [pc, #80]	; (8001314 <HAL_UART_MspInit+0x124>)
 80012c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012c6:	4b13      	ldr	r3, [pc, #76]	; (8001314 <HAL_UART_MspInit+0x124>)
 80012c8:	2102      	movs	r1, #2
 80012ca:	430a      	orrs	r2, r1
 80012cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <HAL_UART_MspInit+0x124>)
 80012d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d2:	2202      	movs	r2, #2
 80012d4:	4013      	ands	r3, r2
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80012da:	2114      	movs	r1, #20
 80012dc:	187b      	adds	r3, r7, r1
 80012de:	2218      	movs	r2, #24
 80012e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	187b      	adds	r3, r7, r1
 80012e4:	2202      	movs	r2, #2
 80012e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	187b      	adds	r3, r7, r1
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ee:	187b      	adds	r3, r7, r1
 80012f0:	2203      	movs	r2, #3
 80012f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 80012f4:	187b      	adds	r3, r7, r1
 80012f6:	2206      	movs	r2, #6
 80012f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fa:	187b      	adds	r3, r7, r1
 80012fc:	4a07      	ldr	r2, [pc, #28]	; (800131c <HAL_UART_MspInit+0x12c>)
 80012fe:	0019      	movs	r1, r3
 8001300:	0010      	movs	r0, r2
 8001302:	f000 fd61 	bl	8001dc8 <HAL_GPIO_Init>
}
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	46bd      	mov	sp, r7
 800130a:	b00b      	add	sp, #44	; 0x2c
 800130c:	bd90      	pop	{r4, r7, pc}
 800130e:	46c0      	nop			; (mov r8, r8)
 8001310:	40004c00 	.word	0x40004c00
 8001314:	40021000 	.word	0x40021000
 8001318:	00008003 	.word	0x00008003
 800131c:	50000400 	.word	0x50000400
 8001320:	40005000 	.word	0x40005000

08001324 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001328:	e7fe      	b.n	8001328 <NMI_Handler+0x4>

0800132a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800132e:	e7fe      	b.n	800132e <HardFault_Handler+0x4>

08001330 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001334:	46c0      	nop			; (mov r8, r8)
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001348:	f000 fc20 	bl	8001b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800134c:	46c0      	nop			; (mov r8, r8)
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001356:	2380      	movs	r3, #128	; 0x80
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	0018      	movs	r0, r3
 800135c:	f000 feec 	bl	8002138 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001360:	46c0      	nop			; (mov r8, r8)
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001370:	4a14      	ldr	r2, [pc, #80]	; (80013c4 <_sbrk+0x5c>)
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <_sbrk+0x60>)
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800137c:	4b13      	ldr	r3, [pc, #76]	; (80013cc <_sbrk+0x64>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d102      	bne.n	800138a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <_sbrk+0x64>)
 8001386:	4a12      	ldr	r2, [pc, #72]	; (80013d0 <_sbrk+0x68>)
 8001388:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <_sbrk+0x64>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	18d3      	adds	r3, r2, r3
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	429a      	cmp	r2, r3
 8001396:	d207      	bcs.n	80013a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001398:	f003 f866 	bl	8004468 <__errno>
 800139c:	0003      	movs	r3, r0
 800139e:	220c      	movs	r2, #12
 80013a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013a2:	2301      	movs	r3, #1
 80013a4:	425b      	negs	r3, r3
 80013a6:	e009      	b.n	80013bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <_sbrk+0x64>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ae:	4b07      	ldr	r3, [pc, #28]	; (80013cc <_sbrk+0x64>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	18d2      	adds	r2, r2, r3
 80013b6:	4b05      	ldr	r3, [pc, #20]	; (80013cc <_sbrk+0x64>)
 80013b8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80013ba:	68fb      	ldr	r3, [r7, #12]
}
 80013bc:	0018      	movs	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	b006      	add	sp, #24
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20005000 	.word	0x20005000
 80013c8:	00000400 	.word	0x00000400
 80013cc:	200001e4 	.word	0x200001e4
 80013d0:	20000368 	.word	0x20000368

080013d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013d8:	46c0      	nop			; (mov r8, r8)
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80013e0:	480d      	ldr	r0, [pc, #52]	; (8001418 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80013e2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e4:	480d      	ldr	r0, [pc, #52]	; (800141c <LoopForever+0x6>)
  ldr r1, =_edata
 80013e6:	490e      	ldr	r1, [pc, #56]	; (8001420 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013e8:	4a0e      	ldr	r2, [pc, #56]	; (8001424 <LoopForever+0xe>)
  movs r3, #0
 80013ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013ec:	e002      	b.n	80013f4 <LoopCopyDataInit>

080013ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f2:	3304      	adds	r3, #4

080013f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f8:	d3f9      	bcc.n	80013ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fa:	4a0b      	ldr	r2, [pc, #44]	; (8001428 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013fc:	4c0b      	ldr	r4, [pc, #44]	; (800142c <LoopForever+0x16>)
  movs r3, #0
 80013fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001400:	e001      	b.n	8001406 <LoopFillZerobss>

08001402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001404:	3204      	adds	r2, #4

08001406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001408:	d3fb      	bcc.n	8001402 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800140a:	f7ff ffe3 	bl	80013d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800140e:	f003 f831 	bl	8004474 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001412:	f7ff f93f 	bl	8000694 <main>

08001416 <LoopForever>:

LoopForever:
    b LoopForever
 8001416:	e7fe      	b.n	8001416 <LoopForever>
   ldr   r0, =_estack
 8001418:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800141c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001420:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001424:	08004f58 	.word	0x08004f58
  ldr r2, =_sbss
 8001428:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800142c:	20000368 	.word	0x20000368

08001430 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001430:	e7fe      	b.n	8001430 <ADC1_COMP_IRQHandler>

08001432 <iis2dlpc_read_reg>:
  *
  */
int32_t iis2dlpc_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001432:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001434:	b087      	sub	sp, #28
 8001436:	af00      	add	r7, sp, #0
 8001438:	60f8      	str	r0, [r7, #12]
 800143a:	0008      	movs	r0, r1
 800143c:	607a      	str	r2, [r7, #4]
 800143e:	0019      	movs	r1, r3
 8001440:	260b      	movs	r6, #11
 8001442:	19bb      	adds	r3, r7, r6
 8001444:	1c02      	adds	r2, r0, #0
 8001446:	701a      	strb	r2, [r3, #0]
 8001448:	2508      	movs	r5, #8
 800144a:	197b      	adds	r3, r7, r5
 800144c:	1c0a      	adds	r2, r1, #0
 800144e:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	685c      	ldr	r4, [r3, #4]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	6898      	ldr	r0, [r3, #8]
 8001458:	197b      	adds	r3, r7, r5
 800145a:	881d      	ldrh	r5, [r3, #0]
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	19bb      	adds	r3, r7, r6
 8001460:	7819      	ldrb	r1, [r3, #0]
 8001462:	002b      	movs	r3, r5
 8001464:	47a0      	blx	r4
 8001466:	0003      	movs	r3, r0
 8001468:	617b      	str	r3, [r7, #20]

  return ret;
 800146a:	697b      	ldr	r3, [r7, #20]
}
 800146c:	0018      	movs	r0, r3
 800146e:	46bd      	mov	sp, r7
 8001470:	b007      	add	sp, #28
 8001472:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001474 <iis2dlpc_write_reg>:
  *
  */
int32_t iis2dlpc_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8001474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001476:	b087      	sub	sp, #28
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	0008      	movs	r0, r1
 800147e:	607a      	str	r2, [r7, #4]
 8001480:	0019      	movs	r1, r3
 8001482:	260b      	movs	r6, #11
 8001484:	19bb      	adds	r3, r7, r6
 8001486:	1c02      	adds	r2, r0, #0
 8001488:	701a      	strb	r2, [r3, #0]
 800148a:	2508      	movs	r5, #8
 800148c:	197b      	adds	r3, r7, r5
 800148e:	1c0a      	adds	r2, r1, #0
 8001490:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681c      	ldr	r4, [r3, #0]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6898      	ldr	r0, [r3, #8]
 800149a:	197b      	adds	r3, r7, r5
 800149c:	881d      	ldrh	r5, [r3, #0]
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	19bb      	adds	r3, r7, r6
 80014a2:	7819      	ldrb	r1, [r3, #0]
 80014a4:	002b      	movs	r3, r5
 80014a6:	47a0      	blx	r4
 80014a8:	0003      	movs	r3, r0
 80014aa:	617b      	str	r3, [r7, #20]

  return ret;
 80014ac:	697b      	ldr	r3, [r7, #20]
}
 80014ae:	0018      	movs	r0, r3
 80014b0:	46bd      	mov	sp, r7
 80014b2:	b007      	add	sp, #28
 80014b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014b6 <iis2dlpc_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_power_mode_set(stmdev_ctx_t *ctx,
                                iis2dlpc_mode_t val)
{
 80014b6:	b590      	push	{r4, r7, lr}
 80014b8:	b087      	sub	sp, #28
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
 80014be:	000a      	movs	r2, r1
 80014c0:	1cfb      	adds	r3, r7, #3
 80014c2:	701a      	strb	r2, [r3, #0]
  iis2dlpc_ctrl1_t ctrl1;
  iis2dlpc_ctrl6_t ctrl6;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 80014c4:	2410      	movs	r4, #16
 80014c6:	193a      	adds	r2, r7, r4
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	2301      	movs	r3, #1
 80014cc:	2120      	movs	r1, #32
 80014ce:	f7ff ffb0 	bl	8001432 <iis2dlpc_read_reg>
 80014d2:	0003      	movs	r3, r0
 80014d4:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d129      	bne.n	8001530 <iis2dlpc_power_mode_set+0x7a>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 80014dc:	1cfb      	adds	r3, r7, #3
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	089b      	lsrs	r3, r3, #2
 80014e2:	1c1a      	adds	r2, r3, #0
 80014e4:	2303      	movs	r3, #3
 80014e6:	4013      	ands	r3, r2
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	193b      	adds	r3, r7, r4
 80014ec:	2103      	movs	r1, #3
 80014ee:	400a      	ands	r2, r1
 80014f0:	0090      	lsls	r0, r2, #2
 80014f2:	781a      	ldrb	r2, [r3, #0]
 80014f4:	210c      	movs	r1, #12
 80014f6:	438a      	bics	r2, r1
 80014f8:	1c11      	adds	r1, r2, #0
 80014fa:	1c02      	adds	r2, r0, #0
 80014fc:	430a      	orrs	r2, r1
 80014fe:	701a      	strb	r2, [r3, #0]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8001500:	1cfb      	adds	r3, r7, #3
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2203      	movs	r2, #3
 8001506:	4013      	ands	r3, r2
 8001508:	b2da      	uxtb	r2, r3
 800150a:	193b      	adds	r3, r7, r4
 800150c:	2103      	movs	r1, #3
 800150e:	400a      	ands	r2, r1
 8001510:	0010      	movs	r0, r2
 8001512:	781a      	ldrb	r2, [r3, #0]
 8001514:	2103      	movs	r1, #3
 8001516:	438a      	bics	r2, r1
 8001518:	1c11      	adds	r1, r2, #0
 800151a:	1c02      	adds	r2, r0, #0
 800151c:	430a      	orrs	r2, r1
 800151e:	701a      	strb	r2, [r3, #0]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 8001520:	193a      	adds	r2, r7, r4
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	2301      	movs	r3, #1
 8001526:	2120      	movs	r1, #32
 8001528:	f7ff ffa4 	bl	8001474 <iis2dlpc_write_reg>
 800152c:	0003      	movs	r3, r0
 800152e:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d108      	bne.n	8001548 <iis2dlpc_power_mode_set+0x92>
  {
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &ctrl6, 1);
 8001536:	230c      	movs	r3, #12
 8001538:	18fa      	adds	r2, r7, r3
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	2301      	movs	r3, #1
 800153e:	2125      	movs	r1, #37	; 0x25
 8001540:	f7ff ff77 	bl	8001432 <iis2dlpc_read_reg>
 8001544:	0003      	movs	r3, r0
 8001546:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d11a      	bne.n	8001584 <iis2dlpc_power_mode_set+0xce>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 800154e:	1cfb      	adds	r3, r7, #3
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	091b      	lsrs	r3, r3, #4
 8001554:	1c1a      	adds	r2, r3, #0
 8001556:	2301      	movs	r3, #1
 8001558:	4013      	ands	r3, r2
 800155a:	b2da      	uxtb	r2, r3
 800155c:	240c      	movs	r4, #12
 800155e:	193b      	adds	r3, r7, r4
 8001560:	2101      	movs	r1, #1
 8001562:	400a      	ands	r2, r1
 8001564:	0090      	lsls	r0, r2, #2
 8001566:	781a      	ldrb	r2, [r3, #0]
 8001568:	2104      	movs	r1, #4
 800156a:	438a      	bics	r2, r1
 800156c:	1c11      	adds	r1, r2, #0
 800156e:	1c02      	adds	r2, r0, #0
 8001570:	430a      	orrs	r2, r1
 8001572:	701a      	strb	r2, [r3, #0]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &ctrl6, 1);
 8001574:	193a      	adds	r2, r7, r4
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	2301      	movs	r3, #1
 800157a:	2125      	movs	r1, #37	; 0x25
 800157c:	f7ff ff7a 	bl	8001474 <iis2dlpc_write_reg>
 8001580:	0003      	movs	r3, r0
 8001582:	617b      	str	r3, [r7, #20]
  else
  {
    ret = ret;
  }

  return ret;
 8001584:	697b      	ldr	r3, [r7, #20]
}
 8001586:	0018      	movs	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	b007      	add	sp, #28
 800158c:	bd90      	pop	{r4, r7, pc}

0800158e <iis2dlpc_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_data_rate_set(stmdev_ctx_t *ctx, iis2dlpc_odr_t val)
{
 800158e:	b590      	push	{r4, r7, lr}
 8001590:	b087      	sub	sp, #28
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
 8001596:	000a      	movs	r2, r1
 8001598:	1cfb      	adds	r3, r7, #3
 800159a:	701a      	strb	r2, [r3, #0]
  iis2dlpc_ctrl1_t ctrl1;
  iis2dlpc_ctrl3_t ctrl3;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 800159c:	2410      	movs	r4, #16
 800159e:	193a      	adds	r2, r7, r4
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	2301      	movs	r3, #1
 80015a4:	2120      	movs	r1, #32
 80015a6:	f7ff ff44 	bl	8001432 <iis2dlpc_read_reg>
 80015aa:	0003      	movs	r3, r0
 80015ac:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d115      	bne.n	80015e0 <iis2dlpc_data_rate_set+0x52>
  {
    ctrl1.odr = (uint8_t) val;
 80015b4:	1cfb      	adds	r3, r7, #3
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	220f      	movs	r2, #15
 80015ba:	4013      	ands	r3, r2
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	193b      	adds	r3, r7, r4
 80015c0:	0110      	lsls	r0, r2, #4
 80015c2:	781a      	ldrb	r2, [r3, #0]
 80015c4:	210f      	movs	r1, #15
 80015c6:	400a      	ands	r2, r1
 80015c8:	1c11      	adds	r1, r2, #0
 80015ca:	1c02      	adds	r2, r0, #0
 80015cc:	430a      	orrs	r2, r1
 80015ce:	701a      	strb	r2, [r3, #0]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 80015d0:	193a      	adds	r2, r7, r4
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	2301      	movs	r3, #1
 80015d6:	2120      	movs	r1, #32
 80015d8:	f7ff ff4c 	bl	8001474 <iis2dlpc_write_reg>
 80015dc:	0003      	movs	r3, r0
 80015de:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d108      	bne.n	80015f8 <iis2dlpc_data_rate_set+0x6a>
  {
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL3, (uint8_t *) &ctrl3, 1);
 80015e6:	230c      	movs	r3, #12
 80015e8:	18fa      	adds	r2, r7, r3
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	2301      	movs	r3, #1
 80015ee:	2122      	movs	r1, #34	; 0x22
 80015f0:	f7ff ff1f 	bl	8001432 <iis2dlpc_read_reg>
 80015f4:	0003      	movs	r3, r0
 80015f6:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d11a      	bne.n	8001634 <iis2dlpc_data_rate_set+0xa6>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 80015fe:	1cfb      	adds	r3, r7, #3
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	091b      	lsrs	r3, r3, #4
 8001604:	1c1a      	adds	r2, r3, #0
 8001606:	2303      	movs	r3, #3
 8001608:	4013      	ands	r3, r2
 800160a:	b2da      	uxtb	r2, r3
 800160c:	240c      	movs	r4, #12
 800160e:	193b      	adds	r3, r7, r4
 8001610:	2103      	movs	r1, #3
 8001612:	400a      	ands	r2, r1
 8001614:	0010      	movs	r0, r2
 8001616:	781a      	ldrb	r2, [r3, #0]
 8001618:	2103      	movs	r1, #3
 800161a:	438a      	bics	r2, r1
 800161c:	1c11      	adds	r1, r2, #0
 800161e:	1c02      	adds	r2, r0, #0
 8001620:	430a      	orrs	r2, r1
 8001622:	701a      	strb	r2, [r3, #0]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL3, (uint8_t *) &ctrl3, 1);
 8001624:	193a      	adds	r2, r7, r4
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	2301      	movs	r3, #1
 800162a:	2122      	movs	r1, #34	; 0x22
 800162c:	f7ff ff22 	bl	8001474 <iis2dlpc_write_reg>
 8001630:	0003      	movs	r3, r0
 8001632:	617b      	str	r3, [r7, #20]
  else
  {
    ret = ret;
  }

  return ret;
 8001634:	697b      	ldr	r3, [r7, #20]
}
 8001636:	0018      	movs	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	b007      	add	sp, #28
 800163c:	bd90      	pop	{r4, r7, pc}

0800163e <iis2dlpc_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_full_scale_set(stmdev_ctx_t *ctx, iis2dlpc_fs_t val)
{
 800163e:	b590      	push	{r4, r7, lr}
 8001640:	b085      	sub	sp, #20
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
 8001646:	000a      	movs	r2, r1
 8001648:	1cfb      	adds	r3, r7, #3
 800164a:	701a      	strb	r2, [r3, #0]
  iis2dlpc_ctrl6_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &reg, 1);
 800164c:	2408      	movs	r4, #8
 800164e:	193a      	adds	r2, r7, r4
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	2301      	movs	r3, #1
 8001654:	2125      	movs	r1, #37	; 0x25
 8001656:	f7ff feec 	bl	8001432 <iis2dlpc_read_reg>
 800165a:	0003      	movs	r3, r0
 800165c:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d117      	bne.n	8001694 <iis2dlpc_full_scale_set+0x56>
  {
    reg.fs = (uint8_t) val;
 8001664:	1cfb      	adds	r3, r7, #3
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2203      	movs	r2, #3
 800166a:	4013      	ands	r3, r2
 800166c:	b2da      	uxtb	r2, r3
 800166e:	193b      	adds	r3, r7, r4
 8001670:	2103      	movs	r1, #3
 8001672:	400a      	ands	r2, r1
 8001674:	0110      	lsls	r0, r2, #4
 8001676:	781a      	ldrb	r2, [r3, #0]
 8001678:	2130      	movs	r1, #48	; 0x30
 800167a:	438a      	bics	r2, r1
 800167c:	1c11      	adds	r1, r2, #0
 800167e:	1c02      	adds	r2, r0, #0
 8001680:	430a      	orrs	r2, r1
 8001682:	701a      	strb	r2, [r3, #0]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &reg, 1);
 8001684:	193a      	adds	r2, r7, r4
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	2301      	movs	r3, #1
 800168a:	2125      	movs	r1, #37	; 0x25
 800168c:	f7ff fef2 	bl	8001474 <iis2dlpc_write_reg>
 8001690:	0003      	movs	r3, r0
 8001692:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001694:	68fb      	ldr	r3, [r7, #12]
}
 8001696:	0018      	movs	r0, r3
 8001698:	46bd      	mov	sp, r7
 800169a:	b005      	add	sp, #20
 800169c:	bd90      	pop	{r4, r7, pc}

0800169e <iis2dlpc_all_sources_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_all_sources_get(stmdev_ctx_t *ctx,
                                 iis2dlpc_all_sources_t *val)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b084      	sub	sp, #16
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
 80016a6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_STATUS_DUP, (uint8_t *) val, 5);
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	2305      	movs	r3, #5
 80016ae:	2137      	movs	r1, #55	; 0x37
 80016b0:	f7ff febf 	bl	8001432 <iis2dlpc_read_reg>
 80016b4:	0003      	movs	r3, r0
 80016b6:	60fb      	str	r3, [r7, #12]

  return ret;
 80016b8:	68fb      	ldr	r3, [r7, #12]
}
 80016ba:	0018      	movs	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	b004      	add	sp, #16
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <iis2dlpc_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80016c2:	b590      	push	{r4, r7, lr}
 80016c4:	b085      	sub	sp, #20
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
 80016ca:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_OUT_T_L, buff, 2);
 80016cc:	2408      	movs	r4, #8
 80016ce:	193a      	adds	r2, r7, r4
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	2302      	movs	r3, #2
 80016d4:	210d      	movs	r1, #13
 80016d6:	f7ff feac 	bl	8001432 <iis2dlpc_read_reg>
 80016da:	0003      	movs	r3, r0
 80016dc:	60fb      	str	r3, [r7, #12]
  *val = (int16_t)buff[1];
 80016de:	0021      	movs	r1, r4
 80016e0:	187b      	adds	r3, r7, r1
 80016e2:	785b      	ldrb	r3, [r3, #1]
 80016e4:	b21a      	sxth	r2, r3
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	2200      	movs	r2, #0
 80016ee:	5e9b      	ldrsh	r3, [r3, r2]
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	021b      	lsls	r3, r3, #8
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	187b      	adds	r3, r7, r1
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	18d3      	adds	r3, r2, r3
 80016fe:	b29b      	uxth	r3, r3
 8001700:	b21a      	sxth	r2, r3
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	801a      	strh	r2, [r3, #0]

  return ret;
 8001706:	68fb      	ldr	r3, [r7, #12]
}
 8001708:	0018      	movs	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	b005      	add	sp, #20
 800170e:	bd90      	pop	{r4, r7, pc}

08001710 <iis2dlpc_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_WHO_AM_I, buff, 1);
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	2301      	movs	r3, #1
 8001720:	210f      	movs	r1, #15
 8001722:	f7ff fe86 	bl	8001432 <iis2dlpc_read_reg>
 8001726:	0003      	movs	r3, r0
 8001728:	60fb      	str	r3, [r7, #12]

  return ret;
 800172a:	68fb      	ldr	r3, [r7, #12]
}
 800172c:	0018      	movs	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	b004      	add	sp, #16
 8001732:	bd80      	pop	{r7, pc}

08001734 <iis2dlpc_reset_set>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001734:	b590      	push	{r4, r7, lr}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	000a      	movs	r2, r1
 800173e:	1cfb      	adds	r3, r7, #3
 8001740:	701a      	strb	r2, [r3, #0]
  iis2dlpc_ctrl2_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 8001742:	2408      	movs	r4, #8
 8001744:	193a      	adds	r2, r7, r4
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	2301      	movs	r3, #1
 800174a:	2121      	movs	r1, #33	; 0x21
 800174c:	f7ff fe71 	bl	8001432 <iis2dlpc_read_reg>
 8001750:	0003      	movs	r3, r0
 8001752:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d117      	bne.n	800178a <iis2dlpc_reset_set+0x56>
  {
    reg.soft_reset = val;
 800175a:	1cfb      	adds	r3, r7, #3
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2201      	movs	r2, #1
 8001760:	4013      	ands	r3, r2
 8001762:	b2da      	uxtb	r2, r3
 8001764:	193b      	adds	r3, r7, r4
 8001766:	2101      	movs	r1, #1
 8001768:	400a      	ands	r2, r1
 800176a:	0190      	lsls	r0, r2, #6
 800176c:	781a      	ldrb	r2, [r3, #0]
 800176e:	2140      	movs	r1, #64	; 0x40
 8001770:	438a      	bics	r2, r1
 8001772:	1c11      	adds	r1, r2, #0
 8001774:	1c02      	adds	r2, r0, #0
 8001776:	430a      	orrs	r2, r1
 8001778:	701a      	strb	r2, [r3, #0]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 800177a:	193a      	adds	r2, r7, r4
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	2301      	movs	r3, #1
 8001780:	2121      	movs	r1, #33	; 0x21
 8001782:	f7ff fe77 	bl	8001474 <iis2dlpc_write_reg>
 8001786:	0003      	movs	r3, r0
 8001788:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800178a:	68fb      	ldr	r3, [r7, #12]
}
 800178c:	0018      	movs	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	b005      	add	sp, #20
 8001792:	bd90      	pop	{r4, r7, pc}

08001794 <iis2dlpc_reset_get>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8001794:	b590      	push	{r4, r7, lr}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  iis2dlpc_ctrl2_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 800179e:	2408      	movs	r4, #8
 80017a0:	193a      	adds	r2, r7, r4
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	2301      	movs	r3, #1
 80017a6:	2121      	movs	r1, #33	; 0x21
 80017a8:	f7ff fe43 	bl	8001432 <iis2dlpc_read_reg>
 80017ac:	0003      	movs	r3, r0
 80017ae:	60fb      	str	r3, [r7, #12]
  *val = reg.soft_reset;
 80017b0:	193b      	adds	r3, r7, r4
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	065b      	lsls	r3, r3, #25
 80017b6:	0fdb      	lsrs	r3, r3, #31
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	001a      	movs	r2, r3
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	701a      	strb	r2, [r3, #0]

  return ret;
 80017c0:	68fb      	ldr	r3, [r7, #12]
}
 80017c2:	0018      	movs	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	b005      	add	sp, #20
 80017c8:	bd90      	pop	{r4, r7, pc}

080017ca <iis2dlpc_filter_path_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_filter_path_set(stmdev_ctx_t *ctx,
                                 iis2dlpc_fds_t val)
{
 80017ca:	b590      	push	{r4, r7, lr}
 80017cc:	b087      	sub	sp, #28
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	000a      	movs	r2, r1
 80017d4:	1cfb      	adds	r3, r7, #3
 80017d6:	701a      	strb	r2, [r3, #0]
  iis2dlpc_ctrl6_t ctrl6;
  iis2dlpc_ctrl7_t ctrl_reg7;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &ctrl6, 1);
 80017d8:	2410      	movs	r4, #16
 80017da:	193a      	adds	r2, r7, r4
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	2301      	movs	r3, #1
 80017e0:	2125      	movs	r1, #37	; 0x25
 80017e2:	f7ff fe26 	bl	8001432 <iis2dlpc_read_reg>
 80017e6:	0003      	movs	r3, r0
 80017e8:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d119      	bne.n	8001824 <iis2dlpc_filter_path_set+0x5a>
  {
    ctrl6.fds = ((uint8_t) val & 0x10U) >> 4;
 80017f0:	1cfb      	adds	r3, r7, #3
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	091b      	lsrs	r3, r3, #4
 80017f6:	1c1a      	adds	r2, r3, #0
 80017f8:	2301      	movs	r3, #1
 80017fa:	4013      	ands	r3, r2
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	193b      	adds	r3, r7, r4
 8001800:	2101      	movs	r1, #1
 8001802:	400a      	ands	r2, r1
 8001804:	00d0      	lsls	r0, r2, #3
 8001806:	781a      	ldrb	r2, [r3, #0]
 8001808:	2108      	movs	r1, #8
 800180a:	438a      	bics	r2, r1
 800180c:	1c11      	adds	r1, r2, #0
 800180e:	1c02      	adds	r2, r0, #0
 8001810:	430a      	orrs	r2, r1
 8001812:	701a      	strb	r2, [r3, #0]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &ctrl6, 1);
 8001814:	193a      	adds	r2, r7, r4
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	2301      	movs	r3, #1
 800181a:	2125      	movs	r1, #37	; 0x25
 800181c:	f7ff fe2a 	bl	8001474 <iis2dlpc_write_reg>
 8001820:	0003      	movs	r3, r0
 8001822:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d108      	bne.n	800183c <iis2dlpc_filter_path_set+0x72>
  {
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL7, (uint8_t *) &ctrl_reg7, 1);
 800182a:	230c      	movs	r3, #12
 800182c:	18fa      	adds	r2, r7, r3
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	2301      	movs	r3, #1
 8001832:	213f      	movs	r1, #63	; 0x3f
 8001834:	f7ff fdfd 	bl	8001432 <iis2dlpc_read_reg>
 8001838:	0003      	movs	r3, r0
 800183a:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d118      	bne.n	8001874 <iis2dlpc_filter_path_set+0xaa>
  {
    ctrl_reg7.usr_off_on_out = (uint8_t) val & 0x01U;
 8001842:	1cfb      	adds	r3, r7, #3
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2201      	movs	r2, #1
 8001848:	4013      	ands	r3, r2
 800184a:	b2da      	uxtb	r2, r3
 800184c:	240c      	movs	r4, #12
 800184e:	193b      	adds	r3, r7, r4
 8001850:	2101      	movs	r1, #1
 8001852:	400a      	ands	r2, r1
 8001854:	0110      	lsls	r0, r2, #4
 8001856:	781a      	ldrb	r2, [r3, #0]
 8001858:	2110      	movs	r1, #16
 800185a:	438a      	bics	r2, r1
 800185c:	1c11      	adds	r1, r2, #0
 800185e:	1c02      	adds	r2, r0, #0
 8001860:	430a      	orrs	r2, r1
 8001862:	701a      	strb	r2, [r3, #0]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL7, (uint8_t *) &ctrl_reg7, 1);
 8001864:	193a      	adds	r2, r7, r4
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	2301      	movs	r3, #1
 800186a:	213f      	movs	r1, #63	; 0x3f
 800186c:	f7ff fe02 	bl	8001474 <iis2dlpc_write_reg>
 8001870:	0003      	movs	r3, r0
 8001872:	617b      	str	r3, [r7, #20]
  else
  {
    ret = ret;
  }

  return ret;
 8001874:	697b      	ldr	r3, [r7, #20]
}
 8001876:	0018      	movs	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	b007      	add	sp, #28
 800187c:	bd90      	pop	{r4, r7, pc}

0800187e <iis2dlpc_int_notification_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_int_notification_set(stmdev_ctx_t *ctx,
                                      iis2dlpc_lir_t val)
{
 800187e:	b590      	push	{r4, r7, lr}
 8001880:	b085      	sub	sp, #20
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
 8001886:	000a      	movs	r2, r1
 8001888:	1cfb      	adds	r3, r7, #3
 800188a:	701a      	strb	r2, [r3, #0]
  iis2dlpc_ctrl3_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL3, (uint8_t *) &reg, 1);
 800188c:	2408      	movs	r4, #8
 800188e:	193a      	adds	r2, r7, r4
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	2301      	movs	r3, #1
 8001894:	2122      	movs	r1, #34	; 0x22
 8001896:	f7ff fdcc 	bl	8001432 <iis2dlpc_read_reg>
 800189a:	0003      	movs	r3, r0
 800189c:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d117      	bne.n	80018d4 <iis2dlpc_int_notification_set+0x56>
  {
    reg.lir = (uint8_t) val;
 80018a4:	1cfb      	adds	r3, r7, #3
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2201      	movs	r2, #1
 80018aa:	4013      	ands	r3, r2
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	193b      	adds	r3, r7, r4
 80018b0:	2101      	movs	r1, #1
 80018b2:	400a      	ands	r2, r1
 80018b4:	0110      	lsls	r0, r2, #4
 80018b6:	781a      	ldrb	r2, [r3, #0]
 80018b8:	2110      	movs	r1, #16
 80018ba:	438a      	bics	r2, r1
 80018bc:	1c11      	adds	r1, r2, #0
 80018be:	1c02      	adds	r2, r0, #0
 80018c0:	430a      	orrs	r2, r1
 80018c2:	701a      	strb	r2, [r3, #0]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL3, (uint8_t *) &reg, 1);
 80018c4:	193a      	adds	r2, r7, r4
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	2301      	movs	r3, #1
 80018ca:	2122      	movs	r1, #34	; 0x22
 80018cc:	f7ff fdd2 	bl	8001474 <iis2dlpc_write_reg>
 80018d0:	0003      	movs	r3, r0
 80018d2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80018d4:	68fb      	ldr	r3, [r7, #12]
}
 80018d6:	0018      	movs	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	b005      	add	sp, #20
 80018dc:	bd90      	pop	{r4, r7, pc}

080018de <iis2dlpc_pin_int1_route_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_pin_int1_route_set(stmdev_ctx_t *ctx,
                                    iis2dlpc_ctrl4_int1_pad_ctrl_t *val)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b086      	sub	sp, #24
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
 80018e6:	6039      	str	r1, [r7, #0]
  iis2dlpc_ctrl5_int2_pad_ctrl_t ctrl5_int2_pad_ctrl;
  iis2dlpc_ctrl7_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL5_INT2_PAD_CTRL,
 80018e8:	2310      	movs	r3, #16
 80018ea:	18fa      	adds	r2, r7, r3
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	2301      	movs	r3, #1
 80018f0:	2124      	movs	r1, #36	; 0x24
 80018f2:	f7ff fd9e 	bl	8001432 <iis2dlpc_read_reg>
 80018f6:	0003      	movs	r3, r0
 80018f8:	617b      	str	r3, [r7, #20]
                          (uint8_t *) &ctrl5_int2_pad_ctrl, 1);

  if (ret == 0)
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d108      	bne.n	8001912 <iis2dlpc_pin_int1_route_set+0x34>
  {
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL7, (uint8_t *) &reg, 1);
 8001900:	230c      	movs	r3, #12
 8001902:	18fa      	adds	r2, r7, r3
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	2301      	movs	r3, #1
 8001908:	213f      	movs	r1, #63	; 0x3f
 800190a:	f7ff fd92 	bl	8001432 <iis2dlpc_read_reg>
 800190e:	0003      	movs	r3, r0
 8001910:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d146      	bne.n	80019a6 <iis2dlpc_pin_int1_route_set+0xc8>
  {
    if ((ctrl5_int2_pad_ctrl.int2_sleep_state
 8001918:	2110      	movs	r1, #16
 800191a:	187b      	adds	r3, r7, r1
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	061b      	lsls	r3, r3, #24
 8001920:	0fdb      	lsrs	r3, r3, #31
 8001922:	b2da      	uxtb	r2, r3
         | ctrl5_int2_pad_ctrl.int2_sleep_chg
 8001924:	187b      	adds	r3, r7, r1
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	065b      	lsls	r3, r3, #25
 800192a:	0fdb      	lsrs	r3, r3, #31
 800192c:	b2db      	uxtb	r3, r3
 800192e:	4313      	orrs	r3, r2
 8001930:	b2da      	uxtb	r2, r3
         | val->int1_tap
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	071b      	lsls	r3, r3, #28
 8001938:	0fdb      	lsrs	r3, r3, #31
 800193a:	b2db      	uxtb	r3, r3
 800193c:	4313      	orrs	r3, r2
 800193e:	b2da      	uxtb	r2, r3
         | val->int1_ff
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	06db      	lsls	r3, r3, #27
 8001946:	0fdb      	lsrs	r3, r3, #31
 8001948:	b2db      	uxtb	r3, r3
 800194a:	4313      	orrs	r3, r2
 800194c:	b2da      	uxtb	r2, r3
         | val->int1_wu
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	069b      	lsls	r3, r3, #26
 8001954:	0fdb      	lsrs	r3, r3, #31
 8001956:	b2db      	uxtb	r3, r3
 8001958:	4313      	orrs	r3, r2
 800195a:	b2da      	uxtb	r2, r3
         | val->int1_single_tap
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	065b      	lsls	r3, r3, #25
 8001962:	0fdb      	lsrs	r3, r3, #31
 8001964:	b2db      	uxtb	r3, r3
 8001966:	4313      	orrs	r3, r2
 8001968:	b2da      	uxtb	r2, r3
         | val->int1_6d) != PROPERTY_DISABLE)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	061b      	lsls	r3, r3, #24
 8001970:	0fdb      	lsrs	r3, r3, #31
 8001972:	b2db      	uxtb	r3, r3
 8001974:	4313      	orrs	r3, r2
 8001976:	b2db      	uxtb	r3, r3
    if ((ctrl5_int2_pad_ctrl.int2_sleep_state
 8001978:	2b00      	cmp	r3, #0
 800197a:	d006      	beq.n	800198a <iis2dlpc_pin_int1_route_set+0xac>
    {
      reg.interrupts_enable = PROPERTY_ENABLE;
 800197c:	230c      	movs	r3, #12
 800197e:	18fb      	adds	r3, r7, r3
 8001980:	781a      	ldrb	r2, [r3, #0]
 8001982:	2120      	movs	r1, #32
 8001984:	430a      	orrs	r2, r1
 8001986:	701a      	strb	r2, [r3, #0]
 8001988:	e005      	b.n	8001996 <iis2dlpc_pin_int1_route_set+0xb8>
    }

    else
    {
      reg.interrupts_enable = PROPERTY_DISABLE;
 800198a:	230c      	movs	r3, #12
 800198c:	18fb      	adds	r3, r7, r3
 800198e:	781a      	ldrb	r2, [r3, #0]
 8001990:	2120      	movs	r1, #32
 8001992:	438a      	bics	r2, r1
 8001994:	701a      	strb	r2, [r3, #0]
    }

    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL4_INT1_PAD_CTRL,
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	2301      	movs	r3, #1
 800199c:	2123      	movs	r1, #35	; 0x23
 800199e:	f7ff fd69 	bl	8001474 <iis2dlpc_write_reg>
 80019a2:	0003      	movs	r3, r0
 80019a4:	617b      	str	r3, [r7, #20]
                             (uint8_t *) val, 1);
  }

  if (ret == 0)
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d108      	bne.n	80019be <iis2dlpc_pin_int1_route_set+0xe0>
  {
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL7, (uint8_t *) &reg, 1);
 80019ac:	230c      	movs	r3, #12
 80019ae:	18fa      	adds	r2, r7, r3
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	2301      	movs	r3, #1
 80019b4:	213f      	movs	r1, #63	; 0x3f
 80019b6:	f7ff fd5d 	bl	8001474 <iis2dlpc_write_reg>
 80019ba:	0003      	movs	r3, r0
 80019bc:	617b      	str	r3, [r7, #20]
  else
  {
    ret = ret;
  }

  return ret;
 80019be:	697b      	ldr	r3, [r7, #20]
}
 80019c0:	0018      	movs	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	b006      	add	sp, #24
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <iis2dlpc_pin_int1_route_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_pin_int1_route_get(stmdev_ctx_t *ctx,
                                    iis2dlpc_ctrl4_int1_pad_ctrl_t *val)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL4_INT1_PAD_CTRL,
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	2301      	movs	r3, #1
 80019d8:	2123      	movs	r1, #35	; 0x23
 80019da:	f7ff fd2a 	bl	8001432 <iis2dlpc_read_reg>
 80019de:	0003      	movs	r3, r0
 80019e0:	60fb      	str	r3, [r7, #12]
                          (uint8_t *) val, 1);

  return ret;
 80019e2:	68fb      	ldr	r3, [r7, #12]
}
 80019e4:	0018      	movs	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	b004      	add	sp, #16
 80019ea:	bd80      	pop	{r7, pc}

080019ec <iis2dlpc_wkup_threshold_set>:
  * @param  val      change the values of wk_ths in reg WAKE_UP_THS
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_wkup_threshold_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80019ec:	b590      	push	{r4, r7, lr}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	000a      	movs	r2, r1
 80019f6:	1cfb      	adds	r3, r7, #3
 80019f8:	701a      	strb	r2, [r3, #0]
  iis2dlpc_wake_up_ths_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_WAKE_UP_THS, (uint8_t *) &reg, 1);
 80019fa:	2408      	movs	r4, #8
 80019fc:	193a      	adds	r2, r7, r4
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	2301      	movs	r3, #1
 8001a02:	2134      	movs	r1, #52	; 0x34
 8001a04:	f7ff fd15 	bl	8001432 <iis2dlpc_read_reg>
 8001a08:	0003      	movs	r3, r0
 8001a0a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d117      	bne.n	8001a42 <iis2dlpc_wkup_threshold_set+0x56>
  {
    reg.wk_ths = val;
 8001a12:	1cfb      	adds	r3, r7, #3
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	223f      	movs	r2, #63	; 0x3f
 8001a18:	4013      	ands	r3, r2
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	193b      	adds	r3, r7, r4
 8001a1e:	213f      	movs	r1, #63	; 0x3f
 8001a20:	400a      	ands	r2, r1
 8001a22:	0010      	movs	r0, r2
 8001a24:	781a      	ldrb	r2, [r3, #0]
 8001a26:	213f      	movs	r1, #63	; 0x3f
 8001a28:	438a      	bics	r2, r1
 8001a2a:	1c11      	adds	r1, r2, #0
 8001a2c:	1c02      	adds	r2, r0, #0
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	701a      	strb	r2, [r3, #0]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_WAKE_UP_THS, (uint8_t *) &reg, 1);
 8001a32:	193a      	adds	r2, r7, r4
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	2301      	movs	r3, #1
 8001a38:	2134      	movs	r1, #52	; 0x34
 8001a3a:	f7ff fd1b 	bl	8001474 <iis2dlpc_write_reg>
 8001a3e:	0003      	movs	r3, r0
 8001a40:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001a42:	68fb      	ldr	r3, [r7, #12]
}
 8001a44:	0018      	movs	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	b005      	add	sp, #20
 8001a4a:	bd90      	pop	{r4, r7, pc}

08001a4c <iis2dlpc_wkup_threshold_get>:
  * @param  val      change the values of wk_ths in reg WAKE_UP_THS
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_wkup_threshold_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8001a4c:	b590      	push	{r4, r7, lr}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  iis2dlpc_wake_up_ths_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_WAKE_UP_THS, (uint8_t *) &reg, 1);
 8001a56:	2408      	movs	r4, #8
 8001a58:	193a      	adds	r2, r7, r4
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	2134      	movs	r1, #52	; 0x34
 8001a60:	f7ff fce7 	bl	8001432 <iis2dlpc_read_reg>
 8001a64:	0003      	movs	r3, r0
 8001a66:	60fb      	str	r3, [r7, #12]
  *val = reg.wk_ths;
 8001a68:	193b      	adds	r3, r7, r4
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	069b      	lsls	r3, r3, #26
 8001a6e:	0e9b      	lsrs	r3, r3, #26
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	001a      	movs	r2, r3
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	701a      	strb	r2, [r3, #0]

  return ret;
 8001a78:	68fb      	ldr	r3, [r7, #12]
}
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	b005      	add	sp, #20
 8001a80:	bd90      	pop	{r4, r7, pc}

08001a82 <iis2dlpc_wkup_dur_set>:
  * @param  val      change the values of wake_dur in reg WAKE_UP_DUR
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_wkup_dur_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001a82:	b590      	push	{r4, r7, lr}
 8001a84:	b085      	sub	sp, #20
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
 8001a8a:	000a      	movs	r2, r1
 8001a8c:	1cfb      	adds	r3, r7, #3
 8001a8e:	701a      	strb	r2, [r3, #0]
  iis2dlpc_wake_up_dur_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_WAKE_UP_DUR, (uint8_t *) &reg, 1);
 8001a90:	2408      	movs	r4, #8
 8001a92:	193a      	adds	r2, r7, r4
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	2301      	movs	r3, #1
 8001a98:	2135      	movs	r1, #53	; 0x35
 8001a9a:	f7ff fcca 	bl	8001432 <iis2dlpc_read_reg>
 8001a9e:	0003      	movs	r3, r0
 8001aa0:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d117      	bne.n	8001ad8 <iis2dlpc_wkup_dur_set+0x56>
  {
    reg.wake_dur = val;
 8001aa8:	1cfb      	adds	r3, r7, #3
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2203      	movs	r2, #3
 8001aae:	4013      	ands	r3, r2
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	193b      	adds	r3, r7, r4
 8001ab4:	2103      	movs	r1, #3
 8001ab6:	400a      	ands	r2, r1
 8001ab8:	0150      	lsls	r0, r2, #5
 8001aba:	781a      	ldrb	r2, [r3, #0]
 8001abc:	2160      	movs	r1, #96	; 0x60
 8001abe:	438a      	bics	r2, r1
 8001ac0:	1c11      	adds	r1, r2, #0
 8001ac2:	1c02      	adds	r2, r0, #0
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	701a      	strb	r2, [r3, #0]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_WAKE_UP_DUR, (uint8_t *) &reg, 1);
 8001ac8:	193a      	adds	r2, r7, r4
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	2301      	movs	r3, #1
 8001ace:	2135      	movs	r1, #53	; 0x35
 8001ad0:	f7ff fcd0 	bl	8001474 <iis2dlpc_write_reg>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
}
 8001ada:	0018      	movs	r0, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	b005      	add	sp, #20
 8001ae0:	bd90      	pop	{r4, r7, pc}
	...

08001ae4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001aea:	1dfb      	adds	r3, r7, #7
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001af0:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <HAL_Init+0x3c>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <HAL_Init+0x3c>)
 8001af6:	2140      	movs	r1, #64	; 0x40
 8001af8:	430a      	orrs	r2, r1
 8001afa:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001afc:	2001      	movs	r0, #1
 8001afe:	f000 f811 	bl	8001b24 <HAL_InitTick>
 8001b02:	1e03      	subs	r3, r0, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001b06:	1dfb      	adds	r3, r7, #7
 8001b08:	2201      	movs	r2, #1
 8001b0a:	701a      	strb	r2, [r3, #0]
 8001b0c:	e001      	b.n	8001b12 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b0e:	f7ff fb17 	bl	8001140 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b12:	1dfb      	adds	r3, r7, #7
 8001b14:	781b      	ldrb	r3, [r3, #0]
}
 8001b16:	0018      	movs	r0, r3
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	b002      	add	sp, #8
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	46c0      	nop			; (mov r8, r8)
 8001b20:	40022000 	.word	0x40022000

08001b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b24:	b590      	push	{r4, r7, lr}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b2c:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <HAL_InitTick+0x5c>)
 8001b2e:	681c      	ldr	r4, [r3, #0]
 8001b30:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <HAL_InitTick+0x60>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	0019      	movs	r1, r3
 8001b36:	23fa      	movs	r3, #250	; 0xfa
 8001b38:	0098      	lsls	r0, r3, #2
 8001b3a:	f7fe faf7 	bl	800012c <__udivsi3>
 8001b3e:	0003      	movs	r3, r0
 8001b40:	0019      	movs	r1, r3
 8001b42:	0020      	movs	r0, r4
 8001b44:	f7fe faf2 	bl	800012c <__udivsi3>
 8001b48:	0003      	movs	r3, r0
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	f000 f92f 	bl	8001dae <HAL_SYSTICK_Config>
 8001b50:	1e03      	subs	r3, r0, #0
 8001b52:	d001      	beq.n	8001b58 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e00f      	b.n	8001b78 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b03      	cmp	r3, #3
 8001b5c:	d80b      	bhi.n	8001b76 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	2301      	movs	r3, #1
 8001b62:	425b      	negs	r3, r3
 8001b64:	2200      	movs	r2, #0
 8001b66:	0018      	movs	r0, r3
 8001b68:	f000 f8fc 	bl	8001d64 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <HAL_InitTick+0x64>)
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
 8001b74:	e000      	b.n	8001b78 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
}
 8001b78:	0018      	movs	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	b003      	add	sp, #12
 8001b7e:	bd90      	pop	{r4, r7, pc}
 8001b80:	2000000c 	.word	0x2000000c
 8001b84:	20000014 	.word	0x20000014
 8001b88:	20000010 	.word	0x20000010

08001b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b90:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <HAL_IncTick+0x1c>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	001a      	movs	r2, r3
 8001b96:	4b05      	ldr	r3, [pc, #20]	; (8001bac <HAL_IncTick+0x20>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	18d2      	adds	r2, r2, r3
 8001b9c:	4b03      	ldr	r3, [pc, #12]	; (8001bac <HAL_IncTick+0x20>)
 8001b9e:	601a      	str	r2, [r3, #0]
}
 8001ba0:	46c0      	nop			; (mov r8, r8)
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	46c0      	nop			; (mov r8, r8)
 8001ba8:	20000014 	.word	0x20000014
 8001bac:	20000354 	.word	0x20000354

08001bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb4:	4b02      	ldr	r3, [pc, #8]	; (8001bc0 <HAL_GetTick+0x10>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
}
 8001bb8:	0018      	movs	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	20000354 	.word	0x20000354

08001bc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bcc:	f7ff fff0 	bl	8001bb0 <HAL_GetTick>
 8001bd0:	0003      	movs	r3, r0
 8001bd2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	d005      	beq.n	8001bea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bde:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <HAL_Delay+0x44>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	001a      	movs	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	189b      	adds	r3, r3, r2
 8001be8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bea:	46c0      	nop			; (mov r8, r8)
 8001bec:	f7ff ffe0 	bl	8001bb0 <HAL_GetTick>
 8001bf0:	0002      	movs	r2, r0
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d8f7      	bhi.n	8001bec <HAL_Delay+0x28>
  {
  }
}
 8001bfc:	46c0      	nop			; (mov r8, r8)
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b004      	add	sp, #16
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	46c0      	nop			; (mov r8, r8)
 8001c08:	20000014 	.word	0x20000014

08001c0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	0002      	movs	r2, r0
 8001c14:	1dfb      	adds	r3, r7, #7
 8001c16:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c18:	1dfb      	adds	r3, r7, #7
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b7f      	cmp	r3, #127	; 0x7f
 8001c1e:	d809      	bhi.n	8001c34 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c20:	1dfb      	adds	r3, r7, #7
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	001a      	movs	r2, r3
 8001c26:	231f      	movs	r3, #31
 8001c28:	401a      	ands	r2, r3
 8001c2a:	4b04      	ldr	r3, [pc, #16]	; (8001c3c <__NVIC_EnableIRQ+0x30>)
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	4091      	lsls	r1, r2
 8001c30:	000a      	movs	r2, r1
 8001c32:	601a      	str	r2, [r3, #0]
  }
}
 8001c34:	46c0      	nop			; (mov r8, r8)
 8001c36:	46bd      	mov	sp, r7
 8001c38:	b002      	add	sp, #8
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	e000e100 	.word	0xe000e100

08001c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c40:	b590      	push	{r4, r7, lr}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	0002      	movs	r2, r0
 8001c48:	6039      	str	r1, [r7, #0]
 8001c4a:	1dfb      	adds	r3, r7, #7
 8001c4c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c4e:	1dfb      	adds	r3, r7, #7
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b7f      	cmp	r3, #127	; 0x7f
 8001c54:	d828      	bhi.n	8001ca8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c56:	4a2f      	ldr	r2, [pc, #188]	; (8001d14 <__NVIC_SetPriority+0xd4>)
 8001c58:	1dfb      	adds	r3, r7, #7
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	b25b      	sxtb	r3, r3
 8001c5e:	089b      	lsrs	r3, r3, #2
 8001c60:	33c0      	adds	r3, #192	; 0xc0
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	589b      	ldr	r3, [r3, r2]
 8001c66:	1dfa      	adds	r2, r7, #7
 8001c68:	7812      	ldrb	r2, [r2, #0]
 8001c6a:	0011      	movs	r1, r2
 8001c6c:	2203      	movs	r2, #3
 8001c6e:	400a      	ands	r2, r1
 8001c70:	00d2      	lsls	r2, r2, #3
 8001c72:	21ff      	movs	r1, #255	; 0xff
 8001c74:	4091      	lsls	r1, r2
 8001c76:	000a      	movs	r2, r1
 8001c78:	43d2      	mvns	r2, r2
 8001c7a:	401a      	ands	r2, r3
 8001c7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	019b      	lsls	r3, r3, #6
 8001c82:	22ff      	movs	r2, #255	; 0xff
 8001c84:	401a      	ands	r2, r3
 8001c86:	1dfb      	adds	r3, r7, #7
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	4003      	ands	r3, r0
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c94:	481f      	ldr	r0, [pc, #124]	; (8001d14 <__NVIC_SetPriority+0xd4>)
 8001c96:	1dfb      	adds	r3, r7, #7
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	b25b      	sxtb	r3, r3
 8001c9c:	089b      	lsrs	r3, r3, #2
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	33c0      	adds	r3, #192	; 0xc0
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001ca6:	e031      	b.n	8001d0c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ca8:	4a1b      	ldr	r2, [pc, #108]	; (8001d18 <__NVIC_SetPriority+0xd8>)
 8001caa:	1dfb      	adds	r3, r7, #7
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	0019      	movs	r1, r3
 8001cb0:	230f      	movs	r3, #15
 8001cb2:	400b      	ands	r3, r1
 8001cb4:	3b08      	subs	r3, #8
 8001cb6:	089b      	lsrs	r3, r3, #2
 8001cb8:	3306      	adds	r3, #6
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	18d3      	adds	r3, r2, r3
 8001cbe:	3304      	adds	r3, #4
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	1dfa      	adds	r2, r7, #7
 8001cc4:	7812      	ldrb	r2, [r2, #0]
 8001cc6:	0011      	movs	r1, r2
 8001cc8:	2203      	movs	r2, #3
 8001cca:	400a      	ands	r2, r1
 8001ccc:	00d2      	lsls	r2, r2, #3
 8001cce:	21ff      	movs	r1, #255	; 0xff
 8001cd0:	4091      	lsls	r1, r2
 8001cd2:	000a      	movs	r2, r1
 8001cd4:	43d2      	mvns	r2, r2
 8001cd6:	401a      	ands	r2, r3
 8001cd8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	019b      	lsls	r3, r3, #6
 8001cde:	22ff      	movs	r2, #255	; 0xff
 8001ce0:	401a      	ands	r2, r3
 8001ce2:	1dfb      	adds	r3, r7, #7
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	2303      	movs	r3, #3
 8001cea:	4003      	ands	r3, r0
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cf0:	4809      	ldr	r0, [pc, #36]	; (8001d18 <__NVIC_SetPriority+0xd8>)
 8001cf2:	1dfb      	adds	r3, r7, #7
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	001c      	movs	r4, r3
 8001cf8:	230f      	movs	r3, #15
 8001cfa:	4023      	ands	r3, r4
 8001cfc:	3b08      	subs	r3, #8
 8001cfe:	089b      	lsrs	r3, r3, #2
 8001d00:	430a      	orrs	r2, r1
 8001d02:	3306      	adds	r3, #6
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	18c3      	adds	r3, r0, r3
 8001d08:	3304      	adds	r3, #4
 8001d0a:	601a      	str	r2, [r3, #0]
}
 8001d0c:	46c0      	nop			; (mov r8, r8)
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	b003      	add	sp, #12
 8001d12:	bd90      	pop	{r4, r7, pc}
 8001d14:	e000e100 	.word	0xe000e100
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	1e5a      	subs	r2, r3, #1
 8001d28:	2380      	movs	r3, #128	; 0x80
 8001d2a:	045b      	lsls	r3, r3, #17
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d301      	bcc.n	8001d34 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d30:	2301      	movs	r3, #1
 8001d32:	e010      	b.n	8001d56 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d34:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <SysTick_Config+0x44>)
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	3a01      	subs	r2, #1
 8001d3a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	425b      	negs	r3, r3
 8001d40:	2103      	movs	r1, #3
 8001d42:	0018      	movs	r0, r3
 8001d44:	f7ff ff7c 	bl	8001c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d48:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <SysTick_Config+0x44>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d4e:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <SysTick_Config+0x44>)
 8001d50:	2207      	movs	r2, #7
 8001d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	0018      	movs	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	b002      	add	sp, #8
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	46c0      	nop			; (mov r8, r8)
 8001d60:	e000e010 	.word	0xe000e010

08001d64 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60b9      	str	r1, [r7, #8]
 8001d6c:	607a      	str	r2, [r7, #4]
 8001d6e:	210f      	movs	r1, #15
 8001d70:	187b      	adds	r3, r7, r1
 8001d72:	1c02      	adds	r2, r0, #0
 8001d74:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001d76:	68ba      	ldr	r2, [r7, #8]
 8001d78:	187b      	adds	r3, r7, r1
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	b25b      	sxtb	r3, r3
 8001d7e:	0011      	movs	r1, r2
 8001d80:	0018      	movs	r0, r3
 8001d82:	f7ff ff5d 	bl	8001c40 <__NVIC_SetPriority>
}
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	b004      	add	sp, #16
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	0002      	movs	r2, r0
 8001d96:	1dfb      	adds	r3, r7, #7
 8001d98:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d9a:	1dfb      	adds	r3, r7, #7
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	b25b      	sxtb	r3, r3
 8001da0:	0018      	movs	r0, r3
 8001da2:	f7ff ff33 	bl	8001c0c <__NVIC_EnableIRQ>
}
 8001da6:	46c0      	nop			; (mov r8, r8)
 8001da8:	46bd      	mov	sp, r7
 8001daa:	b002      	add	sp, #8
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	0018      	movs	r0, r3
 8001dba:	f7ff ffaf 	bl	8001d1c <SysTick_Config>
 8001dbe:	0003      	movs	r3, r0
}
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	b002      	add	sp, #8
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001dde:	e155      	b.n	800208c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2101      	movs	r1, #1
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	4091      	lsls	r1, r2
 8001dea:	000a      	movs	r2, r1
 8001dec:	4013      	ands	r3, r2
 8001dee:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d100      	bne.n	8001df8 <HAL_GPIO_Init+0x30>
 8001df6:	e146      	b.n	8002086 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2203      	movs	r2, #3
 8001dfe:	4013      	ands	r3, r2
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d005      	beq.n	8001e10 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	2203      	movs	r2, #3
 8001e0a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d130      	bne.n	8001e72 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	409a      	lsls	r2, r3
 8001e1e:	0013      	movs	r3, r2
 8001e20:	43da      	mvns	r2, r3
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	4013      	ands	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	68da      	ldr	r2, [r3, #12]
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	409a      	lsls	r2, r3
 8001e32:	0013      	movs	r3, r2
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e46:	2201      	movs	r2, #1
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	0013      	movs	r3, r2
 8001e4e:	43da      	mvns	r2, r3
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	4013      	ands	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	091b      	lsrs	r3, r3, #4
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	401a      	ands	r2, r3
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	409a      	lsls	r2, r3
 8001e64:	0013      	movs	r3, r2
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2203      	movs	r2, #3
 8001e78:	4013      	ands	r3, r2
 8001e7a:	2b03      	cmp	r3, #3
 8001e7c:	d017      	beq.n	8001eae <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	2203      	movs	r2, #3
 8001e8a:	409a      	lsls	r2, r3
 8001e8c:	0013      	movs	r3, r2
 8001e8e:	43da      	mvns	r2, r3
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	4013      	ands	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	689a      	ldr	r2, [r3, #8]
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	409a      	lsls	r2, r3
 8001ea0:	0013      	movs	r3, r2
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d123      	bne.n	8001f02 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	08da      	lsrs	r2, r3, #3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	3208      	adds	r2, #8
 8001ec2:	0092      	lsls	r2, r2, #2
 8001ec4:	58d3      	ldr	r3, [r2, r3]
 8001ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	2207      	movs	r2, #7
 8001ecc:	4013      	ands	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	220f      	movs	r2, #15
 8001ed2:	409a      	lsls	r2, r3
 8001ed4:	0013      	movs	r3, r2
 8001ed6:	43da      	mvns	r2, r3
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	4013      	ands	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	691a      	ldr	r2, [r3, #16]
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	2107      	movs	r1, #7
 8001ee6:	400b      	ands	r3, r1
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	409a      	lsls	r2, r3
 8001eec:	0013      	movs	r3, r2
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	08da      	lsrs	r2, r3, #3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3208      	adds	r2, #8
 8001efc:	0092      	lsls	r2, r2, #2
 8001efe:	6939      	ldr	r1, [r7, #16]
 8001f00:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	2203      	movs	r2, #3
 8001f0e:	409a      	lsls	r2, r3
 8001f10:	0013      	movs	r3, r2
 8001f12:	43da      	mvns	r2, r3
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4013      	ands	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2203      	movs	r2, #3
 8001f20:	401a      	ands	r2, r3
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	409a      	lsls	r2, r3
 8001f28:	0013      	movs	r3, r2
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	23c0      	movs	r3, #192	; 0xc0
 8001f3c:	029b      	lsls	r3, r3, #10
 8001f3e:	4013      	ands	r3, r2
 8001f40:	d100      	bne.n	8001f44 <HAL_GPIO_Init+0x17c>
 8001f42:	e0a0      	b.n	8002086 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f44:	4b57      	ldr	r3, [pc, #348]	; (80020a4 <HAL_GPIO_Init+0x2dc>)
 8001f46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f48:	4b56      	ldr	r3, [pc, #344]	; (80020a4 <HAL_GPIO_Init+0x2dc>)
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f50:	4a55      	ldr	r2, [pc, #340]	; (80020a8 <HAL_GPIO_Init+0x2e0>)
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	089b      	lsrs	r3, r3, #2
 8001f56:	3302      	adds	r3, #2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	589b      	ldr	r3, [r3, r2]
 8001f5c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	2203      	movs	r2, #3
 8001f62:	4013      	ands	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	220f      	movs	r2, #15
 8001f68:	409a      	lsls	r2, r3
 8001f6a:	0013      	movs	r3, r2
 8001f6c:	43da      	mvns	r2, r3
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	4013      	ands	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	23a0      	movs	r3, #160	; 0xa0
 8001f78:	05db      	lsls	r3, r3, #23
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d01f      	beq.n	8001fbe <HAL_GPIO_Init+0x1f6>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a4a      	ldr	r2, [pc, #296]	; (80020ac <HAL_GPIO_Init+0x2e4>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d019      	beq.n	8001fba <HAL_GPIO_Init+0x1f2>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a49      	ldr	r2, [pc, #292]	; (80020b0 <HAL_GPIO_Init+0x2e8>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d013      	beq.n	8001fb6 <HAL_GPIO_Init+0x1ee>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a48      	ldr	r2, [pc, #288]	; (80020b4 <HAL_GPIO_Init+0x2ec>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d00d      	beq.n	8001fb2 <HAL_GPIO_Init+0x1ea>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a47      	ldr	r2, [pc, #284]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d007      	beq.n	8001fae <HAL_GPIO_Init+0x1e6>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a46      	ldr	r2, [pc, #280]	; (80020bc <HAL_GPIO_Init+0x2f4>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d101      	bne.n	8001faa <HAL_GPIO_Init+0x1e2>
 8001fa6:	2305      	movs	r3, #5
 8001fa8:	e00a      	b.n	8001fc0 <HAL_GPIO_Init+0x1f8>
 8001faa:	2306      	movs	r3, #6
 8001fac:	e008      	b.n	8001fc0 <HAL_GPIO_Init+0x1f8>
 8001fae:	2304      	movs	r3, #4
 8001fb0:	e006      	b.n	8001fc0 <HAL_GPIO_Init+0x1f8>
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e004      	b.n	8001fc0 <HAL_GPIO_Init+0x1f8>
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	e002      	b.n	8001fc0 <HAL_GPIO_Init+0x1f8>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <HAL_GPIO_Init+0x1f8>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	697a      	ldr	r2, [r7, #20]
 8001fc2:	2103      	movs	r1, #3
 8001fc4:	400a      	ands	r2, r1
 8001fc6:	0092      	lsls	r2, r2, #2
 8001fc8:	4093      	lsls	r3, r2
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fd0:	4935      	ldr	r1, [pc, #212]	; (80020a8 <HAL_GPIO_Init+0x2e0>)
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	089b      	lsrs	r3, r3, #2
 8001fd6:	3302      	adds	r3, #2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fde:	4b38      	ldr	r3, [pc, #224]	; (80020c0 <HAL_GPIO_Init+0x2f8>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	43da      	mvns	r2, r3
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4013      	ands	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	2380      	movs	r3, #128	; 0x80
 8001ff4:	025b      	lsls	r3, r3, #9
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d003      	beq.n	8002002 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002002:	4b2f      	ldr	r3, [pc, #188]	; (80020c0 <HAL_GPIO_Init+0x2f8>)
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002008:	4b2d      	ldr	r3, [pc, #180]	; (80020c0 <HAL_GPIO_Init+0x2f8>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	43da      	mvns	r2, r3
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4013      	ands	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	2380      	movs	r3, #128	; 0x80
 800201e:	029b      	lsls	r3, r3, #10
 8002020:	4013      	ands	r3, r2
 8002022:	d003      	beq.n	800202c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4313      	orrs	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800202c:	4b24      	ldr	r3, [pc, #144]	; (80020c0 <HAL_GPIO_Init+0x2f8>)
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002032:	4b23      	ldr	r3, [pc, #140]	; (80020c0 <HAL_GPIO_Init+0x2f8>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	43da      	mvns	r2, r3
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	4013      	ands	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	2380      	movs	r3, #128	; 0x80
 8002048:	035b      	lsls	r3, r3, #13
 800204a:	4013      	ands	r3, r2
 800204c:	d003      	beq.n	8002056 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4313      	orrs	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002056:	4b1a      	ldr	r3, [pc, #104]	; (80020c0 <HAL_GPIO_Init+0x2f8>)
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800205c:	4b18      	ldr	r3, [pc, #96]	; (80020c0 <HAL_GPIO_Init+0x2f8>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	43da      	mvns	r2, r3
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	4013      	ands	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	2380      	movs	r3, #128	; 0x80
 8002072:	039b      	lsls	r3, r3, #14
 8002074:	4013      	ands	r3, r2
 8002076:	d003      	beq.n	8002080 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4313      	orrs	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002080:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <HAL_GPIO_Init+0x2f8>)
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	3301      	adds	r3, #1
 800208a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	40da      	lsrs	r2, r3
 8002094:	1e13      	subs	r3, r2, #0
 8002096:	d000      	beq.n	800209a <HAL_GPIO_Init+0x2d2>
 8002098:	e6a2      	b.n	8001de0 <HAL_GPIO_Init+0x18>
  }
}
 800209a:	46c0      	nop			; (mov r8, r8)
 800209c:	46c0      	nop			; (mov r8, r8)
 800209e:	46bd      	mov	sp, r7
 80020a0:	b006      	add	sp, #24
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40021000 	.word	0x40021000
 80020a8:	40010000 	.word	0x40010000
 80020ac:	50000400 	.word	0x50000400
 80020b0:	50000800 	.word	0x50000800
 80020b4:	50000c00 	.word	0x50000c00
 80020b8:	50001000 	.word	0x50001000
 80020bc:	50001c00 	.word	0x50001c00
 80020c0:	40010400 	.word	0x40010400

080020c4 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	000a      	movs	r2, r1
 80020ce:	1cbb      	adds	r3, r7, #2
 80020d0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	1cba      	adds	r2, r7, #2
 80020d8:	8812      	ldrh	r2, [r2, #0]
 80020da:	4013      	ands	r3, r2
 80020dc:	d004      	beq.n	80020e8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80020de:	230f      	movs	r3, #15
 80020e0:	18fb      	adds	r3, r7, r3
 80020e2:	2201      	movs	r2, #1
 80020e4:	701a      	strb	r2, [r3, #0]
 80020e6:	e003      	b.n	80020f0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020e8:	230f      	movs	r3, #15
 80020ea:	18fb      	adds	r3, r7, r3
 80020ec:	2200      	movs	r2, #0
 80020ee:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80020f0:	230f      	movs	r3, #15
 80020f2:	18fb      	adds	r3, r7, r3
 80020f4:	781b      	ldrb	r3, [r3, #0]
}
 80020f6:	0018      	movs	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	b004      	add	sp, #16
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
 8002106:	0008      	movs	r0, r1
 8002108:	0011      	movs	r1, r2
 800210a:	1cbb      	adds	r3, r7, #2
 800210c:	1c02      	adds	r2, r0, #0
 800210e:	801a      	strh	r2, [r3, #0]
 8002110:	1c7b      	adds	r3, r7, #1
 8002112:	1c0a      	adds	r2, r1, #0
 8002114:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002116:	1c7b      	adds	r3, r7, #1
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d004      	beq.n	8002128 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800211e:	1cbb      	adds	r3, r7, #2
 8002120:	881a      	ldrh	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002126:	e003      	b.n	8002130 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002128:	1cbb      	adds	r3, r7, #2
 800212a:	881a      	ldrh	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002130:	46c0      	nop			; (mov r8, r8)
 8002132:	46bd      	mov	sp, r7
 8002134:	b002      	add	sp, #8
 8002136:	bd80      	pop	{r7, pc}

08002138 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	0002      	movs	r2, r0
 8002140:	1dbb      	adds	r3, r7, #6
 8002142:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002144:	4b09      	ldr	r3, [pc, #36]	; (800216c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002146:	695b      	ldr	r3, [r3, #20]
 8002148:	1dba      	adds	r2, r7, #6
 800214a:	8812      	ldrh	r2, [r2, #0]
 800214c:	4013      	ands	r3, r2
 800214e:	d008      	beq.n	8002162 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002150:	4b06      	ldr	r3, [pc, #24]	; (800216c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002152:	1dba      	adds	r2, r7, #6
 8002154:	8812      	ldrh	r2, [r2, #0]
 8002156:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002158:	1dbb      	adds	r3, r7, #6
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	0018      	movs	r0, r3
 800215e:	f7fe ff43 	bl	8000fe8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	46bd      	mov	sp, r7
 8002166:	b002      	add	sp, #8
 8002168:	bd80      	pop	{r7, pc}
 800216a:	46c0      	nop			; (mov r8, r8)
 800216c:	40010400 	.word	0x40010400

08002170 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002170:	b5b0      	push	{r4, r5, r7, lr}
 8002172:	b08a      	sub	sp, #40	; 0x28
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d102      	bne.n	8002184 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	f000 fbbf 	bl	8002902 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002184:	4bc9      	ldr	r3, [pc, #804]	; (80024ac <HAL_RCC_OscConfig+0x33c>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	220c      	movs	r2, #12
 800218a:	4013      	ands	r3, r2
 800218c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800218e:	4bc7      	ldr	r3, [pc, #796]	; (80024ac <HAL_RCC_OscConfig+0x33c>)
 8002190:	68da      	ldr	r2, [r3, #12]
 8002192:	2380      	movs	r3, #128	; 0x80
 8002194:	025b      	lsls	r3, r3, #9
 8002196:	4013      	ands	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2201      	movs	r2, #1
 80021a0:	4013      	ands	r3, r2
 80021a2:	d100      	bne.n	80021a6 <HAL_RCC_OscConfig+0x36>
 80021a4:	e07e      	b.n	80022a4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d007      	beq.n	80021bc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	2b0c      	cmp	r3, #12
 80021b0:	d112      	bne.n	80021d8 <HAL_RCC_OscConfig+0x68>
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	2380      	movs	r3, #128	; 0x80
 80021b6:	025b      	lsls	r3, r3, #9
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d10d      	bne.n	80021d8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021bc:	4bbb      	ldr	r3, [pc, #748]	; (80024ac <HAL_RCC_OscConfig+0x33c>)
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	2380      	movs	r3, #128	; 0x80
 80021c2:	029b      	lsls	r3, r3, #10
 80021c4:	4013      	ands	r3, r2
 80021c6:	d100      	bne.n	80021ca <HAL_RCC_OscConfig+0x5a>
 80021c8:	e06b      	b.n	80022a2 <HAL_RCC_OscConfig+0x132>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d167      	bne.n	80022a2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	f000 fb95 	bl	8002902 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	2380      	movs	r3, #128	; 0x80
 80021de:	025b      	lsls	r3, r3, #9
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d107      	bne.n	80021f4 <HAL_RCC_OscConfig+0x84>
 80021e4:	4bb1      	ldr	r3, [pc, #708]	; (80024ac <HAL_RCC_OscConfig+0x33c>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	4bb0      	ldr	r3, [pc, #704]	; (80024ac <HAL_RCC_OscConfig+0x33c>)
 80021ea:	2180      	movs	r1, #128	; 0x80
 80021ec:	0249      	lsls	r1, r1, #9
 80021ee:	430a      	orrs	r2, r1
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	e027      	b.n	8002244 <HAL_RCC_OscConfig+0xd4>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	23a0      	movs	r3, #160	; 0xa0
 80021fa:	02db      	lsls	r3, r3, #11
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d10e      	bne.n	800221e <HAL_RCC_OscConfig+0xae>
 8002200:	4baa      	ldr	r3, [pc, #680]	; (80024ac <HAL_RCC_OscConfig+0x33c>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	4ba9      	ldr	r3, [pc, #676]	; (80024ac <HAL_RCC_OscConfig+0x33c>)
 8002206:	2180      	movs	r1, #128	; 0x80
 8002208:	02c9      	lsls	r1, r1, #11
 800220a:	430a      	orrs	r2, r1
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	4ba7      	ldr	r3, [pc, #668]	; (80024ac <HAL_RCC_OscConfig+0x33c>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	4ba6      	ldr	r3, [pc, #664]	; (80024ac <HAL_RCC_OscConfig+0x33c>)
 8002214:	2180      	movs	r1, #128	; 0x80
 8002216:	0249      	lsls	r1, r1, #9
 8002218:	430a      	orrs	r2, r1
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	e012      	b.n	8002244 <HAL_RCC_OscConfig+0xd4>
 800221e:	4ba3      	ldr	r3, [pc, #652]	; (80024ac <HAL_RCC_OscConfig+0x33c>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	4ba2      	ldr	r3, [pc, #648]	; (80024ac <HAL_RCC_OscConfig+0x33c>)
 8002224:	49a2      	ldr	r1, [pc, #648]	; (80024b0 <HAL_RCC_OscConfig+0x340>)
 8002226:	400a      	ands	r2, r1
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	4ba0      	ldr	r3, [pc, #640]	; (80024ac <HAL_RCC_OscConfig+0x33c>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	2380      	movs	r3, #128	; 0x80
 8002230:	025b      	lsls	r3, r3, #9
 8002232:	4013      	ands	r3, r2
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	4b9c      	ldr	r3, [pc, #624]	; (80024ac <HAL_RCC_OscConfig+0x33c>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4b9b      	ldr	r3, [pc, #620]	; (80024ac <HAL_RCC_OscConfig+0x33c>)
 800223e:	499d      	ldr	r1, [pc, #628]	; (80024b4 <HAL_RCC_OscConfig+0x344>)
 8002240:	400a      	ands	r2, r1
 8002242:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d015      	beq.n	8002278 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224c:	f7ff fcb0 	bl	8001bb0 <HAL_GetTick>
 8002250:	0003      	movs	r3, r0
 8002252:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002254:	e009      	b.n	800226a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002256:	f7ff fcab 	bl	8001bb0 <HAL_GetTick>
 800225a:	0002      	movs	r2, r0
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b64      	cmp	r3, #100	; 0x64
 8002262:	d902      	bls.n	800226a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	f000 fb4c 	bl	8002902 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800226a:	4b90      	ldr	r3, [pc, #576]	; (80024ac <HAL_RCC_OscConfig+0x33c>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	2380      	movs	r3, #128	; 0x80
 8002270:	029b      	lsls	r3, r3, #10
 8002272:	4013      	ands	r3, r2
 8002274:	d0ef      	beq.n	8002256 <HAL_RCC_OscConfig+0xe6>
 8002276:	e015      	b.n	80022a4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002278:	f7ff fc9a 	bl	8001bb0 <HAL_GetTick>
 800227c:	0003      	movs	r3, r0
 800227e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002282:	f7ff fc95 	bl	8001bb0 <HAL_GetTick>
 8002286:	0002      	movs	r2, r0
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b64      	cmp	r3, #100	; 0x64
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e336      	b.n	8002902 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002294:	4b85      	ldr	r3, [pc, #532]	; (80024ac <HAL_RCC_OscConfig+0x33c>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	2380      	movs	r3, #128	; 0x80
 800229a:	029b      	lsls	r3, r3, #10
 800229c:	4013      	ands	r3, r2
 800229e:	d1f0      	bne.n	8002282 <HAL_RCC_OscConfig+0x112>
 80022a0:	e000      	b.n	80022a4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2202      	movs	r2, #2
 80022aa:	4013      	ands	r3, r2
 80022ac:	d100      	bne.n	80022b0 <HAL_RCC_OscConfig+0x140>
 80022ae:	e099      	b.n	80023e4 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	2220      	movs	r2, #32
 80022ba:	4013      	ands	r3, r2
 80022bc:	d009      	beq.n	80022d2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80022be:	4b7b      	ldr	r3, [pc, #492]	; (80024ac <HAL_RCC_OscConfig+0x33c>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	4b7a      	ldr	r3, [pc, #488]	; (80024ac <HAL_RCC_OscConfig+0x33c>)
 80022c4:	2120      	movs	r1, #32
 80022c6:	430a      	orrs	r2, r1
 80022c8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	2220      	movs	r2, #32
 80022ce:	4393      	bics	r3, r2
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d005      	beq.n	80022e4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	2b0c      	cmp	r3, #12
 80022dc:	d13e      	bne.n	800235c <HAL_RCC_OscConfig+0x1ec>
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d13b      	bne.n	800235c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80022e4:	4b71      	ldr	r3, [pc, #452]	; (80024ac <HAL_RCC_OscConfig+0x33c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2204      	movs	r2, #4
 80022ea:	4013      	ands	r3, r2
 80022ec:	d004      	beq.n	80022f8 <HAL_RCC_OscConfig+0x188>
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e304      	b.n	8002902 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f8:	4b6c      	ldr	r3, [pc, #432]	; (80024ac <HAL_RCC_OscConfig+0x33c>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	4a6e      	ldr	r2, [pc, #440]	; (80024b8 <HAL_RCC_OscConfig+0x348>)
 80022fe:	4013      	ands	r3, r2
 8002300:	0019      	movs	r1, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	021a      	lsls	r2, r3, #8
 8002308:	4b68      	ldr	r3, [pc, #416]	; (80024ac <HAL_RCC_OscConfig+0x33c>)
 800230a:	430a      	orrs	r2, r1
 800230c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800230e:	4b67      	ldr	r3, [pc, #412]	; (80024ac <HAL_RCC_OscConfig+0x33c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2209      	movs	r2, #9
 8002314:	4393      	bics	r3, r2
 8002316:	0019      	movs	r1, r3
 8002318:	4b64      	ldr	r3, [pc, #400]	; (80024ac <HAL_RCC_OscConfig+0x33c>)
 800231a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800231c:	430a      	orrs	r2, r1
 800231e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002320:	f000 fc42 	bl	8002ba8 <HAL_RCC_GetSysClockFreq>
 8002324:	0001      	movs	r1, r0
 8002326:	4b61      	ldr	r3, [pc, #388]	; (80024ac <HAL_RCC_OscConfig+0x33c>)
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	091b      	lsrs	r3, r3, #4
 800232c:	220f      	movs	r2, #15
 800232e:	4013      	ands	r3, r2
 8002330:	4a62      	ldr	r2, [pc, #392]	; (80024bc <HAL_RCC_OscConfig+0x34c>)
 8002332:	5cd3      	ldrb	r3, [r2, r3]
 8002334:	000a      	movs	r2, r1
 8002336:	40da      	lsrs	r2, r3
 8002338:	4b61      	ldr	r3, [pc, #388]	; (80024c0 <HAL_RCC_OscConfig+0x350>)
 800233a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800233c:	4b61      	ldr	r3, [pc, #388]	; (80024c4 <HAL_RCC_OscConfig+0x354>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2513      	movs	r5, #19
 8002342:	197c      	adds	r4, r7, r5
 8002344:	0018      	movs	r0, r3
 8002346:	f7ff fbed 	bl	8001b24 <HAL_InitTick>
 800234a:	0003      	movs	r3, r0
 800234c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800234e:	197b      	adds	r3, r7, r5
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d046      	beq.n	80023e4 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8002356:	197b      	adds	r3, r7, r5
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	e2d2      	b.n	8002902 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	2b00      	cmp	r3, #0
 8002360:	d027      	beq.n	80023b2 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002362:	4b52      	ldr	r3, [pc, #328]	; (80024ac <HAL_RCC_OscConfig+0x33c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2209      	movs	r2, #9
 8002368:	4393      	bics	r3, r2
 800236a:	0019      	movs	r1, r3
 800236c:	4b4f      	ldr	r3, [pc, #316]	; (80024ac <HAL_RCC_OscConfig+0x33c>)
 800236e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002370:	430a      	orrs	r2, r1
 8002372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002374:	f7ff fc1c 	bl	8001bb0 <HAL_GetTick>
 8002378:	0003      	movs	r3, r0
 800237a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800237e:	f7ff fc17 	bl	8001bb0 <HAL_GetTick>
 8002382:	0002      	movs	r2, r0
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e2b8      	b.n	8002902 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002390:	4b46      	ldr	r3, [pc, #280]	; (80024ac <HAL_RCC_OscConfig+0x33c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2204      	movs	r2, #4
 8002396:	4013      	ands	r3, r2
 8002398:	d0f1      	beq.n	800237e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800239a:	4b44      	ldr	r3, [pc, #272]	; (80024ac <HAL_RCC_OscConfig+0x33c>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	4a46      	ldr	r2, [pc, #280]	; (80024b8 <HAL_RCC_OscConfig+0x348>)
 80023a0:	4013      	ands	r3, r2
 80023a2:	0019      	movs	r1, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	021a      	lsls	r2, r3, #8
 80023aa:	4b40      	ldr	r3, [pc, #256]	; (80024ac <HAL_RCC_OscConfig+0x33c>)
 80023ac:	430a      	orrs	r2, r1
 80023ae:	605a      	str	r2, [r3, #4]
 80023b0:	e018      	b.n	80023e4 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023b2:	4b3e      	ldr	r3, [pc, #248]	; (80024ac <HAL_RCC_OscConfig+0x33c>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	4b3d      	ldr	r3, [pc, #244]	; (80024ac <HAL_RCC_OscConfig+0x33c>)
 80023b8:	2101      	movs	r1, #1
 80023ba:	438a      	bics	r2, r1
 80023bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023be:	f7ff fbf7 	bl	8001bb0 <HAL_GetTick>
 80023c2:	0003      	movs	r3, r0
 80023c4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023c8:	f7ff fbf2 	bl	8001bb0 <HAL_GetTick>
 80023cc:	0002      	movs	r2, r0
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e293      	b.n	8002902 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023da:	4b34      	ldr	r3, [pc, #208]	; (80024ac <HAL_RCC_OscConfig+0x33c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2204      	movs	r2, #4
 80023e0:	4013      	ands	r3, r2
 80023e2:	d1f1      	bne.n	80023c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2210      	movs	r2, #16
 80023ea:	4013      	ands	r3, r2
 80023ec:	d100      	bne.n	80023f0 <HAL_RCC_OscConfig+0x280>
 80023ee:	e0a2      	b.n	8002536 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d140      	bne.n	8002478 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023f6:	4b2d      	ldr	r3, [pc, #180]	; (80024ac <HAL_RCC_OscConfig+0x33c>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	2380      	movs	r3, #128	; 0x80
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4013      	ands	r3, r2
 8002400:	d005      	beq.n	800240e <HAL_RCC_OscConfig+0x29e>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e279      	b.n	8002902 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800240e:	4b27      	ldr	r3, [pc, #156]	; (80024ac <HAL_RCC_OscConfig+0x33c>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	4a2d      	ldr	r2, [pc, #180]	; (80024c8 <HAL_RCC_OscConfig+0x358>)
 8002414:	4013      	ands	r3, r2
 8002416:	0019      	movs	r1, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800241c:	4b23      	ldr	r3, [pc, #140]	; (80024ac <HAL_RCC_OscConfig+0x33c>)
 800241e:	430a      	orrs	r2, r1
 8002420:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002422:	4b22      	ldr	r3, [pc, #136]	; (80024ac <HAL_RCC_OscConfig+0x33c>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	021b      	lsls	r3, r3, #8
 8002428:	0a19      	lsrs	r1, r3, #8
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	061a      	lsls	r2, r3, #24
 8002430:	4b1e      	ldr	r3, [pc, #120]	; (80024ac <HAL_RCC_OscConfig+0x33c>)
 8002432:	430a      	orrs	r2, r1
 8002434:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	0b5b      	lsrs	r3, r3, #13
 800243c:	3301      	adds	r3, #1
 800243e:	2280      	movs	r2, #128	; 0x80
 8002440:	0212      	lsls	r2, r2, #8
 8002442:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002444:	4b19      	ldr	r3, [pc, #100]	; (80024ac <HAL_RCC_OscConfig+0x33c>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	091b      	lsrs	r3, r3, #4
 800244a:	210f      	movs	r1, #15
 800244c:	400b      	ands	r3, r1
 800244e:	491b      	ldr	r1, [pc, #108]	; (80024bc <HAL_RCC_OscConfig+0x34c>)
 8002450:	5ccb      	ldrb	r3, [r1, r3]
 8002452:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002454:	4b1a      	ldr	r3, [pc, #104]	; (80024c0 <HAL_RCC_OscConfig+0x350>)
 8002456:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002458:	4b1a      	ldr	r3, [pc, #104]	; (80024c4 <HAL_RCC_OscConfig+0x354>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2513      	movs	r5, #19
 800245e:	197c      	adds	r4, r7, r5
 8002460:	0018      	movs	r0, r3
 8002462:	f7ff fb5f 	bl	8001b24 <HAL_InitTick>
 8002466:	0003      	movs	r3, r0
 8002468:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800246a:	197b      	adds	r3, r7, r5
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d061      	beq.n	8002536 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8002472:	197b      	adds	r3, r7, r5
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	e244      	b.n	8002902 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	69db      	ldr	r3, [r3, #28]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d040      	beq.n	8002502 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002480:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <HAL_RCC_OscConfig+0x33c>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	4b09      	ldr	r3, [pc, #36]	; (80024ac <HAL_RCC_OscConfig+0x33c>)
 8002486:	2180      	movs	r1, #128	; 0x80
 8002488:	0049      	lsls	r1, r1, #1
 800248a:	430a      	orrs	r2, r1
 800248c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248e:	f7ff fb8f 	bl	8001bb0 <HAL_GetTick>
 8002492:	0003      	movs	r3, r0
 8002494:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002496:	e019      	b.n	80024cc <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002498:	f7ff fb8a 	bl	8001bb0 <HAL_GetTick>
 800249c:	0002      	movs	r2, r0
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d912      	bls.n	80024cc <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e22b      	b.n	8002902 <HAL_RCC_OscConfig+0x792>
 80024aa:	46c0      	nop			; (mov r8, r8)
 80024ac:	40021000 	.word	0x40021000
 80024b0:	fffeffff 	.word	0xfffeffff
 80024b4:	fffbffff 	.word	0xfffbffff
 80024b8:	ffffe0ff 	.word	0xffffe0ff
 80024bc:	08004ea8 	.word	0x08004ea8
 80024c0:	2000000c 	.word	0x2000000c
 80024c4:	20000010 	.word	0x20000010
 80024c8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80024cc:	4bca      	ldr	r3, [pc, #808]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	2380      	movs	r3, #128	; 0x80
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4013      	ands	r3, r2
 80024d6:	d0df      	beq.n	8002498 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024d8:	4bc7      	ldr	r3, [pc, #796]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	4ac7      	ldr	r2, [pc, #796]	; (80027fc <HAL_RCC_OscConfig+0x68c>)
 80024de:	4013      	ands	r3, r2
 80024e0:	0019      	movs	r1, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024e6:	4bc4      	ldr	r3, [pc, #784]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 80024e8:	430a      	orrs	r2, r1
 80024ea:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024ec:	4bc2      	ldr	r3, [pc, #776]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	021b      	lsls	r3, r3, #8
 80024f2:	0a19      	lsrs	r1, r3, #8
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	061a      	lsls	r2, r3, #24
 80024fa:	4bbf      	ldr	r3, [pc, #764]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 80024fc:	430a      	orrs	r2, r1
 80024fe:	605a      	str	r2, [r3, #4]
 8002500:	e019      	b.n	8002536 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002502:	4bbd      	ldr	r3, [pc, #756]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	4bbc      	ldr	r3, [pc, #752]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 8002508:	49bd      	ldr	r1, [pc, #756]	; (8002800 <HAL_RCC_OscConfig+0x690>)
 800250a:	400a      	ands	r2, r1
 800250c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250e:	f7ff fb4f 	bl	8001bb0 <HAL_GetTick>
 8002512:	0003      	movs	r3, r0
 8002514:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002518:	f7ff fb4a 	bl	8001bb0 <HAL_GetTick>
 800251c:	0002      	movs	r2, r0
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e1eb      	b.n	8002902 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800252a:	4bb3      	ldr	r3, [pc, #716]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	2380      	movs	r3, #128	; 0x80
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4013      	ands	r3, r2
 8002534:	d1f0      	bne.n	8002518 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2208      	movs	r2, #8
 800253c:	4013      	ands	r3, r2
 800253e:	d036      	beq.n	80025ae <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d019      	beq.n	800257c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002548:	4bab      	ldr	r3, [pc, #684]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 800254a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800254c:	4baa      	ldr	r3, [pc, #680]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 800254e:	2101      	movs	r1, #1
 8002550:	430a      	orrs	r2, r1
 8002552:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002554:	f7ff fb2c 	bl	8001bb0 <HAL_GetTick>
 8002558:	0003      	movs	r3, r0
 800255a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800255e:	f7ff fb27 	bl	8001bb0 <HAL_GetTick>
 8002562:	0002      	movs	r2, r0
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e1c8      	b.n	8002902 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002570:	4ba1      	ldr	r3, [pc, #644]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 8002572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002574:	2202      	movs	r2, #2
 8002576:	4013      	ands	r3, r2
 8002578:	d0f1      	beq.n	800255e <HAL_RCC_OscConfig+0x3ee>
 800257a:	e018      	b.n	80025ae <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800257c:	4b9e      	ldr	r3, [pc, #632]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 800257e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002580:	4b9d      	ldr	r3, [pc, #628]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 8002582:	2101      	movs	r1, #1
 8002584:	438a      	bics	r2, r1
 8002586:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002588:	f7ff fb12 	bl	8001bb0 <HAL_GetTick>
 800258c:	0003      	movs	r3, r0
 800258e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002592:	f7ff fb0d 	bl	8001bb0 <HAL_GetTick>
 8002596:	0002      	movs	r2, r0
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e1ae      	b.n	8002902 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025a4:	4b94      	ldr	r3, [pc, #592]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 80025a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025a8:	2202      	movs	r2, #2
 80025aa:	4013      	ands	r3, r2
 80025ac:	d1f1      	bne.n	8002592 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2204      	movs	r2, #4
 80025b4:	4013      	ands	r3, r2
 80025b6:	d100      	bne.n	80025ba <HAL_RCC_OscConfig+0x44a>
 80025b8:	e0ae      	b.n	8002718 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ba:	2023      	movs	r0, #35	; 0x23
 80025bc:	183b      	adds	r3, r7, r0
 80025be:	2200      	movs	r2, #0
 80025c0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025c2:	4b8d      	ldr	r3, [pc, #564]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 80025c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025c6:	2380      	movs	r3, #128	; 0x80
 80025c8:	055b      	lsls	r3, r3, #21
 80025ca:	4013      	ands	r3, r2
 80025cc:	d109      	bne.n	80025e2 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ce:	4b8a      	ldr	r3, [pc, #552]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 80025d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025d2:	4b89      	ldr	r3, [pc, #548]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 80025d4:	2180      	movs	r1, #128	; 0x80
 80025d6:	0549      	lsls	r1, r1, #21
 80025d8:	430a      	orrs	r2, r1
 80025da:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80025dc:	183b      	adds	r3, r7, r0
 80025de:	2201      	movs	r2, #1
 80025e0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e2:	4b88      	ldr	r3, [pc, #544]	; (8002804 <HAL_RCC_OscConfig+0x694>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	2380      	movs	r3, #128	; 0x80
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	4013      	ands	r3, r2
 80025ec:	d11a      	bne.n	8002624 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ee:	4b85      	ldr	r3, [pc, #532]	; (8002804 <HAL_RCC_OscConfig+0x694>)
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	4b84      	ldr	r3, [pc, #528]	; (8002804 <HAL_RCC_OscConfig+0x694>)
 80025f4:	2180      	movs	r1, #128	; 0x80
 80025f6:	0049      	lsls	r1, r1, #1
 80025f8:	430a      	orrs	r2, r1
 80025fa:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025fc:	f7ff fad8 	bl	8001bb0 <HAL_GetTick>
 8002600:	0003      	movs	r3, r0
 8002602:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002606:	f7ff fad3 	bl	8001bb0 <HAL_GetTick>
 800260a:	0002      	movs	r2, r0
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b64      	cmp	r3, #100	; 0x64
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e174      	b.n	8002902 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002618:	4b7a      	ldr	r3, [pc, #488]	; (8002804 <HAL_RCC_OscConfig+0x694>)
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	2380      	movs	r3, #128	; 0x80
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	4013      	ands	r3, r2
 8002622:	d0f0      	beq.n	8002606 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	2380      	movs	r3, #128	; 0x80
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	429a      	cmp	r2, r3
 800262e:	d107      	bne.n	8002640 <HAL_RCC_OscConfig+0x4d0>
 8002630:	4b71      	ldr	r3, [pc, #452]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 8002632:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002634:	4b70      	ldr	r3, [pc, #448]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 8002636:	2180      	movs	r1, #128	; 0x80
 8002638:	0049      	lsls	r1, r1, #1
 800263a:	430a      	orrs	r2, r1
 800263c:	651a      	str	r2, [r3, #80]	; 0x50
 800263e:	e031      	b.n	80026a4 <HAL_RCC_OscConfig+0x534>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10c      	bne.n	8002662 <HAL_RCC_OscConfig+0x4f2>
 8002648:	4b6b      	ldr	r3, [pc, #428]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 800264a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800264c:	4b6a      	ldr	r3, [pc, #424]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 800264e:	496c      	ldr	r1, [pc, #432]	; (8002800 <HAL_RCC_OscConfig+0x690>)
 8002650:	400a      	ands	r2, r1
 8002652:	651a      	str	r2, [r3, #80]	; 0x50
 8002654:	4b68      	ldr	r3, [pc, #416]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 8002656:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002658:	4b67      	ldr	r3, [pc, #412]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 800265a:	496b      	ldr	r1, [pc, #428]	; (8002808 <HAL_RCC_OscConfig+0x698>)
 800265c:	400a      	ands	r2, r1
 800265e:	651a      	str	r2, [r3, #80]	; 0x50
 8002660:	e020      	b.n	80026a4 <HAL_RCC_OscConfig+0x534>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689a      	ldr	r2, [r3, #8]
 8002666:	23a0      	movs	r3, #160	; 0xa0
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	429a      	cmp	r2, r3
 800266c:	d10e      	bne.n	800268c <HAL_RCC_OscConfig+0x51c>
 800266e:	4b62      	ldr	r3, [pc, #392]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 8002670:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002672:	4b61      	ldr	r3, [pc, #388]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 8002674:	2180      	movs	r1, #128	; 0x80
 8002676:	00c9      	lsls	r1, r1, #3
 8002678:	430a      	orrs	r2, r1
 800267a:	651a      	str	r2, [r3, #80]	; 0x50
 800267c:	4b5e      	ldr	r3, [pc, #376]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 800267e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002680:	4b5d      	ldr	r3, [pc, #372]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 8002682:	2180      	movs	r1, #128	; 0x80
 8002684:	0049      	lsls	r1, r1, #1
 8002686:	430a      	orrs	r2, r1
 8002688:	651a      	str	r2, [r3, #80]	; 0x50
 800268a:	e00b      	b.n	80026a4 <HAL_RCC_OscConfig+0x534>
 800268c:	4b5a      	ldr	r3, [pc, #360]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 800268e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002690:	4b59      	ldr	r3, [pc, #356]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 8002692:	495b      	ldr	r1, [pc, #364]	; (8002800 <HAL_RCC_OscConfig+0x690>)
 8002694:	400a      	ands	r2, r1
 8002696:	651a      	str	r2, [r3, #80]	; 0x50
 8002698:	4b57      	ldr	r3, [pc, #348]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 800269a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800269c:	4b56      	ldr	r3, [pc, #344]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 800269e:	495a      	ldr	r1, [pc, #360]	; (8002808 <HAL_RCC_OscConfig+0x698>)
 80026a0:	400a      	ands	r2, r1
 80026a2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d015      	beq.n	80026d8 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ac:	f7ff fa80 	bl	8001bb0 <HAL_GetTick>
 80026b0:	0003      	movs	r3, r0
 80026b2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026b4:	e009      	b.n	80026ca <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026b6:	f7ff fa7b 	bl	8001bb0 <HAL_GetTick>
 80026ba:	0002      	movs	r2, r0
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	4a52      	ldr	r2, [pc, #328]	; (800280c <HAL_RCC_OscConfig+0x69c>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e11b      	b.n	8002902 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026ca:	4b4b      	ldr	r3, [pc, #300]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 80026cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026ce:	2380      	movs	r3, #128	; 0x80
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4013      	ands	r3, r2
 80026d4:	d0ef      	beq.n	80026b6 <HAL_RCC_OscConfig+0x546>
 80026d6:	e014      	b.n	8002702 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d8:	f7ff fa6a 	bl	8001bb0 <HAL_GetTick>
 80026dc:	0003      	movs	r3, r0
 80026de:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80026e0:	e009      	b.n	80026f6 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026e2:	f7ff fa65 	bl	8001bb0 <HAL_GetTick>
 80026e6:	0002      	movs	r2, r0
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	4a47      	ldr	r2, [pc, #284]	; (800280c <HAL_RCC_OscConfig+0x69c>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e105      	b.n	8002902 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80026f6:	4b40      	ldr	r3, [pc, #256]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 80026f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026fa:	2380      	movs	r3, #128	; 0x80
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4013      	ands	r3, r2
 8002700:	d1ef      	bne.n	80026e2 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002702:	2323      	movs	r3, #35	; 0x23
 8002704:	18fb      	adds	r3, r7, r3
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d105      	bne.n	8002718 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800270c:	4b3a      	ldr	r3, [pc, #232]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 800270e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002710:	4b39      	ldr	r3, [pc, #228]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 8002712:	493f      	ldr	r1, [pc, #252]	; (8002810 <HAL_RCC_OscConfig+0x6a0>)
 8002714:	400a      	ands	r2, r1
 8002716:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2220      	movs	r2, #32
 800271e:	4013      	ands	r3, r2
 8002720:	d049      	beq.n	80027b6 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d026      	beq.n	8002778 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800272a:	4b33      	ldr	r3, [pc, #204]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	4b32      	ldr	r3, [pc, #200]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 8002730:	2101      	movs	r1, #1
 8002732:	430a      	orrs	r2, r1
 8002734:	609a      	str	r2, [r3, #8]
 8002736:	4b30      	ldr	r3, [pc, #192]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 8002738:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800273a:	4b2f      	ldr	r3, [pc, #188]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 800273c:	2101      	movs	r1, #1
 800273e:	430a      	orrs	r2, r1
 8002740:	635a      	str	r2, [r3, #52]	; 0x34
 8002742:	4b34      	ldr	r3, [pc, #208]	; (8002814 <HAL_RCC_OscConfig+0x6a4>)
 8002744:	6a1a      	ldr	r2, [r3, #32]
 8002746:	4b33      	ldr	r3, [pc, #204]	; (8002814 <HAL_RCC_OscConfig+0x6a4>)
 8002748:	2180      	movs	r1, #128	; 0x80
 800274a:	0189      	lsls	r1, r1, #6
 800274c:	430a      	orrs	r2, r1
 800274e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002750:	f7ff fa2e 	bl	8001bb0 <HAL_GetTick>
 8002754:	0003      	movs	r3, r0
 8002756:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800275a:	f7ff fa29 	bl	8001bb0 <HAL_GetTick>
 800275e:	0002      	movs	r2, r0
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e0ca      	b.n	8002902 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800276c:	4b22      	ldr	r3, [pc, #136]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	2202      	movs	r2, #2
 8002772:	4013      	ands	r3, r2
 8002774:	d0f1      	beq.n	800275a <HAL_RCC_OscConfig+0x5ea>
 8002776:	e01e      	b.n	80027b6 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002778:	4b1f      	ldr	r3, [pc, #124]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	4b1e      	ldr	r3, [pc, #120]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 800277e:	2101      	movs	r1, #1
 8002780:	438a      	bics	r2, r1
 8002782:	609a      	str	r2, [r3, #8]
 8002784:	4b23      	ldr	r3, [pc, #140]	; (8002814 <HAL_RCC_OscConfig+0x6a4>)
 8002786:	6a1a      	ldr	r2, [r3, #32]
 8002788:	4b22      	ldr	r3, [pc, #136]	; (8002814 <HAL_RCC_OscConfig+0x6a4>)
 800278a:	4923      	ldr	r1, [pc, #140]	; (8002818 <HAL_RCC_OscConfig+0x6a8>)
 800278c:	400a      	ands	r2, r1
 800278e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002790:	f7ff fa0e 	bl	8001bb0 <HAL_GetTick>
 8002794:	0003      	movs	r3, r0
 8002796:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800279a:	f7ff fa09 	bl	8001bb0 <HAL_GetTick>
 800279e:	0002      	movs	r2, r0
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e0aa      	b.n	8002902 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027ac:	4b12      	ldr	r3, [pc, #72]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	2202      	movs	r2, #2
 80027b2:	4013      	ands	r3, r2
 80027b4:	d1f1      	bne.n	800279a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d100      	bne.n	80027c0 <HAL_RCC_OscConfig+0x650>
 80027be:	e09f      	b.n	8002900 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	2b0c      	cmp	r3, #12
 80027c4:	d100      	bne.n	80027c8 <HAL_RCC_OscConfig+0x658>
 80027c6:	e078      	b.n	80028ba <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d159      	bne.n	8002884 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d0:	4b09      	ldr	r3, [pc, #36]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	4b08      	ldr	r3, [pc, #32]	; (80027f8 <HAL_RCC_OscConfig+0x688>)
 80027d6:	4911      	ldr	r1, [pc, #68]	; (800281c <HAL_RCC_OscConfig+0x6ac>)
 80027d8:	400a      	ands	r2, r1
 80027da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027dc:	f7ff f9e8 	bl	8001bb0 <HAL_GetTick>
 80027e0:	0003      	movs	r3, r0
 80027e2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80027e4:	e01c      	b.n	8002820 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027e6:	f7ff f9e3 	bl	8001bb0 <HAL_GetTick>
 80027ea:	0002      	movs	r2, r0
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d915      	bls.n	8002820 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e084      	b.n	8002902 <HAL_RCC_OscConfig+0x792>
 80027f8:	40021000 	.word	0x40021000
 80027fc:	ffff1fff 	.word	0xffff1fff
 8002800:	fffffeff 	.word	0xfffffeff
 8002804:	40007000 	.word	0x40007000
 8002808:	fffffbff 	.word	0xfffffbff
 800280c:	00001388 	.word	0x00001388
 8002810:	efffffff 	.word	0xefffffff
 8002814:	40010000 	.word	0x40010000
 8002818:	ffffdfff 	.word	0xffffdfff
 800281c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002820:	4b3a      	ldr	r3, [pc, #232]	; (800290c <HAL_RCC_OscConfig+0x79c>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	2380      	movs	r3, #128	; 0x80
 8002826:	049b      	lsls	r3, r3, #18
 8002828:	4013      	ands	r3, r2
 800282a:	d1dc      	bne.n	80027e6 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800282c:	4b37      	ldr	r3, [pc, #220]	; (800290c <HAL_RCC_OscConfig+0x79c>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	4a37      	ldr	r2, [pc, #220]	; (8002910 <HAL_RCC_OscConfig+0x7a0>)
 8002832:	4013      	ands	r3, r2
 8002834:	0019      	movs	r1, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	431a      	orrs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002844:	431a      	orrs	r2, r3
 8002846:	4b31      	ldr	r3, [pc, #196]	; (800290c <HAL_RCC_OscConfig+0x79c>)
 8002848:	430a      	orrs	r2, r1
 800284a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800284c:	4b2f      	ldr	r3, [pc, #188]	; (800290c <HAL_RCC_OscConfig+0x79c>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4b2e      	ldr	r3, [pc, #184]	; (800290c <HAL_RCC_OscConfig+0x79c>)
 8002852:	2180      	movs	r1, #128	; 0x80
 8002854:	0449      	lsls	r1, r1, #17
 8002856:	430a      	orrs	r2, r1
 8002858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285a:	f7ff f9a9 	bl	8001bb0 <HAL_GetTick>
 800285e:	0003      	movs	r3, r0
 8002860:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002864:	f7ff f9a4 	bl	8001bb0 <HAL_GetTick>
 8002868:	0002      	movs	r2, r0
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e045      	b.n	8002902 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002876:	4b25      	ldr	r3, [pc, #148]	; (800290c <HAL_RCC_OscConfig+0x79c>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	2380      	movs	r3, #128	; 0x80
 800287c:	049b      	lsls	r3, r3, #18
 800287e:	4013      	ands	r3, r2
 8002880:	d0f0      	beq.n	8002864 <HAL_RCC_OscConfig+0x6f4>
 8002882:	e03d      	b.n	8002900 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002884:	4b21      	ldr	r3, [pc, #132]	; (800290c <HAL_RCC_OscConfig+0x79c>)
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	4b20      	ldr	r3, [pc, #128]	; (800290c <HAL_RCC_OscConfig+0x79c>)
 800288a:	4922      	ldr	r1, [pc, #136]	; (8002914 <HAL_RCC_OscConfig+0x7a4>)
 800288c:	400a      	ands	r2, r1
 800288e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002890:	f7ff f98e 	bl	8001bb0 <HAL_GetTick>
 8002894:	0003      	movs	r3, r0
 8002896:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800289a:	f7ff f989 	bl	8001bb0 <HAL_GetTick>
 800289e:	0002      	movs	r2, r0
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e02a      	b.n	8002902 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80028ac:	4b17      	ldr	r3, [pc, #92]	; (800290c <HAL_RCC_OscConfig+0x79c>)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	2380      	movs	r3, #128	; 0x80
 80028b2:	049b      	lsls	r3, r3, #18
 80028b4:	4013      	ands	r3, r2
 80028b6:	d1f0      	bne.n	800289a <HAL_RCC_OscConfig+0x72a>
 80028b8:	e022      	b.n	8002900 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d101      	bne.n	80028c6 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e01d      	b.n	8002902 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028c6:	4b11      	ldr	r3, [pc, #68]	; (800290c <HAL_RCC_OscConfig+0x79c>)
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	2380      	movs	r3, #128	; 0x80
 80028d0:	025b      	lsls	r3, r3, #9
 80028d2:	401a      	ands	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d8:	429a      	cmp	r2, r3
 80028da:	d10f      	bne.n	80028fc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	23f0      	movs	r3, #240	; 0xf0
 80028e0:	039b      	lsls	r3, r3, #14
 80028e2:	401a      	ands	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d107      	bne.n	80028fc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	23c0      	movs	r3, #192	; 0xc0
 80028f0:	041b      	lsls	r3, r3, #16
 80028f2:	401a      	ands	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d001      	beq.n	8002900 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e000      	b.n	8002902 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	0018      	movs	r0, r3
 8002904:	46bd      	mov	sp, r7
 8002906:	b00a      	add	sp, #40	; 0x28
 8002908:	bdb0      	pop	{r4, r5, r7, pc}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	40021000 	.word	0x40021000
 8002910:	ff02ffff 	.word	0xff02ffff
 8002914:	feffffff 	.word	0xfeffffff

08002918 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002918:	b5b0      	push	{r4, r5, r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e128      	b.n	8002b7e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800292c:	4b96      	ldr	r3, [pc, #600]	; (8002b88 <HAL_RCC_ClockConfig+0x270>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2201      	movs	r2, #1
 8002932:	4013      	ands	r3, r2
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	429a      	cmp	r2, r3
 8002938:	d91e      	bls.n	8002978 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293a:	4b93      	ldr	r3, [pc, #588]	; (8002b88 <HAL_RCC_ClockConfig+0x270>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2201      	movs	r2, #1
 8002940:	4393      	bics	r3, r2
 8002942:	0019      	movs	r1, r3
 8002944:	4b90      	ldr	r3, [pc, #576]	; (8002b88 <HAL_RCC_ClockConfig+0x270>)
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800294c:	f7ff f930 	bl	8001bb0 <HAL_GetTick>
 8002950:	0003      	movs	r3, r0
 8002952:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002954:	e009      	b.n	800296a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002956:	f7ff f92b 	bl	8001bb0 <HAL_GetTick>
 800295a:	0002      	movs	r2, r0
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	4a8a      	ldr	r2, [pc, #552]	; (8002b8c <HAL_RCC_ClockConfig+0x274>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d901      	bls.n	800296a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e109      	b.n	8002b7e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800296a:	4b87      	ldr	r3, [pc, #540]	; (8002b88 <HAL_RCC_ClockConfig+0x270>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2201      	movs	r2, #1
 8002970:	4013      	ands	r3, r2
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d1ee      	bne.n	8002956 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2202      	movs	r2, #2
 800297e:	4013      	ands	r3, r2
 8002980:	d009      	beq.n	8002996 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002982:	4b83      	ldr	r3, [pc, #524]	; (8002b90 <HAL_RCC_ClockConfig+0x278>)
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	22f0      	movs	r2, #240	; 0xf0
 8002988:	4393      	bics	r3, r2
 800298a:	0019      	movs	r1, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	4b7f      	ldr	r3, [pc, #508]	; (8002b90 <HAL_RCC_ClockConfig+0x278>)
 8002992:	430a      	orrs	r2, r1
 8002994:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2201      	movs	r2, #1
 800299c:	4013      	ands	r3, r2
 800299e:	d100      	bne.n	80029a2 <HAL_RCC_ClockConfig+0x8a>
 80029a0:	e089      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d107      	bne.n	80029ba <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029aa:	4b79      	ldr	r3, [pc, #484]	; (8002b90 <HAL_RCC_ClockConfig+0x278>)
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	2380      	movs	r3, #128	; 0x80
 80029b0:	029b      	lsls	r3, r3, #10
 80029b2:	4013      	ands	r3, r2
 80029b4:	d120      	bne.n	80029f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e0e1      	b.n	8002b7e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d107      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029c2:	4b73      	ldr	r3, [pc, #460]	; (8002b90 <HAL_RCC_ClockConfig+0x278>)
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	2380      	movs	r3, #128	; 0x80
 80029c8:	049b      	lsls	r3, r3, #18
 80029ca:	4013      	ands	r3, r2
 80029cc:	d114      	bne.n	80029f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e0d5      	b.n	8002b7e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d106      	bne.n	80029e8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029da:	4b6d      	ldr	r3, [pc, #436]	; (8002b90 <HAL_RCC_ClockConfig+0x278>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2204      	movs	r2, #4
 80029e0:	4013      	ands	r3, r2
 80029e2:	d109      	bne.n	80029f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e0ca      	b.n	8002b7e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80029e8:	4b69      	ldr	r3, [pc, #420]	; (8002b90 <HAL_RCC_ClockConfig+0x278>)
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	2380      	movs	r3, #128	; 0x80
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4013      	ands	r3, r2
 80029f2:	d101      	bne.n	80029f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e0c2      	b.n	8002b7e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029f8:	4b65      	ldr	r3, [pc, #404]	; (8002b90 <HAL_RCC_ClockConfig+0x278>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	2203      	movs	r2, #3
 80029fe:	4393      	bics	r3, r2
 8002a00:	0019      	movs	r1, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	4b62      	ldr	r3, [pc, #392]	; (8002b90 <HAL_RCC_ClockConfig+0x278>)
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a0c:	f7ff f8d0 	bl	8001bb0 <HAL_GetTick>
 8002a10:	0003      	movs	r3, r0
 8002a12:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d111      	bne.n	8002a40 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a1c:	e009      	b.n	8002a32 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a1e:	f7ff f8c7 	bl	8001bb0 <HAL_GetTick>
 8002a22:	0002      	movs	r2, r0
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	4a58      	ldr	r2, [pc, #352]	; (8002b8c <HAL_RCC_ClockConfig+0x274>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e0a5      	b.n	8002b7e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a32:	4b57      	ldr	r3, [pc, #348]	; (8002b90 <HAL_RCC_ClockConfig+0x278>)
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	220c      	movs	r2, #12
 8002a38:	4013      	ands	r3, r2
 8002a3a:	2b08      	cmp	r3, #8
 8002a3c:	d1ef      	bne.n	8002a1e <HAL_RCC_ClockConfig+0x106>
 8002a3e:	e03a      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	d111      	bne.n	8002a6c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a48:	e009      	b.n	8002a5e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a4a:	f7ff f8b1 	bl	8001bb0 <HAL_GetTick>
 8002a4e:	0002      	movs	r2, r0
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	4a4d      	ldr	r2, [pc, #308]	; (8002b8c <HAL_RCC_ClockConfig+0x274>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e08f      	b.n	8002b7e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a5e:	4b4c      	ldr	r3, [pc, #304]	; (8002b90 <HAL_RCC_ClockConfig+0x278>)
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	220c      	movs	r2, #12
 8002a64:	4013      	ands	r3, r2
 8002a66:	2b0c      	cmp	r3, #12
 8002a68:	d1ef      	bne.n	8002a4a <HAL_RCC_ClockConfig+0x132>
 8002a6a:	e024      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d11b      	bne.n	8002aac <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a74:	e009      	b.n	8002a8a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a76:	f7ff f89b 	bl	8001bb0 <HAL_GetTick>
 8002a7a:	0002      	movs	r2, r0
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	4a42      	ldr	r2, [pc, #264]	; (8002b8c <HAL_RCC_ClockConfig+0x274>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e079      	b.n	8002b7e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a8a:	4b41      	ldr	r3, [pc, #260]	; (8002b90 <HAL_RCC_ClockConfig+0x278>)
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	220c      	movs	r2, #12
 8002a90:	4013      	ands	r3, r2
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d1ef      	bne.n	8002a76 <HAL_RCC_ClockConfig+0x15e>
 8002a96:	e00e      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a98:	f7ff f88a 	bl	8001bb0 <HAL_GetTick>
 8002a9c:	0002      	movs	r2, r0
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	4a3a      	ldr	r2, [pc, #232]	; (8002b8c <HAL_RCC_ClockConfig+0x274>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e068      	b.n	8002b7e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002aac:	4b38      	ldr	r3, [pc, #224]	; (8002b90 <HAL_RCC_ClockConfig+0x278>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	220c      	movs	r2, #12
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	d1f0      	bne.n	8002a98 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ab6:	4b34      	ldr	r3, [pc, #208]	; (8002b88 <HAL_RCC_ClockConfig+0x270>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2201      	movs	r2, #1
 8002abc:	4013      	ands	r3, r2
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d21e      	bcs.n	8002b02 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac4:	4b30      	ldr	r3, [pc, #192]	; (8002b88 <HAL_RCC_ClockConfig+0x270>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	4393      	bics	r3, r2
 8002acc:	0019      	movs	r1, r3
 8002ace:	4b2e      	ldr	r3, [pc, #184]	; (8002b88 <HAL_RCC_ClockConfig+0x270>)
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ad6:	f7ff f86b 	bl	8001bb0 <HAL_GetTick>
 8002ada:	0003      	movs	r3, r0
 8002adc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ade:	e009      	b.n	8002af4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae0:	f7ff f866 	bl	8001bb0 <HAL_GetTick>
 8002ae4:	0002      	movs	r2, r0
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	4a28      	ldr	r2, [pc, #160]	; (8002b8c <HAL_RCC_ClockConfig+0x274>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e044      	b.n	8002b7e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af4:	4b24      	ldr	r3, [pc, #144]	; (8002b88 <HAL_RCC_ClockConfig+0x270>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2201      	movs	r2, #1
 8002afa:	4013      	ands	r3, r2
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d1ee      	bne.n	8002ae0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2204      	movs	r2, #4
 8002b08:	4013      	ands	r3, r2
 8002b0a:	d009      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b0c:	4b20      	ldr	r3, [pc, #128]	; (8002b90 <HAL_RCC_ClockConfig+0x278>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	4a20      	ldr	r2, [pc, #128]	; (8002b94 <HAL_RCC_ClockConfig+0x27c>)
 8002b12:	4013      	ands	r3, r2
 8002b14:	0019      	movs	r1, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68da      	ldr	r2, [r3, #12]
 8002b1a:	4b1d      	ldr	r3, [pc, #116]	; (8002b90 <HAL_RCC_ClockConfig+0x278>)
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2208      	movs	r2, #8
 8002b26:	4013      	ands	r3, r2
 8002b28:	d00a      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b2a:	4b19      	ldr	r3, [pc, #100]	; (8002b90 <HAL_RCC_ClockConfig+0x278>)
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	4a1a      	ldr	r2, [pc, #104]	; (8002b98 <HAL_RCC_ClockConfig+0x280>)
 8002b30:	4013      	ands	r3, r2
 8002b32:	0019      	movs	r1, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	00da      	lsls	r2, r3, #3
 8002b3a:	4b15      	ldr	r3, [pc, #84]	; (8002b90 <HAL_RCC_ClockConfig+0x278>)
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b40:	f000 f832 	bl	8002ba8 <HAL_RCC_GetSysClockFreq>
 8002b44:	0001      	movs	r1, r0
 8002b46:	4b12      	ldr	r3, [pc, #72]	; (8002b90 <HAL_RCC_ClockConfig+0x278>)
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	091b      	lsrs	r3, r3, #4
 8002b4c:	220f      	movs	r2, #15
 8002b4e:	4013      	ands	r3, r2
 8002b50:	4a12      	ldr	r2, [pc, #72]	; (8002b9c <HAL_RCC_ClockConfig+0x284>)
 8002b52:	5cd3      	ldrb	r3, [r2, r3]
 8002b54:	000a      	movs	r2, r1
 8002b56:	40da      	lsrs	r2, r3
 8002b58:	4b11      	ldr	r3, [pc, #68]	; (8002ba0 <HAL_RCC_ClockConfig+0x288>)
 8002b5a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b5c:	4b11      	ldr	r3, [pc, #68]	; (8002ba4 <HAL_RCC_ClockConfig+0x28c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	250b      	movs	r5, #11
 8002b62:	197c      	adds	r4, r7, r5
 8002b64:	0018      	movs	r0, r3
 8002b66:	f7fe ffdd 	bl	8001b24 <HAL_InitTick>
 8002b6a:	0003      	movs	r3, r0
 8002b6c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002b6e:	197b      	adds	r3, r7, r5
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d002      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002b76:	197b      	adds	r3, r7, r5
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	e000      	b.n	8002b7e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	0018      	movs	r0, r3
 8002b80:	46bd      	mov	sp, r7
 8002b82:	b004      	add	sp, #16
 8002b84:	bdb0      	pop	{r4, r5, r7, pc}
 8002b86:	46c0      	nop			; (mov r8, r8)
 8002b88:	40022000 	.word	0x40022000
 8002b8c:	00001388 	.word	0x00001388
 8002b90:	40021000 	.word	0x40021000
 8002b94:	fffff8ff 	.word	0xfffff8ff
 8002b98:	ffffc7ff 	.word	0xffffc7ff
 8002b9c:	08004ea8 	.word	0x08004ea8
 8002ba0:	2000000c 	.word	0x2000000c
 8002ba4:	20000010 	.word	0x20000010

08002ba8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ba8:	b5b0      	push	{r4, r5, r7, lr}
 8002baa:	b08e      	sub	sp, #56	; 0x38
 8002bac:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002bae:	4b4c      	ldr	r3, [pc, #304]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bb6:	230c      	movs	r3, #12
 8002bb8:	4013      	ands	r3, r2
 8002bba:	2b0c      	cmp	r3, #12
 8002bbc:	d014      	beq.n	8002be8 <HAL_RCC_GetSysClockFreq+0x40>
 8002bbe:	d900      	bls.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x1a>
 8002bc0:	e07b      	b.n	8002cba <HAL_RCC_GetSysClockFreq+0x112>
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	d002      	beq.n	8002bcc <HAL_RCC_GetSysClockFreq+0x24>
 8002bc6:	2b08      	cmp	r3, #8
 8002bc8:	d00b      	beq.n	8002be2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bca:	e076      	b.n	8002cba <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002bcc:	4b44      	ldr	r3, [pc, #272]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2210      	movs	r2, #16
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	d002      	beq.n	8002bdc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002bd6:	4b43      	ldr	r3, [pc, #268]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002bd8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002bda:	e07c      	b.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002bdc:	4b42      	ldr	r3, [pc, #264]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x140>)
 8002bde:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002be0:	e079      	b.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002be2:	4b42      	ldr	r3, [pc, #264]	; (8002cec <HAL_RCC_GetSysClockFreq+0x144>)
 8002be4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002be6:	e076      	b.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bea:	0c9a      	lsrs	r2, r3, #18
 8002bec:	230f      	movs	r3, #15
 8002bee:	401a      	ands	r2, r3
 8002bf0:	4b3f      	ldr	r3, [pc, #252]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x148>)
 8002bf2:	5c9b      	ldrb	r3, [r3, r2]
 8002bf4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf8:	0d9a      	lsrs	r2, r3, #22
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	3301      	adds	r3, #1
 8002c00:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c02:	4b37      	ldr	r3, [pc, #220]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002c04:	68da      	ldr	r2, [r3, #12]
 8002c06:	2380      	movs	r3, #128	; 0x80
 8002c08:	025b      	lsls	r3, r3, #9
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	d01a      	beq.n	8002c44 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c10:	61bb      	str	r3, [r7, #24]
 8002c12:	2300      	movs	r3, #0
 8002c14:	61fb      	str	r3, [r7, #28]
 8002c16:	4a35      	ldr	r2, [pc, #212]	; (8002cec <HAL_RCC_GetSysClockFreq+0x144>)
 8002c18:	2300      	movs	r3, #0
 8002c1a:	69b8      	ldr	r0, [r7, #24]
 8002c1c:	69f9      	ldr	r1, [r7, #28]
 8002c1e:	f7fd fc1b 	bl	8000458 <__aeabi_lmul>
 8002c22:	0002      	movs	r2, r0
 8002c24:	000b      	movs	r3, r1
 8002c26:	0010      	movs	r0, r2
 8002c28:	0019      	movs	r1, r3
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	613b      	str	r3, [r7, #16]
 8002c2e:	2300      	movs	r3, #0
 8002c30:	617b      	str	r3, [r7, #20]
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	f7fd fbef 	bl	8000418 <__aeabi_uldivmod>
 8002c3a:	0002      	movs	r2, r0
 8002c3c:	000b      	movs	r3, r1
 8002c3e:	0013      	movs	r3, r2
 8002c40:	637b      	str	r3, [r7, #52]	; 0x34
 8002c42:	e037      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002c44:	4b26      	ldr	r3, [pc, #152]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2210      	movs	r2, #16
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	d01a      	beq.n	8002c84 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c50:	60bb      	str	r3, [r7, #8]
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	4a23      	ldr	r2, [pc, #140]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002c58:	2300      	movs	r3, #0
 8002c5a:	68b8      	ldr	r0, [r7, #8]
 8002c5c:	68f9      	ldr	r1, [r7, #12]
 8002c5e:	f7fd fbfb 	bl	8000458 <__aeabi_lmul>
 8002c62:	0002      	movs	r2, r0
 8002c64:	000b      	movs	r3, r1
 8002c66:	0010      	movs	r0, r2
 8002c68:	0019      	movs	r1, r3
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	603b      	str	r3, [r7, #0]
 8002c6e:	2300      	movs	r3, #0
 8002c70:	607b      	str	r3, [r7, #4]
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f7fd fbcf 	bl	8000418 <__aeabi_uldivmod>
 8002c7a:	0002      	movs	r2, r0
 8002c7c:	000b      	movs	r3, r1
 8002c7e:	0013      	movs	r3, r2
 8002c80:	637b      	str	r3, [r7, #52]	; 0x34
 8002c82:	e017      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c86:	0018      	movs	r0, r3
 8002c88:	2300      	movs	r3, #0
 8002c8a:	0019      	movs	r1, r3
 8002c8c:	4a16      	ldr	r2, [pc, #88]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x140>)
 8002c8e:	2300      	movs	r3, #0
 8002c90:	f7fd fbe2 	bl	8000458 <__aeabi_lmul>
 8002c94:	0002      	movs	r2, r0
 8002c96:	000b      	movs	r3, r1
 8002c98:	0010      	movs	r0, r2
 8002c9a:	0019      	movs	r1, r3
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9e:	001c      	movs	r4, r3
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	001d      	movs	r5, r3
 8002ca4:	0022      	movs	r2, r4
 8002ca6:	002b      	movs	r3, r5
 8002ca8:	f7fd fbb6 	bl	8000418 <__aeabi_uldivmod>
 8002cac:	0002      	movs	r2, r0
 8002cae:	000b      	movs	r3, r1
 8002cb0:	0013      	movs	r3, r2
 8002cb2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002cb8:	e00d      	b.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002cba:	4b09      	ldr	r3, [pc, #36]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	0b5b      	lsrs	r3, r3, #13
 8002cc0:	2207      	movs	r2, #7
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	2280      	movs	r2, #128	; 0x80
 8002ccc:	0212      	lsls	r2, r2, #8
 8002cce:	409a      	lsls	r2, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002cd4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002cd8:	0018      	movs	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	b00e      	add	sp, #56	; 0x38
 8002cde:	bdb0      	pop	{r4, r5, r7, pc}
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	003d0900 	.word	0x003d0900
 8002ce8:	00f42400 	.word	0x00f42400
 8002cec:	007a1200 	.word	0x007a1200
 8002cf0:	08004ec0 	.word	0x08004ec0

08002cf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cf8:	4b02      	ldr	r3, [pc, #8]	; (8002d04 <HAL_RCC_GetHCLKFreq+0x10>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
}
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	2000000c 	.word	0x2000000c

08002d08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d0c:	f7ff fff2 	bl	8002cf4 <HAL_RCC_GetHCLKFreq>
 8002d10:	0001      	movs	r1, r0
 8002d12:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	0a1b      	lsrs	r3, r3, #8
 8002d18:	2207      	movs	r2, #7
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	4a04      	ldr	r2, [pc, #16]	; (8002d30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d1e:	5cd3      	ldrb	r3, [r2, r3]
 8002d20:	40d9      	lsrs	r1, r3
 8002d22:	000b      	movs	r3, r1
}
 8002d24:	0018      	movs	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	08004eb8 	.word	0x08004eb8

08002d34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d38:	f7ff ffdc 	bl	8002cf4 <HAL_RCC_GetHCLKFreq>
 8002d3c:	0001      	movs	r1, r0
 8002d3e:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	0adb      	lsrs	r3, r3, #11
 8002d44:	2207      	movs	r2, #7
 8002d46:	4013      	ands	r3, r2
 8002d48:	4a04      	ldr	r2, [pc, #16]	; (8002d5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d4a:	5cd3      	ldrb	r3, [r2, r3]
 8002d4c:	40d9      	lsrs	r1, r3
 8002d4e:	000b      	movs	r3, r1
}
 8002d50:	0018      	movs	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	08004eb8 	.word	0x08004eb8

08002d60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e083      	b.n	8002e7a <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d109      	bne.n	8002d8e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	2382      	movs	r3, #130	; 0x82
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d009      	beq.n	8002d9a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	61da      	str	r2, [r3, #28]
 8002d8c:	e005      	b.n	8002d9a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2251      	movs	r2, #81	; 0x51
 8002da4:	5c9b      	ldrb	r3, [r3, r2]
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d107      	bne.n	8002dbc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2250      	movs	r2, #80	; 0x50
 8002db0:	2100      	movs	r1, #0
 8002db2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	0018      	movs	r0, r3
 8002db8:	f7fe f9d6 	bl	8001168 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2251      	movs	r2, #81	; 0x51
 8002dc0:	2102      	movs	r1, #2
 8002dc2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2140      	movs	r1, #64	; 0x40
 8002dd0:	438a      	bics	r2, r1
 8002dd2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	2382      	movs	r3, #130	; 0x82
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	401a      	ands	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6899      	ldr	r1, [r3, #8]
 8002de2:	2384      	movs	r3, #132	; 0x84
 8002de4:	021b      	lsls	r3, r3, #8
 8002de6:	400b      	ands	r3, r1
 8002de8:	431a      	orrs	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68d9      	ldr	r1, [r3, #12]
 8002dee:	2380      	movs	r3, #128	; 0x80
 8002df0:	011b      	lsls	r3, r3, #4
 8002df2:	400b      	ands	r3, r1
 8002df4:	431a      	orrs	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	2102      	movs	r1, #2
 8002dfc:	400b      	ands	r3, r1
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	2101      	movs	r1, #1
 8002e06:	400b      	ands	r3, r1
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6999      	ldr	r1, [r3, #24]
 8002e0e:	2380      	movs	r3, #128	; 0x80
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	400b      	ands	r3, r1
 8002e14:	431a      	orrs	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	2138      	movs	r1, #56	; 0x38
 8002e1c:	400b      	ands	r3, r1
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	2180      	movs	r1, #128	; 0x80
 8002e26:	400b      	ands	r3, r1
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	0011      	movs	r1, r2
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e30:	2380      	movs	r3, #128	; 0x80
 8002e32:	019b      	lsls	r3, r3, #6
 8002e34:	401a      	ands	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	0c1b      	lsrs	r3, r3, #16
 8002e44:	2204      	movs	r2, #4
 8002e46:	4013      	ands	r3, r2
 8002e48:	0019      	movs	r1, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4e:	2210      	movs	r2, #16
 8002e50:	401a      	ands	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	69da      	ldr	r2, [r3, #28]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4907      	ldr	r1, [pc, #28]	; (8002e84 <HAL_SPI_Init+0x124>)
 8002e66:	400a      	ands	r2, r1
 8002e68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2251      	movs	r2, #81	; 0x51
 8002e74:	2101      	movs	r1, #1
 8002e76:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	b002      	add	sp, #8
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	fffff7ff 	.word	0xfffff7ff

08002e88 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b088      	sub	sp, #32
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	603b      	str	r3, [r7, #0]
 8002e94:	1dbb      	adds	r3, r7, #6
 8002e96:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e98:	231f      	movs	r3, #31
 8002e9a:	18fb      	adds	r3, r7, r3
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2250      	movs	r2, #80	; 0x50
 8002ea4:	5c9b      	ldrb	r3, [r3, r2]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d101      	bne.n	8002eae <HAL_SPI_Transmit+0x26>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e13e      	b.n	800312c <HAL_SPI_Transmit+0x2a4>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2250      	movs	r2, #80	; 0x50
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002eb6:	f7fe fe7b 	bl	8001bb0 <HAL_GetTick>
 8002eba:	0003      	movs	r3, r0
 8002ebc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002ebe:	2316      	movs	r3, #22
 8002ec0:	18fb      	adds	r3, r7, r3
 8002ec2:	1dba      	adds	r2, r7, #6
 8002ec4:	8812      	ldrh	r2, [r2, #0]
 8002ec6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2251      	movs	r2, #81	; 0x51
 8002ecc:	5c9b      	ldrb	r3, [r3, r2]
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d004      	beq.n	8002ede <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002ed4:	231f      	movs	r3, #31
 8002ed6:	18fb      	adds	r3, r7, r3
 8002ed8:	2202      	movs	r2, #2
 8002eda:	701a      	strb	r2, [r3, #0]
    goto error;
 8002edc:	e11b      	b.n	8003116 <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <HAL_SPI_Transmit+0x64>
 8002ee4:	1dbb      	adds	r3, r7, #6
 8002ee6:	881b      	ldrh	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d104      	bne.n	8002ef6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002eec:	231f      	movs	r3, #31
 8002eee:	18fb      	adds	r3, r7, r3
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	701a      	strb	r2, [r3, #0]
    goto error;
 8002ef4:	e10f      	b.n	8003116 <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2251      	movs	r2, #81	; 0x51
 8002efa:	2103      	movs	r1, #3
 8002efc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	1dba      	adds	r2, r7, #6
 8002f0e:	8812      	ldrh	r2, [r2, #0]
 8002f10:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	1dba      	adds	r2, r7, #6
 8002f16:	8812      	ldrh	r2, [r2, #0]
 8002f18:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	2380      	movs	r3, #128	; 0x80
 8002f3e:	021b      	lsls	r3, r3, #8
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d110      	bne.n	8002f66 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2140      	movs	r1, #64	; 0x40
 8002f50:	438a      	bics	r2, r1
 8002f52:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2180      	movs	r1, #128	; 0x80
 8002f60:	01c9      	lsls	r1, r1, #7
 8002f62:	430a      	orrs	r2, r1
 8002f64:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2240      	movs	r2, #64	; 0x40
 8002f6e:	4013      	ands	r3, r2
 8002f70:	2b40      	cmp	r3, #64	; 0x40
 8002f72:	d007      	beq.n	8002f84 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2140      	movs	r1, #64	; 0x40
 8002f80:	430a      	orrs	r2, r1
 8002f82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	68da      	ldr	r2, [r3, #12]
 8002f88:	2380      	movs	r3, #128	; 0x80
 8002f8a:	011b      	lsls	r3, r3, #4
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d14e      	bne.n	800302e <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d004      	beq.n	8002fa2 <HAL_SPI_Transmit+0x11a>
 8002f98:	2316      	movs	r3, #22
 8002f9a:	18fb      	adds	r3, r7, r3
 8002f9c:	881b      	ldrh	r3, [r3, #0]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d13f      	bne.n	8003022 <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	881a      	ldrh	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	1c9a      	adds	r2, r3, #2
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002fc6:	e02c      	b.n	8003022 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	2202      	movs	r2, #2
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d112      	bne.n	8002ffc <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	881a      	ldrh	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	1c9a      	adds	r2, r3, #2
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ffa:	e012      	b.n	8003022 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ffc:	f7fe fdd8 	bl	8001bb0 <HAL_GetTick>
 8003000:	0002      	movs	r2, r0
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	429a      	cmp	r2, r3
 800300a:	d802      	bhi.n	8003012 <HAL_SPI_Transmit+0x18a>
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	3301      	adds	r3, #1
 8003010:	d102      	bne.n	8003018 <HAL_SPI_Transmit+0x190>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d104      	bne.n	8003022 <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 8003018:	231f      	movs	r3, #31
 800301a:	18fb      	adds	r3, r7, r3
 800301c:	2203      	movs	r2, #3
 800301e:	701a      	strb	r2, [r3, #0]
          goto error;
 8003020:	e079      	b.n	8003116 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003026:	b29b      	uxth	r3, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1cd      	bne.n	8002fc8 <HAL_SPI_Transmit+0x140>
 800302c:	e04f      	b.n	80030ce <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d004      	beq.n	8003040 <HAL_SPI_Transmit+0x1b8>
 8003036:	2316      	movs	r3, #22
 8003038:	18fb      	adds	r3, r7, r3
 800303a:	881b      	ldrh	r3, [r3, #0]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d141      	bne.n	80030c4 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	330c      	adds	r3, #12
 800304a:	7812      	ldrb	r2, [r2, #0]
 800304c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003052:	1c5a      	adds	r2, r3, #1
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800305c:	b29b      	uxth	r3, r3
 800305e:	3b01      	subs	r3, #1
 8003060:	b29a      	uxth	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003066:	e02d      	b.n	80030c4 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	2202      	movs	r2, #2
 8003070:	4013      	ands	r3, r2
 8003072:	2b02      	cmp	r3, #2
 8003074:	d113      	bne.n	800309e <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	330c      	adds	r3, #12
 8003080:	7812      	ldrb	r2, [r2, #0]
 8003082:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003088:	1c5a      	adds	r2, r3, #1
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003092:	b29b      	uxth	r3, r3
 8003094:	3b01      	subs	r3, #1
 8003096:	b29a      	uxth	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	86da      	strh	r2, [r3, #54]	; 0x36
 800309c:	e012      	b.n	80030c4 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800309e:	f7fe fd87 	bl	8001bb0 <HAL_GetTick>
 80030a2:	0002      	movs	r2, r0
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d802      	bhi.n	80030b4 <HAL_SPI_Transmit+0x22c>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	3301      	adds	r3, #1
 80030b2:	d102      	bne.n	80030ba <HAL_SPI_Transmit+0x232>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d104      	bne.n	80030c4 <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 80030ba:	231f      	movs	r3, #31
 80030bc:	18fb      	adds	r3, r7, r3
 80030be:	2203      	movs	r2, #3
 80030c0:	701a      	strb	r2, [r3, #0]
          goto error;
 80030c2:	e028      	b.n	8003116 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1cc      	bne.n	8003068 <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	6839      	ldr	r1, [r7, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	0018      	movs	r0, r3
 80030d6:	f000 fc07 	bl	80038e8 <SPI_EndRxTxTransaction>
 80030da:	1e03      	subs	r3, r0, #0
 80030dc:	d002      	beq.n	80030e4 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2220      	movs	r2, #32
 80030e2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10a      	bne.n	8003102 <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030ec:	2300      	movs	r3, #0
 80030ee:	613b      	str	r3, [r7, #16]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	613b      	str	r3, [r7, #16]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	613b      	str	r3, [r7, #16]
 8003100:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003106:	2b00      	cmp	r3, #0
 8003108:	d004      	beq.n	8003114 <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 800310a:	231f      	movs	r3, #31
 800310c:	18fb      	adds	r3, r7, r3
 800310e:	2201      	movs	r2, #1
 8003110:	701a      	strb	r2, [r3, #0]
 8003112:	e000      	b.n	8003116 <HAL_SPI_Transmit+0x28e>
  }

error:
 8003114:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2251      	movs	r2, #81	; 0x51
 800311a:	2101      	movs	r1, #1
 800311c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2250      	movs	r2, #80	; 0x50
 8003122:	2100      	movs	r1, #0
 8003124:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003126:	231f      	movs	r3, #31
 8003128:	18fb      	adds	r3, r7, r3
 800312a:	781b      	ldrb	r3, [r3, #0]
}
 800312c:	0018      	movs	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	b008      	add	sp, #32
 8003132:	bd80      	pop	{r7, pc}

08003134 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003134:	b590      	push	{r4, r7, lr}
 8003136:	b089      	sub	sp, #36	; 0x24
 8003138:	af02      	add	r7, sp, #8
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	603b      	str	r3, [r7, #0]
 8003140:	1dbb      	adds	r3, r7, #6
 8003142:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003144:	2317      	movs	r3, #23
 8003146:	18fb      	adds	r3, r7, r3
 8003148:	2200      	movs	r2, #0
 800314a:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	2382      	movs	r3, #130	; 0x82
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	429a      	cmp	r2, r3
 8003156:	d113      	bne.n	8003180 <HAL_SPI_Receive+0x4c>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10f      	bne.n	8003180 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2251      	movs	r2, #81	; 0x51
 8003164:	2104      	movs	r1, #4
 8003166:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003168:	1dbb      	adds	r3, r7, #6
 800316a:	881c      	ldrh	r4, [r3, #0]
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	68b9      	ldr	r1, [r7, #8]
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	0023      	movs	r3, r4
 8003178:	f000 f902 	bl	8003380 <HAL_SPI_TransmitReceive>
 800317c:	0003      	movs	r3, r0
 800317e:	e0f9      	b.n	8003374 <HAL_SPI_Receive+0x240>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2250      	movs	r2, #80	; 0x50
 8003184:	5c9b      	ldrb	r3, [r3, r2]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d101      	bne.n	800318e <HAL_SPI_Receive+0x5a>
 800318a:	2302      	movs	r3, #2
 800318c:	e0f2      	b.n	8003374 <HAL_SPI_Receive+0x240>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2250      	movs	r2, #80	; 0x50
 8003192:	2101      	movs	r1, #1
 8003194:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003196:	f7fe fd0b 	bl	8001bb0 <HAL_GetTick>
 800319a:	0003      	movs	r3, r0
 800319c:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2251      	movs	r2, #81	; 0x51
 80031a2:	5c9b      	ldrb	r3, [r3, r2]
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d004      	beq.n	80031b4 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 80031aa:	2317      	movs	r3, #23
 80031ac:	18fb      	adds	r3, r7, r3
 80031ae:	2202      	movs	r2, #2
 80031b0:	701a      	strb	r2, [r3, #0]
    goto error;
 80031b2:	e0d4      	b.n	800335e <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_SPI_Receive+0x8e>
 80031ba:	1dbb      	adds	r3, r7, #6
 80031bc:	881b      	ldrh	r3, [r3, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d104      	bne.n	80031cc <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80031c2:	2317      	movs	r3, #23
 80031c4:	18fb      	adds	r3, r7, r3
 80031c6:	2201      	movs	r2, #1
 80031c8:	701a      	strb	r2, [r3, #0]
    goto error;
 80031ca:	e0c8      	b.n	800335e <HAL_SPI_Receive+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2251      	movs	r2, #81	; 0x51
 80031d0:	2104      	movs	r1, #4
 80031d2:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	68ba      	ldr	r2, [r7, #8]
 80031de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	1dba      	adds	r2, r7, #6
 80031e4:	8812      	ldrh	r2, [r2, #0]
 80031e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	1dba      	adds	r2, r7, #6
 80031ec:	8812      	ldrh	r2, [r2, #0]
 80031ee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	689a      	ldr	r2, [r3, #8]
 8003212:	2380      	movs	r3, #128	; 0x80
 8003214:	021b      	lsls	r3, r3, #8
 8003216:	429a      	cmp	r2, r3
 8003218:	d10f      	bne.n	800323a <HAL_SPI_Receive+0x106>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2140      	movs	r1, #64	; 0x40
 8003226:	438a      	bics	r2, r1
 8003228:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4951      	ldr	r1, [pc, #324]	; (800337c <HAL_SPI_Receive+0x248>)
 8003236:	400a      	ands	r2, r1
 8003238:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2240      	movs	r2, #64	; 0x40
 8003242:	4013      	ands	r3, r2
 8003244:	2b40      	cmp	r3, #64	; 0x40
 8003246:	d007      	beq.n	8003258 <HAL_SPI_Receive+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2140      	movs	r1, #64	; 0x40
 8003254:	430a      	orrs	r2, r1
 8003256:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d164      	bne.n	800332a <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003260:	e02f      	b.n	80032c2 <HAL_SPI_Receive+0x18e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	2201      	movs	r2, #1
 800326a:	4013      	ands	r3, r2
 800326c:	2b01      	cmp	r3, #1
 800326e:	d115      	bne.n	800329c <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	330c      	adds	r3, #12
 8003276:	001a      	movs	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327c:	7812      	ldrb	r2, [r2, #0]
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003286:	1c5a      	adds	r2, r3, #1
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003290:	b29b      	uxth	r3, r3
 8003292:	3b01      	subs	r3, #1
 8003294:	b29a      	uxth	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	87da      	strh	r2, [r3, #62]	; 0x3e
 800329a:	e012      	b.n	80032c2 <HAL_SPI_Receive+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800329c:	f7fe fc88 	bl	8001bb0 <HAL_GetTick>
 80032a0:	0002      	movs	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d802      	bhi.n	80032b2 <HAL_SPI_Receive+0x17e>
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	3301      	adds	r3, #1
 80032b0:	d102      	bne.n	80032b8 <HAL_SPI_Receive+0x184>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d104      	bne.n	80032c2 <HAL_SPI_Receive+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 80032b8:	2317      	movs	r3, #23
 80032ba:	18fb      	adds	r3, r7, r3
 80032bc:	2203      	movs	r2, #3
 80032be:	701a      	strb	r2, [r3, #0]
          goto error;
 80032c0:	e04d      	b.n	800335e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1ca      	bne.n	8003262 <HAL_SPI_Receive+0x12e>
 80032cc:	e032      	b.n	8003334 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	2201      	movs	r2, #1
 80032d6:	4013      	ands	r3, r2
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d113      	bne.n	8003304 <HAL_SPI_Receive+0x1d0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e6:	b292      	uxth	r2, r2
 80032e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ee:	1c9a      	adds	r2, r3, #2
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	3b01      	subs	r3, #1
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003302:	e012      	b.n	800332a <HAL_SPI_Receive+0x1f6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003304:	f7fe fc54 	bl	8001bb0 <HAL_GetTick>
 8003308:	0002      	movs	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	429a      	cmp	r2, r3
 8003312:	d802      	bhi.n	800331a <HAL_SPI_Receive+0x1e6>
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	3301      	adds	r3, #1
 8003318:	d102      	bne.n	8003320 <HAL_SPI_Receive+0x1ec>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d104      	bne.n	800332a <HAL_SPI_Receive+0x1f6>
        {
          errorcode = HAL_TIMEOUT;
 8003320:	2317      	movs	r3, #23
 8003322:	18fb      	adds	r3, r7, r3
 8003324:	2203      	movs	r2, #3
 8003326:	701a      	strb	r2, [r3, #0]
          goto error;
 8003328:	e019      	b.n	800335e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800332e:	b29b      	uxth	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1cc      	bne.n	80032ce <HAL_SPI_Receive+0x19a>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	6839      	ldr	r1, [r7, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	0018      	movs	r0, r3
 800333c:	f000 fa6a 	bl	8003814 <SPI_EndRxTransaction>
 8003340:	1e03      	subs	r3, r0, #0
 8003342:	d002      	beq.n	800334a <HAL_SPI_Receive+0x216>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2220      	movs	r2, #32
 8003348:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800334e:	2b00      	cmp	r3, #0
 8003350:	d004      	beq.n	800335c <HAL_SPI_Receive+0x228>
  {
    errorcode = HAL_ERROR;
 8003352:	2317      	movs	r3, #23
 8003354:	18fb      	adds	r3, r7, r3
 8003356:	2201      	movs	r2, #1
 8003358:	701a      	strb	r2, [r3, #0]
 800335a:	e000      	b.n	800335e <HAL_SPI_Receive+0x22a>
  }

error :
 800335c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2251      	movs	r2, #81	; 0x51
 8003362:	2101      	movs	r1, #1
 8003364:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2250      	movs	r2, #80	; 0x50
 800336a:	2100      	movs	r1, #0
 800336c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800336e:	2317      	movs	r3, #23
 8003370:	18fb      	adds	r3, r7, r3
 8003372:	781b      	ldrb	r3, [r3, #0]
}
 8003374:	0018      	movs	r0, r3
 8003376:	46bd      	mov	sp, r7
 8003378:	b007      	add	sp, #28
 800337a:	bd90      	pop	{r4, r7, pc}
 800337c:	ffffbfff 	.word	0xffffbfff

08003380 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b08c      	sub	sp, #48	; 0x30
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
 800338c:	001a      	movs	r2, r3
 800338e:	1cbb      	adds	r3, r7, #2
 8003390:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003392:	2301      	movs	r3, #1
 8003394:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003396:	232b      	movs	r3, #43	; 0x2b
 8003398:	18fb      	adds	r3, r7, r3
 800339a:	2200      	movs	r2, #0
 800339c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2250      	movs	r2, #80	; 0x50
 80033a2:	5c9b      	ldrb	r3, [r3, r2]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d101      	bne.n	80033ac <HAL_SPI_TransmitReceive+0x2c>
 80033a8:	2302      	movs	r3, #2
 80033aa:	e1a0      	b.n	80036ee <HAL_SPI_TransmitReceive+0x36e>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2250      	movs	r2, #80	; 0x50
 80033b0:	2101      	movs	r1, #1
 80033b2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033b4:	f7fe fbfc 	bl	8001bb0 <HAL_GetTick>
 80033b8:	0003      	movs	r3, r0
 80033ba:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80033bc:	2023      	movs	r0, #35	; 0x23
 80033be:	183b      	adds	r3, r7, r0
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	2151      	movs	r1, #81	; 0x51
 80033c4:	5c52      	ldrb	r2, [r2, r1]
 80033c6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80033ce:	231a      	movs	r3, #26
 80033d0:	18fb      	adds	r3, r7, r3
 80033d2:	1cba      	adds	r2, r7, #2
 80033d4:	8812      	ldrh	r2, [r2, #0]
 80033d6:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80033d8:	183b      	adds	r3, r7, r0
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d011      	beq.n	8003404 <HAL_SPI_TransmitReceive+0x84>
 80033e0:	69fa      	ldr	r2, [r7, #28]
 80033e2:	2382      	movs	r3, #130	; 0x82
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d107      	bne.n	80033fa <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d103      	bne.n	80033fa <HAL_SPI_TransmitReceive+0x7a>
 80033f2:	183b      	adds	r3, r7, r0
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	d004      	beq.n	8003404 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80033fa:	232b      	movs	r3, #43	; 0x2b
 80033fc:	18fb      	adds	r3, r7, r3
 80033fe:	2202      	movs	r2, #2
 8003400:	701a      	strb	r2, [r3, #0]
    goto error;
 8003402:	e169      	b.n	80036d8 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d006      	beq.n	8003418 <HAL_SPI_TransmitReceive+0x98>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <HAL_SPI_TransmitReceive+0x98>
 8003410:	1cbb      	adds	r3, r7, #2
 8003412:	881b      	ldrh	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d104      	bne.n	8003422 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003418:	232b      	movs	r3, #43	; 0x2b
 800341a:	18fb      	adds	r3, r7, r3
 800341c:	2201      	movs	r2, #1
 800341e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003420:	e15a      	b.n	80036d8 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2251      	movs	r2, #81	; 0x51
 8003426:	5c9b      	ldrb	r3, [r3, r2]
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b04      	cmp	r3, #4
 800342c:	d003      	beq.n	8003436 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2251      	movs	r2, #81	; 0x51
 8003432:	2105      	movs	r1, #5
 8003434:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	1cba      	adds	r2, r7, #2
 8003446:	8812      	ldrh	r2, [r2, #0]
 8003448:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	1cba      	adds	r2, r7, #2
 800344e:	8812      	ldrh	r2, [r2, #0]
 8003450:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	1cba      	adds	r2, r7, #2
 800345c:	8812      	ldrh	r2, [r2, #0]
 800345e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	1cba      	adds	r2, r7, #2
 8003464:	8812      	ldrh	r2, [r2, #0]
 8003466:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2240      	movs	r2, #64	; 0x40
 800347c:	4013      	ands	r3, r2
 800347e:	2b40      	cmp	r3, #64	; 0x40
 8003480:	d007      	beq.n	8003492 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2140      	movs	r1, #64	; 0x40
 800348e:	430a      	orrs	r2, r1
 8003490:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	68da      	ldr	r2, [r3, #12]
 8003496:	2380      	movs	r3, #128	; 0x80
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	429a      	cmp	r2, r3
 800349c:	d000      	beq.n	80034a0 <HAL_SPI_TransmitReceive+0x120>
 800349e:	e07a      	b.n	8003596 <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d004      	beq.n	80034b2 <HAL_SPI_TransmitReceive+0x132>
 80034a8:	231a      	movs	r3, #26
 80034aa:	18fb      	adds	r3, r7, r3
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d166      	bne.n	8003580 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	881a      	ldrh	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c2:	1c9a      	adds	r2, r3, #2
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	3b01      	subs	r3, #1
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034d6:	e053      	b.n	8003580 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	2202      	movs	r2, #2
 80034e0:	4013      	ands	r3, r2
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d11b      	bne.n	800351e <HAL_SPI_TransmitReceive+0x19e>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d016      	beq.n	800351e <HAL_SPI_TransmitReceive+0x19e>
 80034f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d113      	bne.n	800351e <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	881a      	ldrh	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	1c9a      	adds	r2, r3, #2
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003510:	b29b      	uxth	r3, r3
 8003512:	3b01      	subs	r3, #1
 8003514:	b29a      	uxth	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800351a:	2300      	movs	r3, #0
 800351c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2201      	movs	r2, #1
 8003526:	4013      	ands	r3, r2
 8003528:	2b01      	cmp	r3, #1
 800352a:	d119      	bne.n	8003560 <HAL_SPI_TransmitReceive+0x1e0>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003530:	b29b      	uxth	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d014      	beq.n	8003560 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68da      	ldr	r2, [r3, #12]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003540:	b292      	uxth	r2, r2
 8003542:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003548:	1c9a      	adds	r2, r3, #2
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003552:	b29b      	uxth	r3, r3
 8003554:	3b01      	subs	r3, #1
 8003556:	b29a      	uxth	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800355c:	2301      	movs	r3, #1
 800355e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003560:	f7fe fb26 	bl	8001bb0 <HAL_GetTick>
 8003564:	0002      	movs	r2, r0
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800356c:	429a      	cmp	r2, r3
 800356e:	d807      	bhi.n	8003580 <HAL_SPI_TransmitReceive+0x200>
 8003570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003572:	3301      	adds	r3, #1
 8003574:	d004      	beq.n	8003580 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 8003576:	232b      	movs	r3, #43	; 0x2b
 8003578:	18fb      	adds	r3, r7, r3
 800357a:	2203      	movs	r2, #3
 800357c:	701a      	strb	r2, [r3, #0]
        goto error;
 800357e:	e0ab      	b.n	80036d8 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003584:	b29b      	uxth	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1a6      	bne.n	80034d8 <HAL_SPI_TransmitReceive+0x158>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800358e:	b29b      	uxth	r3, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1a1      	bne.n	80034d8 <HAL_SPI_TransmitReceive+0x158>
 8003594:	e07f      	b.n	8003696 <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d005      	beq.n	80035aa <HAL_SPI_TransmitReceive+0x22a>
 800359e:	231a      	movs	r3, #26
 80035a0:	18fb      	adds	r3, r7, r3
 80035a2:	881b      	ldrh	r3, [r3, #0]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d000      	beq.n	80035aa <HAL_SPI_TransmitReceive+0x22a>
 80035a8:	e06b      	b.n	8003682 <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	330c      	adds	r3, #12
 80035b4:	7812      	ldrb	r2, [r2, #0]
 80035b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035bc:	1c5a      	adds	r2, r3, #1
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	3b01      	subs	r3, #1
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035d0:	e057      	b.n	8003682 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	2202      	movs	r2, #2
 80035da:	4013      	ands	r3, r2
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d11c      	bne.n	800361a <HAL_SPI_TransmitReceive+0x29a>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d017      	beq.n	800361a <HAL_SPI_TransmitReceive+0x29a>
 80035ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d114      	bne.n	800361a <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	330c      	adds	r3, #12
 80035fa:	7812      	ldrb	r2, [r2, #0]
 80035fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	1c5a      	adds	r2, r3, #1
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800360c:	b29b      	uxth	r3, r3
 800360e:	3b01      	subs	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003616:	2300      	movs	r3, #0
 8003618:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	2201      	movs	r2, #1
 8003622:	4013      	ands	r3, r2
 8003624:	2b01      	cmp	r3, #1
 8003626:	d119      	bne.n	800365c <HAL_SPI_TransmitReceive+0x2dc>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800362c:	b29b      	uxth	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d014      	beq.n	800365c <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68da      	ldr	r2, [r3, #12]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003644:	1c5a      	adds	r2, r3, #1
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800364e:	b29b      	uxth	r3, r3
 8003650:	3b01      	subs	r3, #1
 8003652:	b29a      	uxth	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003658:	2301      	movs	r3, #1
 800365a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800365c:	f7fe faa8 	bl	8001bb0 <HAL_GetTick>
 8003660:	0002      	movs	r2, r0
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003668:	429a      	cmp	r2, r3
 800366a:	d802      	bhi.n	8003672 <HAL_SPI_TransmitReceive+0x2f2>
 800366c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366e:	3301      	adds	r3, #1
 8003670:	d102      	bne.n	8003678 <HAL_SPI_TransmitReceive+0x2f8>
 8003672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003674:	2b00      	cmp	r3, #0
 8003676:	d104      	bne.n	8003682 <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 8003678:	232b      	movs	r3, #43	; 0x2b
 800367a:	18fb      	adds	r3, r7, r3
 800367c:	2203      	movs	r2, #3
 800367e:	701a      	strb	r2, [r3, #0]
        goto error;
 8003680:	e02a      	b.n	80036d8 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003686:	b29b      	uxth	r3, r3
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1a2      	bne.n	80035d2 <HAL_SPI_TransmitReceive+0x252>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003690:	b29b      	uxth	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d19d      	bne.n	80035d2 <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003698:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	0018      	movs	r0, r3
 800369e:	f000 f923 	bl	80038e8 <SPI_EndRxTxTransaction>
 80036a2:	1e03      	subs	r3, r0, #0
 80036a4:	d007      	beq.n	80036b6 <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 80036a6:	232b      	movs	r3, #43	; 0x2b
 80036a8:	18fb      	adds	r3, r7, r3
 80036aa:	2201      	movs	r2, #1
 80036ac:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2220      	movs	r2, #32
 80036b2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80036b4:	e010      	b.n	80036d8 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10b      	bne.n	80036d6 <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036be:	2300      	movs	r3, #0
 80036c0:	617b      	str	r3, [r7, #20]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	617b      	str	r3, [r7, #20]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	617b      	str	r3, [r7, #20]
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	e000      	b.n	80036d8 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 80036d6:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2251      	movs	r2, #81	; 0x51
 80036dc:	2101      	movs	r1, #1
 80036de:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2250      	movs	r2, #80	; 0x50
 80036e4:	2100      	movs	r1, #0
 80036e6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80036e8:	232b      	movs	r3, #43	; 0x2b
 80036ea:	18fb      	adds	r3, r7, r3
 80036ec:	781b      	ldrb	r3, [r3, #0]
}
 80036ee:	0018      	movs	r0, r3
 80036f0:	46bd      	mov	sp, r7
 80036f2:	b00c      	add	sp, #48	; 0x30
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b088      	sub	sp, #32
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	603b      	str	r3, [r7, #0]
 8003704:	1dfb      	adds	r3, r7, #7
 8003706:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003708:	f7fe fa52 	bl	8001bb0 <HAL_GetTick>
 800370c:	0002      	movs	r2, r0
 800370e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003710:	1a9b      	subs	r3, r3, r2
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	18d3      	adds	r3, r2, r3
 8003716:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003718:	f7fe fa4a 	bl	8001bb0 <HAL_GetTick>
 800371c:	0003      	movs	r3, r0
 800371e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003720:	4b3a      	ldr	r3, [pc, #232]	; (800380c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	015b      	lsls	r3, r3, #5
 8003726:	0d1b      	lsrs	r3, r3, #20
 8003728:	69fa      	ldr	r2, [r7, #28]
 800372a:	4353      	muls	r3, r2
 800372c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800372e:	e058      	b.n	80037e2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	3301      	adds	r3, #1
 8003734:	d055      	beq.n	80037e2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003736:	f7fe fa3b 	bl	8001bb0 <HAL_GetTick>
 800373a:	0002      	movs	r2, r0
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	69fa      	ldr	r2, [r7, #28]
 8003742:	429a      	cmp	r2, r3
 8003744:	d902      	bls.n	800374c <SPI_WaitFlagStateUntilTimeout+0x54>
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d142      	bne.n	80037d2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	21e0      	movs	r1, #224	; 0xe0
 8003758:	438a      	bics	r2, r1
 800375a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	2382      	movs	r3, #130	; 0x82
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	429a      	cmp	r2, r3
 8003766:	d113      	bne.n	8003790 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	2380      	movs	r3, #128	; 0x80
 800376e:	021b      	lsls	r3, r3, #8
 8003770:	429a      	cmp	r2, r3
 8003772:	d005      	beq.n	8003780 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	2380      	movs	r3, #128	; 0x80
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	429a      	cmp	r2, r3
 800377e:	d107      	bne.n	8003790 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2140      	movs	r1, #64	; 0x40
 800378c:	438a      	bics	r2, r1
 800378e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003794:	2380      	movs	r3, #128	; 0x80
 8003796:	019b      	lsls	r3, r3, #6
 8003798:	429a      	cmp	r2, r3
 800379a:	d110      	bne.n	80037be <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	491a      	ldr	r1, [pc, #104]	; (8003810 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80037a8:	400a      	ands	r2, r1
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2180      	movs	r1, #128	; 0x80
 80037b8:	0189      	lsls	r1, r1, #6
 80037ba:	430a      	orrs	r2, r1
 80037bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2251      	movs	r2, #81	; 0x51
 80037c2:	2101      	movs	r1, #1
 80037c4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2250      	movs	r2, #80	; 0x50
 80037ca:	2100      	movs	r1, #0
 80037cc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e017      	b.n	8003802 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80037d8:	2300      	movs	r3, #0
 80037da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	3b01      	subs	r3, #1
 80037e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	4013      	ands	r3, r2
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	425a      	negs	r2, r3
 80037f2:	4153      	adcs	r3, r2
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	001a      	movs	r2, r3
 80037f8:	1dfb      	adds	r3, r7, #7
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d197      	bne.n	8003730 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	0018      	movs	r0, r3
 8003804:	46bd      	mov	sp, r7
 8003806:	b008      	add	sp, #32
 8003808:	bd80      	pop	{r7, pc}
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	2000000c 	.word	0x2000000c
 8003810:	ffffdfff 	.word	0xffffdfff

08003814 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af02      	add	r7, sp, #8
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	2382      	movs	r3, #130	; 0x82
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	429a      	cmp	r2, r3
 800382a:	d113      	bne.n	8003854 <SPI_EndRxTransaction+0x40>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	2380      	movs	r3, #128	; 0x80
 8003832:	021b      	lsls	r3, r3, #8
 8003834:	429a      	cmp	r2, r3
 8003836:	d005      	beq.n	8003844 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	2380      	movs	r3, #128	; 0x80
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	429a      	cmp	r2, r3
 8003842:	d107      	bne.n	8003854 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2140      	movs	r1, #64	; 0x40
 8003850:	438a      	bics	r2, r1
 8003852:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	2382      	movs	r3, #130	; 0x82
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	429a      	cmp	r2, r3
 800385e:	d12b      	bne.n	80038b8 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	2380      	movs	r3, #128	; 0x80
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	429a      	cmp	r2, r3
 800386a:	d012      	beq.n	8003892 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	0013      	movs	r3, r2
 8003876:	2200      	movs	r2, #0
 8003878:	2180      	movs	r1, #128	; 0x80
 800387a:	f7ff ff3d 	bl	80036f8 <SPI_WaitFlagStateUntilTimeout>
 800387e:	1e03      	subs	r3, r0, #0
 8003880:	d02d      	beq.n	80038de <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003886:	2220      	movs	r2, #32
 8003888:	431a      	orrs	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e026      	b.n	80038e0 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	9300      	str	r3, [sp, #0]
 800389a:	0013      	movs	r3, r2
 800389c:	2200      	movs	r2, #0
 800389e:	2101      	movs	r1, #1
 80038a0:	f7ff ff2a 	bl	80036f8 <SPI_WaitFlagStateUntilTimeout>
 80038a4:	1e03      	subs	r3, r0, #0
 80038a6:	d01a      	beq.n	80038de <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ac:	2220      	movs	r2, #32
 80038ae:	431a      	orrs	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e013      	b.n	80038e0 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	0013      	movs	r3, r2
 80038c2:	2200      	movs	r2, #0
 80038c4:	2101      	movs	r1, #1
 80038c6:	f7ff ff17 	bl	80036f8 <SPI_WaitFlagStateUntilTimeout>
 80038ca:	1e03      	subs	r3, r0, #0
 80038cc:	d007      	beq.n	80038de <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d2:	2220      	movs	r2, #32
 80038d4:	431a      	orrs	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e000      	b.n	80038e0 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	0018      	movs	r0, r3
 80038e2:	46bd      	mov	sp, r7
 80038e4:	b004      	add	sp, #16
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b088      	sub	sp, #32
 80038ec:	af02      	add	r7, sp, #8
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80038f4:	4b1d      	ldr	r3, [pc, #116]	; (800396c <SPI_EndRxTxTransaction+0x84>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	491d      	ldr	r1, [pc, #116]	; (8003970 <SPI_EndRxTxTransaction+0x88>)
 80038fa:	0018      	movs	r0, r3
 80038fc:	f7fc fc16 	bl	800012c <__udivsi3>
 8003900:	0003      	movs	r3, r0
 8003902:	001a      	movs	r2, r3
 8003904:	0013      	movs	r3, r2
 8003906:	015b      	lsls	r3, r3, #5
 8003908:	1a9b      	subs	r3, r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	189b      	adds	r3, r3, r2
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	2382      	movs	r3, #130	; 0x82
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	429a      	cmp	r2, r3
 800391c:	d112      	bne.n	8003944 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	0013      	movs	r3, r2
 8003928:	2200      	movs	r2, #0
 800392a:	2180      	movs	r1, #128	; 0x80
 800392c:	f7ff fee4 	bl	80036f8 <SPI_WaitFlagStateUntilTimeout>
 8003930:	1e03      	subs	r3, r0, #0
 8003932:	d016      	beq.n	8003962 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003938:	2220      	movs	r2, #32
 800393a:	431a      	orrs	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e00f      	b.n	8003964 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00a      	beq.n	8003960 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	3b01      	subs	r3, #1
 800394e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	2280      	movs	r2, #128	; 0x80
 8003958:	4013      	ands	r3, r2
 800395a:	2b80      	cmp	r3, #128	; 0x80
 800395c:	d0f2      	beq.n	8003944 <SPI_EndRxTxTransaction+0x5c>
 800395e:	e000      	b.n	8003962 <SPI_EndRxTxTransaction+0x7a>
        break;
 8003960:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	0018      	movs	r0, r3
 8003966:	46bd      	mov	sp, r7
 8003968:	b006      	add	sp, #24
 800396a:	bd80      	pop	{r7, pc}
 800396c:	2000000c 	.word	0x2000000c
 8003970:	016e3600 	.word	0x016e3600

08003974 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e044      	b.n	8003a10 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800398a:	2b00      	cmp	r3, #0
 800398c:	d107      	bne.n	800399e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2274      	movs	r2, #116	; 0x74
 8003992:	2100      	movs	r1, #0
 8003994:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	0018      	movs	r0, r3
 800399a:	f7fd fc29 	bl	80011f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2224      	movs	r2, #36	; 0x24
 80039a2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2101      	movs	r1, #1
 80039b0:	438a      	bics	r2, r1
 80039b2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	0018      	movs	r0, r3
 80039b8:	f000 f8d8 	bl	8003b6c <UART_SetConfig>
 80039bc:	0003      	movs	r3, r0
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d101      	bne.n	80039c6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e024      	b.n	8003a10 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	0018      	movs	r0, r3
 80039d2:	f000 fb89 	bl	80040e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	490d      	ldr	r1, [pc, #52]	; (8003a18 <HAL_UART_Init+0xa4>)
 80039e2:	400a      	ands	r2, r1
 80039e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	212a      	movs	r1, #42	; 0x2a
 80039f2:	438a      	bics	r2, r1
 80039f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2101      	movs	r1, #1
 8003a02:	430a      	orrs	r2, r1
 8003a04:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	0018      	movs	r0, r3
 8003a0a:	f000 fc21 	bl	8004250 <UART_CheckIdleState>
 8003a0e:	0003      	movs	r3, r0
}
 8003a10:	0018      	movs	r0, r3
 8003a12:	46bd      	mov	sp, r7
 8003a14:	b002      	add	sp, #8
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	ffffb7ff 	.word	0xffffb7ff

08003a1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b08a      	sub	sp, #40	; 0x28
 8003a20:	af02      	add	r7, sp, #8
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	603b      	str	r3, [r7, #0]
 8003a28:	1dbb      	adds	r3, r7, #6
 8003a2a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a30:	2b20      	cmp	r3, #32
 8003a32:	d000      	beq.n	8003a36 <HAL_UART_Transmit+0x1a>
 8003a34:	e095      	b.n	8003b62 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <HAL_UART_Transmit+0x28>
 8003a3c:	1dbb      	adds	r3, r7, #6
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e08d      	b.n	8003b64 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	2380      	movs	r3, #128	; 0x80
 8003a4e:	015b      	lsls	r3, r3, #5
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d109      	bne.n	8003a68 <HAL_UART_Transmit+0x4c>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d105      	bne.n	8003a68 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	4013      	ands	r3, r2
 8003a62:	d001      	beq.n	8003a68 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e07d      	b.n	8003b64 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2274      	movs	r2, #116	; 0x74
 8003a6c:	5c9b      	ldrb	r3, [r3, r2]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d101      	bne.n	8003a76 <HAL_UART_Transmit+0x5a>
 8003a72:	2302      	movs	r3, #2
 8003a74:	e076      	b.n	8003b64 <HAL_UART_Transmit+0x148>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2274      	movs	r2, #116	; 0x74
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2280      	movs	r2, #128	; 0x80
 8003a82:	2100      	movs	r1, #0
 8003a84:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2221      	movs	r2, #33	; 0x21
 8003a8a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a8c:	f7fe f890 	bl	8001bb0 <HAL_GetTick>
 8003a90:	0003      	movs	r3, r0
 8003a92:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	1dba      	adds	r2, r7, #6
 8003a98:	2150      	movs	r1, #80	; 0x50
 8003a9a:	8812      	ldrh	r2, [r2, #0]
 8003a9c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	1dba      	adds	r2, r7, #6
 8003aa2:	2152      	movs	r1, #82	; 0x52
 8003aa4:	8812      	ldrh	r2, [r2, #0]
 8003aa6:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	2380      	movs	r3, #128	; 0x80
 8003aae:	015b      	lsls	r3, r3, #5
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d108      	bne.n	8003ac6 <HAL_UART_Transmit+0xaa>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d104      	bne.n	8003ac6 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003abc:	2300      	movs	r3, #0
 8003abe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	61bb      	str	r3, [r7, #24]
 8003ac4:	e003      	b.n	8003ace <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003aca:	2300      	movs	r3, #0
 8003acc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2274      	movs	r2, #116	; 0x74
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003ad6:	e02c      	b.n	8003b32 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	0013      	movs	r3, r2
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	2180      	movs	r1, #128	; 0x80
 8003ae6:	f000 fbfb 	bl	80042e0 <UART_WaitOnFlagUntilTimeout>
 8003aea:	1e03      	subs	r3, r0, #0
 8003aec:	d001      	beq.n	8003af2 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e038      	b.n	8003b64 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10b      	bne.n	8003b10 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	001a      	movs	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	05d2      	lsls	r2, r2, #23
 8003b04:	0dd2      	lsrs	r2, r2, #23
 8003b06:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	3302      	adds	r3, #2
 8003b0c:	61bb      	str	r3, [r7, #24]
 8003b0e:	e007      	b.n	8003b20 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	781a      	ldrb	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2252      	movs	r2, #82	; 0x52
 8003b24:	5a9b      	ldrh	r3, [r3, r2]
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	b299      	uxth	r1, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2252      	movs	r2, #82	; 0x52
 8003b30:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2252      	movs	r2, #82	; 0x52
 8003b36:	5a9b      	ldrh	r3, [r3, r2]
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1cc      	bne.n	8003ad8 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	0013      	movs	r3, r2
 8003b48:	2200      	movs	r2, #0
 8003b4a:	2140      	movs	r1, #64	; 0x40
 8003b4c:	f000 fbc8 	bl	80042e0 <UART_WaitOnFlagUntilTimeout>
 8003b50:	1e03      	subs	r3, r0, #0
 8003b52:	d001      	beq.n	8003b58 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e005      	b.n	8003b64 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	e000      	b.n	8003b64 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8003b62:	2302      	movs	r3, #2
  }
}
 8003b64:	0018      	movs	r0, r3
 8003b66:	46bd      	mov	sp, r7
 8003b68:	b008      	add	sp, #32
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b6c:	b5b0      	push	{r4, r5, r7, lr}
 8003b6e:	b08e      	sub	sp, #56	; 0x38
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b74:	231a      	movs	r3, #26
 8003b76:	2218      	movs	r2, #24
 8003b78:	4694      	mov	ip, r2
 8003b7a:	44bc      	add	ip, r7
 8003b7c:	4463      	add	r3, ip
 8003b7e:	2200      	movs	r2, #0
 8003b80:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	431a      	orrs	r2, r3
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4ab0      	ldr	r2, [pc, #704]	; (8003e64 <UART_SetConfig+0x2f8>)
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	0019      	movs	r1, r3
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bac:	430a      	orrs	r2, r1
 8003bae:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	4aac      	ldr	r2, [pc, #688]	; (8003e68 <UART_SetConfig+0x2fc>)
 8003bb8:	4013      	ands	r3, r2
 8003bba:	0019      	movs	r1, r3
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	68da      	ldr	r2, [r3, #12]
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4aa6      	ldr	r2, [pc, #664]	; (8003e6c <UART_SetConfig+0x300>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d004      	beq.n	8003be2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bde:	4313      	orrs	r3, r2
 8003be0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	4aa1      	ldr	r2, [pc, #644]	; (8003e70 <UART_SetConfig+0x304>)
 8003bea:	4013      	ands	r3, r2
 8003bec:	0019      	movs	r1, r3
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a9d      	ldr	r2, [pc, #628]	; (8003e74 <UART_SetConfig+0x308>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d136      	bne.n	8003c70 <UART_SetConfig+0x104>
 8003c02:	4b9d      	ldr	r3, [pc, #628]	; (8003e78 <UART_SetConfig+0x30c>)
 8003c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c06:	2203      	movs	r2, #3
 8003c08:	4013      	ands	r3, r2
 8003c0a:	2b03      	cmp	r3, #3
 8003c0c:	d020      	beq.n	8003c50 <UART_SetConfig+0xe4>
 8003c0e:	d827      	bhi.n	8003c60 <UART_SetConfig+0xf4>
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d00d      	beq.n	8003c30 <UART_SetConfig+0xc4>
 8003c14:	d824      	bhi.n	8003c60 <UART_SetConfig+0xf4>
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d002      	beq.n	8003c20 <UART_SetConfig+0xb4>
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d010      	beq.n	8003c40 <UART_SetConfig+0xd4>
 8003c1e:	e01f      	b.n	8003c60 <UART_SetConfig+0xf4>
 8003c20:	231b      	movs	r3, #27
 8003c22:	2218      	movs	r2, #24
 8003c24:	4694      	mov	ip, r2
 8003c26:	44bc      	add	ip, r7
 8003c28:	4463      	add	r3, ip
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	701a      	strb	r2, [r3, #0]
 8003c2e:	e0c5      	b.n	8003dbc <UART_SetConfig+0x250>
 8003c30:	231b      	movs	r3, #27
 8003c32:	2218      	movs	r2, #24
 8003c34:	4694      	mov	ip, r2
 8003c36:	44bc      	add	ip, r7
 8003c38:	4463      	add	r3, ip
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	701a      	strb	r2, [r3, #0]
 8003c3e:	e0bd      	b.n	8003dbc <UART_SetConfig+0x250>
 8003c40:	231b      	movs	r3, #27
 8003c42:	2218      	movs	r2, #24
 8003c44:	4694      	mov	ip, r2
 8003c46:	44bc      	add	ip, r7
 8003c48:	4463      	add	r3, ip
 8003c4a:	2204      	movs	r2, #4
 8003c4c:	701a      	strb	r2, [r3, #0]
 8003c4e:	e0b5      	b.n	8003dbc <UART_SetConfig+0x250>
 8003c50:	231b      	movs	r3, #27
 8003c52:	2218      	movs	r2, #24
 8003c54:	4694      	mov	ip, r2
 8003c56:	44bc      	add	ip, r7
 8003c58:	4463      	add	r3, ip
 8003c5a:	2208      	movs	r2, #8
 8003c5c:	701a      	strb	r2, [r3, #0]
 8003c5e:	e0ad      	b.n	8003dbc <UART_SetConfig+0x250>
 8003c60:	231b      	movs	r3, #27
 8003c62:	2218      	movs	r2, #24
 8003c64:	4694      	mov	ip, r2
 8003c66:	44bc      	add	ip, r7
 8003c68:	4463      	add	r3, ip
 8003c6a:	2210      	movs	r2, #16
 8003c6c:	701a      	strb	r2, [r3, #0]
 8003c6e:	e0a5      	b.n	8003dbc <UART_SetConfig+0x250>
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a81      	ldr	r2, [pc, #516]	; (8003e7c <UART_SetConfig+0x310>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d136      	bne.n	8003ce8 <UART_SetConfig+0x17c>
 8003c7a:	4b7f      	ldr	r3, [pc, #508]	; (8003e78 <UART_SetConfig+0x30c>)
 8003c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c7e:	220c      	movs	r2, #12
 8003c80:	4013      	ands	r3, r2
 8003c82:	2b0c      	cmp	r3, #12
 8003c84:	d020      	beq.n	8003cc8 <UART_SetConfig+0x15c>
 8003c86:	d827      	bhi.n	8003cd8 <UART_SetConfig+0x16c>
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d00d      	beq.n	8003ca8 <UART_SetConfig+0x13c>
 8003c8c:	d824      	bhi.n	8003cd8 <UART_SetConfig+0x16c>
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d002      	beq.n	8003c98 <UART_SetConfig+0x12c>
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d010      	beq.n	8003cb8 <UART_SetConfig+0x14c>
 8003c96:	e01f      	b.n	8003cd8 <UART_SetConfig+0x16c>
 8003c98:	231b      	movs	r3, #27
 8003c9a:	2218      	movs	r2, #24
 8003c9c:	4694      	mov	ip, r2
 8003c9e:	44bc      	add	ip, r7
 8003ca0:	4463      	add	r3, ip
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	701a      	strb	r2, [r3, #0]
 8003ca6:	e089      	b.n	8003dbc <UART_SetConfig+0x250>
 8003ca8:	231b      	movs	r3, #27
 8003caa:	2218      	movs	r2, #24
 8003cac:	4694      	mov	ip, r2
 8003cae:	44bc      	add	ip, r7
 8003cb0:	4463      	add	r3, ip
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	701a      	strb	r2, [r3, #0]
 8003cb6:	e081      	b.n	8003dbc <UART_SetConfig+0x250>
 8003cb8:	231b      	movs	r3, #27
 8003cba:	2218      	movs	r2, #24
 8003cbc:	4694      	mov	ip, r2
 8003cbe:	44bc      	add	ip, r7
 8003cc0:	4463      	add	r3, ip
 8003cc2:	2204      	movs	r2, #4
 8003cc4:	701a      	strb	r2, [r3, #0]
 8003cc6:	e079      	b.n	8003dbc <UART_SetConfig+0x250>
 8003cc8:	231b      	movs	r3, #27
 8003cca:	2218      	movs	r2, #24
 8003ccc:	4694      	mov	ip, r2
 8003cce:	44bc      	add	ip, r7
 8003cd0:	4463      	add	r3, ip
 8003cd2:	2208      	movs	r2, #8
 8003cd4:	701a      	strb	r2, [r3, #0]
 8003cd6:	e071      	b.n	8003dbc <UART_SetConfig+0x250>
 8003cd8:	231b      	movs	r3, #27
 8003cda:	2218      	movs	r2, #24
 8003cdc:	4694      	mov	ip, r2
 8003cde:	44bc      	add	ip, r7
 8003ce0:	4463      	add	r3, ip
 8003ce2:	2210      	movs	r2, #16
 8003ce4:	701a      	strb	r2, [r3, #0]
 8003ce6:	e069      	b.n	8003dbc <UART_SetConfig+0x250>
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a64      	ldr	r2, [pc, #400]	; (8003e80 <UART_SetConfig+0x314>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d107      	bne.n	8003d02 <UART_SetConfig+0x196>
 8003cf2:	231b      	movs	r3, #27
 8003cf4:	2218      	movs	r2, #24
 8003cf6:	4694      	mov	ip, r2
 8003cf8:	44bc      	add	ip, r7
 8003cfa:	4463      	add	r3, ip
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	701a      	strb	r2, [r3, #0]
 8003d00:	e05c      	b.n	8003dbc <UART_SetConfig+0x250>
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a5f      	ldr	r2, [pc, #380]	; (8003e84 <UART_SetConfig+0x318>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d107      	bne.n	8003d1c <UART_SetConfig+0x1b0>
 8003d0c:	231b      	movs	r3, #27
 8003d0e:	2218      	movs	r2, #24
 8003d10:	4694      	mov	ip, r2
 8003d12:	44bc      	add	ip, r7
 8003d14:	4463      	add	r3, ip
 8003d16:	2200      	movs	r2, #0
 8003d18:	701a      	strb	r2, [r3, #0]
 8003d1a:	e04f      	b.n	8003dbc <UART_SetConfig+0x250>
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a52      	ldr	r2, [pc, #328]	; (8003e6c <UART_SetConfig+0x300>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d143      	bne.n	8003dae <UART_SetConfig+0x242>
 8003d26:	4b54      	ldr	r3, [pc, #336]	; (8003e78 <UART_SetConfig+0x30c>)
 8003d28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d2a:	23c0      	movs	r3, #192	; 0xc0
 8003d2c:	011b      	lsls	r3, r3, #4
 8003d2e:	4013      	ands	r3, r2
 8003d30:	22c0      	movs	r2, #192	; 0xc0
 8003d32:	0112      	lsls	r2, r2, #4
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d02a      	beq.n	8003d8e <UART_SetConfig+0x222>
 8003d38:	22c0      	movs	r2, #192	; 0xc0
 8003d3a:	0112      	lsls	r2, r2, #4
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d82e      	bhi.n	8003d9e <UART_SetConfig+0x232>
 8003d40:	2280      	movs	r2, #128	; 0x80
 8003d42:	0112      	lsls	r2, r2, #4
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d012      	beq.n	8003d6e <UART_SetConfig+0x202>
 8003d48:	2280      	movs	r2, #128	; 0x80
 8003d4a:	0112      	lsls	r2, r2, #4
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d826      	bhi.n	8003d9e <UART_SetConfig+0x232>
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d004      	beq.n	8003d5e <UART_SetConfig+0x1f2>
 8003d54:	2280      	movs	r2, #128	; 0x80
 8003d56:	00d2      	lsls	r2, r2, #3
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d010      	beq.n	8003d7e <UART_SetConfig+0x212>
 8003d5c:	e01f      	b.n	8003d9e <UART_SetConfig+0x232>
 8003d5e:	231b      	movs	r3, #27
 8003d60:	2218      	movs	r2, #24
 8003d62:	4694      	mov	ip, r2
 8003d64:	44bc      	add	ip, r7
 8003d66:	4463      	add	r3, ip
 8003d68:	2200      	movs	r2, #0
 8003d6a:	701a      	strb	r2, [r3, #0]
 8003d6c:	e026      	b.n	8003dbc <UART_SetConfig+0x250>
 8003d6e:	231b      	movs	r3, #27
 8003d70:	2218      	movs	r2, #24
 8003d72:	4694      	mov	ip, r2
 8003d74:	44bc      	add	ip, r7
 8003d76:	4463      	add	r3, ip
 8003d78:	2202      	movs	r2, #2
 8003d7a:	701a      	strb	r2, [r3, #0]
 8003d7c:	e01e      	b.n	8003dbc <UART_SetConfig+0x250>
 8003d7e:	231b      	movs	r3, #27
 8003d80:	2218      	movs	r2, #24
 8003d82:	4694      	mov	ip, r2
 8003d84:	44bc      	add	ip, r7
 8003d86:	4463      	add	r3, ip
 8003d88:	2204      	movs	r2, #4
 8003d8a:	701a      	strb	r2, [r3, #0]
 8003d8c:	e016      	b.n	8003dbc <UART_SetConfig+0x250>
 8003d8e:	231b      	movs	r3, #27
 8003d90:	2218      	movs	r2, #24
 8003d92:	4694      	mov	ip, r2
 8003d94:	44bc      	add	ip, r7
 8003d96:	4463      	add	r3, ip
 8003d98:	2208      	movs	r2, #8
 8003d9a:	701a      	strb	r2, [r3, #0]
 8003d9c:	e00e      	b.n	8003dbc <UART_SetConfig+0x250>
 8003d9e:	231b      	movs	r3, #27
 8003da0:	2218      	movs	r2, #24
 8003da2:	4694      	mov	ip, r2
 8003da4:	44bc      	add	ip, r7
 8003da6:	4463      	add	r3, ip
 8003da8:	2210      	movs	r2, #16
 8003daa:	701a      	strb	r2, [r3, #0]
 8003dac:	e006      	b.n	8003dbc <UART_SetConfig+0x250>
 8003dae:	231b      	movs	r3, #27
 8003db0:	2218      	movs	r2, #24
 8003db2:	4694      	mov	ip, r2
 8003db4:	44bc      	add	ip, r7
 8003db6:	4463      	add	r3, ip
 8003db8:	2210      	movs	r2, #16
 8003dba:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a2a      	ldr	r2, [pc, #168]	; (8003e6c <UART_SetConfig+0x300>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d000      	beq.n	8003dc8 <UART_SetConfig+0x25c>
 8003dc6:	e09e      	b.n	8003f06 <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003dc8:	231b      	movs	r3, #27
 8003dca:	2218      	movs	r2, #24
 8003dcc:	4694      	mov	ip, r2
 8003dce:	44bc      	add	ip, r7
 8003dd0:	4463      	add	r3, ip
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	2b08      	cmp	r3, #8
 8003dd6:	d01d      	beq.n	8003e14 <UART_SetConfig+0x2a8>
 8003dd8:	dc20      	bgt.n	8003e1c <UART_SetConfig+0x2b0>
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d015      	beq.n	8003e0a <UART_SetConfig+0x29e>
 8003dde:	dc1d      	bgt.n	8003e1c <UART_SetConfig+0x2b0>
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d002      	beq.n	8003dea <UART_SetConfig+0x27e>
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d005      	beq.n	8003df4 <UART_SetConfig+0x288>
 8003de8:	e018      	b.n	8003e1c <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dea:	f7fe ff8d 	bl	8002d08 <HAL_RCC_GetPCLK1Freq>
 8003dee:	0003      	movs	r3, r0
 8003df0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003df2:	e01d      	b.n	8003e30 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003df4:	4b20      	ldr	r3, [pc, #128]	; (8003e78 <UART_SetConfig+0x30c>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2210      	movs	r2, #16
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	d002      	beq.n	8003e04 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003dfe:	4b22      	ldr	r3, [pc, #136]	; (8003e88 <UART_SetConfig+0x31c>)
 8003e00:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003e02:	e015      	b.n	8003e30 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 8003e04:	4b21      	ldr	r3, [pc, #132]	; (8003e8c <UART_SetConfig+0x320>)
 8003e06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e08:	e012      	b.n	8003e30 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e0a:	f7fe fecd 	bl	8002ba8 <HAL_RCC_GetSysClockFreq>
 8003e0e:	0003      	movs	r3, r0
 8003e10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e12:	e00d      	b.n	8003e30 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e14:	2380      	movs	r3, #128	; 0x80
 8003e16:	021b      	lsls	r3, r3, #8
 8003e18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e1a:	e009      	b.n	8003e30 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003e20:	231a      	movs	r3, #26
 8003e22:	2218      	movs	r2, #24
 8003e24:	4694      	mov	ip, r2
 8003e26:	44bc      	add	ip, r7
 8003e28:	4463      	add	r3, ip
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	701a      	strb	r2, [r3, #0]
        break;
 8003e2e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d100      	bne.n	8003e38 <UART_SetConfig+0x2cc>
 8003e36:	e13c      	b.n	80040b2 <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	0013      	movs	r3, r2
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	189b      	adds	r3, r3, r2
 8003e42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d305      	bcc.n	8003e54 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d91d      	bls.n	8003e90 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 8003e54:	231a      	movs	r3, #26
 8003e56:	2218      	movs	r2, #24
 8003e58:	4694      	mov	ip, r2
 8003e5a:	44bc      	add	ip, r7
 8003e5c:	4463      	add	r3, ip
 8003e5e:	2201      	movs	r2, #1
 8003e60:	701a      	strb	r2, [r3, #0]
 8003e62:	e126      	b.n	80040b2 <UART_SetConfig+0x546>
 8003e64:	efff69f3 	.word	0xefff69f3
 8003e68:	ffffcfff 	.word	0xffffcfff
 8003e6c:	40004800 	.word	0x40004800
 8003e70:	fffff4ff 	.word	0xfffff4ff
 8003e74:	40013800 	.word	0x40013800
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	40004400 	.word	0x40004400
 8003e80:	40004c00 	.word	0x40004c00
 8003e84:	40005000 	.word	0x40005000
 8003e88:	003d0900 	.word	0x003d0900
 8003e8c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e92:	613b      	str	r3, [r7, #16]
 8003e94:	2300      	movs	r3, #0
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	6939      	ldr	r1, [r7, #16]
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	000b      	movs	r3, r1
 8003e9e:	0e1b      	lsrs	r3, r3, #24
 8003ea0:	0010      	movs	r0, r2
 8003ea2:	0205      	lsls	r5, r0, #8
 8003ea4:	431d      	orrs	r5, r3
 8003ea6:	000b      	movs	r3, r1
 8003ea8:	021c      	lsls	r4, r3, #8
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	085b      	lsrs	r3, r3, #1
 8003eb0:	60bb      	str	r3, [r7, #8]
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	60fb      	str	r3, [r7, #12]
 8003eb6:	68b8      	ldr	r0, [r7, #8]
 8003eb8:	68f9      	ldr	r1, [r7, #12]
 8003eba:	1900      	adds	r0, r0, r4
 8003ebc:	4169      	adcs	r1, r5
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	603b      	str	r3, [r7, #0]
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	607b      	str	r3, [r7, #4]
 8003ec8:	683a      	ldr	r2, [r7, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f7fc faa4 	bl	8000418 <__aeabi_uldivmod>
 8003ed0:	0002      	movs	r2, r0
 8003ed2:	000b      	movs	r3, r1
 8003ed4:	0013      	movs	r3, r2
 8003ed6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ed8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003eda:	23c0      	movs	r3, #192	; 0xc0
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d309      	bcc.n	8003ef6 <UART_SetConfig+0x38a>
 8003ee2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ee4:	2380      	movs	r3, #128	; 0x80
 8003ee6:	035b      	lsls	r3, r3, #13
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d204      	bcs.n	8003ef6 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ef2:	60da      	str	r2, [r3, #12]
 8003ef4:	e0dd      	b.n	80040b2 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8003ef6:	231a      	movs	r3, #26
 8003ef8:	2218      	movs	r2, #24
 8003efa:	4694      	mov	ip, r2
 8003efc:	44bc      	add	ip, r7
 8003efe:	4463      	add	r3, ip
 8003f00:	2201      	movs	r2, #1
 8003f02:	701a      	strb	r2, [r3, #0]
 8003f04:	e0d5      	b.n	80040b2 <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	69da      	ldr	r2, [r3, #28]
 8003f0a:	2380      	movs	r3, #128	; 0x80
 8003f0c:	021b      	lsls	r3, r3, #8
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d000      	beq.n	8003f14 <UART_SetConfig+0x3a8>
 8003f12:	e074      	b.n	8003ffe <UART_SetConfig+0x492>
  {
    switch (clocksource)
 8003f14:	231b      	movs	r3, #27
 8003f16:	2218      	movs	r2, #24
 8003f18:	4694      	mov	ip, r2
 8003f1a:	44bc      	add	ip, r7
 8003f1c:	4463      	add	r3, ip
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	d822      	bhi.n	8003f6a <UART_SetConfig+0x3fe>
 8003f24:	009a      	lsls	r2, r3, #2
 8003f26:	4b6b      	ldr	r3, [pc, #428]	; (80040d4 <UART_SetConfig+0x568>)
 8003f28:	18d3      	adds	r3, r2, r3
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f2e:	f7fe feeb 	bl	8002d08 <HAL_RCC_GetPCLK1Freq>
 8003f32:	0003      	movs	r3, r0
 8003f34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f36:	e022      	b.n	8003f7e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f38:	f7fe fefc 	bl	8002d34 <HAL_RCC_GetPCLK2Freq>
 8003f3c:	0003      	movs	r3, r0
 8003f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f40:	e01d      	b.n	8003f7e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f42:	4b65      	ldr	r3, [pc, #404]	; (80040d8 <UART_SetConfig+0x56c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2210      	movs	r2, #16
 8003f48:	4013      	ands	r3, r2
 8003f4a:	d002      	beq.n	8003f52 <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003f4c:	4b63      	ldr	r3, [pc, #396]	; (80040dc <UART_SetConfig+0x570>)
 8003f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003f50:	e015      	b.n	8003f7e <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 8003f52:	4b63      	ldr	r3, [pc, #396]	; (80040e0 <UART_SetConfig+0x574>)
 8003f54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f56:	e012      	b.n	8003f7e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f58:	f7fe fe26 	bl	8002ba8 <HAL_RCC_GetSysClockFreq>
 8003f5c:	0003      	movs	r3, r0
 8003f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f60:	e00d      	b.n	8003f7e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f62:	2380      	movs	r3, #128	; 0x80
 8003f64:	021b      	lsls	r3, r3, #8
 8003f66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f68:	e009      	b.n	8003f7e <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003f6e:	231a      	movs	r3, #26
 8003f70:	2218      	movs	r2, #24
 8003f72:	4694      	mov	ip, r2
 8003f74:	44bc      	add	ip, r7
 8003f76:	4463      	add	r3, ip
 8003f78:	2201      	movs	r2, #1
 8003f7a:	701a      	strb	r2, [r3, #0]
        break;
 8003f7c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d100      	bne.n	8003f86 <UART_SetConfig+0x41a>
 8003f84:	e095      	b.n	80040b2 <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f88:	005a      	lsls	r2, r3, #1
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	085b      	lsrs	r3, r3, #1
 8003f90:	18d2      	adds	r2, r2, r3
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	0019      	movs	r1, r3
 8003f98:	0010      	movs	r0, r2
 8003f9a:	f7fc f8c7 	bl	800012c <__udivsi3>
 8003f9e:	0003      	movs	r3, r0
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa6:	2b0f      	cmp	r3, #15
 8003fa8:	d921      	bls.n	8003fee <UART_SetConfig+0x482>
 8003faa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fac:	2380      	movs	r3, #128	; 0x80
 8003fae:	025b      	lsls	r3, r3, #9
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d21c      	bcs.n	8003fee <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	200e      	movs	r0, #14
 8003fba:	2418      	movs	r4, #24
 8003fbc:	193b      	adds	r3, r7, r4
 8003fbe:	181b      	adds	r3, r3, r0
 8003fc0:	210f      	movs	r1, #15
 8003fc2:	438a      	bics	r2, r1
 8003fc4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc8:	085b      	lsrs	r3, r3, #1
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	2207      	movs	r2, #7
 8003fce:	4013      	ands	r3, r2
 8003fd0:	b299      	uxth	r1, r3
 8003fd2:	193b      	adds	r3, r7, r4
 8003fd4:	181b      	adds	r3, r3, r0
 8003fd6:	193a      	adds	r2, r7, r4
 8003fd8:	1812      	adds	r2, r2, r0
 8003fda:	8812      	ldrh	r2, [r2, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	193a      	adds	r2, r7, r4
 8003fe6:	1812      	adds	r2, r2, r0
 8003fe8:	8812      	ldrh	r2, [r2, #0]
 8003fea:	60da      	str	r2, [r3, #12]
 8003fec:	e061      	b.n	80040b2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003fee:	231a      	movs	r3, #26
 8003ff0:	2218      	movs	r2, #24
 8003ff2:	4694      	mov	ip, r2
 8003ff4:	44bc      	add	ip, r7
 8003ff6:	4463      	add	r3, ip
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	701a      	strb	r2, [r3, #0]
 8003ffc:	e059      	b.n	80040b2 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ffe:	231b      	movs	r3, #27
 8004000:	2218      	movs	r2, #24
 8004002:	4694      	mov	ip, r2
 8004004:	44bc      	add	ip, r7
 8004006:	4463      	add	r3, ip
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	2b08      	cmp	r3, #8
 800400c:	d822      	bhi.n	8004054 <UART_SetConfig+0x4e8>
 800400e:	009a      	lsls	r2, r3, #2
 8004010:	4b34      	ldr	r3, [pc, #208]	; (80040e4 <UART_SetConfig+0x578>)
 8004012:	18d3      	adds	r3, r2, r3
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004018:	f7fe fe76 	bl	8002d08 <HAL_RCC_GetPCLK1Freq>
 800401c:	0003      	movs	r3, r0
 800401e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004020:	e022      	b.n	8004068 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004022:	f7fe fe87 	bl	8002d34 <HAL_RCC_GetPCLK2Freq>
 8004026:	0003      	movs	r3, r0
 8004028:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800402a:	e01d      	b.n	8004068 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800402c:	4b2a      	ldr	r3, [pc, #168]	; (80040d8 <UART_SetConfig+0x56c>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2210      	movs	r2, #16
 8004032:	4013      	ands	r3, r2
 8004034:	d002      	beq.n	800403c <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004036:	4b29      	ldr	r3, [pc, #164]	; (80040dc <UART_SetConfig+0x570>)
 8004038:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800403a:	e015      	b.n	8004068 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 800403c:	4b28      	ldr	r3, [pc, #160]	; (80040e0 <UART_SetConfig+0x574>)
 800403e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004040:	e012      	b.n	8004068 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004042:	f7fe fdb1 	bl	8002ba8 <HAL_RCC_GetSysClockFreq>
 8004046:	0003      	movs	r3, r0
 8004048:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800404a:	e00d      	b.n	8004068 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800404c:	2380      	movs	r3, #128	; 0x80
 800404e:	021b      	lsls	r3, r3, #8
 8004050:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004052:	e009      	b.n	8004068 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 8004054:	2300      	movs	r3, #0
 8004056:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004058:	231a      	movs	r3, #26
 800405a:	2218      	movs	r2, #24
 800405c:	4694      	mov	ip, r2
 800405e:	44bc      	add	ip, r7
 8004060:	4463      	add	r3, ip
 8004062:	2201      	movs	r2, #1
 8004064:	701a      	strb	r2, [r3, #0]
        break;
 8004066:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800406a:	2b00      	cmp	r3, #0
 800406c:	d021      	beq.n	80040b2 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	085a      	lsrs	r2, r3, #1
 8004074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004076:	18d2      	adds	r2, r2, r3
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	0019      	movs	r1, r3
 800407e:	0010      	movs	r0, r2
 8004080:	f7fc f854 	bl	800012c <__udivsi3>
 8004084:	0003      	movs	r3, r0
 8004086:	b29b      	uxth	r3, r3
 8004088:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800408a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408c:	2b0f      	cmp	r3, #15
 800408e:	d909      	bls.n	80040a4 <UART_SetConfig+0x538>
 8004090:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004092:	2380      	movs	r3, #128	; 0x80
 8004094:	025b      	lsls	r3, r3, #9
 8004096:	429a      	cmp	r2, r3
 8004098:	d204      	bcs.n	80040a4 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040a0:	60da      	str	r2, [r3, #12]
 80040a2:	e006      	b.n	80040b2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80040a4:	231a      	movs	r3, #26
 80040a6:	2218      	movs	r2, #24
 80040a8:	4694      	mov	ip, r2
 80040aa:	44bc      	add	ip, r7
 80040ac:	4463      	add	r3, ip
 80040ae:	2201      	movs	r2, #1
 80040b0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	2200      	movs	r2, #0
 80040b6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	2200      	movs	r2, #0
 80040bc:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80040be:	231a      	movs	r3, #26
 80040c0:	2218      	movs	r2, #24
 80040c2:	4694      	mov	ip, r2
 80040c4:	44bc      	add	ip, r7
 80040c6:	4463      	add	r3, ip
 80040c8:	781b      	ldrb	r3, [r3, #0]
}
 80040ca:	0018      	movs	r0, r3
 80040cc:	46bd      	mov	sp, r7
 80040ce:	b00e      	add	sp, #56	; 0x38
 80040d0:	bdb0      	pop	{r4, r5, r7, pc}
 80040d2:	46c0      	nop			; (mov r8, r8)
 80040d4:	08004ecc 	.word	0x08004ecc
 80040d8:	40021000 	.word	0x40021000
 80040dc:	003d0900 	.word	0x003d0900
 80040e0:	00f42400 	.word	0x00f42400
 80040e4:	08004ef0 	.word	0x08004ef0

080040e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	2201      	movs	r2, #1
 80040f6:	4013      	ands	r3, r2
 80040f8:	d00b      	beq.n	8004112 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	4a4a      	ldr	r2, [pc, #296]	; (800422c <UART_AdvFeatureConfig+0x144>)
 8004102:	4013      	ands	r3, r2
 8004104:	0019      	movs	r1, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	2202      	movs	r2, #2
 8004118:	4013      	ands	r3, r2
 800411a:	d00b      	beq.n	8004134 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	4a43      	ldr	r2, [pc, #268]	; (8004230 <UART_AdvFeatureConfig+0x148>)
 8004124:	4013      	ands	r3, r2
 8004126:	0019      	movs	r1, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	2204      	movs	r2, #4
 800413a:	4013      	ands	r3, r2
 800413c:	d00b      	beq.n	8004156 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	4a3b      	ldr	r2, [pc, #236]	; (8004234 <UART_AdvFeatureConfig+0x14c>)
 8004146:	4013      	ands	r3, r2
 8004148:	0019      	movs	r1, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	2208      	movs	r2, #8
 800415c:	4013      	ands	r3, r2
 800415e:	d00b      	beq.n	8004178 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	4a34      	ldr	r2, [pc, #208]	; (8004238 <UART_AdvFeatureConfig+0x150>)
 8004168:	4013      	ands	r3, r2
 800416a:	0019      	movs	r1, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417c:	2210      	movs	r2, #16
 800417e:	4013      	ands	r3, r2
 8004180:	d00b      	beq.n	800419a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	4a2c      	ldr	r2, [pc, #176]	; (800423c <UART_AdvFeatureConfig+0x154>)
 800418a:	4013      	ands	r3, r2
 800418c:	0019      	movs	r1, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	2220      	movs	r2, #32
 80041a0:	4013      	ands	r3, r2
 80041a2:	d00b      	beq.n	80041bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	4a25      	ldr	r2, [pc, #148]	; (8004240 <UART_AdvFeatureConfig+0x158>)
 80041ac:	4013      	ands	r3, r2
 80041ae:	0019      	movs	r1, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c0:	2240      	movs	r2, #64	; 0x40
 80041c2:	4013      	ands	r3, r2
 80041c4:	d01d      	beq.n	8004202 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	4a1d      	ldr	r2, [pc, #116]	; (8004244 <UART_AdvFeatureConfig+0x15c>)
 80041ce:	4013      	ands	r3, r2
 80041d0:	0019      	movs	r1, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	430a      	orrs	r2, r1
 80041dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041e2:	2380      	movs	r3, #128	; 0x80
 80041e4:	035b      	lsls	r3, r3, #13
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d10b      	bne.n	8004202 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	4a15      	ldr	r2, [pc, #84]	; (8004248 <UART_AdvFeatureConfig+0x160>)
 80041f2:	4013      	ands	r3, r2
 80041f4:	0019      	movs	r1, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	430a      	orrs	r2, r1
 8004200:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	2280      	movs	r2, #128	; 0x80
 8004208:	4013      	ands	r3, r2
 800420a:	d00b      	beq.n	8004224 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	4a0e      	ldr	r2, [pc, #56]	; (800424c <UART_AdvFeatureConfig+0x164>)
 8004214:	4013      	ands	r3, r2
 8004216:	0019      	movs	r1, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	605a      	str	r2, [r3, #4]
  }
}
 8004224:	46c0      	nop			; (mov r8, r8)
 8004226:	46bd      	mov	sp, r7
 8004228:	b002      	add	sp, #8
 800422a:	bd80      	pop	{r7, pc}
 800422c:	fffdffff 	.word	0xfffdffff
 8004230:	fffeffff 	.word	0xfffeffff
 8004234:	fffbffff 	.word	0xfffbffff
 8004238:	ffff7fff 	.word	0xffff7fff
 800423c:	ffffefff 	.word	0xffffefff
 8004240:	ffffdfff 	.word	0xffffdfff
 8004244:	ffefffff 	.word	0xffefffff
 8004248:	ff9fffff 	.word	0xff9fffff
 800424c:	fff7ffff 	.word	0xfff7ffff

08004250 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af02      	add	r7, sp, #8
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2280      	movs	r2, #128	; 0x80
 800425c:	2100      	movs	r1, #0
 800425e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004260:	f7fd fca6 	bl	8001bb0 <HAL_GetTick>
 8004264:	0003      	movs	r3, r0
 8004266:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2208      	movs	r2, #8
 8004270:	4013      	ands	r3, r2
 8004272:	2b08      	cmp	r3, #8
 8004274:	d10c      	bne.n	8004290 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2280      	movs	r2, #128	; 0x80
 800427a:	0391      	lsls	r1, r2, #14
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	4a17      	ldr	r2, [pc, #92]	; (80042dc <UART_CheckIdleState+0x8c>)
 8004280:	9200      	str	r2, [sp, #0]
 8004282:	2200      	movs	r2, #0
 8004284:	f000 f82c 	bl	80042e0 <UART_WaitOnFlagUntilTimeout>
 8004288:	1e03      	subs	r3, r0, #0
 800428a:	d001      	beq.n	8004290 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e021      	b.n	80042d4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2204      	movs	r2, #4
 8004298:	4013      	ands	r3, r2
 800429a:	2b04      	cmp	r3, #4
 800429c:	d10c      	bne.n	80042b8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2280      	movs	r2, #128	; 0x80
 80042a2:	03d1      	lsls	r1, r2, #15
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	4a0d      	ldr	r2, [pc, #52]	; (80042dc <UART_CheckIdleState+0x8c>)
 80042a8:	9200      	str	r2, [sp, #0]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f000 f818 	bl	80042e0 <UART_WaitOnFlagUntilTimeout>
 80042b0:	1e03      	subs	r3, r0, #0
 80042b2:	d001      	beq.n	80042b8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e00d      	b.n	80042d4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2220      	movs	r2, #32
 80042bc:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2220      	movs	r2, #32
 80042c2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2274      	movs	r2, #116	; 0x74
 80042ce:	2100      	movs	r1, #0
 80042d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	0018      	movs	r0, r3
 80042d6:	46bd      	mov	sp, r7
 80042d8:	b004      	add	sp, #16
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	01ffffff 	.word	0x01ffffff

080042e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b094      	sub	sp, #80	; 0x50
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	603b      	str	r3, [r7, #0]
 80042ec:	1dfb      	adds	r3, r7, #7
 80042ee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042f0:	e0a3      	b.n	800443a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042f4:	3301      	adds	r3, #1
 80042f6:	d100      	bne.n	80042fa <UART_WaitOnFlagUntilTimeout+0x1a>
 80042f8:	e09f      	b.n	800443a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042fa:	f7fd fc59 	bl	8001bb0 <HAL_GetTick>
 80042fe:	0002      	movs	r2, r0
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004306:	429a      	cmp	r2, r3
 8004308:	d302      	bcc.n	8004310 <UART_WaitOnFlagUntilTimeout+0x30>
 800430a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800430c:	2b00      	cmp	r3, #0
 800430e:	d13d      	bne.n	800438c <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004310:	f3ef 8310 	mrs	r3, PRIMASK
 8004314:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004316:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004318:	647b      	str	r3, [r7, #68]	; 0x44
 800431a:	2301      	movs	r3, #1
 800431c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800431e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004320:	f383 8810 	msr	PRIMASK, r3
}
 8004324:	46c0      	nop			; (mov r8, r8)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	494c      	ldr	r1, [pc, #304]	; (8004464 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004332:	400a      	ands	r2, r1
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004338:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800433a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433c:	f383 8810 	msr	PRIMASK, r3
}
 8004340:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004342:	f3ef 8310 	mrs	r3, PRIMASK
 8004346:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800434a:	643b      	str	r3, [r7, #64]	; 0x40
 800434c:	2301      	movs	r3, #1
 800434e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004352:	f383 8810 	msr	PRIMASK, r3
}
 8004356:	46c0      	nop			; (mov r8, r8)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689a      	ldr	r2, [r3, #8]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2101      	movs	r1, #1
 8004364:	438a      	bics	r2, r1
 8004366:	609a      	str	r2, [r3, #8]
 8004368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800436a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800436c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800436e:	f383 8810 	msr	PRIMASK, r3
}
 8004372:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2220      	movs	r2, #32
 8004378:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2220      	movs	r2, #32
 800437e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2274      	movs	r2, #116	; 0x74
 8004384:	2100      	movs	r1, #0
 8004386:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e067      	b.n	800445c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2204      	movs	r2, #4
 8004394:	4013      	ands	r3, r2
 8004396:	d050      	beq.n	800443a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	69da      	ldr	r2, [r3, #28]
 800439e:	2380      	movs	r3, #128	; 0x80
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	401a      	ands	r2, r3
 80043a4:	2380      	movs	r3, #128	; 0x80
 80043a6:	011b      	lsls	r3, r3, #4
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d146      	bne.n	800443a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2280      	movs	r2, #128	; 0x80
 80043b2:	0112      	lsls	r2, r2, #4
 80043b4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043b6:	f3ef 8310 	mrs	r3, PRIMASK
 80043ba:	613b      	str	r3, [r7, #16]
  return(result);
 80043bc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043c0:	2301      	movs	r3, #1
 80043c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f383 8810 	msr	PRIMASK, r3
}
 80043ca:	46c0      	nop			; (mov r8, r8)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4923      	ldr	r1, [pc, #140]	; (8004464 <UART_WaitOnFlagUntilTimeout+0x184>)
 80043d8:	400a      	ands	r2, r1
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043de:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	f383 8810 	msr	PRIMASK, r3
}
 80043e6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043e8:	f3ef 8310 	mrs	r3, PRIMASK
 80043ec:	61fb      	str	r3, [r7, #28]
  return(result);
 80043ee:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80043f2:	2301      	movs	r3, #1
 80043f4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	f383 8810 	msr	PRIMASK, r3
}
 80043fc:	46c0      	nop			; (mov r8, r8)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2101      	movs	r1, #1
 800440a:	438a      	bics	r2, r1
 800440c:	609a      	str	r2, [r3, #8]
 800440e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004410:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	f383 8810 	msr	PRIMASK, r3
}
 8004418:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2220      	movs	r2, #32
 800441e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2220      	movs	r2, #32
 8004424:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2280      	movs	r2, #128	; 0x80
 800442a:	2120      	movs	r1, #32
 800442c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2274      	movs	r2, #116	; 0x74
 8004432:	2100      	movs	r1, #0
 8004434:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e010      	b.n	800445c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	4013      	ands	r3, r2
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	425a      	negs	r2, r3
 800444a:	4153      	adcs	r3, r2
 800444c:	b2db      	uxtb	r3, r3
 800444e:	001a      	movs	r2, r3
 8004450:	1dfb      	adds	r3, r7, #7
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	429a      	cmp	r2, r3
 8004456:	d100      	bne.n	800445a <UART_WaitOnFlagUntilTimeout+0x17a>
 8004458:	e74b      	b.n	80042f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	0018      	movs	r0, r3
 800445e:	46bd      	mov	sp, r7
 8004460:	b014      	add	sp, #80	; 0x50
 8004462:	bd80      	pop	{r7, pc}
 8004464:	fffffe5f 	.word	0xfffffe5f

08004468 <__errno>:
 8004468:	4b01      	ldr	r3, [pc, #4]	; (8004470 <__errno+0x8>)
 800446a:	6818      	ldr	r0, [r3, #0]
 800446c:	4770      	bx	lr
 800446e:	46c0      	nop			; (mov r8, r8)
 8004470:	20000018 	.word	0x20000018

08004474 <__libc_init_array>:
 8004474:	b570      	push	{r4, r5, r6, lr}
 8004476:	2600      	movs	r6, #0
 8004478:	4d0c      	ldr	r5, [pc, #48]	; (80044ac <__libc_init_array+0x38>)
 800447a:	4c0d      	ldr	r4, [pc, #52]	; (80044b0 <__libc_init_array+0x3c>)
 800447c:	1b64      	subs	r4, r4, r5
 800447e:	10a4      	asrs	r4, r4, #2
 8004480:	42a6      	cmp	r6, r4
 8004482:	d109      	bne.n	8004498 <__libc_init_array+0x24>
 8004484:	2600      	movs	r6, #0
 8004486:	f000 fc47 	bl	8004d18 <_init>
 800448a:	4d0a      	ldr	r5, [pc, #40]	; (80044b4 <__libc_init_array+0x40>)
 800448c:	4c0a      	ldr	r4, [pc, #40]	; (80044b8 <__libc_init_array+0x44>)
 800448e:	1b64      	subs	r4, r4, r5
 8004490:	10a4      	asrs	r4, r4, #2
 8004492:	42a6      	cmp	r6, r4
 8004494:	d105      	bne.n	80044a2 <__libc_init_array+0x2e>
 8004496:	bd70      	pop	{r4, r5, r6, pc}
 8004498:	00b3      	lsls	r3, r6, #2
 800449a:	58eb      	ldr	r3, [r5, r3]
 800449c:	4798      	blx	r3
 800449e:	3601      	adds	r6, #1
 80044a0:	e7ee      	b.n	8004480 <__libc_init_array+0xc>
 80044a2:	00b3      	lsls	r3, r6, #2
 80044a4:	58eb      	ldr	r3, [r5, r3]
 80044a6:	4798      	blx	r3
 80044a8:	3601      	adds	r6, #1
 80044aa:	e7f2      	b.n	8004492 <__libc_init_array+0x1e>
 80044ac:	08004f50 	.word	0x08004f50
 80044b0:	08004f50 	.word	0x08004f50
 80044b4:	08004f50 	.word	0x08004f50
 80044b8:	08004f54 	.word	0x08004f54

080044bc <memset>:
 80044bc:	0003      	movs	r3, r0
 80044be:	1882      	adds	r2, r0, r2
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d100      	bne.n	80044c6 <memset+0xa>
 80044c4:	4770      	bx	lr
 80044c6:	7019      	strb	r1, [r3, #0]
 80044c8:	3301      	adds	r3, #1
 80044ca:	e7f9      	b.n	80044c0 <memset+0x4>

080044cc <siprintf>:
 80044cc:	b40e      	push	{r1, r2, r3}
 80044ce:	b500      	push	{lr}
 80044d0:	490b      	ldr	r1, [pc, #44]	; (8004500 <siprintf+0x34>)
 80044d2:	b09c      	sub	sp, #112	; 0x70
 80044d4:	ab1d      	add	r3, sp, #116	; 0x74
 80044d6:	9002      	str	r0, [sp, #8]
 80044d8:	9006      	str	r0, [sp, #24]
 80044da:	9107      	str	r1, [sp, #28]
 80044dc:	9104      	str	r1, [sp, #16]
 80044de:	4809      	ldr	r0, [pc, #36]	; (8004504 <siprintf+0x38>)
 80044e0:	4909      	ldr	r1, [pc, #36]	; (8004508 <siprintf+0x3c>)
 80044e2:	cb04      	ldmia	r3!, {r2}
 80044e4:	9105      	str	r1, [sp, #20]
 80044e6:	6800      	ldr	r0, [r0, #0]
 80044e8:	a902      	add	r1, sp, #8
 80044ea:	9301      	str	r3, [sp, #4]
 80044ec:	f000 f870 	bl	80045d0 <_svfiprintf_r>
 80044f0:	2300      	movs	r3, #0
 80044f2:	9a02      	ldr	r2, [sp, #8]
 80044f4:	7013      	strb	r3, [r2, #0]
 80044f6:	b01c      	add	sp, #112	; 0x70
 80044f8:	bc08      	pop	{r3}
 80044fa:	b003      	add	sp, #12
 80044fc:	4718      	bx	r3
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	7fffffff 	.word	0x7fffffff
 8004504:	20000018 	.word	0x20000018
 8004508:	ffff0208 	.word	0xffff0208

0800450c <__ssputs_r>:
 800450c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800450e:	688e      	ldr	r6, [r1, #8]
 8004510:	b085      	sub	sp, #20
 8004512:	0007      	movs	r7, r0
 8004514:	000c      	movs	r4, r1
 8004516:	9203      	str	r2, [sp, #12]
 8004518:	9301      	str	r3, [sp, #4]
 800451a:	429e      	cmp	r6, r3
 800451c:	d83c      	bhi.n	8004598 <__ssputs_r+0x8c>
 800451e:	2390      	movs	r3, #144	; 0x90
 8004520:	898a      	ldrh	r2, [r1, #12]
 8004522:	00db      	lsls	r3, r3, #3
 8004524:	421a      	tst	r2, r3
 8004526:	d034      	beq.n	8004592 <__ssputs_r+0x86>
 8004528:	2503      	movs	r5, #3
 800452a:	6909      	ldr	r1, [r1, #16]
 800452c:	6823      	ldr	r3, [r4, #0]
 800452e:	1a5b      	subs	r3, r3, r1
 8004530:	9302      	str	r3, [sp, #8]
 8004532:	6963      	ldr	r3, [r4, #20]
 8004534:	9802      	ldr	r0, [sp, #8]
 8004536:	435d      	muls	r5, r3
 8004538:	0feb      	lsrs	r3, r5, #31
 800453a:	195d      	adds	r5, r3, r5
 800453c:	9b01      	ldr	r3, [sp, #4]
 800453e:	106d      	asrs	r5, r5, #1
 8004540:	3301      	adds	r3, #1
 8004542:	181b      	adds	r3, r3, r0
 8004544:	42ab      	cmp	r3, r5
 8004546:	d900      	bls.n	800454a <__ssputs_r+0x3e>
 8004548:	001d      	movs	r5, r3
 800454a:	0553      	lsls	r3, r2, #21
 800454c:	d532      	bpl.n	80045b4 <__ssputs_r+0xa8>
 800454e:	0029      	movs	r1, r5
 8004550:	0038      	movs	r0, r7
 8004552:	f000 fb31 	bl	8004bb8 <_malloc_r>
 8004556:	1e06      	subs	r6, r0, #0
 8004558:	d109      	bne.n	800456e <__ssputs_r+0x62>
 800455a:	230c      	movs	r3, #12
 800455c:	603b      	str	r3, [r7, #0]
 800455e:	2340      	movs	r3, #64	; 0x40
 8004560:	2001      	movs	r0, #1
 8004562:	89a2      	ldrh	r2, [r4, #12]
 8004564:	4240      	negs	r0, r0
 8004566:	4313      	orrs	r3, r2
 8004568:	81a3      	strh	r3, [r4, #12]
 800456a:	b005      	add	sp, #20
 800456c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800456e:	9a02      	ldr	r2, [sp, #8]
 8004570:	6921      	ldr	r1, [r4, #16]
 8004572:	f000 faba 	bl	8004aea <memcpy>
 8004576:	89a3      	ldrh	r3, [r4, #12]
 8004578:	4a14      	ldr	r2, [pc, #80]	; (80045cc <__ssputs_r+0xc0>)
 800457a:	401a      	ands	r2, r3
 800457c:	2380      	movs	r3, #128	; 0x80
 800457e:	4313      	orrs	r3, r2
 8004580:	81a3      	strh	r3, [r4, #12]
 8004582:	9b02      	ldr	r3, [sp, #8]
 8004584:	6126      	str	r6, [r4, #16]
 8004586:	18f6      	adds	r6, r6, r3
 8004588:	6026      	str	r6, [r4, #0]
 800458a:	6165      	str	r5, [r4, #20]
 800458c:	9e01      	ldr	r6, [sp, #4]
 800458e:	1aed      	subs	r5, r5, r3
 8004590:	60a5      	str	r5, [r4, #8]
 8004592:	9b01      	ldr	r3, [sp, #4]
 8004594:	429e      	cmp	r6, r3
 8004596:	d900      	bls.n	800459a <__ssputs_r+0x8e>
 8004598:	9e01      	ldr	r6, [sp, #4]
 800459a:	0032      	movs	r2, r6
 800459c:	9903      	ldr	r1, [sp, #12]
 800459e:	6820      	ldr	r0, [r4, #0]
 80045a0:	f000 faac 	bl	8004afc <memmove>
 80045a4:	68a3      	ldr	r3, [r4, #8]
 80045a6:	2000      	movs	r0, #0
 80045a8:	1b9b      	subs	r3, r3, r6
 80045aa:	60a3      	str	r3, [r4, #8]
 80045ac:	6823      	ldr	r3, [r4, #0]
 80045ae:	199e      	adds	r6, r3, r6
 80045b0:	6026      	str	r6, [r4, #0]
 80045b2:	e7da      	b.n	800456a <__ssputs_r+0x5e>
 80045b4:	002a      	movs	r2, r5
 80045b6:	0038      	movs	r0, r7
 80045b8:	f000 fb5c 	bl	8004c74 <_realloc_r>
 80045bc:	1e06      	subs	r6, r0, #0
 80045be:	d1e0      	bne.n	8004582 <__ssputs_r+0x76>
 80045c0:	0038      	movs	r0, r7
 80045c2:	6921      	ldr	r1, [r4, #16]
 80045c4:	f000 faae 	bl	8004b24 <_free_r>
 80045c8:	e7c7      	b.n	800455a <__ssputs_r+0x4e>
 80045ca:	46c0      	nop			; (mov r8, r8)
 80045cc:	fffffb7f 	.word	0xfffffb7f

080045d0 <_svfiprintf_r>:
 80045d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045d2:	b0a1      	sub	sp, #132	; 0x84
 80045d4:	9003      	str	r0, [sp, #12]
 80045d6:	001d      	movs	r5, r3
 80045d8:	898b      	ldrh	r3, [r1, #12]
 80045da:	000f      	movs	r7, r1
 80045dc:	0016      	movs	r6, r2
 80045de:	061b      	lsls	r3, r3, #24
 80045e0:	d511      	bpl.n	8004606 <_svfiprintf_r+0x36>
 80045e2:	690b      	ldr	r3, [r1, #16]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10e      	bne.n	8004606 <_svfiprintf_r+0x36>
 80045e8:	2140      	movs	r1, #64	; 0x40
 80045ea:	f000 fae5 	bl	8004bb8 <_malloc_r>
 80045ee:	6038      	str	r0, [r7, #0]
 80045f0:	6138      	str	r0, [r7, #16]
 80045f2:	2800      	cmp	r0, #0
 80045f4:	d105      	bne.n	8004602 <_svfiprintf_r+0x32>
 80045f6:	230c      	movs	r3, #12
 80045f8:	9a03      	ldr	r2, [sp, #12]
 80045fa:	3801      	subs	r0, #1
 80045fc:	6013      	str	r3, [r2, #0]
 80045fe:	b021      	add	sp, #132	; 0x84
 8004600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004602:	2340      	movs	r3, #64	; 0x40
 8004604:	617b      	str	r3, [r7, #20]
 8004606:	2300      	movs	r3, #0
 8004608:	ac08      	add	r4, sp, #32
 800460a:	6163      	str	r3, [r4, #20]
 800460c:	3320      	adds	r3, #32
 800460e:	7663      	strb	r3, [r4, #25]
 8004610:	3310      	adds	r3, #16
 8004612:	76a3      	strb	r3, [r4, #26]
 8004614:	9507      	str	r5, [sp, #28]
 8004616:	0035      	movs	r5, r6
 8004618:	782b      	ldrb	r3, [r5, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <_svfiprintf_r+0x52>
 800461e:	2b25      	cmp	r3, #37	; 0x25
 8004620:	d147      	bne.n	80046b2 <_svfiprintf_r+0xe2>
 8004622:	1bab      	subs	r3, r5, r6
 8004624:	9305      	str	r3, [sp, #20]
 8004626:	42b5      	cmp	r5, r6
 8004628:	d00c      	beq.n	8004644 <_svfiprintf_r+0x74>
 800462a:	0032      	movs	r2, r6
 800462c:	0039      	movs	r1, r7
 800462e:	9803      	ldr	r0, [sp, #12]
 8004630:	f7ff ff6c 	bl	800450c <__ssputs_r>
 8004634:	1c43      	adds	r3, r0, #1
 8004636:	d100      	bne.n	800463a <_svfiprintf_r+0x6a>
 8004638:	e0ae      	b.n	8004798 <_svfiprintf_r+0x1c8>
 800463a:	6962      	ldr	r2, [r4, #20]
 800463c:	9b05      	ldr	r3, [sp, #20]
 800463e:	4694      	mov	ip, r2
 8004640:	4463      	add	r3, ip
 8004642:	6163      	str	r3, [r4, #20]
 8004644:	782b      	ldrb	r3, [r5, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d100      	bne.n	800464c <_svfiprintf_r+0x7c>
 800464a:	e0a5      	b.n	8004798 <_svfiprintf_r+0x1c8>
 800464c:	2201      	movs	r2, #1
 800464e:	2300      	movs	r3, #0
 8004650:	4252      	negs	r2, r2
 8004652:	6062      	str	r2, [r4, #4]
 8004654:	a904      	add	r1, sp, #16
 8004656:	3254      	adds	r2, #84	; 0x54
 8004658:	1852      	adds	r2, r2, r1
 800465a:	1c6e      	adds	r6, r5, #1
 800465c:	6023      	str	r3, [r4, #0]
 800465e:	60e3      	str	r3, [r4, #12]
 8004660:	60a3      	str	r3, [r4, #8]
 8004662:	7013      	strb	r3, [r2, #0]
 8004664:	65a3      	str	r3, [r4, #88]	; 0x58
 8004666:	2205      	movs	r2, #5
 8004668:	7831      	ldrb	r1, [r6, #0]
 800466a:	4854      	ldr	r0, [pc, #336]	; (80047bc <_svfiprintf_r+0x1ec>)
 800466c:	f000 fa32 	bl	8004ad4 <memchr>
 8004670:	1c75      	adds	r5, r6, #1
 8004672:	2800      	cmp	r0, #0
 8004674:	d11f      	bne.n	80046b6 <_svfiprintf_r+0xe6>
 8004676:	6822      	ldr	r2, [r4, #0]
 8004678:	06d3      	lsls	r3, r2, #27
 800467a:	d504      	bpl.n	8004686 <_svfiprintf_r+0xb6>
 800467c:	2353      	movs	r3, #83	; 0x53
 800467e:	a904      	add	r1, sp, #16
 8004680:	185b      	adds	r3, r3, r1
 8004682:	2120      	movs	r1, #32
 8004684:	7019      	strb	r1, [r3, #0]
 8004686:	0713      	lsls	r3, r2, #28
 8004688:	d504      	bpl.n	8004694 <_svfiprintf_r+0xc4>
 800468a:	2353      	movs	r3, #83	; 0x53
 800468c:	a904      	add	r1, sp, #16
 800468e:	185b      	adds	r3, r3, r1
 8004690:	212b      	movs	r1, #43	; 0x2b
 8004692:	7019      	strb	r1, [r3, #0]
 8004694:	7833      	ldrb	r3, [r6, #0]
 8004696:	2b2a      	cmp	r3, #42	; 0x2a
 8004698:	d016      	beq.n	80046c8 <_svfiprintf_r+0xf8>
 800469a:	0035      	movs	r5, r6
 800469c:	2100      	movs	r1, #0
 800469e:	200a      	movs	r0, #10
 80046a0:	68e3      	ldr	r3, [r4, #12]
 80046a2:	782a      	ldrb	r2, [r5, #0]
 80046a4:	1c6e      	adds	r6, r5, #1
 80046a6:	3a30      	subs	r2, #48	; 0x30
 80046a8:	2a09      	cmp	r2, #9
 80046aa:	d94e      	bls.n	800474a <_svfiprintf_r+0x17a>
 80046ac:	2900      	cmp	r1, #0
 80046ae:	d111      	bne.n	80046d4 <_svfiprintf_r+0x104>
 80046b0:	e017      	b.n	80046e2 <_svfiprintf_r+0x112>
 80046b2:	3501      	adds	r5, #1
 80046b4:	e7b0      	b.n	8004618 <_svfiprintf_r+0x48>
 80046b6:	4b41      	ldr	r3, [pc, #260]	; (80047bc <_svfiprintf_r+0x1ec>)
 80046b8:	6822      	ldr	r2, [r4, #0]
 80046ba:	1ac0      	subs	r0, r0, r3
 80046bc:	2301      	movs	r3, #1
 80046be:	4083      	lsls	r3, r0
 80046c0:	4313      	orrs	r3, r2
 80046c2:	002e      	movs	r6, r5
 80046c4:	6023      	str	r3, [r4, #0]
 80046c6:	e7ce      	b.n	8004666 <_svfiprintf_r+0x96>
 80046c8:	9b07      	ldr	r3, [sp, #28]
 80046ca:	1d19      	adds	r1, r3, #4
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	9107      	str	r1, [sp, #28]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	db01      	blt.n	80046d8 <_svfiprintf_r+0x108>
 80046d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80046d6:	e004      	b.n	80046e2 <_svfiprintf_r+0x112>
 80046d8:	425b      	negs	r3, r3
 80046da:	60e3      	str	r3, [r4, #12]
 80046dc:	2302      	movs	r3, #2
 80046de:	4313      	orrs	r3, r2
 80046e0:	6023      	str	r3, [r4, #0]
 80046e2:	782b      	ldrb	r3, [r5, #0]
 80046e4:	2b2e      	cmp	r3, #46	; 0x2e
 80046e6:	d10a      	bne.n	80046fe <_svfiprintf_r+0x12e>
 80046e8:	786b      	ldrb	r3, [r5, #1]
 80046ea:	2b2a      	cmp	r3, #42	; 0x2a
 80046ec:	d135      	bne.n	800475a <_svfiprintf_r+0x18a>
 80046ee:	9b07      	ldr	r3, [sp, #28]
 80046f0:	3502      	adds	r5, #2
 80046f2:	1d1a      	adds	r2, r3, #4
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	9207      	str	r2, [sp, #28]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	db2b      	blt.n	8004754 <_svfiprintf_r+0x184>
 80046fc:	9309      	str	r3, [sp, #36]	; 0x24
 80046fe:	4e30      	ldr	r6, [pc, #192]	; (80047c0 <_svfiprintf_r+0x1f0>)
 8004700:	2203      	movs	r2, #3
 8004702:	0030      	movs	r0, r6
 8004704:	7829      	ldrb	r1, [r5, #0]
 8004706:	f000 f9e5 	bl	8004ad4 <memchr>
 800470a:	2800      	cmp	r0, #0
 800470c:	d006      	beq.n	800471c <_svfiprintf_r+0x14c>
 800470e:	2340      	movs	r3, #64	; 0x40
 8004710:	1b80      	subs	r0, r0, r6
 8004712:	4083      	lsls	r3, r0
 8004714:	6822      	ldr	r2, [r4, #0]
 8004716:	3501      	adds	r5, #1
 8004718:	4313      	orrs	r3, r2
 800471a:	6023      	str	r3, [r4, #0]
 800471c:	7829      	ldrb	r1, [r5, #0]
 800471e:	2206      	movs	r2, #6
 8004720:	4828      	ldr	r0, [pc, #160]	; (80047c4 <_svfiprintf_r+0x1f4>)
 8004722:	1c6e      	adds	r6, r5, #1
 8004724:	7621      	strb	r1, [r4, #24]
 8004726:	f000 f9d5 	bl	8004ad4 <memchr>
 800472a:	2800      	cmp	r0, #0
 800472c:	d03c      	beq.n	80047a8 <_svfiprintf_r+0x1d8>
 800472e:	4b26      	ldr	r3, [pc, #152]	; (80047c8 <_svfiprintf_r+0x1f8>)
 8004730:	2b00      	cmp	r3, #0
 8004732:	d125      	bne.n	8004780 <_svfiprintf_r+0x1b0>
 8004734:	2207      	movs	r2, #7
 8004736:	9b07      	ldr	r3, [sp, #28]
 8004738:	3307      	adds	r3, #7
 800473a:	4393      	bics	r3, r2
 800473c:	3308      	adds	r3, #8
 800473e:	9307      	str	r3, [sp, #28]
 8004740:	6963      	ldr	r3, [r4, #20]
 8004742:	9a04      	ldr	r2, [sp, #16]
 8004744:	189b      	adds	r3, r3, r2
 8004746:	6163      	str	r3, [r4, #20]
 8004748:	e765      	b.n	8004616 <_svfiprintf_r+0x46>
 800474a:	4343      	muls	r3, r0
 800474c:	0035      	movs	r5, r6
 800474e:	2101      	movs	r1, #1
 8004750:	189b      	adds	r3, r3, r2
 8004752:	e7a6      	b.n	80046a2 <_svfiprintf_r+0xd2>
 8004754:	2301      	movs	r3, #1
 8004756:	425b      	negs	r3, r3
 8004758:	e7d0      	b.n	80046fc <_svfiprintf_r+0x12c>
 800475a:	2300      	movs	r3, #0
 800475c:	200a      	movs	r0, #10
 800475e:	001a      	movs	r2, r3
 8004760:	3501      	adds	r5, #1
 8004762:	6063      	str	r3, [r4, #4]
 8004764:	7829      	ldrb	r1, [r5, #0]
 8004766:	1c6e      	adds	r6, r5, #1
 8004768:	3930      	subs	r1, #48	; 0x30
 800476a:	2909      	cmp	r1, #9
 800476c:	d903      	bls.n	8004776 <_svfiprintf_r+0x1a6>
 800476e:	2b00      	cmp	r3, #0
 8004770:	d0c5      	beq.n	80046fe <_svfiprintf_r+0x12e>
 8004772:	9209      	str	r2, [sp, #36]	; 0x24
 8004774:	e7c3      	b.n	80046fe <_svfiprintf_r+0x12e>
 8004776:	4342      	muls	r2, r0
 8004778:	0035      	movs	r5, r6
 800477a:	2301      	movs	r3, #1
 800477c:	1852      	adds	r2, r2, r1
 800477e:	e7f1      	b.n	8004764 <_svfiprintf_r+0x194>
 8004780:	ab07      	add	r3, sp, #28
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	003a      	movs	r2, r7
 8004786:	0021      	movs	r1, r4
 8004788:	4b10      	ldr	r3, [pc, #64]	; (80047cc <_svfiprintf_r+0x1fc>)
 800478a:	9803      	ldr	r0, [sp, #12]
 800478c:	e000      	b.n	8004790 <_svfiprintf_r+0x1c0>
 800478e:	bf00      	nop
 8004790:	9004      	str	r0, [sp, #16]
 8004792:	9b04      	ldr	r3, [sp, #16]
 8004794:	3301      	adds	r3, #1
 8004796:	d1d3      	bne.n	8004740 <_svfiprintf_r+0x170>
 8004798:	89bb      	ldrh	r3, [r7, #12]
 800479a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800479c:	065b      	lsls	r3, r3, #25
 800479e:	d400      	bmi.n	80047a2 <_svfiprintf_r+0x1d2>
 80047a0:	e72d      	b.n	80045fe <_svfiprintf_r+0x2e>
 80047a2:	2001      	movs	r0, #1
 80047a4:	4240      	negs	r0, r0
 80047a6:	e72a      	b.n	80045fe <_svfiprintf_r+0x2e>
 80047a8:	ab07      	add	r3, sp, #28
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	003a      	movs	r2, r7
 80047ae:	0021      	movs	r1, r4
 80047b0:	4b06      	ldr	r3, [pc, #24]	; (80047cc <_svfiprintf_r+0x1fc>)
 80047b2:	9803      	ldr	r0, [sp, #12]
 80047b4:	f000 f87c 	bl	80048b0 <_printf_i>
 80047b8:	e7ea      	b.n	8004790 <_svfiprintf_r+0x1c0>
 80047ba:	46c0      	nop			; (mov r8, r8)
 80047bc:	08004f14 	.word	0x08004f14
 80047c0:	08004f1a 	.word	0x08004f1a
 80047c4:	08004f1e 	.word	0x08004f1e
 80047c8:	00000000 	.word	0x00000000
 80047cc:	0800450d 	.word	0x0800450d

080047d0 <_printf_common>:
 80047d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047d2:	0015      	movs	r5, r2
 80047d4:	9301      	str	r3, [sp, #4]
 80047d6:	688a      	ldr	r2, [r1, #8]
 80047d8:	690b      	ldr	r3, [r1, #16]
 80047da:	000c      	movs	r4, r1
 80047dc:	9000      	str	r0, [sp, #0]
 80047de:	4293      	cmp	r3, r2
 80047e0:	da00      	bge.n	80047e4 <_printf_common+0x14>
 80047e2:	0013      	movs	r3, r2
 80047e4:	0022      	movs	r2, r4
 80047e6:	602b      	str	r3, [r5, #0]
 80047e8:	3243      	adds	r2, #67	; 0x43
 80047ea:	7812      	ldrb	r2, [r2, #0]
 80047ec:	2a00      	cmp	r2, #0
 80047ee:	d001      	beq.n	80047f4 <_printf_common+0x24>
 80047f0:	3301      	adds	r3, #1
 80047f2:	602b      	str	r3, [r5, #0]
 80047f4:	6823      	ldr	r3, [r4, #0]
 80047f6:	069b      	lsls	r3, r3, #26
 80047f8:	d502      	bpl.n	8004800 <_printf_common+0x30>
 80047fa:	682b      	ldr	r3, [r5, #0]
 80047fc:	3302      	adds	r3, #2
 80047fe:	602b      	str	r3, [r5, #0]
 8004800:	6822      	ldr	r2, [r4, #0]
 8004802:	2306      	movs	r3, #6
 8004804:	0017      	movs	r7, r2
 8004806:	401f      	ands	r7, r3
 8004808:	421a      	tst	r2, r3
 800480a:	d027      	beq.n	800485c <_printf_common+0x8c>
 800480c:	0023      	movs	r3, r4
 800480e:	3343      	adds	r3, #67	; 0x43
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	1e5a      	subs	r2, r3, #1
 8004814:	4193      	sbcs	r3, r2
 8004816:	6822      	ldr	r2, [r4, #0]
 8004818:	0692      	lsls	r2, r2, #26
 800481a:	d430      	bmi.n	800487e <_printf_common+0xae>
 800481c:	0022      	movs	r2, r4
 800481e:	9901      	ldr	r1, [sp, #4]
 8004820:	9800      	ldr	r0, [sp, #0]
 8004822:	9e08      	ldr	r6, [sp, #32]
 8004824:	3243      	adds	r2, #67	; 0x43
 8004826:	47b0      	blx	r6
 8004828:	1c43      	adds	r3, r0, #1
 800482a:	d025      	beq.n	8004878 <_printf_common+0xa8>
 800482c:	2306      	movs	r3, #6
 800482e:	6820      	ldr	r0, [r4, #0]
 8004830:	682a      	ldr	r2, [r5, #0]
 8004832:	68e1      	ldr	r1, [r4, #12]
 8004834:	2500      	movs	r5, #0
 8004836:	4003      	ands	r3, r0
 8004838:	2b04      	cmp	r3, #4
 800483a:	d103      	bne.n	8004844 <_printf_common+0x74>
 800483c:	1a8d      	subs	r5, r1, r2
 800483e:	43eb      	mvns	r3, r5
 8004840:	17db      	asrs	r3, r3, #31
 8004842:	401d      	ands	r5, r3
 8004844:	68a3      	ldr	r3, [r4, #8]
 8004846:	6922      	ldr	r2, [r4, #16]
 8004848:	4293      	cmp	r3, r2
 800484a:	dd01      	ble.n	8004850 <_printf_common+0x80>
 800484c:	1a9b      	subs	r3, r3, r2
 800484e:	18ed      	adds	r5, r5, r3
 8004850:	2700      	movs	r7, #0
 8004852:	42bd      	cmp	r5, r7
 8004854:	d120      	bne.n	8004898 <_printf_common+0xc8>
 8004856:	2000      	movs	r0, #0
 8004858:	e010      	b.n	800487c <_printf_common+0xac>
 800485a:	3701      	adds	r7, #1
 800485c:	68e3      	ldr	r3, [r4, #12]
 800485e:	682a      	ldr	r2, [r5, #0]
 8004860:	1a9b      	subs	r3, r3, r2
 8004862:	42bb      	cmp	r3, r7
 8004864:	ddd2      	ble.n	800480c <_printf_common+0x3c>
 8004866:	0022      	movs	r2, r4
 8004868:	2301      	movs	r3, #1
 800486a:	9901      	ldr	r1, [sp, #4]
 800486c:	9800      	ldr	r0, [sp, #0]
 800486e:	9e08      	ldr	r6, [sp, #32]
 8004870:	3219      	adds	r2, #25
 8004872:	47b0      	blx	r6
 8004874:	1c43      	adds	r3, r0, #1
 8004876:	d1f0      	bne.n	800485a <_printf_common+0x8a>
 8004878:	2001      	movs	r0, #1
 800487a:	4240      	negs	r0, r0
 800487c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800487e:	2030      	movs	r0, #48	; 0x30
 8004880:	18e1      	adds	r1, r4, r3
 8004882:	3143      	adds	r1, #67	; 0x43
 8004884:	7008      	strb	r0, [r1, #0]
 8004886:	0021      	movs	r1, r4
 8004888:	1c5a      	adds	r2, r3, #1
 800488a:	3145      	adds	r1, #69	; 0x45
 800488c:	7809      	ldrb	r1, [r1, #0]
 800488e:	18a2      	adds	r2, r4, r2
 8004890:	3243      	adds	r2, #67	; 0x43
 8004892:	3302      	adds	r3, #2
 8004894:	7011      	strb	r1, [r2, #0]
 8004896:	e7c1      	b.n	800481c <_printf_common+0x4c>
 8004898:	0022      	movs	r2, r4
 800489a:	2301      	movs	r3, #1
 800489c:	9901      	ldr	r1, [sp, #4]
 800489e:	9800      	ldr	r0, [sp, #0]
 80048a0:	9e08      	ldr	r6, [sp, #32]
 80048a2:	321a      	adds	r2, #26
 80048a4:	47b0      	blx	r6
 80048a6:	1c43      	adds	r3, r0, #1
 80048a8:	d0e6      	beq.n	8004878 <_printf_common+0xa8>
 80048aa:	3701      	adds	r7, #1
 80048ac:	e7d1      	b.n	8004852 <_printf_common+0x82>
	...

080048b0 <_printf_i>:
 80048b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048b2:	b08b      	sub	sp, #44	; 0x2c
 80048b4:	9206      	str	r2, [sp, #24]
 80048b6:	000a      	movs	r2, r1
 80048b8:	3243      	adds	r2, #67	; 0x43
 80048ba:	9307      	str	r3, [sp, #28]
 80048bc:	9005      	str	r0, [sp, #20]
 80048be:	9204      	str	r2, [sp, #16]
 80048c0:	7e0a      	ldrb	r2, [r1, #24]
 80048c2:	000c      	movs	r4, r1
 80048c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80048c6:	2a78      	cmp	r2, #120	; 0x78
 80048c8:	d806      	bhi.n	80048d8 <_printf_i+0x28>
 80048ca:	2a62      	cmp	r2, #98	; 0x62
 80048cc:	d808      	bhi.n	80048e0 <_printf_i+0x30>
 80048ce:	2a00      	cmp	r2, #0
 80048d0:	d100      	bne.n	80048d4 <_printf_i+0x24>
 80048d2:	e0c0      	b.n	8004a56 <_printf_i+0x1a6>
 80048d4:	2a58      	cmp	r2, #88	; 0x58
 80048d6:	d052      	beq.n	800497e <_printf_i+0xce>
 80048d8:	0026      	movs	r6, r4
 80048da:	3642      	adds	r6, #66	; 0x42
 80048dc:	7032      	strb	r2, [r6, #0]
 80048de:	e022      	b.n	8004926 <_printf_i+0x76>
 80048e0:	0010      	movs	r0, r2
 80048e2:	3863      	subs	r0, #99	; 0x63
 80048e4:	2815      	cmp	r0, #21
 80048e6:	d8f7      	bhi.n	80048d8 <_printf_i+0x28>
 80048e8:	f7fb fc16 	bl	8000118 <__gnu_thumb1_case_shi>
 80048ec:	001f0016 	.word	0x001f0016
 80048f0:	fff6fff6 	.word	0xfff6fff6
 80048f4:	fff6fff6 	.word	0xfff6fff6
 80048f8:	fff6001f 	.word	0xfff6001f
 80048fc:	fff6fff6 	.word	0xfff6fff6
 8004900:	00a8fff6 	.word	0x00a8fff6
 8004904:	009a0036 	.word	0x009a0036
 8004908:	fff6fff6 	.word	0xfff6fff6
 800490c:	fff600b9 	.word	0xfff600b9
 8004910:	fff60036 	.word	0xfff60036
 8004914:	009efff6 	.word	0x009efff6
 8004918:	0026      	movs	r6, r4
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	3642      	adds	r6, #66	; 0x42
 800491e:	1d11      	adds	r1, r2, #4
 8004920:	6019      	str	r1, [r3, #0]
 8004922:	6813      	ldr	r3, [r2, #0]
 8004924:	7033      	strb	r3, [r6, #0]
 8004926:	2301      	movs	r3, #1
 8004928:	e0a7      	b.n	8004a7a <_printf_i+0x1ca>
 800492a:	6808      	ldr	r0, [r1, #0]
 800492c:	6819      	ldr	r1, [r3, #0]
 800492e:	1d0a      	adds	r2, r1, #4
 8004930:	0605      	lsls	r5, r0, #24
 8004932:	d50b      	bpl.n	800494c <_printf_i+0x9c>
 8004934:	680d      	ldr	r5, [r1, #0]
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	2d00      	cmp	r5, #0
 800493a:	da03      	bge.n	8004944 <_printf_i+0x94>
 800493c:	232d      	movs	r3, #45	; 0x2d
 800493e:	9a04      	ldr	r2, [sp, #16]
 8004940:	426d      	negs	r5, r5
 8004942:	7013      	strb	r3, [r2, #0]
 8004944:	4b61      	ldr	r3, [pc, #388]	; (8004acc <_printf_i+0x21c>)
 8004946:	270a      	movs	r7, #10
 8004948:	9303      	str	r3, [sp, #12]
 800494a:	e032      	b.n	80049b2 <_printf_i+0x102>
 800494c:	680d      	ldr	r5, [r1, #0]
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	0641      	lsls	r1, r0, #25
 8004952:	d5f1      	bpl.n	8004938 <_printf_i+0x88>
 8004954:	b22d      	sxth	r5, r5
 8004956:	e7ef      	b.n	8004938 <_printf_i+0x88>
 8004958:	680d      	ldr	r5, [r1, #0]
 800495a:	6819      	ldr	r1, [r3, #0]
 800495c:	1d08      	adds	r0, r1, #4
 800495e:	6018      	str	r0, [r3, #0]
 8004960:	062e      	lsls	r6, r5, #24
 8004962:	d501      	bpl.n	8004968 <_printf_i+0xb8>
 8004964:	680d      	ldr	r5, [r1, #0]
 8004966:	e003      	b.n	8004970 <_printf_i+0xc0>
 8004968:	066d      	lsls	r5, r5, #25
 800496a:	d5fb      	bpl.n	8004964 <_printf_i+0xb4>
 800496c:	680d      	ldr	r5, [r1, #0]
 800496e:	b2ad      	uxth	r5, r5
 8004970:	4b56      	ldr	r3, [pc, #344]	; (8004acc <_printf_i+0x21c>)
 8004972:	270a      	movs	r7, #10
 8004974:	9303      	str	r3, [sp, #12]
 8004976:	2a6f      	cmp	r2, #111	; 0x6f
 8004978:	d117      	bne.n	80049aa <_printf_i+0xfa>
 800497a:	2708      	movs	r7, #8
 800497c:	e015      	b.n	80049aa <_printf_i+0xfa>
 800497e:	3145      	adds	r1, #69	; 0x45
 8004980:	700a      	strb	r2, [r1, #0]
 8004982:	4a52      	ldr	r2, [pc, #328]	; (8004acc <_printf_i+0x21c>)
 8004984:	9203      	str	r2, [sp, #12]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	6821      	ldr	r1, [r4, #0]
 800498a:	ca20      	ldmia	r2!, {r5}
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	0608      	lsls	r0, r1, #24
 8004990:	d550      	bpl.n	8004a34 <_printf_i+0x184>
 8004992:	07cb      	lsls	r3, r1, #31
 8004994:	d502      	bpl.n	800499c <_printf_i+0xec>
 8004996:	2320      	movs	r3, #32
 8004998:	4319      	orrs	r1, r3
 800499a:	6021      	str	r1, [r4, #0]
 800499c:	2710      	movs	r7, #16
 800499e:	2d00      	cmp	r5, #0
 80049a0:	d103      	bne.n	80049aa <_printf_i+0xfa>
 80049a2:	2320      	movs	r3, #32
 80049a4:	6822      	ldr	r2, [r4, #0]
 80049a6:	439a      	bics	r2, r3
 80049a8:	6022      	str	r2, [r4, #0]
 80049aa:	0023      	movs	r3, r4
 80049ac:	2200      	movs	r2, #0
 80049ae:	3343      	adds	r3, #67	; 0x43
 80049b0:	701a      	strb	r2, [r3, #0]
 80049b2:	6863      	ldr	r3, [r4, #4]
 80049b4:	60a3      	str	r3, [r4, #8]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	db03      	blt.n	80049c2 <_printf_i+0x112>
 80049ba:	2204      	movs	r2, #4
 80049bc:	6821      	ldr	r1, [r4, #0]
 80049be:	4391      	bics	r1, r2
 80049c0:	6021      	str	r1, [r4, #0]
 80049c2:	2d00      	cmp	r5, #0
 80049c4:	d102      	bne.n	80049cc <_printf_i+0x11c>
 80049c6:	9e04      	ldr	r6, [sp, #16]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00c      	beq.n	80049e6 <_printf_i+0x136>
 80049cc:	9e04      	ldr	r6, [sp, #16]
 80049ce:	0028      	movs	r0, r5
 80049d0:	0039      	movs	r1, r7
 80049d2:	f7fb fc31 	bl	8000238 <__aeabi_uidivmod>
 80049d6:	9b03      	ldr	r3, [sp, #12]
 80049d8:	3e01      	subs	r6, #1
 80049da:	5c5b      	ldrb	r3, [r3, r1]
 80049dc:	7033      	strb	r3, [r6, #0]
 80049de:	002b      	movs	r3, r5
 80049e0:	0005      	movs	r5, r0
 80049e2:	429f      	cmp	r7, r3
 80049e4:	d9f3      	bls.n	80049ce <_printf_i+0x11e>
 80049e6:	2f08      	cmp	r7, #8
 80049e8:	d109      	bne.n	80049fe <_printf_i+0x14e>
 80049ea:	6823      	ldr	r3, [r4, #0]
 80049ec:	07db      	lsls	r3, r3, #31
 80049ee:	d506      	bpl.n	80049fe <_printf_i+0x14e>
 80049f0:	6863      	ldr	r3, [r4, #4]
 80049f2:	6922      	ldr	r2, [r4, #16]
 80049f4:	4293      	cmp	r3, r2
 80049f6:	dc02      	bgt.n	80049fe <_printf_i+0x14e>
 80049f8:	2330      	movs	r3, #48	; 0x30
 80049fa:	3e01      	subs	r6, #1
 80049fc:	7033      	strb	r3, [r6, #0]
 80049fe:	9b04      	ldr	r3, [sp, #16]
 8004a00:	1b9b      	subs	r3, r3, r6
 8004a02:	6123      	str	r3, [r4, #16]
 8004a04:	9b07      	ldr	r3, [sp, #28]
 8004a06:	0021      	movs	r1, r4
 8004a08:	9300      	str	r3, [sp, #0]
 8004a0a:	9805      	ldr	r0, [sp, #20]
 8004a0c:	9b06      	ldr	r3, [sp, #24]
 8004a0e:	aa09      	add	r2, sp, #36	; 0x24
 8004a10:	f7ff fede 	bl	80047d0 <_printf_common>
 8004a14:	1c43      	adds	r3, r0, #1
 8004a16:	d135      	bne.n	8004a84 <_printf_i+0x1d4>
 8004a18:	2001      	movs	r0, #1
 8004a1a:	4240      	negs	r0, r0
 8004a1c:	b00b      	add	sp, #44	; 0x2c
 8004a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a20:	2220      	movs	r2, #32
 8004a22:	6809      	ldr	r1, [r1, #0]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	6022      	str	r2, [r4, #0]
 8004a28:	0022      	movs	r2, r4
 8004a2a:	2178      	movs	r1, #120	; 0x78
 8004a2c:	3245      	adds	r2, #69	; 0x45
 8004a2e:	7011      	strb	r1, [r2, #0]
 8004a30:	4a27      	ldr	r2, [pc, #156]	; (8004ad0 <_printf_i+0x220>)
 8004a32:	e7a7      	b.n	8004984 <_printf_i+0xd4>
 8004a34:	0648      	lsls	r0, r1, #25
 8004a36:	d5ac      	bpl.n	8004992 <_printf_i+0xe2>
 8004a38:	b2ad      	uxth	r5, r5
 8004a3a:	e7aa      	b.n	8004992 <_printf_i+0xe2>
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	680d      	ldr	r5, [r1, #0]
 8004a40:	1d10      	adds	r0, r2, #4
 8004a42:	6949      	ldr	r1, [r1, #20]
 8004a44:	6018      	str	r0, [r3, #0]
 8004a46:	6813      	ldr	r3, [r2, #0]
 8004a48:	062e      	lsls	r6, r5, #24
 8004a4a:	d501      	bpl.n	8004a50 <_printf_i+0x1a0>
 8004a4c:	6019      	str	r1, [r3, #0]
 8004a4e:	e002      	b.n	8004a56 <_printf_i+0x1a6>
 8004a50:	066d      	lsls	r5, r5, #25
 8004a52:	d5fb      	bpl.n	8004a4c <_printf_i+0x19c>
 8004a54:	8019      	strh	r1, [r3, #0]
 8004a56:	2300      	movs	r3, #0
 8004a58:	9e04      	ldr	r6, [sp, #16]
 8004a5a:	6123      	str	r3, [r4, #16]
 8004a5c:	e7d2      	b.n	8004a04 <_printf_i+0x154>
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	1d11      	adds	r1, r2, #4
 8004a62:	6019      	str	r1, [r3, #0]
 8004a64:	6816      	ldr	r6, [r2, #0]
 8004a66:	2100      	movs	r1, #0
 8004a68:	0030      	movs	r0, r6
 8004a6a:	6862      	ldr	r2, [r4, #4]
 8004a6c:	f000 f832 	bl	8004ad4 <memchr>
 8004a70:	2800      	cmp	r0, #0
 8004a72:	d001      	beq.n	8004a78 <_printf_i+0x1c8>
 8004a74:	1b80      	subs	r0, r0, r6
 8004a76:	6060      	str	r0, [r4, #4]
 8004a78:	6863      	ldr	r3, [r4, #4]
 8004a7a:	6123      	str	r3, [r4, #16]
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	9a04      	ldr	r2, [sp, #16]
 8004a80:	7013      	strb	r3, [r2, #0]
 8004a82:	e7bf      	b.n	8004a04 <_printf_i+0x154>
 8004a84:	6923      	ldr	r3, [r4, #16]
 8004a86:	0032      	movs	r2, r6
 8004a88:	9906      	ldr	r1, [sp, #24]
 8004a8a:	9805      	ldr	r0, [sp, #20]
 8004a8c:	9d07      	ldr	r5, [sp, #28]
 8004a8e:	47a8      	blx	r5
 8004a90:	1c43      	adds	r3, r0, #1
 8004a92:	d0c1      	beq.n	8004a18 <_printf_i+0x168>
 8004a94:	6823      	ldr	r3, [r4, #0]
 8004a96:	079b      	lsls	r3, r3, #30
 8004a98:	d415      	bmi.n	8004ac6 <_printf_i+0x216>
 8004a9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a9c:	68e0      	ldr	r0, [r4, #12]
 8004a9e:	4298      	cmp	r0, r3
 8004aa0:	dabc      	bge.n	8004a1c <_printf_i+0x16c>
 8004aa2:	0018      	movs	r0, r3
 8004aa4:	e7ba      	b.n	8004a1c <_printf_i+0x16c>
 8004aa6:	0022      	movs	r2, r4
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	9906      	ldr	r1, [sp, #24]
 8004aac:	9805      	ldr	r0, [sp, #20]
 8004aae:	9e07      	ldr	r6, [sp, #28]
 8004ab0:	3219      	adds	r2, #25
 8004ab2:	47b0      	blx	r6
 8004ab4:	1c43      	adds	r3, r0, #1
 8004ab6:	d0af      	beq.n	8004a18 <_printf_i+0x168>
 8004ab8:	3501      	adds	r5, #1
 8004aba:	68e3      	ldr	r3, [r4, #12]
 8004abc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004abe:	1a9b      	subs	r3, r3, r2
 8004ac0:	42ab      	cmp	r3, r5
 8004ac2:	dcf0      	bgt.n	8004aa6 <_printf_i+0x1f6>
 8004ac4:	e7e9      	b.n	8004a9a <_printf_i+0x1ea>
 8004ac6:	2500      	movs	r5, #0
 8004ac8:	e7f7      	b.n	8004aba <_printf_i+0x20a>
 8004aca:	46c0      	nop			; (mov r8, r8)
 8004acc:	08004f25 	.word	0x08004f25
 8004ad0:	08004f36 	.word	0x08004f36

08004ad4 <memchr>:
 8004ad4:	b2c9      	uxtb	r1, r1
 8004ad6:	1882      	adds	r2, r0, r2
 8004ad8:	4290      	cmp	r0, r2
 8004ada:	d101      	bne.n	8004ae0 <memchr+0xc>
 8004adc:	2000      	movs	r0, #0
 8004ade:	4770      	bx	lr
 8004ae0:	7803      	ldrb	r3, [r0, #0]
 8004ae2:	428b      	cmp	r3, r1
 8004ae4:	d0fb      	beq.n	8004ade <memchr+0xa>
 8004ae6:	3001      	adds	r0, #1
 8004ae8:	e7f6      	b.n	8004ad8 <memchr+0x4>

08004aea <memcpy>:
 8004aea:	2300      	movs	r3, #0
 8004aec:	b510      	push	{r4, lr}
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d100      	bne.n	8004af4 <memcpy+0xa>
 8004af2:	bd10      	pop	{r4, pc}
 8004af4:	5ccc      	ldrb	r4, [r1, r3]
 8004af6:	54c4      	strb	r4, [r0, r3]
 8004af8:	3301      	adds	r3, #1
 8004afa:	e7f8      	b.n	8004aee <memcpy+0x4>

08004afc <memmove>:
 8004afc:	b510      	push	{r4, lr}
 8004afe:	4288      	cmp	r0, r1
 8004b00:	d902      	bls.n	8004b08 <memmove+0xc>
 8004b02:	188b      	adds	r3, r1, r2
 8004b04:	4298      	cmp	r0, r3
 8004b06:	d303      	bcc.n	8004b10 <memmove+0x14>
 8004b08:	2300      	movs	r3, #0
 8004b0a:	e007      	b.n	8004b1c <memmove+0x20>
 8004b0c:	5c8b      	ldrb	r3, [r1, r2]
 8004b0e:	5483      	strb	r3, [r0, r2]
 8004b10:	3a01      	subs	r2, #1
 8004b12:	d2fb      	bcs.n	8004b0c <memmove+0x10>
 8004b14:	bd10      	pop	{r4, pc}
 8004b16:	5ccc      	ldrb	r4, [r1, r3]
 8004b18:	54c4      	strb	r4, [r0, r3]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d1fa      	bne.n	8004b16 <memmove+0x1a>
 8004b20:	e7f8      	b.n	8004b14 <memmove+0x18>
	...

08004b24 <_free_r>:
 8004b24:	b570      	push	{r4, r5, r6, lr}
 8004b26:	0005      	movs	r5, r0
 8004b28:	2900      	cmp	r1, #0
 8004b2a:	d010      	beq.n	8004b4e <_free_r+0x2a>
 8004b2c:	1f0c      	subs	r4, r1, #4
 8004b2e:	6823      	ldr	r3, [r4, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	da00      	bge.n	8004b36 <_free_r+0x12>
 8004b34:	18e4      	adds	r4, r4, r3
 8004b36:	0028      	movs	r0, r5
 8004b38:	f000 f8d4 	bl	8004ce4 <__malloc_lock>
 8004b3c:	4a1d      	ldr	r2, [pc, #116]	; (8004bb4 <_free_r+0x90>)
 8004b3e:	6813      	ldr	r3, [r2, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d105      	bne.n	8004b50 <_free_r+0x2c>
 8004b44:	6063      	str	r3, [r4, #4]
 8004b46:	6014      	str	r4, [r2, #0]
 8004b48:	0028      	movs	r0, r5
 8004b4a:	f000 f8d3 	bl	8004cf4 <__malloc_unlock>
 8004b4e:	bd70      	pop	{r4, r5, r6, pc}
 8004b50:	42a3      	cmp	r3, r4
 8004b52:	d908      	bls.n	8004b66 <_free_r+0x42>
 8004b54:	6821      	ldr	r1, [r4, #0]
 8004b56:	1860      	adds	r0, r4, r1
 8004b58:	4283      	cmp	r3, r0
 8004b5a:	d1f3      	bne.n	8004b44 <_free_r+0x20>
 8004b5c:	6818      	ldr	r0, [r3, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	1841      	adds	r1, r0, r1
 8004b62:	6021      	str	r1, [r4, #0]
 8004b64:	e7ee      	b.n	8004b44 <_free_r+0x20>
 8004b66:	001a      	movs	r2, r3
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <_free_r+0x4e>
 8004b6e:	42a3      	cmp	r3, r4
 8004b70:	d9f9      	bls.n	8004b66 <_free_r+0x42>
 8004b72:	6811      	ldr	r1, [r2, #0]
 8004b74:	1850      	adds	r0, r2, r1
 8004b76:	42a0      	cmp	r0, r4
 8004b78:	d10b      	bne.n	8004b92 <_free_r+0x6e>
 8004b7a:	6820      	ldr	r0, [r4, #0]
 8004b7c:	1809      	adds	r1, r1, r0
 8004b7e:	1850      	adds	r0, r2, r1
 8004b80:	6011      	str	r1, [r2, #0]
 8004b82:	4283      	cmp	r3, r0
 8004b84:	d1e0      	bne.n	8004b48 <_free_r+0x24>
 8004b86:	6818      	ldr	r0, [r3, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	1841      	adds	r1, r0, r1
 8004b8c:	6011      	str	r1, [r2, #0]
 8004b8e:	6053      	str	r3, [r2, #4]
 8004b90:	e7da      	b.n	8004b48 <_free_r+0x24>
 8004b92:	42a0      	cmp	r0, r4
 8004b94:	d902      	bls.n	8004b9c <_free_r+0x78>
 8004b96:	230c      	movs	r3, #12
 8004b98:	602b      	str	r3, [r5, #0]
 8004b9a:	e7d5      	b.n	8004b48 <_free_r+0x24>
 8004b9c:	6821      	ldr	r1, [r4, #0]
 8004b9e:	1860      	adds	r0, r4, r1
 8004ba0:	4283      	cmp	r3, r0
 8004ba2:	d103      	bne.n	8004bac <_free_r+0x88>
 8004ba4:	6818      	ldr	r0, [r3, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	1841      	adds	r1, r0, r1
 8004baa:	6021      	str	r1, [r4, #0]
 8004bac:	6063      	str	r3, [r4, #4]
 8004bae:	6054      	str	r4, [r2, #4]
 8004bb0:	e7ca      	b.n	8004b48 <_free_r+0x24>
 8004bb2:	46c0      	nop			; (mov r8, r8)
 8004bb4:	200001e8 	.word	0x200001e8

08004bb8 <_malloc_r>:
 8004bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bba:	2303      	movs	r3, #3
 8004bbc:	1ccd      	adds	r5, r1, #3
 8004bbe:	439d      	bics	r5, r3
 8004bc0:	3508      	adds	r5, #8
 8004bc2:	0006      	movs	r6, r0
 8004bc4:	2d0c      	cmp	r5, #12
 8004bc6:	d21f      	bcs.n	8004c08 <_malloc_r+0x50>
 8004bc8:	250c      	movs	r5, #12
 8004bca:	42a9      	cmp	r1, r5
 8004bcc:	d81e      	bhi.n	8004c0c <_malloc_r+0x54>
 8004bce:	0030      	movs	r0, r6
 8004bd0:	f000 f888 	bl	8004ce4 <__malloc_lock>
 8004bd4:	4925      	ldr	r1, [pc, #148]	; (8004c6c <_malloc_r+0xb4>)
 8004bd6:	680a      	ldr	r2, [r1, #0]
 8004bd8:	0014      	movs	r4, r2
 8004bda:	2c00      	cmp	r4, #0
 8004bdc:	d11a      	bne.n	8004c14 <_malloc_r+0x5c>
 8004bde:	4f24      	ldr	r7, [pc, #144]	; (8004c70 <_malloc_r+0xb8>)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d104      	bne.n	8004bf0 <_malloc_r+0x38>
 8004be6:	0021      	movs	r1, r4
 8004be8:	0030      	movs	r0, r6
 8004bea:	f000 f869 	bl	8004cc0 <_sbrk_r>
 8004bee:	6038      	str	r0, [r7, #0]
 8004bf0:	0029      	movs	r1, r5
 8004bf2:	0030      	movs	r0, r6
 8004bf4:	f000 f864 	bl	8004cc0 <_sbrk_r>
 8004bf8:	1c43      	adds	r3, r0, #1
 8004bfa:	d12b      	bne.n	8004c54 <_malloc_r+0x9c>
 8004bfc:	230c      	movs	r3, #12
 8004bfe:	0030      	movs	r0, r6
 8004c00:	6033      	str	r3, [r6, #0]
 8004c02:	f000 f877 	bl	8004cf4 <__malloc_unlock>
 8004c06:	e003      	b.n	8004c10 <_malloc_r+0x58>
 8004c08:	2d00      	cmp	r5, #0
 8004c0a:	dade      	bge.n	8004bca <_malloc_r+0x12>
 8004c0c:	230c      	movs	r3, #12
 8004c0e:	6033      	str	r3, [r6, #0]
 8004c10:	2000      	movs	r0, #0
 8004c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c14:	6823      	ldr	r3, [r4, #0]
 8004c16:	1b5b      	subs	r3, r3, r5
 8004c18:	d419      	bmi.n	8004c4e <_malloc_r+0x96>
 8004c1a:	2b0b      	cmp	r3, #11
 8004c1c:	d903      	bls.n	8004c26 <_malloc_r+0x6e>
 8004c1e:	6023      	str	r3, [r4, #0]
 8004c20:	18e4      	adds	r4, r4, r3
 8004c22:	6025      	str	r5, [r4, #0]
 8004c24:	e003      	b.n	8004c2e <_malloc_r+0x76>
 8004c26:	6863      	ldr	r3, [r4, #4]
 8004c28:	42a2      	cmp	r2, r4
 8004c2a:	d10e      	bne.n	8004c4a <_malloc_r+0x92>
 8004c2c:	600b      	str	r3, [r1, #0]
 8004c2e:	0030      	movs	r0, r6
 8004c30:	f000 f860 	bl	8004cf4 <__malloc_unlock>
 8004c34:	0020      	movs	r0, r4
 8004c36:	2207      	movs	r2, #7
 8004c38:	300b      	adds	r0, #11
 8004c3a:	1d23      	adds	r3, r4, #4
 8004c3c:	4390      	bics	r0, r2
 8004c3e:	1ac2      	subs	r2, r0, r3
 8004c40:	4298      	cmp	r0, r3
 8004c42:	d0e6      	beq.n	8004c12 <_malloc_r+0x5a>
 8004c44:	1a1b      	subs	r3, r3, r0
 8004c46:	50a3      	str	r3, [r4, r2]
 8004c48:	e7e3      	b.n	8004c12 <_malloc_r+0x5a>
 8004c4a:	6053      	str	r3, [r2, #4]
 8004c4c:	e7ef      	b.n	8004c2e <_malloc_r+0x76>
 8004c4e:	0022      	movs	r2, r4
 8004c50:	6864      	ldr	r4, [r4, #4]
 8004c52:	e7c2      	b.n	8004bda <_malloc_r+0x22>
 8004c54:	2303      	movs	r3, #3
 8004c56:	1cc4      	adds	r4, r0, #3
 8004c58:	439c      	bics	r4, r3
 8004c5a:	42a0      	cmp	r0, r4
 8004c5c:	d0e1      	beq.n	8004c22 <_malloc_r+0x6a>
 8004c5e:	1a21      	subs	r1, r4, r0
 8004c60:	0030      	movs	r0, r6
 8004c62:	f000 f82d 	bl	8004cc0 <_sbrk_r>
 8004c66:	1c43      	adds	r3, r0, #1
 8004c68:	d1db      	bne.n	8004c22 <_malloc_r+0x6a>
 8004c6a:	e7c7      	b.n	8004bfc <_malloc_r+0x44>
 8004c6c:	200001e8 	.word	0x200001e8
 8004c70:	200001ec 	.word	0x200001ec

08004c74 <_realloc_r>:
 8004c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c76:	0007      	movs	r7, r0
 8004c78:	000d      	movs	r5, r1
 8004c7a:	0016      	movs	r6, r2
 8004c7c:	2900      	cmp	r1, #0
 8004c7e:	d105      	bne.n	8004c8c <_realloc_r+0x18>
 8004c80:	0011      	movs	r1, r2
 8004c82:	f7ff ff99 	bl	8004bb8 <_malloc_r>
 8004c86:	0004      	movs	r4, r0
 8004c88:	0020      	movs	r0, r4
 8004c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c8c:	2a00      	cmp	r2, #0
 8004c8e:	d103      	bne.n	8004c98 <_realloc_r+0x24>
 8004c90:	f7ff ff48 	bl	8004b24 <_free_r>
 8004c94:	0034      	movs	r4, r6
 8004c96:	e7f7      	b.n	8004c88 <_realloc_r+0x14>
 8004c98:	f000 f834 	bl	8004d04 <_malloc_usable_size_r>
 8004c9c:	002c      	movs	r4, r5
 8004c9e:	42b0      	cmp	r0, r6
 8004ca0:	d2f2      	bcs.n	8004c88 <_realloc_r+0x14>
 8004ca2:	0031      	movs	r1, r6
 8004ca4:	0038      	movs	r0, r7
 8004ca6:	f7ff ff87 	bl	8004bb8 <_malloc_r>
 8004caa:	1e04      	subs	r4, r0, #0
 8004cac:	d0ec      	beq.n	8004c88 <_realloc_r+0x14>
 8004cae:	0029      	movs	r1, r5
 8004cb0:	0032      	movs	r2, r6
 8004cb2:	f7ff ff1a 	bl	8004aea <memcpy>
 8004cb6:	0029      	movs	r1, r5
 8004cb8:	0038      	movs	r0, r7
 8004cba:	f7ff ff33 	bl	8004b24 <_free_r>
 8004cbe:	e7e3      	b.n	8004c88 <_realloc_r+0x14>

08004cc0 <_sbrk_r>:
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	b570      	push	{r4, r5, r6, lr}
 8004cc4:	4d06      	ldr	r5, [pc, #24]	; (8004ce0 <_sbrk_r+0x20>)
 8004cc6:	0004      	movs	r4, r0
 8004cc8:	0008      	movs	r0, r1
 8004cca:	602b      	str	r3, [r5, #0]
 8004ccc:	f7fc fb4c 	bl	8001368 <_sbrk>
 8004cd0:	1c43      	adds	r3, r0, #1
 8004cd2:	d103      	bne.n	8004cdc <_sbrk_r+0x1c>
 8004cd4:	682b      	ldr	r3, [r5, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d000      	beq.n	8004cdc <_sbrk_r+0x1c>
 8004cda:	6023      	str	r3, [r4, #0]
 8004cdc:	bd70      	pop	{r4, r5, r6, pc}
 8004cde:	46c0      	nop			; (mov r8, r8)
 8004ce0:	20000358 	.word	0x20000358

08004ce4 <__malloc_lock>:
 8004ce4:	b510      	push	{r4, lr}
 8004ce6:	4802      	ldr	r0, [pc, #8]	; (8004cf0 <__malloc_lock+0xc>)
 8004ce8:	f000 f814 	bl	8004d14 <__retarget_lock_acquire_recursive>
 8004cec:	bd10      	pop	{r4, pc}
 8004cee:	46c0      	nop			; (mov r8, r8)
 8004cf0:	20000360 	.word	0x20000360

08004cf4 <__malloc_unlock>:
 8004cf4:	b510      	push	{r4, lr}
 8004cf6:	4802      	ldr	r0, [pc, #8]	; (8004d00 <__malloc_unlock+0xc>)
 8004cf8:	f000 f80d 	bl	8004d16 <__retarget_lock_release_recursive>
 8004cfc:	bd10      	pop	{r4, pc}
 8004cfe:	46c0      	nop			; (mov r8, r8)
 8004d00:	20000360 	.word	0x20000360

08004d04 <_malloc_usable_size_r>:
 8004d04:	1f0b      	subs	r3, r1, #4
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	1f18      	subs	r0, r3, #4
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	da01      	bge.n	8004d12 <_malloc_usable_size_r+0xe>
 8004d0e:	580b      	ldr	r3, [r1, r0]
 8004d10:	18c0      	adds	r0, r0, r3
 8004d12:	4770      	bx	lr

08004d14 <__retarget_lock_acquire_recursive>:
 8004d14:	4770      	bx	lr

08004d16 <__retarget_lock_release_recursive>:
 8004d16:	4770      	bx	lr

08004d18 <_init>:
 8004d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d1a:	46c0      	nop			; (mov r8, r8)
 8004d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d1e:	bc08      	pop	{r3}
 8004d20:	469e      	mov	lr, r3
 8004d22:	4770      	bx	lr

08004d24 <_fini>:
 8004d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d26:	46c0      	nop			; (mov r8, r8)
 8004d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d2a:	bc08      	pop	{r3}
 8004d2c:	469e      	mov	lr, r3
 8004d2e:	4770      	bx	lr
