
bdm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003190  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003250  08003250  00013250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032bc  080032bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080032bc  080032bc  000132bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032c4  080032c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032c4  080032c4  000132c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032c8  080032c8  000132c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080032cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  080032d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  080032d8  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e6a8  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001819  00000000  00000000  0002e6dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  0002fef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b20  00000000  00000000  00030aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001402e  00000000  00000000  000315c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b1d8  00000000  00000000  000455ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ebed  00000000  00000000  000507c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cf3b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002af4  00000000  00000000  000cf408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003238 	.word	0x08003238

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003238 	.word	0x08003238

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8d8 	bl	8000484 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8d3 	bl	8000484 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzsi2>:
 8000448:	211c      	movs	r1, #28
 800044a:	2301      	movs	r3, #1
 800044c:	041b      	lsls	r3, r3, #16
 800044e:	4298      	cmp	r0, r3
 8000450:	d301      	bcc.n	8000456 <__clzsi2+0xe>
 8000452:	0c00      	lsrs	r0, r0, #16
 8000454:	3910      	subs	r1, #16
 8000456:	0a1b      	lsrs	r3, r3, #8
 8000458:	4298      	cmp	r0, r3
 800045a:	d301      	bcc.n	8000460 <__clzsi2+0x18>
 800045c:	0a00      	lsrs	r0, r0, #8
 800045e:	3908      	subs	r1, #8
 8000460:	091b      	lsrs	r3, r3, #4
 8000462:	4298      	cmp	r0, r3
 8000464:	d301      	bcc.n	800046a <__clzsi2+0x22>
 8000466:	0900      	lsrs	r0, r0, #4
 8000468:	3904      	subs	r1, #4
 800046a:	a202      	add	r2, pc, #8	; (adr r2, 8000474 <__clzsi2+0x2c>)
 800046c:	5c10      	ldrb	r0, [r2, r0]
 800046e:	1840      	adds	r0, r0, r1
 8000470:	4770      	bx	lr
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	02020304 	.word	0x02020304
 8000478:	01010101 	.word	0x01010101
	...

08000484 <__clzdi2>:
 8000484:	b510      	push	{r4, lr}
 8000486:	2900      	cmp	r1, #0
 8000488:	d103      	bne.n	8000492 <__clzdi2+0xe>
 800048a:	f7ff ffdd 	bl	8000448 <__clzsi2>
 800048e:	3020      	adds	r0, #32
 8000490:	e002      	b.n	8000498 <__clzdi2+0x14>
 8000492:	1c08      	adds	r0, r1, #0
 8000494:	f7ff ffd8 	bl	8000448 <__clzsi2>
 8000498:	bd10      	pop	{r4, pc}
 800049a:	46c0      	nop			; (mov r8, r8)

0800049c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a2:	f000 fae5 	bl	8000a70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a6:	f000 f827 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004aa:	f000 f8e1 	bl	8000670 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004ae:	f000 f877 	bl	80005a0 <MX_SPI1_Init>
  MX_USART5_UART_Init();
 80004b2:	f000 f8ad 	bl	8000610 <MX_USART5_UART_Init>
  /* USER CODE BEGIN 2 */
	stmdev_ctx_t iis2dlpc_ctx;
	iis2dlpc_ctx.write_reg = platform_write;
 80004b6:	1d3b      	adds	r3, r7, #4
 80004b8:	4a0b      	ldr	r2, [pc, #44]	; (80004e8 <main+0x4c>)
 80004ba:	601a      	str	r2, [r3, #0]
	iis2dlpc_ctx.read_reg = platform_read;
 80004bc:	1d3b      	adds	r3, r7, #4
 80004be:	4a0b      	ldr	r2, [pc, #44]	; (80004ec <main+0x50>)
 80004c0:	605a      	str	r2, [r3, #4]
	iis2dlpc_ctx.handle = &IIS2_DLPC_BUS;
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	4a0a      	ldr	r2, [pc, #40]	; (80004f0 <main+0x54>)
 80004c6:	609a      	str	r2, [r3, #8]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	iis2dlpc_device_id_get ( &iis2dlpc_ctx , &whoami );
 80004c8:	4a0a      	ldr	r2, [pc, #40]	; (80004f4 <main+0x58>)
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	0011      	movs	r1, r2
 80004ce:	0018      	movs	r0, r3
 80004d0:	f000 fabc 	bl	8000a4c <iis2dlpc_device_id_get>
	if ( whoami != IIS2DLPC_ID)
 80004d4:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <main+0x58>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	2b44      	cmp	r3, #68	; 0x44
 80004da:	d0f5      	beq.n	80004c8 <main+0x2c>
		HAL_Delay ( 1000 );
 80004dc:	23fa      	movs	r3, #250	; 0xfa
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	0018      	movs	r0, r3
 80004e2:	f000 fb35 	bl	8000b50 <HAL_Delay>
	iis2dlpc_device_id_get ( &iis2dlpc_ctx , &whoami );
 80004e6:	e7ef      	b.n	80004c8 <main+0x2c>
 80004e8:	0800075d 	.word	0x0800075d
 80004ec:	080007c5 	.word	0x080007c5
 80004f0:	200000b0 	.word	0x200000b0
 80004f4:	20000028 	.word	0x20000028

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b590      	push	{r4, r7, lr}
 80004fa:	b095      	sub	sp, #84	; 0x54
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	2418      	movs	r4, #24
 8000500:	193b      	adds	r3, r7, r4
 8000502:	0018      	movs	r0, r3
 8000504:	2338      	movs	r3, #56	; 0x38
 8000506:	001a      	movs	r2, r3
 8000508:	2100      	movs	r1, #0
 800050a:	f002 fe8d 	bl	8003228 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	0018      	movs	r0, r3
 8000512:	2314      	movs	r3, #20
 8000514:	001a      	movs	r2, r3
 8000516:	2100      	movs	r1, #0
 8000518:	f002 fe86 	bl	8003228 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800051c:	4b1e      	ldr	r3, [pc, #120]	; (8000598 <SystemClock_Config+0xa0>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a1e      	ldr	r2, [pc, #120]	; (800059c <SystemClock_Config+0xa4>)
 8000522:	401a      	ands	r2, r3
 8000524:	4b1c      	ldr	r3, [pc, #112]	; (8000598 <SystemClock_Config+0xa0>)
 8000526:	2180      	movs	r1, #128	; 0x80
 8000528:	0109      	lsls	r1, r1, #4
 800052a:	430a      	orrs	r2, r1
 800052c:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800052e:	0021      	movs	r1, r4
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2210      	movs	r2, #16
 8000534:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2201      	movs	r2, #1
 800053a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2200      	movs	r2, #0
 8000540:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000542:	187b      	adds	r3, r7, r1
 8000544:	22a0      	movs	r2, #160	; 0xa0
 8000546:	0212      	lsls	r2, r2, #8
 8000548:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2200      	movs	r2, #0
 800054e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000550:	187b      	adds	r3, r7, r1
 8000552:	0018      	movs	r0, r3
 8000554:	f000 fd70 	bl	8001038 <HAL_RCC_OscConfig>
 8000558:	1e03      	subs	r3, r0, #0
 800055a:	d001      	beq.n	8000560 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800055c:	f000 f96e 	bl	800083c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	220f      	movs	r2, #15
 8000564:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	2200      	movs	r2, #0
 800056a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	2200      	movs	r2, #0
 8000576:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	2200      	movs	r2, #0
 800057c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	2100      	movs	r1, #0
 8000582:	0018      	movs	r0, r3
 8000584:	f001 f92c 	bl	80017e0 <HAL_RCC_ClockConfig>
 8000588:	1e03      	subs	r3, r0, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800058c:	f000 f956 	bl	800083c <Error_Handler>
  }
}
 8000590:	46c0      	nop			; (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	b015      	add	sp, #84	; 0x54
 8000596:	bd90      	pop	{r4, r7, pc}
 8000598:	40007000 	.word	0x40007000
 800059c:	ffffe7ff 	.word	0xffffe7ff

080005a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005a4:	4b18      	ldr	r3, [pc, #96]	; (8000608 <MX_SPI1_Init+0x68>)
 80005a6:	4a19      	ldr	r2, [pc, #100]	; (800060c <MX_SPI1_Init+0x6c>)
 80005a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005aa:	4b17      	ldr	r3, [pc, #92]	; (8000608 <MX_SPI1_Init+0x68>)
 80005ac:	2282      	movs	r2, #130	; 0x82
 80005ae:	0052      	lsls	r2, r2, #1
 80005b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005b2:	4b15      	ldr	r3, [pc, #84]	; (8000608 <MX_SPI1_Init+0x68>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005b8:	4b13      	ldr	r3, [pc, #76]	; (8000608 <MX_SPI1_Init+0x68>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005be:	4b12      	ldr	r3, [pc, #72]	; (8000608 <MX_SPI1_Init+0x68>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005c4:	4b10      	ldr	r3, [pc, #64]	; (8000608 <MX_SPI1_Init+0x68>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005ca:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <MX_SPI1_Init+0x68>)
 80005cc:	2280      	movs	r2, #128	; 0x80
 80005ce:	0092      	lsls	r2, r2, #2
 80005d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80005d2:	4b0d      	ldr	r3, [pc, #52]	; (8000608 <MX_SPI1_Init+0x68>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005d8:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <MX_SPI1_Init+0x68>)
 80005da:	2200      	movs	r2, #0
 80005dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005de:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <MX_SPI1_Init+0x68>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005e4:	4b08      	ldr	r3, [pc, #32]	; (8000608 <MX_SPI1_Init+0x68>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80005ea:	4b07      	ldr	r3, [pc, #28]	; (8000608 <MX_SPI1_Init+0x68>)
 80005ec:	2207      	movs	r2, #7
 80005ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005f0:	4b05      	ldr	r3, [pc, #20]	; (8000608 <MX_SPI1_Init+0x68>)
 80005f2:	0018      	movs	r0, r3
 80005f4:	f001 fb18 	bl	8001c28 <HAL_SPI_Init>
 80005f8:	1e03      	subs	r3, r0, #0
 80005fa:	d001      	beq.n	8000600 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80005fc:	f000 f91e 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000600:	46c0      	nop			; (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	200000b0 	.word	0x200000b0
 800060c:	40013000 	.word	0x40013000

08000610 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8000614:	4b14      	ldr	r3, [pc, #80]	; (8000668 <MX_USART5_UART_Init+0x58>)
 8000616:	4a15      	ldr	r2, [pc, #84]	; (800066c <MX_USART5_UART_Init+0x5c>)
 8000618:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800061a:	4b13      	ldr	r3, [pc, #76]	; (8000668 <MX_USART5_UART_Init+0x58>)
 800061c:	22e1      	movs	r2, #225	; 0xe1
 800061e:	0252      	lsls	r2, r2, #9
 8000620:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_USART5_UART_Init+0x58>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <MX_USART5_UART_Init+0x58>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_USART5_UART_Init+0x58>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_USART5_UART_Init+0x58>)
 8000636:	220c      	movs	r2, #12
 8000638:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063a:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <MX_USART5_UART_Init+0x58>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_USART5_UART_Init+0x58>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <MX_USART5_UART_Init+0x58>)
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <MX_USART5_UART_Init+0x58>)
 800064e:	2200      	movs	r2, #0
 8000650:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000652:	4b05      	ldr	r3, [pc, #20]	; (8000668 <MX_USART5_UART_Init+0x58>)
 8000654:	0018      	movs	r0, r3
 8000656:	f002 f8f1 	bl	800283c <HAL_UART_Init>
 800065a:	1e03      	subs	r3, r0, #0
 800065c:	d001      	beq.n	8000662 <MX_USART5_UART_Init+0x52>
  {
    Error_Handler();
 800065e:	f000 f8ed 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	2000002c 	.word	0x2000002c
 800066c:	40005000 	.word	0x40005000

08000670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000670:	b590      	push	{r4, r7, lr}
 8000672:	b089      	sub	sp, #36	; 0x24
 8000674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000676:	240c      	movs	r4, #12
 8000678:	193b      	adds	r3, r7, r4
 800067a:	0018      	movs	r0, r3
 800067c:	2314      	movs	r3, #20
 800067e:	001a      	movs	r2, r3
 8000680:	2100      	movs	r1, #0
 8000682:	f002 fdd1 	bl	8003228 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	4b33      	ldr	r3, [pc, #204]	; (8000754 <MX_GPIO_Init+0xe4>)
 8000688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800068a:	4b32      	ldr	r3, [pc, #200]	; (8000754 <MX_GPIO_Init+0xe4>)
 800068c:	2101      	movs	r1, #1
 800068e:	430a      	orrs	r2, r1
 8000690:	62da      	str	r2, [r3, #44]	; 0x2c
 8000692:	4b30      	ldr	r3, [pc, #192]	; (8000754 <MX_GPIO_Init+0xe4>)
 8000694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000696:	2201      	movs	r2, #1
 8000698:	4013      	ands	r3, r2
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069e:	4b2d      	ldr	r3, [pc, #180]	; (8000754 <MX_GPIO_Init+0xe4>)
 80006a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006a2:	4b2c      	ldr	r3, [pc, #176]	; (8000754 <MX_GPIO_Init+0xe4>)
 80006a4:	2102      	movs	r1, #2
 80006a6:	430a      	orrs	r2, r1
 80006a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80006aa:	4b2a      	ldr	r3, [pc, #168]	; (8000754 <MX_GPIO_Init+0xe4>)
 80006ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ae:	2202      	movs	r2, #2
 80006b0:	4013      	ands	r3, r2
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IIS2DLPC_CS_GPIO_Port, IIS2DLPC_CS_Pin, GPIO_PIN_RESET);
 80006b6:	2380      	movs	r3, #128	; 0x80
 80006b8:	011b      	lsls	r3, r3, #4
 80006ba:	4827      	ldr	r0, [pc, #156]	; (8000758 <MX_GPIO_Init+0xe8>)
 80006bc:	2200      	movs	r2, #0
 80006be:	0019      	movs	r1, r3
 80006c0:	f000 fc9c 	bl	8000ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IIS2DLPC_SHDN_GPIO_Port, IIS2DLPC_SHDN_Pin, GPIO_PIN_RESET);
 80006c4:	2380      	movs	r3, #128	; 0x80
 80006c6:	0059      	lsls	r1, r3, #1
 80006c8:	23a0      	movs	r3, #160	; 0xa0
 80006ca:	05db      	lsls	r3, r3, #23
 80006cc:	2200      	movs	r2, #0
 80006ce:	0018      	movs	r0, r3
 80006d0:	f000 fc94 	bl	8000ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IIS2DLPC_CS_Pin */
  GPIO_InitStruct.Pin = IIS2DLPC_CS_Pin;
 80006d4:	193b      	adds	r3, r7, r4
 80006d6:	2280      	movs	r2, #128	; 0x80
 80006d8:	0112      	lsls	r2, r2, #4
 80006da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	2201      	movs	r2, #1
 80006e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(IIS2DLPC_CS_GPIO_Port, &GPIO_InitStruct);
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	4a19      	ldr	r2, [pc, #100]	; (8000758 <MX_GPIO_Init+0xe8>)
 80006f2:	0019      	movs	r1, r3
 80006f4:	0010      	movs	r0, r2
 80006f6:	f000 fb03 	bl	8000d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : IIS2DLPC_SHDN_Pin */
  GPIO_InitStruct.Pin = IIS2DLPC_SHDN_Pin;
 80006fa:	0021      	movs	r1, r4
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	2280      	movs	r2, #128	; 0x80
 8000700:	0052      	lsls	r2, r2, #1
 8000702:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000704:	000c      	movs	r4, r1
 8000706:	193b      	adds	r3, r7, r4
 8000708:	2201      	movs	r2, #1
 800070a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	193b      	adds	r3, r7, r4
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000712:	193b      	adds	r3, r7, r4
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(IIS2DLPC_SHDN_GPIO_Port, &GPIO_InitStruct);
 8000718:	193a      	adds	r2, r7, r4
 800071a:	23a0      	movs	r3, #160	; 0xa0
 800071c:	05db      	lsls	r3, r3, #23
 800071e:	0011      	movs	r1, r2
 8000720:	0018      	movs	r0, r3
 8000722:	f000 faed 	bl	8000d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : IIS2DLPC_INT1_Pin */
  GPIO_InitStruct.Pin = IIS2DLPC_INT1_Pin;
 8000726:	0021      	movs	r1, r4
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2280      	movs	r2, #128	; 0x80
 800072c:	0052      	lsls	r2, r2, #1
 800072e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000730:	187b      	adds	r3, r7, r1
 8000732:	2288      	movs	r2, #136	; 0x88
 8000734:	0352      	lsls	r2, r2, #13
 8000736:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	187b      	adds	r3, r7, r1
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IIS2DLPC_INT1_GPIO_Port, &GPIO_InitStruct);
 800073e:	187b      	adds	r3, r7, r1
 8000740:	4a05      	ldr	r2, [pc, #20]	; (8000758 <MX_GPIO_Init+0xe8>)
 8000742:	0019      	movs	r1, r3
 8000744:	0010      	movs	r0, r2
 8000746:	f000 fadb 	bl	8000d00 <HAL_GPIO_Init>

}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	46bd      	mov	sp, r7
 800074e:	b009      	add	sp, #36	; 0x24
 8000750:	bd90      	pop	{r4, r7, pc}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	40021000 	.word	0x40021000
 8000758:	50000400 	.word	0x50000400

0800075c <platform_write>:
 * @param  bufp      pointer to data to write in register reg
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write ( void *handle , uint8_t reg , const uint8_t *bufp , uint16_t len )
{
 800075c:	b5b0      	push	{r4, r5, r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	0008      	movs	r0, r1
 8000766:	607a      	str	r2, [r7, #4]
 8000768:	0019      	movs	r1, r3
 800076a:	240b      	movs	r4, #11
 800076c:	193b      	adds	r3, r7, r4
 800076e:	1c02      	adds	r2, r0, #0
 8000770:	701a      	strb	r2, [r3, #0]
 8000772:	2508      	movs	r5, #8
 8000774:	197b      	adds	r3, r7, r5
 8000776:	1c0a      	adds	r2, r1, #0
 8000778:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin	( IIS2DLPC_CS_GPIO_Port , IIS2DLPC_CS_Pin , GPIO_PIN_RESET );
 800077a:	2380      	movs	r3, #128	; 0x80
 800077c:	011b      	lsls	r3, r3, #4
 800077e:	4810      	ldr	r0, [pc, #64]	; (80007c0 <platform_write+0x64>)
 8000780:	2200      	movs	r2, #0
 8000782:	0019      	movs	r1, r3
 8000784:	f000 fc3a 	bl	8000ffc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit	( handle , &reg , 1 , 1000 );
 8000788:	23fa      	movs	r3, #250	; 0xfa
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	1939      	adds	r1, r7, r4
 800078e:	68f8      	ldr	r0, [r7, #12]
 8000790:	2201      	movs	r2, #1
 8000792:	f001 fadd 	bl	8001d50 <HAL_SPI_Transmit>
	HAL_SPI_Transmit	( handle , (uint8_t*) bufp , len , 1000 );
 8000796:	23fa      	movs	r3, #250	; 0xfa
 8000798:	009c      	lsls	r4, r3, #2
 800079a:	197b      	adds	r3, r7, r5
 800079c:	881a      	ldrh	r2, [r3, #0]
 800079e:	6879      	ldr	r1, [r7, #4]
 80007a0:	68f8      	ldr	r0, [r7, #12]
 80007a2:	0023      	movs	r3, r4
 80007a4:	f001 fad4 	bl	8001d50 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin	( IIS2DLPC_CS_GPIO_Port , IIS2DLPC_CS_Pin , GPIO_PIN_SET);
 80007a8:	2380      	movs	r3, #128	; 0x80
 80007aa:	011b      	lsls	r3, r3, #4
 80007ac:	4804      	ldr	r0, [pc, #16]	; (80007c0 <platform_write+0x64>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	0019      	movs	r1, r3
 80007b2:	f000 fc23 	bl	8000ffc <HAL_GPIO_WritePin>
	return 0;
 80007b6:	2300      	movs	r3, #0
}
 80007b8:	0018      	movs	r0, r3
 80007ba:	46bd      	mov	sp, r7
 80007bc:	b004      	add	sp, #16
 80007be:	bdb0      	pop	{r4, r5, r7, pc}
 80007c0:	50000400 	.word	0x50000400

080007c4 <platform_read>:
 * @param  bufp      pointer to buffer that store the data read
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read ( void *handle , uint8_t reg , uint8_t *bufp , uint16_t len )
{
 80007c4:	b5b0      	push	{r4, r5, r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	0008      	movs	r0, r1
 80007ce:	607a      	str	r2, [r7, #4]
 80007d0:	0019      	movs	r1, r3
 80007d2:	240b      	movs	r4, #11
 80007d4:	193b      	adds	r3, r7, r4
 80007d6:	1c02      	adds	r2, r0, #0
 80007d8:	701a      	strb	r2, [r3, #0]
 80007da:	2508      	movs	r5, #8
 80007dc:	197b      	adds	r3, r7, r5
 80007de:	1c0a      	adds	r2, r1, #0
 80007e0:	801a      	strh	r2, [r3, #0]
	reg |= 0x80;
 80007e2:	193b      	adds	r3, r7, r4
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2280      	movs	r2, #128	; 0x80
 80007e8:	4252      	negs	r2, r2
 80007ea:	4313      	orrs	r3, r2
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	193b      	adds	r3, r7, r4
 80007f0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin ( IIS2DLPC_CS_GPIO_Port , IIS2DLPC_CS_Pin , GPIO_PIN_RESET);
 80007f2:	2380      	movs	r3, #128	; 0x80
 80007f4:	011b      	lsls	r3, r3, #4
 80007f6:	4810      	ldr	r0, [pc, #64]	; (8000838 <platform_read+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	0019      	movs	r1, r3
 80007fc:	f000 fbfe 	bl	8000ffc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit ( handle , &reg , 1 , 1000 );
 8000800:	23fa      	movs	r3, #250	; 0xfa
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	1939      	adds	r1, r7, r4
 8000806:	68f8      	ldr	r0, [r7, #12]
 8000808:	2201      	movs	r2, #1
 800080a:	f001 faa1 	bl	8001d50 <HAL_SPI_Transmit>
	HAL_SPI_Receive ( handle , bufp , len , 1000 );
 800080e:	23fa      	movs	r3, #250	; 0xfa
 8000810:	009c      	lsls	r4, r3, #2
 8000812:	197b      	adds	r3, r7, r5
 8000814:	881a      	ldrh	r2, [r3, #0]
 8000816:	6879      	ldr	r1, [r7, #4]
 8000818:	68f8      	ldr	r0, [r7, #12]
 800081a:	0023      	movs	r3, r4
 800081c:	f001 fbee 	bl	8001ffc <HAL_SPI_Receive>
	HAL_GPIO_WritePin ( IIS2DLPC_CS_GPIO_Port , IIS2DLPC_CS_Pin , GPIO_PIN_SET);
 8000820:	2380      	movs	r3, #128	; 0x80
 8000822:	011b      	lsls	r3, r3, #4
 8000824:	4804      	ldr	r0, [pc, #16]	; (8000838 <platform_read+0x74>)
 8000826:	2201      	movs	r2, #1
 8000828:	0019      	movs	r1, r3
 800082a:	f000 fbe7 	bl	8000ffc <HAL_GPIO_WritePin>
	return 0;
 800082e:	2300      	movs	r3, #0
}
 8000830:	0018      	movs	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	b004      	add	sp, #16
 8000836:	bdb0      	pop	{r4, r5, r7, pc}
 8000838:	50000400 	.word	0x50000400

0800083c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000840:	b672      	cpsid	i
}
 8000842:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000844:	e7fe      	b.n	8000844 <Error_Handler+0x8>
	...

08000848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084c:	4b07      	ldr	r3, [pc, #28]	; (800086c <HAL_MspInit+0x24>)
 800084e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <HAL_MspInit+0x24>)
 8000852:	2101      	movs	r1, #1
 8000854:	430a      	orrs	r2, r1
 8000856:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000858:	4b04      	ldr	r3, [pc, #16]	; (800086c <HAL_MspInit+0x24>)
 800085a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800085c:	4b03      	ldr	r3, [pc, #12]	; (800086c <HAL_MspInit+0x24>)
 800085e:	2180      	movs	r1, #128	; 0x80
 8000860:	0549      	lsls	r1, r1, #21
 8000862:	430a      	orrs	r2, r1
 8000864:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40021000 	.word	0x40021000

08000870 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000870:	b590      	push	{r4, r7, lr}
 8000872:	b089      	sub	sp, #36	; 0x24
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	240c      	movs	r4, #12
 800087a:	193b      	adds	r3, r7, r4
 800087c:	0018      	movs	r0, r3
 800087e:	2314      	movs	r3, #20
 8000880:	001a      	movs	r2, r3
 8000882:	2100      	movs	r1, #0
 8000884:	f002 fcd0 	bl	8003228 <memset>
  if(hspi->Instance==SPI1)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a18      	ldr	r2, [pc, #96]	; (80008f0 <HAL_SPI_MspInit+0x80>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d129      	bne.n	80008e6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000892:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <HAL_SPI_MspInit+0x84>)
 8000894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000896:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <HAL_SPI_MspInit+0x84>)
 8000898:	2180      	movs	r1, #128	; 0x80
 800089a:	0149      	lsls	r1, r1, #5
 800089c:	430a      	orrs	r2, r1
 800089e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <HAL_SPI_MspInit+0x84>)
 80008a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008a4:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <HAL_SPI_MspInit+0x84>)
 80008a6:	2101      	movs	r1, #1
 80008a8:	430a      	orrs	r2, r1
 80008aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80008ac:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <HAL_SPI_MspInit+0x84>)
 80008ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b0:	2201      	movs	r2, #1
 80008b2:	4013      	ands	r3, r2
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008b8:	0021      	movs	r1, r4
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	22e0      	movs	r2, #224	; 0xe0
 80008be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	2202      	movs	r2, #2
 80008c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	2203      	movs	r2, #3
 80008d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d8:	187a      	adds	r2, r7, r1
 80008da:	23a0      	movs	r3, #160	; 0xa0
 80008dc:	05db      	lsls	r3, r3, #23
 80008de:	0011      	movs	r1, r2
 80008e0:	0018      	movs	r0, r3
 80008e2:	f000 fa0d 	bl	8000d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	46bd      	mov	sp, r7
 80008ea:	b009      	add	sp, #36	; 0x24
 80008ec:	bd90      	pop	{r4, r7, pc}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	40013000 	.word	0x40013000
 80008f4:	40021000 	.word	0x40021000

080008f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	b089      	sub	sp, #36	; 0x24
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	240c      	movs	r4, #12
 8000902:	193b      	adds	r3, r7, r4
 8000904:	0018      	movs	r0, r3
 8000906:	2314      	movs	r3, #20
 8000908:	001a      	movs	r2, r3
 800090a:	2100      	movs	r1, #0
 800090c:	f002 fc8c 	bl	8003228 <memset>
  if(huart->Instance==USART5)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a17      	ldr	r2, [pc, #92]	; (8000974 <HAL_UART_MspInit+0x7c>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d128      	bne.n	800096c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART5_MspInit 0 */

  /* USER CODE END USART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART5_CLK_ENABLE();
 800091a:	4b17      	ldr	r3, [pc, #92]	; (8000978 <HAL_UART_MspInit+0x80>)
 800091c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800091e:	4b16      	ldr	r3, [pc, #88]	; (8000978 <HAL_UART_MspInit+0x80>)
 8000920:	2180      	movs	r1, #128	; 0x80
 8000922:	0349      	lsls	r1, r1, #13
 8000924:	430a      	orrs	r2, r1
 8000926:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <HAL_UART_MspInit+0x80>)
 800092a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <HAL_UART_MspInit+0x80>)
 800092e:	2102      	movs	r1, #2
 8000930:	430a      	orrs	r2, r1
 8000932:	62da      	str	r2, [r3, #44]	; 0x2c
 8000934:	4b10      	ldr	r3, [pc, #64]	; (8000978 <HAL_UART_MspInit+0x80>)
 8000936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000938:	2202      	movs	r2, #2
 800093a:	4013      	ands	r3, r2
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	68bb      	ldr	r3, [r7, #8]
    /**USART5 GPIO Configuration
    PB3     ------> USART5_TX
    PB4     ------> USART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000940:	0021      	movs	r1, r4
 8000942:	187b      	adds	r3, r7, r1
 8000944:	2218      	movs	r2, #24
 8000946:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000948:	187b      	adds	r3, r7, r1
 800094a:	2202      	movs	r2, #2
 800094c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	187b      	adds	r3, r7, r1
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000954:	187b      	adds	r3, r7, r1
 8000956:	2203      	movs	r2, #3
 8000958:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 800095a:	187b      	adds	r3, r7, r1
 800095c:	2206      	movs	r2, #6
 800095e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000960:	187b      	adds	r3, r7, r1
 8000962:	4a06      	ldr	r2, [pc, #24]	; (800097c <HAL_UART_MspInit+0x84>)
 8000964:	0019      	movs	r1, r3
 8000966:	0010      	movs	r0, r2
 8000968:	f000 f9ca 	bl	8000d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	b009      	add	sp, #36	; 0x24
 8000972:	bd90      	pop	{r4, r7, pc}
 8000974:	40005000 	.word	0x40005000
 8000978:	40021000 	.word	0x40021000
 800097c:	50000400 	.word	0x50000400

08000980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <NMI_Handler+0x4>

08000986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098a:	e7fe      	b.n	800098a <HardFault_Handler+0x4>

0800098c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000990:	46c0      	nop			; (mov r8, r8)
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a4:	f000 f8b8 	bl	8000b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a8:	46c0      	nop			; (mov r8, r8)
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80009b8:	480d      	ldr	r0, [pc, #52]	; (80009f0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80009ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009bc:	480d      	ldr	r0, [pc, #52]	; (80009f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80009be:	490e      	ldr	r1, [pc, #56]	; (80009f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009c0:	4a0e      	ldr	r2, [pc, #56]	; (80009fc <LoopForever+0xe>)
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c4:	e002      	b.n	80009cc <LoopCopyDataInit>

080009c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ca:	3304      	adds	r3, #4

080009cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d0:	d3f9      	bcc.n	80009c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d2:	4a0b      	ldr	r2, [pc, #44]	; (8000a00 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009d4:	4c0b      	ldr	r4, [pc, #44]	; (8000a04 <LoopForever+0x16>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d8:	e001      	b.n	80009de <LoopFillZerobss>

080009da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009dc:	3204      	adds	r2, #4

080009de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e0:	d3fb      	bcc.n	80009da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009e2:	f7ff ffe4 	bl	80009ae <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009e6:	f002 fbfb 	bl	80031e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ea:	f7ff fd57 	bl	800049c <main>

080009ee <LoopForever>:

LoopForever:
    b LoopForever
 80009ee:	e7fe      	b.n	80009ee <LoopForever>
   ldr   r0, =_estack
 80009f0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80009f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009fc:	080032cc 	.word	0x080032cc
  ldr r2, =_sbss
 8000a00:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a04:	2000010c 	.word	0x2000010c

08000a08 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a08:	e7fe      	b.n	8000a08 <ADC1_COMP_IRQHandler>

08000a0a <iis2dlpc_read_reg>:
  *
  */
int32_t iis2dlpc_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8000a0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a0c:	b087      	sub	sp, #28
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	60f8      	str	r0, [r7, #12]
 8000a12:	0008      	movs	r0, r1
 8000a14:	607a      	str	r2, [r7, #4]
 8000a16:	0019      	movs	r1, r3
 8000a18:	260b      	movs	r6, #11
 8000a1a:	19bb      	adds	r3, r7, r6
 8000a1c:	1c02      	adds	r2, r0, #0
 8000a1e:	701a      	strb	r2, [r3, #0]
 8000a20:	2508      	movs	r5, #8
 8000a22:	197b      	adds	r3, r7, r5
 8000a24:	1c0a      	adds	r2, r1, #0
 8000a26:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	685c      	ldr	r4, [r3, #4]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	6898      	ldr	r0, [r3, #8]
 8000a30:	197b      	adds	r3, r7, r5
 8000a32:	881d      	ldrh	r5, [r3, #0]
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	19bb      	adds	r3, r7, r6
 8000a38:	7819      	ldrb	r1, [r3, #0]
 8000a3a:	002b      	movs	r3, r5
 8000a3c:	47a0      	blx	r4
 8000a3e:	0003      	movs	r3, r0
 8000a40:	617b      	str	r3, [r7, #20]

  return ret;
 8000a42:	697b      	ldr	r3, [r7, #20]
}
 8000a44:	0018      	movs	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	b007      	add	sp, #28
 8000a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000a4c <iis2dlpc_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_WHO_AM_I, buff, 1);
 8000a56:	683a      	ldr	r2, [r7, #0]
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	210f      	movs	r1, #15
 8000a5e:	f7ff ffd4 	bl	8000a0a <iis2dlpc_read_reg>
 8000a62:	0003      	movs	r3, r0
 8000a64:	60fb      	str	r3, [r7, #12]

  return ret;
 8000a66:	68fb      	ldr	r3, [r7, #12]
}
 8000a68:	0018      	movs	r0, r3
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	b004      	add	sp, #16
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a76:	1dfb      	adds	r3, r7, #7
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000a7c:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <HAL_Init+0x3c>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <HAL_Init+0x3c>)
 8000a82:	2140      	movs	r1, #64	; 0x40
 8000a84:	430a      	orrs	r2, r1
 8000a86:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a88:	2003      	movs	r0, #3
 8000a8a:	f000 f811 	bl	8000ab0 <HAL_InitTick>
 8000a8e:	1e03      	subs	r3, r0, #0
 8000a90:	d003      	beq.n	8000a9a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000a92:	1dfb      	adds	r3, r7, #7
 8000a94:	2201      	movs	r2, #1
 8000a96:	701a      	strb	r2, [r3, #0]
 8000a98:	e001      	b.n	8000a9e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a9a:	f7ff fed5 	bl	8000848 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a9e:	1dfb      	adds	r3, r7, #7
 8000aa0:	781b      	ldrb	r3, [r3, #0]
}
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	b002      	add	sp, #8
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	40022000 	.word	0x40022000

08000ab0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ab8:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <HAL_InitTick+0x5c>)
 8000aba:	681c      	ldr	r4, [r3, #0]
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <HAL_InitTick+0x60>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	0019      	movs	r1, r3
 8000ac2:	23fa      	movs	r3, #250	; 0xfa
 8000ac4:	0098      	lsls	r0, r3, #2
 8000ac6:	f7ff fb1f 	bl	8000108 <__udivsi3>
 8000aca:	0003      	movs	r3, r0
 8000acc:	0019      	movs	r1, r3
 8000ace:	0020      	movs	r0, r4
 8000ad0:	f7ff fb1a 	bl	8000108 <__udivsi3>
 8000ad4:	0003      	movs	r3, r0
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f000 f905 	bl	8000ce6 <HAL_SYSTICK_Config>
 8000adc:	1e03      	subs	r3, r0, #0
 8000ade:	d001      	beq.n	8000ae4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	e00f      	b.n	8000b04 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2b03      	cmp	r3, #3
 8000ae8:	d80b      	bhi.n	8000b02 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	2301      	movs	r3, #1
 8000aee:	425b      	negs	r3, r3
 8000af0:	2200      	movs	r2, #0
 8000af2:	0018      	movs	r0, r3
 8000af4:	f000 f8e2 	bl	8000cbc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_InitTick+0x64>)
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000afe:	2300      	movs	r3, #0
 8000b00:	e000      	b.n	8000b04 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
}
 8000b04:	0018      	movs	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	b003      	add	sp, #12
 8000b0a:	bd90      	pop	{r4, r7, pc}
 8000b0c:	20000000 	.word	0x20000000
 8000b10:	20000008 	.word	0x20000008
 8000b14:	20000004 	.word	0x20000004

08000b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <HAL_IncTick+0x1c>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	001a      	movs	r2, r3
 8000b22:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <HAL_IncTick+0x20>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	18d2      	adds	r2, r2, r3
 8000b28:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <HAL_IncTick+0x20>)
 8000b2a:	601a      	str	r2, [r3, #0]
}
 8000b2c:	46c0      	nop			; (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	20000008 	.word	0x20000008
 8000b38:	20000108 	.word	0x20000108

08000b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b40:	4b02      	ldr	r3, [pc, #8]	; (8000b4c <HAL_GetTick+0x10>)
 8000b42:	681b      	ldr	r3, [r3, #0]
}
 8000b44:	0018      	movs	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	20000108 	.word	0x20000108

08000b50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b58:	f7ff fff0 	bl	8000b3c <HAL_GetTick>
 8000b5c:	0003      	movs	r3, r0
 8000b5e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	3301      	adds	r3, #1
 8000b68:	d005      	beq.n	8000b76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <HAL_Delay+0x44>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	001a      	movs	r2, r3
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	189b      	adds	r3, r3, r2
 8000b74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	f7ff ffe0 	bl	8000b3c <HAL_GetTick>
 8000b7c:	0002      	movs	r2, r0
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d8f7      	bhi.n	8000b78 <HAL_Delay+0x28>
  {
  }
}
 8000b88:	46c0      	nop			; (mov r8, r8)
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	b004      	add	sp, #16
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	20000008 	.word	0x20000008

08000b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b98:	b590      	push	{r4, r7, lr}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	0002      	movs	r2, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	1dfb      	adds	r3, r7, #7
 8000ba4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ba6:	1dfb      	adds	r3, r7, #7
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	2b7f      	cmp	r3, #127	; 0x7f
 8000bac:	d828      	bhi.n	8000c00 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bae:	4a2f      	ldr	r2, [pc, #188]	; (8000c6c <__NVIC_SetPriority+0xd4>)
 8000bb0:	1dfb      	adds	r3, r7, #7
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	b25b      	sxtb	r3, r3
 8000bb6:	089b      	lsrs	r3, r3, #2
 8000bb8:	33c0      	adds	r3, #192	; 0xc0
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	589b      	ldr	r3, [r3, r2]
 8000bbe:	1dfa      	adds	r2, r7, #7
 8000bc0:	7812      	ldrb	r2, [r2, #0]
 8000bc2:	0011      	movs	r1, r2
 8000bc4:	2203      	movs	r2, #3
 8000bc6:	400a      	ands	r2, r1
 8000bc8:	00d2      	lsls	r2, r2, #3
 8000bca:	21ff      	movs	r1, #255	; 0xff
 8000bcc:	4091      	lsls	r1, r2
 8000bce:	000a      	movs	r2, r1
 8000bd0:	43d2      	mvns	r2, r2
 8000bd2:	401a      	ands	r2, r3
 8000bd4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	019b      	lsls	r3, r3, #6
 8000bda:	22ff      	movs	r2, #255	; 0xff
 8000bdc:	401a      	ands	r2, r3
 8000bde:	1dfb      	adds	r3, r7, #7
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	0018      	movs	r0, r3
 8000be4:	2303      	movs	r3, #3
 8000be6:	4003      	ands	r3, r0
 8000be8:	00db      	lsls	r3, r3, #3
 8000bea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bec:	481f      	ldr	r0, [pc, #124]	; (8000c6c <__NVIC_SetPriority+0xd4>)
 8000bee:	1dfb      	adds	r3, r7, #7
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	b25b      	sxtb	r3, r3
 8000bf4:	089b      	lsrs	r3, r3, #2
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	33c0      	adds	r3, #192	; 0xc0
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bfe:	e031      	b.n	8000c64 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c00:	4a1b      	ldr	r2, [pc, #108]	; (8000c70 <__NVIC_SetPriority+0xd8>)
 8000c02:	1dfb      	adds	r3, r7, #7
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	0019      	movs	r1, r3
 8000c08:	230f      	movs	r3, #15
 8000c0a:	400b      	ands	r3, r1
 8000c0c:	3b08      	subs	r3, #8
 8000c0e:	089b      	lsrs	r3, r3, #2
 8000c10:	3306      	adds	r3, #6
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	18d3      	adds	r3, r2, r3
 8000c16:	3304      	adds	r3, #4
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	1dfa      	adds	r2, r7, #7
 8000c1c:	7812      	ldrb	r2, [r2, #0]
 8000c1e:	0011      	movs	r1, r2
 8000c20:	2203      	movs	r2, #3
 8000c22:	400a      	ands	r2, r1
 8000c24:	00d2      	lsls	r2, r2, #3
 8000c26:	21ff      	movs	r1, #255	; 0xff
 8000c28:	4091      	lsls	r1, r2
 8000c2a:	000a      	movs	r2, r1
 8000c2c:	43d2      	mvns	r2, r2
 8000c2e:	401a      	ands	r2, r3
 8000c30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	019b      	lsls	r3, r3, #6
 8000c36:	22ff      	movs	r2, #255	; 0xff
 8000c38:	401a      	ands	r2, r3
 8000c3a:	1dfb      	adds	r3, r7, #7
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	0018      	movs	r0, r3
 8000c40:	2303      	movs	r3, #3
 8000c42:	4003      	ands	r3, r0
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c48:	4809      	ldr	r0, [pc, #36]	; (8000c70 <__NVIC_SetPriority+0xd8>)
 8000c4a:	1dfb      	adds	r3, r7, #7
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	001c      	movs	r4, r3
 8000c50:	230f      	movs	r3, #15
 8000c52:	4023      	ands	r3, r4
 8000c54:	3b08      	subs	r3, #8
 8000c56:	089b      	lsrs	r3, r3, #2
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	3306      	adds	r3, #6
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	18c3      	adds	r3, r0, r3
 8000c60:	3304      	adds	r3, #4
 8000c62:	601a      	str	r2, [r3, #0]
}
 8000c64:	46c0      	nop			; (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	b003      	add	sp, #12
 8000c6a:	bd90      	pop	{r4, r7, pc}
 8000c6c:	e000e100 	.word	0xe000e100
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	1e5a      	subs	r2, r3, #1
 8000c80:	2380      	movs	r3, #128	; 0x80
 8000c82:	045b      	lsls	r3, r3, #17
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d301      	bcc.n	8000c8c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e010      	b.n	8000cae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c8c:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <SysTick_Config+0x44>)
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	3a01      	subs	r2, #1
 8000c92:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c94:	2301      	movs	r3, #1
 8000c96:	425b      	negs	r3, r3
 8000c98:	2103      	movs	r1, #3
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f7ff ff7c 	bl	8000b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <SysTick_Config+0x44>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ca6:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <SysTick_Config+0x44>)
 8000ca8:	2207      	movs	r2, #7
 8000caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	0018      	movs	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b002      	add	sp, #8
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	e000e010 	.word	0xe000e010

08000cbc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
 8000cc6:	210f      	movs	r1, #15
 8000cc8:	187b      	adds	r3, r7, r1
 8000cca:	1c02      	adds	r2, r0, #0
 8000ccc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	187b      	adds	r3, r7, r1
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	b25b      	sxtb	r3, r3
 8000cd6:	0011      	movs	r1, r2
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f7ff ff5d 	bl	8000b98 <__NVIC_SetPriority>
}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	b004      	add	sp, #16
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f7ff ffbf 	bl	8000c74 <SysTick_Config>
 8000cf6:	0003      	movs	r3, r0
}
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	b002      	add	sp, #8
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d16:	e155      	b.n	8000fc4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	697a      	ldr	r2, [r7, #20]
 8000d20:	4091      	lsls	r1, r2
 8000d22:	000a      	movs	r2, r1
 8000d24:	4013      	ands	r3, r2
 8000d26:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d100      	bne.n	8000d30 <HAL_GPIO_Init+0x30>
 8000d2e:	e146      	b.n	8000fbe <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	2203      	movs	r2, #3
 8000d36:	4013      	ands	r3, r2
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d005      	beq.n	8000d48 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	2203      	movs	r2, #3
 8000d42:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d130      	bne.n	8000daa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	2203      	movs	r2, #3
 8000d54:	409a      	lsls	r2, r3
 8000d56:	0013      	movs	r3, r2
 8000d58:	43da      	mvns	r2, r3
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	68da      	ldr	r2, [r3, #12]
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	409a      	lsls	r2, r3
 8000d6a:	0013      	movs	r3, r2
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d7e:	2201      	movs	r2, #1
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	409a      	lsls	r2, r3
 8000d84:	0013      	movs	r3, r2
 8000d86:	43da      	mvns	r2, r3
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	091b      	lsrs	r3, r3, #4
 8000d94:	2201      	movs	r2, #1
 8000d96:	401a      	ands	r2, r3
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	409a      	lsls	r2, r3
 8000d9c:	0013      	movs	r3, r2
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	2203      	movs	r2, #3
 8000db0:	4013      	ands	r3, r2
 8000db2:	2b03      	cmp	r3, #3
 8000db4:	d017      	beq.n	8000de6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	68db      	ldr	r3, [r3, #12]
 8000dba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	409a      	lsls	r2, r3
 8000dc4:	0013      	movs	r3, r2
 8000dc6:	43da      	mvns	r2, r3
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	689a      	ldr	r2, [r3, #8]
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	409a      	lsls	r2, r3
 8000dd8:	0013      	movs	r3, r2
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	2203      	movs	r2, #3
 8000dec:	4013      	ands	r3, r2
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d123      	bne.n	8000e3a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	08da      	lsrs	r2, r3, #3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	3208      	adds	r2, #8
 8000dfa:	0092      	lsls	r2, r2, #2
 8000dfc:	58d3      	ldr	r3, [r2, r3]
 8000dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	2207      	movs	r2, #7
 8000e04:	4013      	ands	r3, r2
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	220f      	movs	r2, #15
 8000e0a:	409a      	lsls	r2, r3
 8000e0c:	0013      	movs	r3, r2
 8000e0e:	43da      	mvns	r2, r3
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	4013      	ands	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	691a      	ldr	r2, [r3, #16]
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	2107      	movs	r1, #7
 8000e1e:	400b      	ands	r3, r1
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	409a      	lsls	r2, r3
 8000e24:	0013      	movs	r3, r2
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	08da      	lsrs	r2, r3, #3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3208      	adds	r2, #8
 8000e34:	0092      	lsls	r2, r2, #2
 8000e36:	6939      	ldr	r1, [r7, #16]
 8000e38:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	2203      	movs	r2, #3
 8000e46:	409a      	lsls	r2, r3
 8000e48:	0013      	movs	r3, r2
 8000e4a:	43da      	mvns	r2, r3
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	2203      	movs	r2, #3
 8000e58:	401a      	ands	r2, r3
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	409a      	lsls	r2, r3
 8000e60:	0013      	movs	r3, r2
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685a      	ldr	r2, [r3, #4]
 8000e72:	23c0      	movs	r3, #192	; 0xc0
 8000e74:	029b      	lsls	r3, r3, #10
 8000e76:	4013      	ands	r3, r2
 8000e78:	d100      	bne.n	8000e7c <HAL_GPIO_Init+0x17c>
 8000e7a:	e0a0      	b.n	8000fbe <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e7c:	4b57      	ldr	r3, [pc, #348]	; (8000fdc <HAL_GPIO_Init+0x2dc>)
 8000e7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e80:	4b56      	ldr	r3, [pc, #344]	; (8000fdc <HAL_GPIO_Init+0x2dc>)
 8000e82:	2101      	movs	r1, #1
 8000e84:	430a      	orrs	r2, r1
 8000e86:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e88:	4a55      	ldr	r2, [pc, #340]	; (8000fe0 <HAL_GPIO_Init+0x2e0>)
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	089b      	lsrs	r3, r3, #2
 8000e8e:	3302      	adds	r3, #2
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	589b      	ldr	r3, [r3, r2]
 8000e94:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	2203      	movs	r2, #3
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	220f      	movs	r2, #15
 8000ea0:	409a      	lsls	r2, r3
 8000ea2:	0013      	movs	r3, r2
 8000ea4:	43da      	mvns	r2, r3
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	23a0      	movs	r3, #160	; 0xa0
 8000eb0:	05db      	lsls	r3, r3, #23
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d01f      	beq.n	8000ef6 <HAL_GPIO_Init+0x1f6>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a4a      	ldr	r2, [pc, #296]	; (8000fe4 <HAL_GPIO_Init+0x2e4>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d019      	beq.n	8000ef2 <HAL_GPIO_Init+0x1f2>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a49      	ldr	r2, [pc, #292]	; (8000fe8 <HAL_GPIO_Init+0x2e8>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d013      	beq.n	8000eee <HAL_GPIO_Init+0x1ee>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a48      	ldr	r2, [pc, #288]	; (8000fec <HAL_GPIO_Init+0x2ec>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d00d      	beq.n	8000eea <HAL_GPIO_Init+0x1ea>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a47      	ldr	r2, [pc, #284]	; (8000ff0 <HAL_GPIO_Init+0x2f0>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d007      	beq.n	8000ee6 <HAL_GPIO_Init+0x1e6>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a46      	ldr	r2, [pc, #280]	; (8000ff4 <HAL_GPIO_Init+0x2f4>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d101      	bne.n	8000ee2 <HAL_GPIO_Init+0x1e2>
 8000ede:	2305      	movs	r3, #5
 8000ee0:	e00a      	b.n	8000ef8 <HAL_GPIO_Init+0x1f8>
 8000ee2:	2306      	movs	r3, #6
 8000ee4:	e008      	b.n	8000ef8 <HAL_GPIO_Init+0x1f8>
 8000ee6:	2304      	movs	r3, #4
 8000ee8:	e006      	b.n	8000ef8 <HAL_GPIO_Init+0x1f8>
 8000eea:	2303      	movs	r3, #3
 8000eec:	e004      	b.n	8000ef8 <HAL_GPIO_Init+0x1f8>
 8000eee:	2302      	movs	r3, #2
 8000ef0:	e002      	b.n	8000ef8 <HAL_GPIO_Init+0x1f8>
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e000      	b.n	8000ef8 <HAL_GPIO_Init+0x1f8>
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	697a      	ldr	r2, [r7, #20]
 8000efa:	2103      	movs	r1, #3
 8000efc:	400a      	ands	r2, r1
 8000efe:	0092      	lsls	r2, r2, #2
 8000f00:	4093      	lsls	r3, r2
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f08:	4935      	ldr	r1, [pc, #212]	; (8000fe0 <HAL_GPIO_Init+0x2e0>)
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	089b      	lsrs	r3, r3, #2
 8000f0e:	3302      	adds	r3, #2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f16:	4b38      	ldr	r3, [pc, #224]	; (8000ff8 <HAL_GPIO_Init+0x2f8>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	43da      	mvns	r2, r3
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685a      	ldr	r2, [r3, #4]
 8000f2a:	2380      	movs	r3, #128	; 0x80
 8000f2c:	025b      	lsls	r3, r3, #9
 8000f2e:	4013      	ands	r3, r2
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f3a:	4b2f      	ldr	r3, [pc, #188]	; (8000ff8 <HAL_GPIO_Init+0x2f8>)
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000f40:	4b2d      	ldr	r3, [pc, #180]	; (8000ff8 <HAL_GPIO_Init+0x2f8>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	43da      	mvns	r2, r3
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685a      	ldr	r2, [r3, #4]
 8000f54:	2380      	movs	r3, #128	; 0x80
 8000f56:	029b      	lsls	r3, r3, #10
 8000f58:	4013      	ands	r3, r2
 8000f5a:	d003      	beq.n	8000f64 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f64:	4b24      	ldr	r3, [pc, #144]	; (8000ff8 <HAL_GPIO_Init+0x2f8>)
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f6a:	4b23      	ldr	r3, [pc, #140]	; (8000ff8 <HAL_GPIO_Init+0x2f8>)
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	43da      	mvns	r2, r3
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	4013      	ands	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685a      	ldr	r2, [r3, #4]
 8000f7e:	2380      	movs	r3, #128	; 0x80
 8000f80:	035b      	lsls	r3, r3, #13
 8000f82:	4013      	ands	r3, r2
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f8e:	4b1a      	ldr	r3, [pc, #104]	; (8000ff8 <HAL_GPIO_Init+0x2f8>)
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f94:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <HAL_GPIO_Init+0x2f8>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	43da      	mvns	r2, r3
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685a      	ldr	r2, [r3, #4]
 8000fa8:	2380      	movs	r3, #128	; 0x80
 8000faa:	039b      	lsls	r3, r3, #14
 8000fac:	4013      	ands	r3, r2
 8000fae:	d003      	beq.n	8000fb8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <HAL_GPIO_Init+0x2f8>)
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	40da      	lsrs	r2, r3
 8000fcc:	1e13      	subs	r3, r2, #0
 8000fce:	d000      	beq.n	8000fd2 <HAL_GPIO_Init+0x2d2>
 8000fd0:	e6a2      	b.n	8000d18 <HAL_GPIO_Init+0x18>
  }
}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	46c0      	nop			; (mov r8, r8)
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	b006      	add	sp, #24
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40010000 	.word	0x40010000
 8000fe4:	50000400 	.word	0x50000400
 8000fe8:	50000800 	.word	0x50000800
 8000fec:	50000c00 	.word	0x50000c00
 8000ff0:	50001000 	.word	0x50001000
 8000ff4:	50001c00 	.word	0x50001c00
 8000ff8:	40010400 	.word	0x40010400

08000ffc <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	0008      	movs	r0, r1
 8001006:	0011      	movs	r1, r2
 8001008:	1cbb      	adds	r3, r7, #2
 800100a:	1c02      	adds	r2, r0, #0
 800100c:	801a      	strh	r2, [r3, #0]
 800100e:	1c7b      	adds	r3, r7, #1
 8001010:	1c0a      	adds	r2, r1, #0
 8001012:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001014:	1c7b      	adds	r3, r7, #1
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d004      	beq.n	8001026 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800101c:	1cbb      	adds	r3, r7, #2
 800101e:	881a      	ldrh	r2, [r3, #0]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001024:	e003      	b.n	800102e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001026:	1cbb      	adds	r3, r7, #2
 8001028:	881a      	ldrh	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	46bd      	mov	sp, r7
 8001032:	b002      	add	sp, #8
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001038:	b5b0      	push	{r4, r5, r7, lr}
 800103a:	b08a      	sub	sp, #40	; 0x28
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d102      	bne.n	800104c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	f000 fbbf 	bl	80017ca <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800104c:	4bc9      	ldr	r3, [pc, #804]	; (8001374 <HAL_RCC_OscConfig+0x33c>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	220c      	movs	r2, #12
 8001052:	4013      	ands	r3, r2
 8001054:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001056:	4bc7      	ldr	r3, [pc, #796]	; (8001374 <HAL_RCC_OscConfig+0x33c>)
 8001058:	68da      	ldr	r2, [r3, #12]
 800105a:	2380      	movs	r3, #128	; 0x80
 800105c:	025b      	lsls	r3, r3, #9
 800105e:	4013      	ands	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2201      	movs	r2, #1
 8001068:	4013      	ands	r3, r2
 800106a:	d100      	bne.n	800106e <HAL_RCC_OscConfig+0x36>
 800106c:	e07e      	b.n	800116c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	2b08      	cmp	r3, #8
 8001072:	d007      	beq.n	8001084 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	2b0c      	cmp	r3, #12
 8001078:	d112      	bne.n	80010a0 <HAL_RCC_OscConfig+0x68>
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	2380      	movs	r3, #128	; 0x80
 800107e:	025b      	lsls	r3, r3, #9
 8001080:	429a      	cmp	r2, r3
 8001082:	d10d      	bne.n	80010a0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001084:	4bbb      	ldr	r3, [pc, #748]	; (8001374 <HAL_RCC_OscConfig+0x33c>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	2380      	movs	r3, #128	; 0x80
 800108a:	029b      	lsls	r3, r3, #10
 800108c:	4013      	ands	r3, r2
 800108e:	d100      	bne.n	8001092 <HAL_RCC_OscConfig+0x5a>
 8001090:	e06b      	b.n	800116a <HAL_RCC_OscConfig+0x132>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d167      	bne.n	800116a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	f000 fb95 	bl	80017ca <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685a      	ldr	r2, [r3, #4]
 80010a4:	2380      	movs	r3, #128	; 0x80
 80010a6:	025b      	lsls	r3, r3, #9
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d107      	bne.n	80010bc <HAL_RCC_OscConfig+0x84>
 80010ac:	4bb1      	ldr	r3, [pc, #708]	; (8001374 <HAL_RCC_OscConfig+0x33c>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4bb0      	ldr	r3, [pc, #704]	; (8001374 <HAL_RCC_OscConfig+0x33c>)
 80010b2:	2180      	movs	r1, #128	; 0x80
 80010b4:	0249      	lsls	r1, r1, #9
 80010b6:	430a      	orrs	r2, r1
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	e027      	b.n	800110c <HAL_RCC_OscConfig+0xd4>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685a      	ldr	r2, [r3, #4]
 80010c0:	23a0      	movs	r3, #160	; 0xa0
 80010c2:	02db      	lsls	r3, r3, #11
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d10e      	bne.n	80010e6 <HAL_RCC_OscConfig+0xae>
 80010c8:	4baa      	ldr	r3, [pc, #680]	; (8001374 <HAL_RCC_OscConfig+0x33c>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4ba9      	ldr	r3, [pc, #676]	; (8001374 <HAL_RCC_OscConfig+0x33c>)
 80010ce:	2180      	movs	r1, #128	; 0x80
 80010d0:	02c9      	lsls	r1, r1, #11
 80010d2:	430a      	orrs	r2, r1
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	4ba7      	ldr	r3, [pc, #668]	; (8001374 <HAL_RCC_OscConfig+0x33c>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	4ba6      	ldr	r3, [pc, #664]	; (8001374 <HAL_RCC_OscConfig+0x33c>)
 80010dc:	2180      	movs	r1, #128	; 0x80
 80010de:	0249      	lsls	r1, r1, #9
 80010e0:	430a      	orrs	r2, r1
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	e012      	b.n	800110c <HAL_RCC_OscConfig+0xd4>
 80010e6:	4ba3      	ldr	r3, [pc, #652]	; (8001374 <HAL_RCC_OscConfig+0x33c>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	4ba2      	ldr	r3, [pc, #648]	; (8001374 <HAL_RCC_OscConfig+0x33c>)
 80010ec:	49a2      	ldr	r1, [pc, #648]	; (8001378 <HAL_RCC_OscConfig+0x340>)
 80010ee:	400a      	ands	r2, r1
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	4ba0      	ldr	r3, [pc, #640]	; (8001374 <HAL_RCC_OscConfig+0x33c>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	2380      	movs	r3, #128	; 0x80
 80010f8:	025b      	lsls	r3, r3, #9
 80010fa:	4013      	ands	r3, r2
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4b9c      	ldr	r3, [pc, #624]	; (8001374 <HAL_RCC_OscConfig+0x33c>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b9b      	ldr	r3, [pc, #620]	; (8001374 <HAL_RCC_OscConfig+0x33c>)
 8001106:	499d      	ldr	r1, [pc, #628]	; (800137c <HAL_RCC_OscConfig+0x344>)
 8001108:	400a      	ands	r2, r1
 800110a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d015      	beq.n	8001140 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001114:	f7ff fd12 	bl	8000b3c <HAL_GetTick>
 8001118:	0003      	movs	r3, r0
 800111a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800111c:	e009      	b.n	8001132 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800111e:	f7ff fd0d 	bl	8000b3c <HAL_GetTick>
 8001122:	0002      	movs	r2, r0
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	2b64      	cmp	r3, #100	; 0x64
 800112a:	d902      	bls.n	8001132 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800112c:	2303      	movs	r3, #3
 800112e:	f000 fb4c 	bl	80017ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001132:	4b90      	ldr	r3, [pc, #576]	; (8001374 <HAL_RCC_OscConfig+0x33c>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	2380      	movs	r3, #128	; 0x80
 8001138:	029b      	lsls	r3, r3, #10
 800113a:	4013      	ands	r3, r2
 800113c:	d0ef      	beq.n	800111e <HAL_RCC_OscConfig+0xe6>
 800113e:	e015      	b.n	800116c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001140:	f7ff fcfc 	bl	8000b3c <HAL_GetTick>
 8001144:	0003      	movs	r3, r0
 8001146:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001148:	e008      	b.n	800115c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800114a:	f7ff fcf7 	bl	8000b3c <HAL_GetTick>
 800114e:	0002      	movs	r2, r0
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	2b64      	cmp	r3, #100	; 0x64
 8001156:	d901      	bls.n	800115c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001158:	2303      	movs	r3, #3
 800115a:	e336      	b.n	80017ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800115c:	4b85      	ldr	r3, [pc, #532]	; (8001374 <HAL_RCC_OscConfig+0x33c>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	2380      	movs	r3, #128	; 0x80
 8001162:	029b      	lsls	r3, r3, #10
 8001164:	4013      	ands	r3, r2
 8001166:	d1f0      	bne.n	800114a <HAL_RCC_OscConfig+0x112>
 8001168:	e000      	b.n	800116c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800116a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2202      	movs	r2, #2
 8001172:	4013      	ands	r3, r2
 8001174:	d100      	bne.n	8001178 <HAL_RCC_OscConfig+0x140>
 8001176:	e099      	b.n	80012ac <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001180:	2220      	movs	r2, #32
 8001182:	4013      	ands	r3, r2
 8001184:	d009      	beq.n	800119a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001186:	4b7b      	ldr	r3, [pc, #492]	; (8001374 <HAL_RCC_OscConfig+0x33c>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	4b7a      	ldr	r3, [pc, #488]	; (8001374 <HAL_RCC_OscConfig+0x33c>)
 800118c:	2120      	movs	r1, #32
 800118e:	430a      	orrs	r2, r1
 8001190:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001194:	2220      	movs	r2, #32
 8001196:	4393      	bics	r3, r2
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	2b04      	cmp	r3, #4
 800119e:	d005      	beq.n	80011ac <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	2b0c      	cmp	r3, #12
 80011a4:	d13e      	bne.n	8001224 <HAL_RCC_OscConfig+0x1ec>
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d13b      	bne.n	8001224 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80011ac:	4b71      	ldr	r3, [pc, #452]	; (8001374 <HAL_RCC_OscConfig+0x33c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2204      	movs	r2, #4
 80011b2:	4013      	ands	r3, r2
 80011b4:	d004      	beq.n	80011c0 <HAL_RCC_OscConfig+0x188>
 80011b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d101      	bne.n	80011c0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e304      	b.n	80017ca <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c0:	4b6c      	ldr	r3, [pc, #432]	; (8001374 <HAL_RCC_OscConfig+0x33c>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	4a6e      	ldr	r2, [pc, #440]	; (8001380 <HAL_RCC_OscConfig+0x348>)
 80011c6:	4013      	ands	r3, r2
 80011c8:	0019      	movs	r1, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	021a      	lsls	r2, r3, #8
 80011d0:	4b68      	ldr	r3, [pc, #416]	; (8001374 <HAL_RCC_OscConfig+0x33c>)
 80011d2:	430a      	orrs	r2, r1
 80011d4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80011d6:	4b67      	ldr	r3, [pc, #412]	; (8001374 <HAL_RCC_OscConfig+0x33c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2209      	movs	r2, #9
 80011dc:	4393      	bics	r3, r2
 80011de:	0019      	movs	r1, r3
 80011e0:	4b64      	ldr	r3, [pc, #400]	; (8001374 <HAL_RCC_OscConfig+0x33c>)
 80011e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011e4:	430a      	orrs	r2, r1
 80011e6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011e8:	f000 fc42 	bl	8001a70 <HAL_RCC_GetSysClockFreq>
 80011ec:	0001      	movs	r1, r0
 80011ee:	4b61      	ldr	r3, [pc, #388]	; (8001374 <HAL_RCC_OscConfig+0x33c>)
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	091b      	lsrs	r3, r3, #4
 80011f4:	220f      	movs	r2, #15
 80011f6:	4013      	ands	r3, r2
 80011f8:	4a62      	ldr	r2, [pc, #392]	; (8001384 <HAL_RCC_OscConfig+0x34c>)
 80011fa:	5cd3      	ldrb	r3, [r2, r3]
 80011fc:	000a      	movs	r2, r1
 80011fe:	40da      	lsrs	r2, r3
 8001200:	4b61      	ldr	r3, [pc, #388]	; (8001388 <HAL_RCC_OscConfig+0x350>)
 8001202:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001204:	4b61      	ldr	r3, [pc, #388]	; (800138c <HAL_RCC_OscConfig+0x354>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2513      	movs	r5, #19
 800120a:	197c      	adds	r4, r7, r5
 800120c:	0018      	movs	r0, r3
 800120e:	f7ff fc4f 	bl	8000ab0 <HAL_InitTick>
 8001212:	0003      	movs	r3, r0
 8001214:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001216:	197b      	adds	r3, r7, r5
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d046      	beq.n	80012ac <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800121e:	197b      	adds	r3, r7, r5
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	e2d2      	b.n	80017ca <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001226:	2b00      	cmp	r3, #0
 8001228:	d027      	beq.n	800127a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800122a:	4b52      	ldr	r3, [pc, #328]	; (8001374 <HAL_RCC_OscConfig+0x33c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2209      	movs	r2, #9
 8001230:	4393      	bics	r3, r2
 8001232:	0019      	movs	r1, r3
 8001234:	4b4f      	ldr	r3, [pc, #316]	; (8001374 <HAL_RCC_OscConfig+0x33c>)
 8001236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001238:	430a      	orrs	r2, r1
 800123a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123c:	f7ff fc7e 	bl	8000b3c <HAL_GetTick>
 8001240:	0003      	movs	r3, r0
 8001242:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001244:	e008      	b.n	8001258 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001246:	f7ff fc79 	bl	8000b3c <HAL_GetTick>
 800124a:	0002      	movs	r2, r0
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e2b8      	b.n	80017ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001258:	4b46      	ldr	r3, [pc, #280]	; (8001374 <HAL_RCC_OscConfig+0x33c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2204      	movs	r2, #4
 800125e:	4013      	ands	r3, r2
 8001260:	d0f1      	beq.n	8001246 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001262:	4b44      	ldr	r3, [pc, #272]	; (8001374 <HAL_RCC_OscConfig+0x33c>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	4a46      	ldr	r2, [pc, #280]	; (8001380 <HAL_RCC_OscConfig+0x348>)
 8001268:	4013      	ands	r3, r2
 800126a:	0019      	movs	r1, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	021a      	lsls	r2, r3, #8
 8001272:	4b40      	ldr	r3, [pc, #256]	; (8001374 <HAL_RCC_OscConfig+0x33c>)
 8001274:	430a      	orrs	r2, r1
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	e018      	b.n	80012ac <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800127a:	4b3e      	ldr	r3, [pc, #248]	; (8001374 <HAL_RCC_OscConfig+0x33c>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	4b3d      	ldr	r3, [pc, #244]	; (8001374 <HAL_RCC_OscConfig+0x33c>)
 8001280:	2101      	movs	r1, #1
 8001282:	438a      	bics	r2, r1
 8001284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001286:	f7ff fc59 	bl	8000b3c <HAL_GetTick>
 800128a:	0003      	movs	r3, r0
 800128c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001290:	f7ff fc54 	bl	8000b3c <HAL_GetTick>
 8001294:	0002      	movs	r2, r0
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b02      	cmp	r3, #2
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e293      	b.n	80017ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012a2:	4b34      	ldr	r3, [pc, #208]	; (8001374 <HAL_RCC_OscConfig+0x33c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2204      	movs	r2, #4
 80012a8:	4013      	ands	r3, r2
 80012aa:	d1f1      	bne.n	8001290 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2210      	movs	r2, #16
 80012b2:	4013      	ands	r3, r2
 80012b4:	d100      	bne.n	80012b8 <HAL_RCC_OscConfig+0x280>
 80012b6:	e0a2      	b.n	80013fe <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d140      	bne.n	8001340 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012be:	4b2d      	ldr	r3, [pc, #180]	; (8001374 <HAL_RCC_OscConfig+0x33c>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	2380      	movs	r3, #128	; 0x80
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4013      	ands	r3, r2
 80012c8:	d005      	beq.n	80012d6 <HAL_RCC_OscConfig+0x29e>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d101      	bne.n	80012d6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e279      	b.n	80017ca <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012d6:	4b27      	ldr	r3, [pc, #156]	; (8001374 <HAL_RCC_OscConfig+0x33c>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	4a2d      	ldr	r2, [pc, #180]	; (8001390 <HAL_RCC_OscConfig+0x358>)
 80012dc:	4013      	ands	r3, r2
 80012de:	0019      	movs	r1, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012e4:	4b23      	ldr	r3, [pc, #140]	; (8001374 <HAL_RCC_OscConfig+0x33c>)
 80012e6:	430a      	orrs	r2, r1
 80012e8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012ea:	4b22      	ldr	r3, [pc, #136]	; (8001374 <HAL_RCC_OscConfig+0x33c>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	021b      	lsls	r3, r3, #8
 80012f0:	0a19      	lsrs	r1, r3, #8
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a1b      	ldr	r3, [r3, #32]
 80012f6:	061a      	lsls	r2, r3, #24
 80012f8:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <HAL_RCC_OscConfig+0x33c>)
 80012fa:	430a      	orrs	r2, r1
 80012fc:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001302:	0b5b      	lsrs	r3, r3, #13
 8001304:	3301      	adds	r3, #1
 8001306:	2280      	movs	r2, #128	; 0x80
 8001308:	0212      	lsls	r2, r2, #8
 800130a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800130c:	4b19      	ldr	r3, [pc, #100]	; (8001374 <HAL_RCC_OscConfig+0x33c>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	091b      	lsrs	r3, r3, #4
 8001312:	210f      	movs	r1, #15
 8001314:	400b      	ands	r3, r1
 8001316:	491b      	ldr	r1, [pc, #108]	; (8001384 <HAL_RCC_OscConfig+0x34c>)
 8001318:	5ccb      	ldrb	r3, [r1, r3]
 800131a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800131c:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <HAL_RCC_OscConfig+0x350>)
 800131e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001320:	4b1a      	ldr	r3, [pc, #104]	; (800138c <HAL_RCC_OscConfig+0x354>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2513      	movs	r5, #19
 8001326:	197c      	adds	r4, r7, r5
 8001328:	0018      	movs	r0, r3
 800132a:	f7ff fbc1 	bl	8000ab0 <HAL_InitTick>
 800132e:	0003      	movs	r3, r0
 8001330:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001332:	197b      	adds	r3, r7, r5
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d061      	beq.n	80013fe <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800133a:	197b      	adds	r3, r7, r5
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	e244      	b.n	80017ca <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	69db      	ldr	r3, [r3, #28]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d040      	beq.n	80013ca <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001348:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <HAL_RCC_OscConfig+0x33c>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	4b09      	ldr	r3, [pc, #36]	; (8001374 <HAL_RCC_OscConfig+0x33c>)
 800134e:	2180      	movs	r1, #128	; 0x80
 8001350:	0049      	lsls	r1, r1, #1
 8001352:	430a      	orrs	r2, r1
 8001354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001356:	f7ff fbf1 	bl	8000b3c <HAL_GetTick>
 800135a:	0003      	movs	r3, r0
 800135c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800135e:	e019      	b.n	8001394 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001360:	f7ff fbec 	bl	8000b3c <HAL_GetTick>
 8001364:	0002      	movs	r2, r0
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d912      	bls.n	8001394 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e22b      	b.n	80017ca <HAL_RCC_OscConfig+0x792>
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	40021000 	.word	0x40021000
 8001378:	fffeffff 	.word	0xfffeffff
 800137c:	fffbffff 	.word	0xfffbffff
 8001380:	ffffe0ff 	.word	0xffffe0ff
 8001384:	08003250 	.word	0x08003250
 8001388:	20000000 	.word	0x20000000
 800138c:	20000004 	.word	0x20000004
 8001390:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001394:	4bca      	ldr	r3, [pc, #808]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	2380      	movs	r3, #128	; 0x80
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4013      	ands	r3, r2
 800139e:	d0df      	beq.n	8001360 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013a0:	4bc7      	ldr	r3, [pc, #796]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	4ac7      	ldr	r2, [pc, #796]	; (80016c4 <HAL_RCC_OscConfig+0x68c>)
 80013a6:	4013      	ands	r3, r2
 80013a8:	0019      	movs	r1, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013ae:	4bc4      	ldr	r3, [pc, #784]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 80013b0:	430a      	orrs	r2, r1
 80013b2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013b4:	4bc2      	ldr	r3, [pc, #776]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	021b      	lsls	r3, r3, #8
 80013ba:	0a19      	lsrs	r1, r3, #8
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a1b      	ldr	r3, [r3, #32]
 80013c0:	061a      	lsls	r2, r3, #24
 80013c2:	4bbf      	ldr	r3, [pc, #764]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 80013c4:	430a      	orrs	r2, r1
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	e019      	b.n	80013fe <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013ca:	4bbd      	ldr	r3, [pc, #756]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	4bbc      	ldr	r3, [pc, #752]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 80013d0:	49bd      	ldr	r1, [pc, #756]	; (80016c8 <HAL_RCC_OscConfig+0x690>)
 80013d2:	400a      	ands	r2, r1
 80013d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d6:	f7ff fbb1 	bl	8000b3c <HAL_GetTick>
 80013da:	0003      	movs	r3, r0
 80013dc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013e0:	f7ff fbac 	bl	8000b3c <HAL_GetTick>
 80013e4:	0002      	movs	r2, r0
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e1eb      	b.n	80017ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80013f2:	4bb3      	ldr	r3, [pc, #716]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	2380      	movs	r3, #128	; 0x80
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4013      	ands	r3, r2
 80013fc:	d1f0      	bne.n	80013e0 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2208      	movs	r2, #8
 8001404:	4013      	ands	r3, r2
 8001406:	d036      	beq.n	8001476 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	695b      	ldr	r3, [r3, #20]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d019      	beq.n	8001444 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001410:	4bab      	ldr	r3, [pc, #684]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 8001412:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001414:	4baa      	ldr	r3, [pc, #680]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 8001416:	2101      	movs	r1, #1
 8001418:	430a      	orrs	r2, r1
 800141a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141c:	f7ff fb8e 	bl	8000b3c <HAL_GetTick>
 8001420:	0003      	movs	r3, r0
 8001422:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001424:	e008      	b.n	8001438 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001426:	f7ff fb89 	bl	8000b3c <HAL_GetTick>
 800142a:	0002      	movs	r2, r0
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e1c8      	b.n	80017ca <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001438:	4ba1      	ldr	r3, [pc, #644]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 800143a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800143c:	2202      	movs	r2, #2
 800143e:	4013      	ands	r3, r2
 8001440:	d0f1      	beq.n	8001426 <HAL_RCC_OscConfig+0x3ee>
 8001442:	e018      	b.n	8001476 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001444:	4b9e      	ldr	r3, [pc, #632]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 8001446:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001448:	4b9d      	ldr	r3, [pc, #628]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 800144a:	2101      	movs	r1, #1
 800144c:	438a      	bics	r2, r1
 800144e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001450:	f7ff fb74 	bl	8000b3c <HAL_GetTick>
 8001454:	0003      	movs	r3, r0
 8001456:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001458:	e008      	b.n	800146c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800145a:	f7ff fb6f 	bl	8000b3c <HAL_GetTick>
 800145e:	0002      	movs	r2, r0
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e1ae      	b.n	80017ca <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800146c:	4b94      	ldr	r3, [pc, #592]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 800146e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001470:	2202      	movs	r2, #2
 8001472:	4013      	ands	r3, r2
 8001474:	d1f1      	bne.n	800145a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2204      	movs	r2, #4
 800147c:	4013      	ands	r3, r2
 800147e:	d100      	bne.n	8001482 <HAL_RCC_OscConfig+0x44a>
 8001480:	e0ae      	b.n	80015e0 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001482:	2023      	movs	r0, #35	; 0x23
 8001484:	183b      	adds	r3, r7, r0
 8001486:	2200      	movs	r2, #0
 8001488:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800148a:	4b8d      	ldr	r3, [pc, #564]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 800148c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800148e:	2380      	movs	r3, #128	; 0x80
 8001490:	055b      	lsls	r3, r3, #21
 8001492:	4013      	ands	r3, r2
 8001494:	d109      	bne.n	80014aa <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001496:	4b8a      	ldr	r3, [pc, #552]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 8001498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800149a:	4b89      	ldr	r3, [pc, #548]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 800149c:	2180      	movs	r1, #128	; 0x80
 800149e:	0549      	lsls	r1, r1, #21
 80014a0:	430a      	orrs	r2, r1
 80014a2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80014a4:	183b      	adds	r3, r7, r0
 80014a6:	2201      	movs	r2, #1
 80014a8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014aa:	4b88      	ldr	r3, [pc, #544]	; (80016cc <HAL_RCC_OscConfig+0x694>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	2380      	movs	r3, #128	; 0x80
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	4013      	ands	r3, r2
 80014b4:	d11a      	bne.n	80014ec <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014b6:	4b85      	ldr	r3, [pc, #532]	; (80016cc <HAL_RCC_OscConfig+0x694>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	4b84      	ldr	r3, [pc, #528]	; (80016cc <HAL_RCC_OscConfig+0x694>)
 80014bc:	2180      	movs	r1, #128	; 0x80
 80014be:	0049      	lsls	r1, r1, #1
 80014c0:	430a      	orrs	r2, r1
 80014c2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014c4:	f7ff fb3a 	bl	8000b3c <HAL_GetTick>
 80014c8:	0003      	movs	r3, r0
 80014ca:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ce:	f7ff fb35 	bl	8000b3c <HAL_GetTick>
 80014d2:	0002      	movs	r2, r0
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b64      	cmp	r3, #100	; 0x64
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e174      	b.n	80017ca <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e0:	4b7a      	ldr	r3, [pc, #488]	; (80016cc <HAL_RCC_OscConfig+0x694>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	2380      	movs	r3, #128	; 0x80
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	4013      	ands	r3, r2
 80014ea:	d0f0      	beq.n	80014ce <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	2380      	movs	r3, #128	; 0x80
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d107      	bne.n	8001508 <HAL_RCC_OscConfig+0x4d0>
 80014f8:	4b71      	ldr	r3, [pc, #452]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 80014fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014fc:	4b70      	ldr	r3, [pc, #448]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 80014fe:	2180      	movs	r1, #128	; 0x80
 8001500:	0049      	lsls	r1, r1, #1
 8001502:	430a      	orrs	r2, r1
 8001504:	651a      	str	r2, [r3, #80]	; 0x50
 8001506:	e031      	b.n	800156c <HAL_RCC_OscConfig+0x534>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d10c      	bne.n	800152a <HAL_RCC_OscConfig+0x4f2>
 8001510:	4b6b      	ldr	r3, [pc, #428]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 8001512:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001514:	4b6a      	ldr	r3, [pc, #424]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 8001516:	496c      	ldr	r1, [pc, #432]	; (80016c8 <HAL_RCC_OscConfig+0x690>)
 8001518:	400a      	ands	r2, r1
 800151a:	651a      	str	r2, [r3, #80]	; 0x50
 800151c:	4b68      	ldr	r3, [pc, #416]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 800151e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001520:	4b67      	ldr	r3, [pc, #412]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 8001522:	496b      	ldr	r1, [pc, #428]	; (80016d0 <HAL_RCC_OscConfig+0x698>)
 8001524:	400a      	ands	r2, r1
 8001526:	651a      	str	r2, [r3, #80]	; 0x50
 8001528:	e020      	b.n	800156c <HAL_RCC_OscConfig+0x534>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	23a0      	movs	r3, #160	; 0xa0
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	429a      	cmp	r2, r3
 8001534:	d10e      	bne.n	8001554 <HAL_RCC_OscConfig+0x51c>
 8001536:	4b62      	ldr	r3, [pc, #392]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 8001538:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800153a:	4b61      	ldr	r3, [pc, #388]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 800153c:	2180      	movs	r1, #128	; 0x80
 800153e:	00c9      	lsls	r1, r1, #3
 8001540:	430a      	orrs	r2, r1
 8001542:	651a      	str	r2, [r3, #80]	; 0x50
 8001544:	4b5e      	ldr	r3, [pc, #376]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 8001546:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001548:	4b5d      	ldr	r3, [pc, #372]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 800154a:	2180      	movs	r1, #128	; 0x80
 800154c:	0049      	lsls	r1, r1, #1
 800154e:	430a      	orrs	r2, r1
 8001550:	651a      	str	r2, [r3, #80]	; 0x50
 8001552:	e00b      	b.n	800156c <HAL_RCC_OscConfig+0x534>
 8001554:	4b5a      	ldr	r3, [pc, #360]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 8001556:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001558:	4b59      	ldr	r3, [pc, #356]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 800155a:	495b      	ldr	r1, [pc, #364]	; (80016c8 <HAL_RCC_OscConfig+0x690>)
 800155c:	400a      	ands	r2, r1
 800155e:	651a      	str	r2, [r3, #80]	; 0x50
 8001560:	4b57      	ldr	r3, [pc, #348]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 8001562:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001564:	4b56      	ldr	r3, [pc, #344]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 8001566:	495a      	ldr	r1, [pc, #360]	; (80016d0 <HAL_RCC_OscConfig+0x698>)
 8001568:	400a      	ands	r2, r1
 800156a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d015      	beq.n	80015a0 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001574:	f7ff fae2 	bl	8000b3c <HAL_GetTick>
 8001578:	0003      	movs	r3, r0
 800157a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800157c:	e009      	b.n	8001592 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800157e:	f7ff fadd 	bl	8000b3c <HAL_GetTick>
 8001582:	0002      	movs	r2, r0
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	4a52      	ldr	r2, [pc, #328]	; (80016d4 <HAL_RCC_OscConfig+0x69c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e11b      	b.n	80017ca <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001592:	4b4b      	ldr	r3, [pc, #300]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 8001594:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001596:	2380      	movs	r3, #128	; 0x80
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4013      	ands	r3, r2
 800159c:	d0ef      	beq.n	800157e <HAL_RCC_OscConfig+0x546>
 800159e:	e014      	b.n	80015ca <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a0:	f7ff facc 	bl	8000b3c <HAL_GetTick>
 80015a4:	0003      	movs	r3, r0
 80015a6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80015a8:	e009      	b.n	80015be <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015aa:	f7ff fac7 	bl	8000b3c <HAL_GetTick>
 80015ae:	0002      	movs	r2, r0
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	4a47      	ldr	r2, [pc, #284]	; (80016d4 <HAL_RCC_OscConfig+0x69c>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e105      	b.n	80017ca <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80015be:	4b40      	ldr	r3, [pc, #256]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 80015c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015c2:	2380      	movs	r3, #128	; 0x80
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4013      	ands	r3, r2
 80015c8:	d1ef      	bne.n	80015aa <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015ca:	2323      	movs	r3, #35	; 0x23
 80015cc:	18fb      	adds	r3, r7, r3
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d105      	bne.n	80015e0 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d4:	4b3a      	ldr	r3, [pc, #232]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 80015d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015d8:	4b39      	ldr	r3, [pc, #228]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 80015da:	493f      	ldr	r1, [pc, #252]	; (80016d8 <HAL_RCC_OscConfig+0x6a0>)
 80015dc:	400a      	ands	r2, r1
 80015de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2220      	movs	r2, #32
 80015e6:	4013      	ands	r3, r2
 80015e8:	d049      	beq.n	800167e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d026      	beq.n	8001640 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80015f2:	4b33      	ldr	r3, [pc, #204]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 80015f4:	689a      	ldr	r2, [r3, #8]
 80015f6:	4b32      	ldr	r3, [pc, #200]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 80015f8:	2101      	movs	r1, #1
 80015fa:	430a      	orrs	r2, r1
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	4b30      	ldr	r3, [pc, #192]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 8001600:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001602:	4b2f      	ldr	r3, [pc, #188]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 8001604:	2101      	movs	r1, #1
 8001606:	430a      	orrs	r2, r1
 8001608:	635a      	str	r2, [r3, #52]	; 0x34
 800160a:	4b34      	ldr	r3, [pc, #208]	; (80016dc <HAL_RCC_OscConfig+0x6a4>)
 800160c:	6a1a      	ldr	r2, [r3, #32]
 800160e:	4b33      	ldr	r3, [pc, #204]	; (80016dc <HAL_RCC_OscConfig+0x6a4>)
 8001610:	2180      	movs	r1, #128	; 0x80
 8001612:	0189      	lsls	r1, r1, #6
 8001614:	430a      	orrs	r2, r1
 8001616:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001618:	f7ff fa90 	bl	8000b3c <HAL_GetTick>
 800161c:	0003      	movs	r3, r0
 800161e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001622:	f7ff fa8b 	bl	8000b3c <HAL_GetTick>
 8001626:	0002      	movs	r2, r0
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e0ca      	b.n	80017ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001634:	4b22      	ldr	r3, [pc, #136]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	2202      	movs	r2, #2
 800163a:	4013      	ands	r3, r2
 800163c:	d0f1      	beq.n	8001622 <HAL_RCC_OscConfig+0x5ea>
 800163e:	e01e      	b.n	800167e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001640:	4b1f      	ldr	r3, [pc, #124]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	4b1e      	ldr	r3, [pc, #120]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 8001646:	2101      	movs	r1, #1
 8001648:	438a      	bics	r2, r1
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	4b23      	ldr	r3, [pc, #140]	; (80016dc <HAL_RCC_OscConfig+0x6a4>)
 800164e:	6a1a      	ldr	r2, [r3, #32]
 8001650:	4b22      	ldr	r3, [pc, #136]	; (80016dc <HAL_RCC_OscConfig+0x6a4>)
 8001652:	4923      	ldr	r1, [pc, #140]	; (80016e0 <HAL_RCC_OscConfig+0x6a8>)
 8001654:	400a      	ands	r2, r1
 8001656:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001658:	f7ff fa70 	bl	8000b3c <HAL_GetTick>
 800165c:	0003      	movs	r3, r0
 800165e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001662:	f7ff fa6b 	bl	8000b3c <HAL_GetTick>
 8001666:	0002      	movs	r2, r0
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e0aa      	b.n	80017ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	2202      	movs	r2, #2
 800167a:	4013      	ands	r3, r2
 800167c:	d1f1      	bne.n	8001662 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001682:	2b00      	cmp	r3, #0
 8001684:	d100      	bne.n	8001688 <HAL_RCC_OscConfig+0x650>
 8001686:	e09f      	b.n	80017c8 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	2b0c      	cmp	r3, #12
 800168c:	d100      	bne.n	8001690 <HAL_RCC_OscConfig+0x658>
 800168e:	e078      	b.n	8001782 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001694:	2b02      	cmp	r3, #2
 8001696:	d159      	bne.n	800174c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001698:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 800169e:	4911      	ldr	r1, [pc, #68]	; (80016e4 <HAL_RCC_OscConfig+0x6ac>)
 80016a0:	400a      	ands	r2, r1
 80016a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a4:	f7ff fa4a 	bl	8000b3c <HAL_GetTick>
 80016a8:	0003      	movs	r3, r0
 80016aa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80016ac:	e01c      	b.n	80016e8 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ae:	f7ff fa45 	bl	8000b3c <HAL_GetTick>
 80016b2:	0002      	movs	r2, r0
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d915      	bls.n	80016e8 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e084      	b.n	80017ca <HAL_RCC_OscConfig+0x792>
 80016c0:	40021000 	.word	0x40021000
 80016c4:	ffff1fff 	.word	0xffff1fff
 80016c8:	fffffeff 	.word	0xfffffeff
 80016cc:	40007000 	.word	0x40007000
 80016d0:	fffffbff 	.word	0xfffffbff
 80016d4:	00001388 	.word	0x00001388
 80016d8:	efffffff 	.word	0xefffffff
 80016dc:	40010000 	.word	0x40010000
 80016e0:	ffffdfff 	.word	0xffffdfff
 80016e4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80016e8:	4b3a      	ldr	r3, [pc, #232]	; (80017d4 <HAL_RCC_OscConfig+0x79c>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	2380      	movs	r3, #128	; 0x80
 80016ee:	049b      	lsls	r3, r3, #18
 80016f0:	4013      	ands	r3, r2
 80016f2:	d1dc      	bne.n	80016ae <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016f4:	4b37      	ldr	r3, [pc, #220]	; (80017d4 <HAL_RCC_OscConfig+0x79c>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	4a37      	ldr	r2, [pc, #220]	; (80017d8 <HAL_RCC_OscConfig+0x7a0>)
 80016fa:	4013      	ands	r3, r2
 80016fc:	0019      	movs	r1, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	431a      	orrs	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800170c:	431a      	orrs	r2, r3
 800170e:	4b31      	ldr	r3, [pc, #196]	; (80017d4 <HAL_RCC_OscConfig+0x79c>)
 8001710:	430a      	orrs	r2, r1
 8001712:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001714:	4b2f      	ldr	r3, [pc, #188]	; (80017d4 <HAL_RCC_OscConfig+0x79c>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4b2e      	ldr	r3, [pc, #184]	; (80017d4 <HAL_RCC_OscConfig+0x79c>)
 800171a:	2180      	movs	r1, #128	; 0x80
 800171c:	0449      	lsls	r1, r1, #17
 800171e:	430a      	orrs	r2, r1
 8001720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001722:	f7ff fa0b 	bl	8000b3c <HAL_GetTick>
 8001726:	0003      	movs	r3, r0
 8001728:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800172c:	f7ff fa06 	bl	8000b3c <HAL_GetTick>
 8001730:	0002      	movs	r2, r0
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e045      	b.n	80017ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800173e:	4b25      	ldr	r3, [pc, #148]	; (80017d4 <HAL_RCC_OscConfig+0x79c>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	2380      	movs	r3, #128	; 0x80
 8001744:	049b      	lsls	r3, r3, #18
 8001746:	4013      	ands	r3, r2
 8001748:	d0f0      	beq.n	800172c <HAL_RCC_OscConfig+0x6f4>
 800174a:	e03d      	b.n	80017c8 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800174c:	4b21      	ldr	r3, [pc, #132]	; (80017d4 <HAL_RCC_OscConfig+0x79c>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	4b20      	ldr	r3, [pc, #128]	; (80017d4 <HAL_RCC_OscConfig+0x79c>)
 8001752:	4922      	ldr	r1, [pc, #136]	; (80017dc <HAL_RCC_OscConfig+0x7a4>)
 8001754:	400a      	ands	r2, r1
 8001756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001758:	f7ff f9f0 	bl	8000b3c <HAL_GetTick>
 800175c:	0003      	movs	r3, r0
 800175e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001762:	f7ff f9eb 	bl	8000b3c <HAL_GetTick>
 8001766:	0002      	movs	r2, r0
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e02a      	b.n	80017ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001774:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <HAL_RCC_OscConfig+0x79c>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	2380      	movs	r3, #128	; 0x80
 800177a:	049b      	lsls	r3, r3, #18
 800177c:	4013      	ands	r3, r2
 800177e:	d1f0      	bne.n	8001762 <HAL_RCC_OscConfig+0x72a>
 8001780:	e022      	b.n	80017c8 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001786:	2b01      	cmp	r3, #1
 8001788:	d101      	bne.n	800178e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e01d      	b.n	80017ca <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800178e:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <HAL_RCC_OscConfig+0x79c>)
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	2380      	movs	r3, #128	; 0x80
 8001798:	025b      	lsls	r3, r3, #9
 800179a:	401a      	ands	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d10f      	bne.n	80017c4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	23f0      	movs	r3, #240	; 0xf0
 80017a8:	039b      	lsls	r3, r3, #14
 80017aa:	401a      	ands	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d107      	bne.n	80017c4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	23c0      	movs	r3, #192	; 0xc0
 80017b8:	041b      	lsls	r3, r3, #16
 80017ba:	401a      	ands	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d001      	beq.n	80017c8 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e000      	b.n	80017ca <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	0018      	movs	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	b00a      	add	sp, #40	; 0x28
 80017d0:	bdb0      	pop	{r4, r5, r7, pc}
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	40021000 	.word	0x40021000
 80017d8:	ff02ffff 	.word	0xff02ffff
 80017dc:	feffffff 	.word	0xfeffffff

080017e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e0:	b5b0      	push	{r4, r5, r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e128      	b.n	8001a46 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017f4:	4b96      	ldr	r3, [pc, #600]	; (8001a50 <HAL_RCC_ClockConfig+0x270>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2201      	movs	r2, #1
 80017fa:	4013      	ands	r3, r2
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d91e      	bls.n	8001840 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001802:	4b93      	ldr	r3, [pc, #588]	; (8001a50 <HAL_RCC_ClockConfig+0x270>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2201      	movs	r2, #1
 8001808:	4393      	bics	r3, r2
 800180a:	0019      	movs	r1, r3
 800180c:	4b90      	ldr	r3, [pc, #576]	; (8001a50 <HAL_RCC_ClockConfig+0x270>)
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	430a      	orrs	r2, r1
 8001812:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001814:	f7ff f992 	bl	8000b3c <HAL_GetTick>
 8001818:	0003      	movs	r3, r0
 800181a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800181c:	e009      	b.n	8001832 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800181e:	f7ff f98d 	bl	8000b3c <HAL_GetTick>
 8001822:	0002      	movs	r2, r0
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	4a8a      	ldr	r2, [pc, #552]	; (8001a54 <HAL_RCC_ClockConfig+0x274>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e109      	b.n	8001a46 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001832:	4b87      	ldr	r3, [pc, #540]	; (8001a50 <HAL_RCC_ClockConfig+0x270>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2201      	movs	r2, #1
 8001838:	4013      	ands	r3, r2
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	429a      	cmp	r2, r3
 800183e:	d1ee      	bne.n	800181e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2202      	movs	r2, #2
 8001846:	4013      	ands	r3, r2
 8001848:	d009      	beq.n	800185e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800184a:	4b83      	ldr	r3, [pc, #524]	; (8001a58 <HAL_RCC_ClockConfig+0x278>)
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	22f0      	movs	r2, #240	; 0xf0
 8001850:	4393      	bics	r3, r2
 8001852:	0019      	movs	r1, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	4b7f      	ldr	r3, [pc, #508]	; (8001a58 <HAL_RCC_ClockConfig+0x278>)
 800185a:	430a      	orrs	r2, r1
 800185c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2201      	movs	r2, #1
 8001864:	4013      	ands	r3, r2
 8001866:	d100      	bne.n	800186a <HAL_RCC_ClockConfig+0x8a>
 8001868:	e089      	b.n	800197e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b02      	cmp	r3, #2
 8001870:	d107      	bne.n	8001882 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001872:	4b79      	ldr	r3, [pc, #484]	; (8001a58 <HAL_RCC_ClockConfig+0x278>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	2380      	movs	r3, #128	; 0x80
 8001878:	029b      	lsls	r3, r3, #10
 800187a:	4013      	ands	r3, r2
 800187c:	d120      	bne.n	80018c0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e0e1      	b.n	8001a46 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b03      	cmp	r3, #3
 8001888:	d107      	bne.n	800189a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800188a:	4b73      	ldr	r3, [pc, #460]	; (8001a58 <HAL_RCC_ClockConfig+0x278>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	2380      	movs	r3, #128	; 0x80
 8001890:	049b      	lsls	r3, r3, #18
 8001892:	4013      	ands	r3, r2
 8001894:	d114      	bne.n	80018c0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e0d5      	b.n	8001a46 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d106      	bne.n	80018b0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018a2:	4b6d      	ldr	r3, [pc, #436]	; (8001a58 <HAL_RCC_ClockConfig+0x278>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2204      	movs	r2, #4
 80018a8:	4013      	ands	r3, r2
 80018aa:	d109      	bne.n	80018c0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e0ca      	b.n	8001a46 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80018b0:	4b69      	ldr	r3, [pc, #420]	; (8001a58 <HAL_RCC_ClockConfig+0x278>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	2380      	movs	r3, #128	; 0x80
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4013      	ands	r3, r2
 80018ba:	d101      	bne.n	80018c0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e0c2      	b.n	8001a46 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018c0:	4b65      	ldr	r3, [pc, #404]	; (8001a58 <HAL_RCC_ClockConfig+0x278>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	2203      	movs	r2, #3
 80018c6:	4393      	bics	r3, r2
 80018c8:	0019      	movs	r1, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	4b62      	ldr	r3, [pc, #392]	; (8001a58 <HAL_RCC_ClockConfig+0x278>)
 80018d0:	430a      	orrs	r2, r1
 80018d2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018d4:	f7ff f932 	bl	8000b3c <HAL_GetTick>
 80018d8:	0003      	movs	r3, r0
 80018da:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d111      	bne.n	8001908 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018e4:	e009      	b.n	80018fa <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e6:	f7ff f929 	bl	8000b3c <HAL_GetTick>
 80018ea:	0002      	movs	r2, r0
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	4a58      	ldr	r2, [pc, #352]	; (8001a54 <HAL_RCC_ClockConfig+0x274>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e0a5      	b.n	8001a46 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018fa:	4b57      	ldr	r3, [pc, #348]	; (8001a58 <HAL_RCC_ClockConfig+0x278>)
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	220c      	movs	r2, #12
 8001900:	4013      	ands	r3, r2
 8001902:	2b08      	cmp	r3, #8
 8001904:	d1ef      	bne.n	80018e6 <HAL_RCC_ClockConfig+0x106>
 8001906:	e03a      	b.n	800197e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2b03      	cmp	r3, #3
 800190e:	d111      	bne.n	8001934 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001910:	e009      	b.n	8001926 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001912:	f7ff f913 	bl	8000b3c <HAL_GetTick>
 8001916:	0002      	movs	r2, r0
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	4a4d      	ldr	r2, [pc, #308]	; (8001a54 <HAL_RCC_ClockConfig+0x274>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e08f      	b.n	8001a46 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001926:	4b4c      	ldr	r3, [pc, #304]	; (8001a58 <HAL_RCC_ClockConfig+0x278>)
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	220c      	movs	r2, #12
 800192c:	4013      	ands	r3, r2
 800192e:	2b0c      	cmp	r3, #12
 8001930:	d1ef      	bne.n	8001912 <HAL_RCC_ClockConfig+0x132>
 8001932:	e024      	b.n	800197e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d11b      	bne.n	8001974 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800193c:	e009      	b.n	8001952 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800193e:	f7ff f8fd 	bl	8000b3c <HAL_GetTick>
 8001942:	0002      	movs	r2, r0
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	4a42      	ldr	r2, [pc, #264]	; (8001a54 <HAL_RCC_ClockConfig+0x274>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e079      	b.n	8001a46 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001952:	4b41      	ldr	r3, [pc, #260]	; (8001a58 <HAL_RCC_ClockConfig+0x278>)
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	220c      	movs	r2, #12
 8001958:	4013      	ands	r3, r2
 800195a:	2b04      	cmp	r3, #4
 800195c:	d1ef      	bne.n	800193e <HAL_RCC_ClockConfig+0x15e>
 800195e:	e00e      	b.n	800197e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001960:	f7ff f8ec 	bl	8000b3c <HAL_GetTick>
 8001964:	0002      	movs	r2, r0
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	4a3a      	ldr	r2, [pc, #232]	; (8001a54 <HAL_RCC_ClockConfig+0x274>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e068      	b.n	8001a46 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001974:	4b38      	ldr	r3, [pc, #224]	; (8001a58 <HAL_RCC_ClockConfig+0x278>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	220c      	movs	r2, #12
 800197a:	4013      	ands	r3, r2
 800197c:	d1f0      	bne.n	8001960 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800197e:	4b34      	ldr	r3, [pc, #208]	; (8001a50 <HAL_RCC_ClockConfig+0x270>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2201      	movs	r2, #1
 8001984:	4013      	ands	r3, r2
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	429a      	cmp	r2, r3
 800198a:	d21e      	bcs.n	80019ca <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198c:	4b30      	ldr	r3, [pc, #192]	; (8001a50 <HAL_RCC_ClockConfig+0x270>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2201      	movs	r2, #1
 8001992:	4393      	bics	r3, r2
 8001994:	0019      	movs	r1, r3
 8001996:	4b2e      	ldr	r3, [pc, #184]	; (8001a50 <HAL_RCC_ClockConfig+0x270>)
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	430a      	orrs	r2, r1
 800199c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800199e:	f7ff f8cd 	bl	8000b3c <HAL_GetTick>
 80019a2:	0003      	movs	r3, r0
 80019a4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a6:	e009      	b.n	80019bc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a8:	f7ff f8c8 	bl	8000b3c <HAL_GetTick>
 80019ac:	0002      	movs	r2, r0
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	4a28      	ldr	r2, [pc, #160]	; (8001a54 <HAL_RCC_ClockConfig+0x274>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e044      	b.n	8001a46 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019bc:	4b24      	ldr	r3, [pc, #144]	; (8001a50 <HAL_RCC_ClockConfig+0x270>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2201      	movs	r2, #1
 80019c2:	4013      	ands	r3, r2
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d1ee      	bne.n	80019a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2204      	movs	r2, #4
 80019d0:	4013      	ands	r3, r2
 80019d2:	d009      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019d4:	4b20      	ldr	r3, [pc, #128]	; (8001a58 <HAL_RCC_ClockConfig+0x278>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	4a20      	ldr	r2, [pc, #128]	; (8001a5c <HAL_RCC_ClockConfig+0x27c>)
 80019da:	4013      	ands	r3, r2
 80019dc:	0019      	movs	r1, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	68da      	ldr	r2, [r3, #12]
 80019e2:	4b1d      	ldr	r3, [pc, #116]	; (8001a58 <HAL_RCC_ClockConfig+0x278>)
 80019e4:	430a      	orrs	r2, r1
 80019e6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2208      	movs	r2, #8
 80019ee:	4013      	ands	r3, r2
 80019f0:	d00a      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019f2:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <HAL_RCC_ClockConfig+0x278>)
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	4a1a      	ldr	r2, [pc, #104]	; (8001a60 <HAL_RCC_ClockConfig+0x280>)
 80019f8:	4013      	ands	r3, r2
 80019fa:	0019      	movs	r1, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	00da      	lsls	r2, r3, #3
 8001a02:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <HAL_RCC_ClockConfig+0x278>)
 8001a04:	430a      	orrs	r2, r1
 8001a06:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a08:	f000 f832 	bl	8001a70 <HAL_RCC_GetSysClockFreq>
 8001a0c:	0001      	movs	r1, r0
 8001a0e:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <HAL_RCC_ClockConfig+0x278>)
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	091b      	lsrs	r3, r3, #4
 8001a14:	220f      	movs	r2, #15
 8001a16:	4013      	ands	r3, r2
 8001a18:	4a12      	ldr	r2, [pc, #72]	; (8001a64 <HAL_RCC_ClockConfig+0x284>)
 8001a1a:	5cd3      	ldrb	r3, [r2, r3]
 8001a1c:	000a      	movs	r2, r1
 8001a1e:	40da      	lsrs	r2, r3
 8001a20:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <HAL_RCC_ClockConfig+0x288>)
 8001a22:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a24:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <HAL_RCC_ClockConfig+0x28c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	250b      	movs	r5, #11
 8001a2a:	197c      	adds	r4, r7, r5
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	f7ff f83f 	bl	8000ab0 <HAL_InitTick>
 8001a32:	0003      	movs	r3, r0
 8001a34:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001a36:	197b      	adds	r3, r7, r5
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d002      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001a3e:	197b      	adds	r3, r7, r5
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	e000      	b.n	8001a46 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	0018      	movs	r0, r3
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	b004      	add	sp, #16
 8001a4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a4e:	46c0      	nop			; (mov r8, r8)
 8001a50:	40022000 	.word	0x40022000
 8001a54:	00001388 	.word	0x00001388
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	fffff8ff 	.word	0xfffff8ff
 8001a60:	ffffc7ff 	.word	0xffffc7ff
 8001a64:	08003250 	.word	0x08003250
 8001a68:	20000000 	.word	0x20000000
 8001a6c:	20000004 	.word	0x20000004

08001a70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a70:	b5b0      	push	{r4, r5, r7, lr}
 8001a72:	b08e      	sub	sp, #56	; 0x38
 8001a74:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001a76:	4b4c      	ldr	r3, [pc, #304]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a7e:	230c      	movs	r3, #12
 8001a80:	4013      	ands	r3, r2
 8001a82:	2b0c      	cmp	r3, #12
 8001a84:	d014      	beq.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x40>
 8001a86:	d900      	bls.n	8001a8a <HAL_RCC_GetSysClockFreq+0x1a>
 8001a88:	e07b      	b.n	8001b82 <HAL_RCC_GetSysClockFreq+0x112>
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	d002      	beq.n	8001a94 <HAL_RCC_GetSysClockFreq+0x24>
 8001a8e:	2b08      	cmp	r3, #8
 8001a90:	d00b      	beq.n	8001aaa <HAL_RCC_GetSysClockFreq+0x3a>
 8001a92:	e076      	b.n	8001b82 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001a94:	4b44      	ldr	r3, [pc, #272]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2210      	movs	r2, #16
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	d002      	beq.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001a9e:	4b43      	ldr	r3, [pc, #268]	; (8001bac <HAL_RCC_GetSysClockFreq+0x13c>)
 8001aa0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001aa2:	e07c      	b.n	8001b9e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001aa4:	4b42      	ldr	r3, [pc, #264]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x140>)
 8001aa6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001aa8:	e079      	b.n	8001b9e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001aaa:	4b42      	ldr	r3, [pc, #264]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x144>)
 8001aac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001aae:	e076      	b.n	8001b9e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab2:	0c9a      	lsrs	r2, r3, #18
 8001ab4:	230f      	movs	r3, #15
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	4b3f      	ldr	r3, [pc, #252]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x148>)
 8001aba:	5c9b      	ldrb	r3, [r3, r2]
 8001abc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac0:	0d9a      	lsrs	r2, r3, #22
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001aca:	4b37      	ldr	r3, [pc, #220]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001acc:	68da      	ldr	r2, [r3, #12]
 8001ace:	2380      	movs	r3, #128	; 0x80
 8001ad0:	025b      	lsls	r3, r3, #9
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d01a      	beq.n	8001b0c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad8:	61bb      	str	r3, [r7, #24]
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
 8001ade:	4a35      	ldr	r2, [pc, #212]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x144>)
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	69b8      	ldr	r0, [r7, #24]
 8001ae4:	69f9      	ldr	r1, [r7, #28]
 8001ae6:	f7fe fbbb 	bl	8000260 <__aeabi_lmul>
 8001aea:	0002      	movs	r2, r0
 8001aec:	000b      	movs	r3, r1
 8001aee:	0010      	movs	r0, r2
 8001af0:	0019      	movs	r1, r3
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	613b      	str	r3, [r7, #16]
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	f7fe fb8f 	bl	8000220 <__aeabi_uldivmod>
 8001b02:	0002      	movs	r2, r0
 8001b04:	000b      	movs	r3, r1
 8001b06:	0013      	movs	r3, r2
 8001b08:	637b      	str	r3, [r7, #52]	; 0x34
 8001b0a:	e037      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001b0c:	4b26      	ldr	r3, [pc, #152]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2210      	movs	r2, #16
 8001b12:	4013      	ands	r3, r2
 8001b14:	d01a      	beq.n	8001b4c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	4a23      	ldr	r2, [pc, #140]	; (8001bac <HAL_RCC_GetSysClockFreq+0x13c>)
 8001b20:	2300      	movs	r3, #0
 8001b22:	68b8      	ldr	r0, [r7, #8]
 8001b24:	68f9      	ldr	r1, [r7, #12]
 8001b26:	f7fe fb9b 	bl	8000260 <__aeabi_lmul>
 8001b2a:	0002      	movs	r2, r0
 8001b2c:	000b      	movs	r3, r1
 8001b2e:	0010      	movs	r0, r2
 8001b30:	0019      	movs	r1, r3
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	603b      	str	r3, [r7, #0]
 8001b36:	2300      	movs	r3, #0
 8001b38:	607b      	str	r3, [r7, #4]
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f7fe fb6f 	bl	8000220 <__aeabi_uldivmod>
 8001b42:	0002      	movs	r2, r0
 8001b44:	000b      	movs	r3, r1
 8001b46:	0013      	movs	r3, r2
 8001b48:	637b      	str	r3, [r7, #52]	; 0x34
 8001b4a:	e017      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b4e:	0018      	movs	r0, r3
 8001b50:	2300      	movs	r3, #0
 8001b52:	0019      	movs	r1, r3
 8001b54:	4a16      	ldr	r2, [pc, #88]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x140>)
 8001b56:	2300      	movs	r3, #0
 8001b58:	f7fe fb82 	bl	8000260 <__aeabi_lmul>
 8001b5c:	0002      	movs	r2, r0
 8001b5e:	000b      	movs	r3, r1
 8001b60:	0010      	movs	r0, r2
 8001b62:	0019      	movs	r1, r3
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	001c      	movs	r4, r3
 8001b68:	2300      	movs	r3, #0
 8001b6a:	001d      	movs	r5, r3
 8001b6c:	0022      	movs	r2, r4
 8001b6e:	002b      	movs	r3, r5
 8001b70:	f7fe fb56 	bl	8000220 <__aeabi_uldivmod>
 8001b74:	0002      	movs	r2, r0
 8001b76:	000b      	movs	r3, r1
 8001b78:	0013      	movs	r3, r2
 8001b7a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b7e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b80:	e00d      	b.n	8001b9e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001b82:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	0b5b      	lsrs	r3, r3, #13
 8001b88:	2207      	movs	r2, #7
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001b8e:	6a3b      	ldr	r3, [r7, #32]
 8001b90:	3301      	adds	r3, #1
 8001b92:	2280      	movs	r2, #128	; 0x80
 8001b94:	0212      	lsls	r2, r2, #8
 8001b96:	409a      	lsls	r2, r3
 8001b98:	0013      	movs	r3, r2
 8001b9a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b9c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	b00e      	add	sp, #56	; 0x38
 8001ba6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	003d0900 	.word	0x003d0900
 8001bb0:	00f42400 	.word	0x00f42400
 8001bb4:	007a1200 	.word	0x007a1200
 8001bb8:	08003268 	.word	0x08003268

08001bbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bc0:	4b02      	ldr	r3, [pc, #8]	; (8001bcc <HAL_RCC_GetHCLKFreq+0x10>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
}
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	46c0      	nop			; (mov r8, r8)
 8001bcc:	20000000 	.word	0x20000000

08001bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bd4:	f7ff fff2 	bl	8001bbc <HAL_RCC_GetHCLKFreq>
 8001bd8:	0001      	movs	r1, r0
 8001bda:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	0a1b      	lsrs	r3, r3, #8
 8001be0:	2207      	movs	r2, #7
 8001be2:	4013      	ands	r3, r2
 8001be4:	4a04      	ldr	r2, [pc, #16]	; (8001bf8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001be6:	5cd3      	ldrb	r3, [r2, r3]
 8001be8:	40d9      	lsrs	r1, r3
 8001bea:	000b      	movs	r3, r1
}
 8001bec:	0018      	movs	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	08003260 	.word	0x08003260

08001bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c00:	f7ff ffdc 	bl	8001bbc <HAL_RCC_GetHCLKFreq>
 8001c04:	0001      	movs	r1, r0
 8001c06:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	0adb      	lsrs	r3, r3, #11
 8001c0c:	2207      	movs	r2, #7
 8001c0e:	4013      	ands	r3, r2
 8001c10:	4a04      	ldr	r2, [pc, #16]	; (8001c24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c12:	5cd3      	ldrb	r3, [r2, r3]
 8001c14:	40d9      	lsrs	r1, r3
 8001c16:	000b      	movs	r3, r1
}
 8001c18:	0018      	movs	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	46c0      	nop			; (mov r8, r8)
 8001c20:	40021000 	.word	0x40021000
 8001c24:	08003260 	.word	0x08003260

08001c28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e083      	b.n	8001d42 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d109      	bne.n	8001c56 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	2382      	movs	r3, #130	; 0x82
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d009      	beq.n	8001c62 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	61da      	str	r2, [r3, #28]
 8001c54:	e005      	b.n	8001c62 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2251      	movs	r2, #81	; 0x51
 8001c6c:	5c9b      	ldrb	r3, [r3, r2]
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d107      	bne.n	8001c84 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2250      	movs	r2, #80	; 0x50
 8001c78:	2100      	movs	r1, #0
 8001c7a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	0018      	movs	r0, r3
 8001c80:	f7fe fdf6 	bl	8000870 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2251      	movs	r2, #81	; 0x51
 8001c88:	2102      	movs	r1, #2
 8001c8a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2140      	movs	r1, #64	; 0x40
 8001c98:	438a      	bics	r2, r1
 8001c9a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	2382      	movs	r3, #130	; 0x82
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	401a      	ands	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6899      	ldr	r1, [r3, #8]
 8001caa:	2384      	movs	r3, #132	; 0x84
 8001cac:	021b      	lsls	r3, r3, #8
 8001cae:	400b      	ands	r3, r1
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68d9      	ldr	r1, [r3, #12]
 8001cb6:	2380      	movs	r3, #128	; 0x80
 8001cb8:	011b      	lsls	r3, r3, #4
 8001cba:	400b      	ands	r3, r1
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	2102      	movs	r1, #2
 8001cc4:	400b      	ands	r3, r1
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	695b      	ldr	r3, [r3, #20]
 8001ccc:	2101      	movs	r1, #1
 8001cce:	400b      	ands	r3, r1
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6999      	ldr	r1, [r3, #24]
 8001cd6:	2380      	movs	r3, #128	; 0x80
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	400b      	ands	r3, r1
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	2138      	movs	r1, #56	; 0x38
 8001ce4:	400b      	ands	r3, r1
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	2180      	movs	r1, #128	; 0x80
 8001cee:	400b      	ands	r3, r1
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	0011      	movs	r1, r2
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cf8:	2380      	movs	r3, #128	; 0x80
 8001cfa:	019b      	lsls	r3, r3, #6
 8001cfc:	401a      	ands	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	430a      	orrs	r2, r1
 8001d04:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	0c1b      	lsrs	r3, r3, #16
 8001d0c:	2204      	movs	r2, #4
 8001d0e:	4013      	ands	r3, r2
 8001d10:	0019      	movs	r1, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d16:	2210      	movs	r2, #16
 8001d18:	401a      	ands	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	69da      	ldr	r2, [r3, #28]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4907      	ldr	r1, [pc, #28]	; (8001d4c <HAL_SPI_Init+0x124>)
 8001d2e:	400a      	ands	r2, r1
 8001d30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2251      	movs	r2, #81	; 0x51
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	0018      	movs	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	b002      	add	sp, #8
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	fffff7ff 	.word	0xfffff7ff

08001d50 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b088      	sub	sp, #32
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	603b      	str	r3, [r7, #0]
 8001d5c:	1dbb      	adds	r3, r7, #6
 8001d5e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d60:	231f      	movs	r3, #31
 8001d62:	18fb      	adds	r3, r7, r3
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2250      	movs	r2, #80	; 0x50
 8001d6c:	5c9b      	ldrb	r3, [r3, r2]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d101      	bne.n	8001d76 <HAL_SPI_Transmit+0x26>
 8001d72:	2302      	movs	r3, #2
 8001d74:	e13e      	b.n	8001ff4 <HAL_SPI_Transmit+0x2a4>
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2250      	movs	r2, #80	; 0x50
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d7e:	f7fe fedd 	bl	8000b3c <HAL_GetTick>
 8001d82:	0003      	movs	r3, r0
 8001d84:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001d86:	2316      	movs	r3, #22
 8001d88:	18fb      	adds	r3, r7, r3
 8001d8a:	1dba      	adds	r2, r7, #6
 8001d8c:	8812      	ldrh	r2, [r2, #0]
 8001d8e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2251      	movs	r2, #81	; 0x51
 8001d94:	5c9b      	ldrb	r3, [r3, r2]
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d004      	beq.n	8001da6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001d9c:	231f      	movs	r3, #31
 8001d9e:	18fb      	adds	r3, r7, r3
 8001da0:	2202      	movs	r2, #2
 8001da2:	701a      	strb	r2, [r3, #0]
    goto error;
 8001da4:	e11b      	b.n	8001fde <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <HAL_SPI_Transmit+0x64>
 8001dac:	1dbb      	adds	r3, r7, #6
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d104      	bne.n	8001dbe <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001db4:	231f      	movs	r3, #31
 8001db6:	18fb      	adds	r3, r7, r3
 8001db8:	2201      	movs	r2, #1
 8001dba:	701a      	strb	r2, [r3, #0]
    goto error;
 8001dbc:	e10f      	b.n	8001fde <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2251      	movs	r2, #81	; 0x51
 8001dc2:	2103      	movs	r1, #3
 8001dc4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	68ba      	ldr	r2, [r7, #8]
 8001dd0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	1dba      	adds	r2, r7, #6
 8001dd6:	8812      	ldrh	r2, [r2, #0]
 8001dd8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	1dba      	adds	r2, r7, #6
 8001dde:	8812      	ldrh	r2, [r2, #0]
 8001de0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2200      	movs	r2, #0
 8001df2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2200      	movs	r2, #0
 8001df8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	2380      	movs	r3, #128	; 0x80
 8001e06:	021b      	lsls	r3, r3, #8
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d110      	bne.n	8001e2e <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2140      	movs	r1, #64	; 0x40
 8001e18:	438a      	bics	r2, r1
 8001e1a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2180      	movs	r1, #128	; 0x80
 8001e28:	01c9      	lsls	r1, r1, #7
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2240      	movs	r2, #64	; 0x40
 8001e36:	4013      	ands	r3, r2
 8001e38:	2b40      	cmp	r3, #64	; 0x40
 8001e3a:	d007      	beq.n	8001e4c <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2140      	movs	r1, #64	; 0x40
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	68da      	ldr	r2, [r3, #12]
 8001e50:	2380      	movs	r3, #128	; 0x80
 8001e52:	011b      	lsls	r3, r3, #4
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d14e      	bne.n	8001ef6 <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d004      	beq.n	8001e6a <HAL_SPI_Transmit+0x11a>
 8001e60:	2316      	movs	r3, #22
 8001e62:	18fb      	adds	r3, r7, r3
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d13f      	bne.n	8001eea <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	881a      	ldrh	r2, [r3, #0]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	1c9a      	adds	r2, r3, #2
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	3b01      	subs	r3, #1
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001e8e:	e02c      	b.n	8001eea <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	2202      	movs	r2, #2
 8001e98:	4013      	ands	r3, r2
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d112      	bne.n	8001ec4 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	881a      	ldrh	r2, [r3, #0]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	1c9a      	adds	r2, r3, #2
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	86da      	strh	r2, [r3, #54]	; 0x36
 8001ec2:	e012      	b.n	8001eea <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ec4:	f7fe fe3a 	bl	8000b3c <HAL_GetTick>
 8001ec8:	0002      	movs	r2, r0
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d802      	bhi.n	8001eda <HAL_SPI_Transmit+0x18a>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	d102      	bne.n	8001ee0 <HAL_SPI_Transmit+0x190>
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d104      	bne.n	8001eea <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 8001ee0:	231f      	movs	r3, #31
 8001ee2:	18fb      	adds	r3, r7, r3
 8001ee4:	2203      	movs	r2, #3
 8001ee6:	701a      	strb	r2, [r3, #0]
          goto error;
 8001ee8:	e079      	b.n	8001fde <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1cd      	bne.n	8001e90 <HAL_SPI_Transmit+0x140>
 8001ef4:	e04f      	b.n	8001f96 <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d004      	beq.n	8001f08 <HAL_SPI_Transmit+0x1b8>
 8001efe:	2316      	movs	r3, #22
 8001f00:	18fb      	adds	r3, r7, r3
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d141      	bne.n	8001f8c <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	330c      	adds	r3, #12
 8001f12:	7812      	ldrb	r2, [r2, #0]
 8001f14:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	1c5a      	adds	r2, r3, #1
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	3b01      	subs	r3, #1
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001f2e:	e02d      	b.n	8001f8c <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2202      	movs	r2, #2
 8001f38:	4013      	ands	r3, r2
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d113      	bne.n	8001f66 <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	330c      	adds	r3, #12
 8001f48:	7812      	ldrb	r2, [r2, #0]
 8001f4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f50:	1c5a      	adds	r2, r3, #1
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f64:	e012      	b.n	8001f8c <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f66:	f7fe fde9 	bl	8000b3c <HAL_GetTick>
 8001f6a:	0002      	movs	r2, r0
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d802      	bhi.n	8001f7c <HAL_SPI_Transmit+0x22c>
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	d102      	bne.n	8001f82 <HAL_SPI_Transmit+0x232>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d104      	bne.n	8001f8c <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 8001f82:	231f      	movs	r3, #31
 8001f84:	18fb      	adds	r3, r7, r3
 8001f86:	2203      	movs	r2, #3
 8001f88:	701a      	strb	r2, [r3, #0]
          goto error;
 8001f8a:	e028      	b.n	8001fde <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1cc      	bne.n	8001f30 <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	6839      	ldr	r1, [r7, #0]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f000 fc07 	bl	80027b0 <SPI_EndRxTxTransaction>
 8001fa2:	1e03      	subs	r3, r0, #0
 8001fa4:	d002      	beq.n	8001fac <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2220      	movs	r2, #32
 8001faa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10a      	bne.n	8001fca <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d004      	beq.n	8001fdc <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 8001fd2:	231f      	movs	r3, #31
 8001fd4:	18fb      	adds	r3, r7, r3
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	701a      	strb	r2, [r3, #0]
 8001fda:	e000      	b.n	8001fde <HAL_SPI_Transmit+0x28e>
  }

error:
 8001fdc:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2251      	movs	r2, #81	; 0x51
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2250      	movs	r2, #80	; 0x50
 8001fea:	2100      	movs	r1, #0
 8001fec:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001fee:	231f      	movs	r3, #31
 8001ff0:	18fb      	adds	r3, r7, r3
 8001ff2:	781b      	ldrb	r3, [r3, #0]
}
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	b008      	add	sp, #32
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ffc:	b590      	push	{r4, r7, lr}
 8001ffe:	b089      	sub	sp, #36	; 0x24
 8002000:	af02      	add	r7, sp, #8
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	603b      	str	r3, [r7, #0]
 8002008:	1dbb      	adds	r3, r7, #6
 800200a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800200c:	2317      	movs	r3, #23
 800200e:	18fb      	adds	r3, r7, r3
 8002010:	2200      	movs	r2, #0
 8002012:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	2382      	movs	r3, #130	; 0x82
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	429a      	cmp	r2, r3
 800201e:	d113      	bne.n	8002048 <HAL_SPI_Receive+0x4c>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10f      	bne.n	8002048 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2251      	movs	r2, #81	; 0x51
 800202c:	2104      	movs	r1, #4
 800202e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002030:	1dbb      	adds	r3, r7, #6
 8002032:	881c      	ldrh	r4, [r3, #0]
 8002034:	68ba      	ldr	r2, [r7, #8]
 8002036:	68b9      	ldr	r1, [r7, #8]
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	0023      	movs	r3, r4
 8002040:	f000 f902 	bl	8002248 <HAL_SPI_TransmitReceive>
 8002044:	0003      	movs	r3, r0
 8002046:	e0f9      	b.n	800223c <HAL_SPI_Receive+0x240>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2250      	movs	r2, #80	; 0x50
 800204c:	5c9b      	ldrb	r3, [r3, r2]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d101      	bne.n	8002056 <HAL_SPI_Receive+0x5a>
 8002052:	2302      	movs	r3, #2
 8002054:	e0f2      	b.n	800223c <HAL_SPI_Receive+0x240>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2250      	movs	r2, #80	; 0x50
 800205a:	2101      	movs	r1, #1
 800205c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800205e:	f7fe fd6d 	bl	8000b3c <HAL_GetTick>
 8002062:	0003      	movs	r3, r0
 8002064:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2251      	movs	r2, #81	; 0x51
 800206a:	5c9b      	ldrb	r3, [r3, r2]
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b01      	cmp	r3, #1
 8002070:	d004      	beq.n	800207c <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8002072:	2317      	movs	r3, #23
 8002074:	18fb      	adds	r3, r7, r3
 8002076:	2202      	movs	r2, #2
 8002078:	701a      	strb	r2, [r3, #0]
    goto error;
 800207a:	e0d4      	b.n	8002226 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_SPI_Receive+0x8e>
 8002082:	1dbb      	adds	r3, r7, #6
 8002084:	881b      	ldrh	r3, [r3, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d104      	bne.n	8002094 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800208a:	2317      	movs	r3, #23
 800208c:	18fb      	adds	r3, r7, r3
 800208e:	2201      	movs	r2, #1
 8002090:	701a      	strb	r2, [r3, #0]
    goto error;
 8002092:	e0c8      	b.n	8002226 <HAL_SPI_Receive+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2251      	movs	r2, #81	; 0x51
 8002098:	2104      	movs	r1, #4
 800209a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	68ba      	ldr	r2, [r7, #8]
 80020a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	1dba      	adds	r2, r7, #6
 80020ac:	8812      	ldrh	r2, [r2, #0]
 80020ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	1dba      	adds	r2, r7, #6
 80020b4:	8812      	ldrh	r2, [r2, #0]
 80020b6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	689a      	ldr	r2, [r3, #8]
 80020da:	2380      	movs	r3, #128	; 0x80
 80020dc:	021b      	lsls	r3, r3, #8
 80020de:	429a      	cmp	r2, r3
 80020e0:	d10f      	bne.n	8002102 <HAL_SPI_Receive+0x106>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2140      	movs	r1, #64	; 0x40
 80020ee:	438a      	bics	r2, r1
 80020f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4951      	ldr	r1, [pc, #324]	; (8002244 <HAL_SPI_Receive+0x248>)
 80020fe:	400a      	ands	r2, r1
 8002100:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2240      	movs	r2, #64	; 0x40
 800210a:	4013      	ands	r3, r2
 800210c:	2b40      	cmp	r3, #64	; 0x40
 800210e:	d007      	beq.n	8002120 <HAL_SPI_Receive+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2140      	movs	r1, #64	; 0x40
 800211c:	430a      	orrs	r2, r1
 800211e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d164      	bne.n	80021f2 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002128:	e02f      	b.n	800218a <HAL_SPI_Receive+0x18e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	2201      	movs	r2, #1
 8002132:	4013      	ands	r3, r2
 8002134:	2b01      	cmp	r3, #1
 8002136:	d115      	bne.n	8002164 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	330c      	adds	r3, #12
 800213e:	001a      	movs	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002144:	7812      	ldrb	r2, [r2, #0]
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002158:	b29b      	uxth	r3, r3
 800215a:	3b01      	subs	r3, #1
 800215c:	b29a      	uxth	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002162:	e012      	b.n	800218a <HAL_SPI_Receive+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002164:	f7fe fcea 	bl	8000b3c <HAL_GetTick>
 8002168:	0002      	movs	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	429a      	cmp	r2, r3
 8002172:	d802      	bhi.n	800217a <HAL_SPI_Receive+0x17e>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	3301      	adds	r3, #1
 8002178:	d102      	bne.n	8002180 <HAL_SPI_Receive+0x184>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d104      	bne.n	800218a <HAL_SPI_Receive+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8002180:	2317      	movs	r3, #23
 8002182:	18fb      	adds	r3, r7, r3
 8002184:	2203      	movs	r2, #3
 8002186:	701a      	strb	r2, [r3, #0]
          goto error;
 8002188:	e04d      	b.n	8002226 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800218e:	b29b      	uxth	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1ca      	bne.n	800212a <HAL_SPI_Receive+0x12e>
 8002194:	e032      	b.n	80021fc <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	2201      	movs	r2, #1
 800219e:	4013      	ands	r3, r2
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d113      	bne.n	80021cc <HAL_SPI_Receive+0x1d0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ae:	b292      	uxth	r2, r2
 80021b0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b6:	1c9a      	adds	r2, r3, #2
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	3b01      	subs	r3, #1
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80021ca:	e012      	b.n	80021f2 <HAL_SPI_Receive+0x1f6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021cc:	f7fe fcb6 	bl	8000b3c <HAL_GetTick>
 80021d0:	0002      	movs	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d802      	bhi.n	80021e2 <HAL_SPI_Receive+0x1e6>
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	3301      	adds	r3, #1
 80021e0:	d102      	bne.n	80021e8 <HAL_SPI_Receive+0x1ec>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d104      	bne.n	80021f2 <HAL_SPI_Receive+0x1f6>
        {
          errorcode = HAL_TIMEOUT;
 80021e8:	2317      	movs	r3, #23
 80021ea:	18fb      	adds	r3, r7, r3
 80021ec:	2203      	movs	r2, #3
 80021ee:	701a      	strb	r2, [r3, #0]
          goto error;
 80021f0:	e019      	b.n	8002226 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1cc      	bne.n	8002196 <HAL_SPI_Receive+0x19a>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	6839      	ldr	r1, [r7, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	0018      	movs	r0, r3
 8002204:	f000 fa6a 	bl	80026dc <SPI_EndRxTransaction>
 8002208:	1e03      	subs	r3, r0, #0
 800220a:	d002      	beq.n	8002212 <HAL_SPI_Receive+0x216>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2220      	movs	r2, #32
 8002210:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002216:	2b00      	cmp	r3, #0
 8002218:	d004      	beq.n	8002224 <HAL_SPI_Receive+0x228>
  {
    errorcode = HAL_ERROR;
 800221a:	2317      	movs	r3, #23
 800221c:	18fb      	adds	r3, r7, r3
 800221e:	2201      	movs	r2, #1
 8002220:	701a      	strb	r2, [r3, #0]
 8002222:	e000      	b.n	8002226 <HAL_SPI_Receive+0x22a>
  }

error :
 8002224:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2251      	movs	r2, #81	; 0x51
 800222a:	2101      	movs	r1, #1
 800222c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2250      	movs	r2, #80	; 0x50
 8002232:	2100      	movs	r1, #0
 8002234:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002236:	2317      	movs	r3, #23
 8002238:	18fb      	adds	r3, r7, r3
 800223a:	781b      	ldrb	r3, [r3, #0]
}
 800223c:	0018      	movs	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	b007      	add	sp, #28
 8002242:	bd90      	pop	{r4, r7, pc}
 8002244:	ffffbfff 	.word	0xffffbfff

08002248 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08c      	sub	sp, #48	; 0x30
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
 8002254:	001a      	movs	r2, r3
 8002256:	1cbb      	adds	r3, r7, #2
 8002258:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800225a:	2301      	movs	r3, #1
 800225c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800225e:	232b      	movs	r3, #43	; 0x2b
 8002260:	18fb      	adds	r3, r7, r3
 8002262:	2200      	movs	r2, #0
 8002264:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2250      	movs	r2, #80	; 0x50
 800226a:	5c9b      	ldrb	r3, [r3, r2]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d101      	bne.n	8002274 <HAL_SPI_TransmitReceive+0x2c>
 8002270:	2302      	movs	r3, #2
 8002272:	e1a0      	b.n	80025b6 <HAL_SPI_TransmitReceive+0x36e>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2250      	movs	r2, #80	; 0x50
 8002278:	2101      	movs	r1, #1
 800227a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800227c:	f7fe fc5e 	bl	8000b3c <HAL_GetTick>
 8002280:	0003      	movs	r3, r0
 8002282:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002284:	2023      	movs	r0, #35	; 0x23
 8002286:	183b      	adds	r3, r7, r0
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	2151      	movs	r1, #81	; 0x51
 800228c:	5c52      	ldrb	r2, [r2, r1]
 800228e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002296:	231a      	movs	r3, #26
 8002298:	18fb      	adds	r3, r7, r3
 800229a:	1cba      	adds	r2, r7, #2
 800229c:	8812      	ldrh	r2, [r2, #0]
 800229e:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80022a0:	183b      	adds	r3, r7, r0
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d011      	beq.n	80022cc <HAL_SPI_TransmitReceive+0x84>
 80022a8:	69fa      	ldr	r2, [r7, #28]
 80022aa:	2382      	movs	r3, #130	; 0x82
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d107      	bne.n	80022c2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d103      	bne.n	80022c2 <HAL_SPI_TransmitReceive+0x7a>
 80022ba:	183b      	adds	r3, r7, r0
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b04      	cmp	r3, #4
 80022c0:	d004      	beq.n	80022cc <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80022c2:	232b      	movs	r3, #43	; 0x2b
 80022c4:	18fb      	adds	r3, r7, r3
 80022c6:	2202      	movs	r2, #2
 80022c8:	701a      	strb	r2, [r3, #0]
    goto error;
 80022ca:	e169      	b.n	80025a0 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d006      	beq.n	80022e0 <HAL_SPI_TransmitReceive+0x98>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_SPI_TransmitReceive+0x98>
 80022d8:	1cbb      	adds	r3, r7, #2
 80022da:	881b      	ldrh	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d104      	bne.n	80022ea <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80022e0:	232b      	movs	r3, #43	; 0x2b
 80022e2:	18fb      	adds	r3, r7, r3
 80022e4:	2201      	movs	r2, #1
 80022e6:	701a      	strb	r2, [r3, #0]
    goto error;
 80022e8:	e15a      	b.n	80025a0 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2251      	movs	r2, #81	; 0x51
 80022ee:	5c9b      	ldrb	r3, [r3, r2]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d003      	beq.n	80022fe <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2251      	movs	r2, #81	; 0x51
 80022fa:	2105      	movs	r1, #5
 80022fc:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	1cba      	adds	r2, r7, #2
 800230e:	8812      	ldrh	r2, [r2, #0]
 8002310:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	1cba      	adds	r2, r7, #2
 8002316:	8812      	ldrh	r2, [r2, #0]
 8002318:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	68ba      	ldr	r2, [r7, #8]
 800231e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	1cba      	adds	r2, r7, #2
 8002324:	8812      	ldrh	r2, [r2, #0]
 8002326:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	1cba      	adds	r2, r7, #2
 800232c:	8812      	ldrh	r2, [r2, #0]
 800232e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2240      	movs	r2, #64	; 0x40
 8002344:	4013      	ands	r3, r2
 8002346:	2b40      	cmp	r3, #64	; 0x40
 8002348:	d007      	beq.n	800235a <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2140      	movs	r1, #64	; 0x40
 8002356:	430a      	orrs	r2, r1
 8002358:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	68da      	ldr	r2, [r3, #12]
 800235e:	2380      	movs	r3, #128	; 0x80
 8002360:	011b      	lsls	r3, r3, #4
 8002362:	429a      	cmp	r2, r3
 8002364:	d000      	beq.n	8002368 <HAL_SPI_TransmitReceive+0x120>
 8002366:	e07a      	b.n	800245e <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d004      	beq.n	800237a <HAL_SPI_TransmitReceive+0x132>
 8002370:	231a      	movs	r3, #26
 8002372:	18fb      	adds	r3, r7, r3
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d166      	bne.n	8002448 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	881a      	ldrh	r2, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	1c9a      	adds	r2, r3, #2
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002394:	b29b      	uxth	r3, r3
 8002396:	3b01      	subs	r3, #1
 8002398:	b29a      	uxth	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800239e:	e053      	b.n	8002448 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	2202      	movs	r2, #2
 80023a8:	4013      	ands	r3, r2
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d11b      	bne.n	80023e6 <HAL_SPI_TransmitReceive+0x19e>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d016      	beq.n	80023e6 <HAL_SPI_TransmitReceive+0x19e>
 80023b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d113      	bne.n	80023e6 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	881a      	ldrh	r2, [r3, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	1c9a      	adds	r2, r3, #2
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023d8:	b29b      	uxth	r3, r3
 80023da:	3b01      	subs	r3, #1
 80023dc:	b29a      	uxth	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023e2:	2300      	movs	r3, #0
 80023e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	2201      	movs	r2, #1
 80023ee:	4013      	ands	r3, r2
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d119      	bne.n	8002428 <HAL_SPI_TransmitReceive+0x1e0>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d014      	beq.n	8002428 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68da      	ldr	r2, [r3, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002408:	b292      	uxth	r2, r2
 800240a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002410:	1c9a      	adds	r2, r3, #2
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800241a:	b29b      	uxth	r3, r3
 800241c:	3b01      	subs	r3, #1
 800241e:	b29a      	uxth	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002424:	2301      	movs	r3, #1
 8002426:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002428:	f7fe fb88 	bl	8000b3c <HAL_GetTick>
 800242c:	0002      	movs	r2, r0
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002434:	429a      	cmp	r2, r3
 8002436:	d807      	bhi.n	8002448 <HAL_SPI_TransmitReceive+0x200>
 8002438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800243a:	3301      	adds	r3, #1
 800243c:	d004      	beq.n	8002448 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 800243e:	232b      	movs	r3, #43	; 0x2b
 8002440:	18fb      	adds	r3, r7, r3
 8002442:	2203      	movs	r2, #3
 8002444:	701a      	strb	r2, [r3, #0]
        goto error;
 8002446:	e0ab      	b.n	80025a0 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800244c:	b29b      	uxth	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1a6      	bne.n	80023a0 <HAL_SPI_TransmitReceive+0x158>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002456:	b29b      	uxth	r3, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1a1      	bne.n	80023a0 <HAL_SPI_TransmitReceive+0x158>
 800245c:	e07f      	b.n	800255e <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d005      	beq.n	8002472 <HAL_SPI_TransmitReceive+0x22a>
 8002466:	231a      	movs	r3, #26
 8002468:	18fb      	adds	r3, r7, r3
 800246a:	881b      	ldrh	r3, [r3, #0]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d000      	beq.n	8002472 <HAL_SPI_TransmitReceive+0x22a>
 8002470:	e06b      	b.n	800254a <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	330c      	adds	r3, #12
 800247c:	7812      	ldrb	r2, [r2, #0]
 800247e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002484:	1c5a      	adds	r2, r3, #1
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800248e:	b29b      	uxth	r3, r3
 8002490:	3b01      	subs	r3, #1
 8002492:	b29a      	uxth	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002498:	e057      	b.n	800254a <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	2202      	movs	r2, #2
 80024a2:	4013      	ands	r3, r2
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d11c      	bne.n	80024e2 <HAL_SPI_TransmitReceive+0x29a>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d017      	beq.n	80024e2 <HAL_SPI_TransmitReceive+0x29a>
 80024b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d114      	bne.n	80024e2 <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	330c      	adds	r3, #12
 80024c2:	7812      	ldrb	r2, [r2, #0]
 80024c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	1c5a      	adds	r2, r3, #1
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	3b01      	subs	r3, #1
 80024d8:	b29a      	uxth	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024de:	2300      	movs	r3, #0
 80024e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	2201      	movs	r2, #1
 80024ea:	4013      	ands	r3, r2
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d119      	bne.n	8002524 <HAL_SPI_TransmitReceive+0x2dc>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d014      	beq.n	8002524 <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002516:	b29b      	uxth	r3, r3
 8002518:	3b01      	subs	r3, #1
 800251a:	b29a      	uxth	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002520:	2301      	movs	r3, #1
 8002522:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002524:	f7fe fb0a 	bl	8000b3c <HAL_GetTick>
 8002528:	0002      	movs	r2, r0
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002530:	429a      	cmp	r2, r3
 8002532:	d802      	bhi.n	800253a <HAL_SPI_TransmitReceive+0x2f2>
 8002534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002536:	3301      	adds	r3, #1
 8002538:	d102      	bne.n	8002540 <HAL_SPI_TransmitReceive+0x2f8>
 800253a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800253c:	2b00      	cmp	r3, #0
 800253e:	d104      	bne.n	800254a <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 8002540:	232b      	movs	r3, #43	; 0x2b
 8002542:	18fb      	adds	r3, r7, r3
 8002544:	2203      	movs	r2, #3
 8002546:	701a      	strb	r2, [r3, #0]
        goto error;
 8002548:	e02a      	b.n	80025a0 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800254e:	b29b      	uxth	r3, r3
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1a2      	bne.n	800249a <HAL_SPI_TransmitReceive+0x252>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002558:	b29b      	uxth	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d19d      	bne.n	800249a <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800255e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002560:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	0018      	movs	r0, r3
 8002566:	f000 f923 	bl	80027b0 <SPI_EndRxTxTransaction>
 800256a:	1e03      	subs	r3, r0, #0
 800256c:	d007      	beq.n	800257e <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 800256e:	232b      	movs	r3, #43	; 0x2b
 8002570:	18fb      	adds	r3, r7, r3
 8002572:	2201      	movs	r2, #1
 8002574:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2220      	movs	r2, #32
 800257a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800257c:	e010      	b.n	80025a0 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10b      	bne.n	800259e <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002586:	2300      	movs	r3, #0
 8002588:	617b      	str	r3, [r7, #20]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	617b      	str	r3, [r7, #20]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	e000      	b.n	80025a0 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 800259e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2251      	movs	r2, #81	; 0x51
 80025a4:	2101      	movs	r1, #1
 80025a6:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2250      	movs	r2, #80	; 0x50
 80025ac:	2100      	movs	r1, #0
 80025ae:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80025b0:	232b      	movs	r3, #43	; 0x2b
 80025b2:	18fb      	adds	r3, r7, r3
 80025b4:	781b      	ldrb	r3, [r3, #0]
}
 80025b6:	0018      	movs	r0, r3
 80025b8:	46bd      	mov	sp, r7
 80025ba:	b00c      	add	sp, #48	; 0x30
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b088      	sub	sp, #32
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	603b      	str	r3, [r7, #0]
 80025cc:	1dfb      	adds	r3, r7, #7
 80025ce:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80025d0:	f7fe fab4 	bl	8000b3c <HAL_GetTick>
 80025d4:	0002      	movs	r2, r0
 80025d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d8:	1a9b      	subs	r3, r3, r2
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	18d3      	adds	r3, r2, r3
 80025de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80025e0:	f7fe faac 	bl	8000b3c <HAL_GetTick>
 80025e4:	0003      	movs	r3, r0
 80025e6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80025e8:	4b3a      	ldr	r3, [pc, #232]	; (80026d4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	015b      	lsls	r3, r3, #5
 80025ee:	0d1b      	lsrs	r3, r3, #20
 80025f0:	69fa      	ldr	r2, [r7, #28]
 80025f2:	4353      	muls	r3, r2
 80025f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025f6:	e058      	b.n	80026aa <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	3301      	adds	r3, #1
 80025fc:	d055      	beq.n	80026aa <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80025fe:	f7fe fa9d 	bl	8000b3c <HAL_GetTick>
 8002602:	0002      	movs	r2, r0
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	69fa      	ldr	r2, [r7, #28]
 800260a:	429a      	cmp	r2, r3
 800260c:	d902      	bls.n	8002614 <SPI_WaitFlagStateUntilTimeout+0x54>
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d142      	bne.n	800269a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	21e0      	movs	r1, #224	; 0xe0
 8002620:	438a      	bics	r2, r1
 8002622:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	2382      	movs	r3, #130	; 0x82
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	429a      	cmp	r2, r3
 800262e:	d113      	bne.n	8002658 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	2380      	movs	r3, #128	; 0x80
 8002636:	021b      	lsls	r3, r3, #8
 8002638:	429a      	cmp	r2, r3
 800263a:	d005      	beq.n	8002648 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	2380      	movs	r3, #128	; 0x80
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	429a      	cmp	r2, r3
 8002646:	d107      	bne.n	8002658 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2140      	movs	r1, #64	; 0x40
 8002654:	438a      	bics	r2, r1
 8002656:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800265c:	2380      	movs	r3, #128	; 0x80
 800265e:	019b      	lsls	r3, r3, #6
 8002660:	429a      	cmp	r2, r3
 8002662:	d110      	bne.n	8002686 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	491a      	ldr	r1, [pc, #104]	; (80026d8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002670:	400a      	ands	r2, r1
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2180      	movs	r1, #128	; 0x80
 8002680:	0189      	lsls	r1, r1, #6
 8002682:	430a      	orrs	r2, r1
 8002684:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2251      	movs	r2, #81	; 0x51
 800268a:	2101      	movs	r1, #1
 800268c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2250      	movs	r2, #80	; 0x50
 8002692:	2100      	movs	r1, #0
 8002694:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e017      	b.n	80026ca <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	4013      	ands	r3, r2
 80026b4:	68ba      	ldr	r2, [r7, #8]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	425a      	negs	r2, r3
 80026ba:	4153      	adcs	r3, r2
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	001a      	movs	r2, r3
 80026c0:	1dfb      	adds	r3, r7, #7
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d197      	bne.n	80025f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	0018      	movs	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	b008      	add	sp, #32
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	20000000 	.word	0x20000000
 80026d8:	ffffdfff 	.word	0xffffdfff

080026dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af02      	add	r7, sp, #8
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	2382      	movs	r3, #130	; 0x82
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d113      	bne.n	800271c <SPI_EndRxTransaction+0x40>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	2380      	movs	r3, #128	; 0x80
 80026fa:	021b      	lsls	r3, r3, #8
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d005      	beq.n	800270c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	2380      	movs	r3, #128	; 0x80
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	429a      	cmp	r2, r3
 800270a:	d107      	bne.n	800271c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2140      	movs	r1, #64	; 0x40
 8002718:	438a      	bics	r2, r1
 800271a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	2382      	movs	r3, #130	; 0x82
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	429a      	cmp	r2, r3
 8002726:	d12b      	bne.n	8002780 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	2380      	movs	r3, #128	; 0x80
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	429a      	cmp	r2, r3
 8002732:	d012      	beq.n	800275a <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002734:	68ba      	ldr	r2, [r7, #8]
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	0013      	movs	r3, r2
 800273e:	2200      	movs	r2, #0
 8002740:	2180      	movs	r1, #128	; 0x80
 8002742:	f7ff ff3d 	bl	80025c0 <SPI_WaitFlagStateUntilTimeout>
 8002746:	1e03      	subs	r3, r0, #0
 8002748:	d02d      	beq.n	80027a6 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800274e:	2220      	movs	r2, #32
 8002750:	431a      	orrs	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e026      	b.n	80027a8 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	9300      	str	r3, [sp, #0]
 8002762:	0013      	movs	r3, r2
 8002764:	2200      	movs	r2, #0
 8002766:	2101      	movs	r1, #1
 8002768:	f7ff ff2a 	bl	80025c0 <SPI_WaitFlagStateUntilTimeout>
 800276c:	1e03      	subs	r3, r0, #0
 800276e:	d01a      	beq.n	80027a6 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002774:	2220      	movs	r2, #32
 8002776:	431a      	orrs	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e013      	b.n	80027a8 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002780:	68ba      	ldr	r2, [r7, #8]
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	0013      	movs	r3, r2
 800278a:	2200      	movs	r2, #0
 800278c:	2101      	movs	r1, #1
 800278e:	f7ff ff17 	bl	80025c0 <SPI_WaitFlagStateUntilTimeout>
 8002792:	1e03      	subs	r3, r0, #0
 8002794:	d007      	beq.n	80027a6 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279a:	2220      	movs	r2, #32
 800279c:	431a      	orrs	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e000      	b.n	80027a8 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	0018      	movs	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b004      	add	sp, #16
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b088      	sub	sp, #32
 80027b4:	af02      	add	r7, sp, #8
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80027bc:	4b1d      	ldr	r3, [pc, #116]	; (8002834 <SPI_EndRxTxTransaction+0x84>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	491d      	ldr	r1, [pc, #116]	; (8002838 <SPI_EndRxTxTransaction+0x88>)
 80027c2:	0018      	movs	r0, r3
 80027c4:	f7fd fca0 	bl	8000108 <__udivsi3>
 80027c8:	0003      	movs	r3, r0
 80027ca:	001a      	movs	r2, r3
 80027cc:	0013      	movs	r3, r2
 80027ce:	015b      	lsls	r3, r3, #5
 80027d0:	1a9b      	subs	r3, r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	189b      	adds	r3, r3, r2
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	2382      	movs	r3, #130	; 0x82
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d112      	bne.n	800280c <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	0013      	movs	r3, r2
 80027f0:	2200      	movs	r2, #0
 80027f2:	2180      	movs	r1, #128	; 0x80
 80027f4:	f7ff fee4 	bl	80025c0 <SPI_WaitFlagStateUntilTimeout>
 80027f8:	1e03      	subs	r3, r0, #0
 80027fa:	d016      	beq.n	800282a <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002800:	2220      	movs	r2, #32
 8002802:	431a      	orrs	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e00f      	b.n	800282c <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00a      	beq.n	8002828 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	3b01      	subs	r3, #1
 8002816:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	2280      	movs	r2, #128	; 0x80
 8002820:	4013      	ands	r3, r2
 8002822:	2b80      	cmp	r3, #128	; 0x80
 8002824:	d0f2      	beq.n	800280c <SPI_EndRxTxTransaction+0x5c>
 8002826:	e000      	b.n	800282a <SPI_EndRxTxTransaction+0x7a>
        break;
 8002828:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	0018      	movs	r0, r3
 800282e:	46bd      	mov	sp, r7
 8002830:	b006      	add	sp, #24
 8002832:	bd80      	pop	{r7, pc}
 8002834:	20000000 	.word	0x20000000
 8002838:	016e3600 	.word	0x016e3600

0800283c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e044      	b.n	80028d8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002852:	2b00      	cmp	r3, #0
 8002854:	d107      	bne.n	8002866 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2274      	movs	r2, #116	; 0x74
 800285a:	2100      	movs	r1, #0
 800285c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	0018      	movs	r0, r3
 8002862:	f7fe f849 	bl	80008f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2224      	movs	r2, #36	; 0x24
 800286a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2101      	movs	r1, #1
 8002878:	438a      	bics	r2, r1
 800287a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	0018      	movs	r0, r3
 8002880:	f000 f830 	bl	80028e4 <UART_SetConfig>
 8002884:	0003      	movs	r3, r0
 8002886:	2b01      	cmp	r3, #1
 8002888:	d101      	bne.n	800288e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e024      	b.n	80028d8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	0018      	movs	r0, r3
 800289a:	f000 fae1 	bl	8002e60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	490d      	ldr	r1, [pc, #52]	; (80028e0 <HAL_UART_Init+0xa4>)
 80028aa:	400a      	ands	r2, r1
 80028ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	212a      	movs	r1, #42	; 0x2a
 80028ba:	438a      	bics	r2, r1
 80028bc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2101      	movs	r1, #1
 80028ca:	430a      	orrs	r2, r1
 80028cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	0018      	movs	r0, r3
 80028d2:	f000 fb79 	bl	8002fc8 <UART_CheckIdleState>
 80028d6:	0003      	movs	r3, r0
}
 80028d8:	0018      	movs	r0, r3
 80028da:	46bd      	mov	sp, r7
 80028dc:	b002      	add	sp, #8
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	ffffb7ff 	.word	0xffffb7ff

080028e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028e4:	b5b0      	push	{r4, r5, r7, lr}
 80028e6:	b08e      	sub	sp, #56	; 0x38
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80028ec:	231a      	movs	r3, #26
 80028ee:	2218      	movs	r2, #24
 80028f0:	4694      	mov	ip, r2
 80028f2:	44bc      	add	ip, r7
 80028f4:	4463      	add	r3, ip
 80028f6:	2200      	movs	r2, #0
 80028f8:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	431a      	orrs	r2, r3
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	431a      	orrs	r2, r3
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	4313      	orrs	r3, r2
 8002910:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4ab0      	ldr	r2, [pc, #704]	; (8002bdc <UART_SetConfig+0x2f8>)
 800291a:	4013      	ands	r3, r2
 800291c:	0019      	movs	r1, r3
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002924:	430a      	orrs	r2, r1
 8002926:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	4aac      	ldr	r2, [pc, #688]	; (8002be0 <UART_SetConfig+0x2fc>)
 8002930:	4013      	ands	r3, r2
 8002932:	0019      	movs	r1, r3
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	68da      	ldr	r2, [r3, #12]
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4aa6      	ldr	r2, [pc, #664]	; (8002be4 <UART_SetConfig+0x300>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d004      	beq.n	800295a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002956:	4313      	orrs	r3, r2
 8002958:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	4aa1      	ldr	r2, [pc, #644]	; (8002be8 <UART_SetConfig+0x304>)
 8002962:	4013      	ands	r3, r2
 8002964:	0019      	movs	r1, r3
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800296c:	430a      	orrs	r2, r1
 800296e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a9d      	ldr	r2, [pc, #628]	; (8002bec <UART_SetConfig+0x308>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d136      	bne.n	80029e8 <UART_SetConfig+0x104>
 800297a:	4b9d      	ldr	r3, [pc, #628]	; (8002bf0 <UART_SetConfig+0x30c>)
 800297c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800297e:	2203      	movs	r2, #3
 8002980:	4013      	ands	r3, r2
 8002982:	2b03      	cmp	r3, #3
 8002984:	d020      	beq.n	80029c8 <UART_SetConfig+0xe4>
 8002986:	d827      	bhi.n	80029d8 <UART_SetConfig+0xf4>
 8002988:	2b02      	cmp	r3, #2
 800298a:	d00d      	beq.n	80029a8 <UART_SetConfig+0xc4>
 800298c:	d824      	bhi.n	80029d8 <UART_SetConfig+0xf4>
 800298e:	2b00      	cmp	r3, #0
 8002990:	d002      	beq.n	8002998 <UART_SetConfig+0xb4>
 8002992:	2b01      	cmp	r3, #1
 8002994:	d010      	beq.n	80029b8 <UART_SetConfig+0xd4>
 8002996:	e01f      	b.n	80029d8 <UART_SetConfig+0xf4>
 8002998:	231b      	movs	r3, #27
 800299a:	2218      	movs	r2, #24
 800299c:	4694      	mov	ip, r2
 800299e:	44bc      	add	ip, r7
 80029a0:	4463      	add	r3, ip
 80029a2:	2201      	movs	r2, #1
 80029a4:	701a      	strb	r2, [r3, #0]
 80029a6:	e0c5      	b.n	8002b34 <UART_SetConfig+0x250>
 80029a8:	231b      	movs	r3, #27
 80029aa:	2218      	movs	r2, #24
 80029ac:	4694      	mov	ip, r2
 80029ae:	44bc      	add	ip, r7
 80029b0:	4463      	add	r3, ip
 80029b2:	2202      	movs	r2, #2
 80029b4:	701a      	strb	r2, [r3, #0]
 80029b6:	e0bd      	b.n	8002b34 <UART_SetConfig+0x250>
 80029b8:	231b      	movs	r3, #27
 80029ba:	2218      	movs	r2, #24
 80029bc:	4694      	mov	ip, r2
 80029be:	44bc      	add	ip, r7
 80029c0:	4463      	add	r3, ip
 80029c2:	2204      	movs	r2, #4
 80029c4:	701a      	strb	r2, [r3, #0]
 80029c6:	e0b5      	b.n	8002b34 <UART_SetConfig+0x250>
 80029c8:	231b      	movs	r3, #27
 80029ca:	2218      	movs	r2, #24
 80029cc:	4694      	mov	ip, r2
 80029ce:	44bc      	add	ip, r7
 80029d0:	4463      	add	r3, ip
 80029d2:	2208      	movs	r2, #8
 80029d4:	701a      	strb	r2, [r3, #0]
 80029d6:	e0ad      	b.n	8002b34 <UART_SetConfig+0x250>
 80029d8:	231b      	movs	r3, #27
 80029da:	2218      	movs	r2, #24
 80029dc:	4694      	mov	ip, r2
 80029de:	44bc      	add	ip, r7
 80029e0:	4463      	add	r3, ip
 80029e2:	2210      	movs	r2, #16
 80029e4:	701a      	strb	r2, [r3, #0]
 80029e6:	e0a5      	b.n	8002b34 <UART_SetConfig+0x250>
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a81      	ldr	r2, [pc, #516]	; (8002bf4 <UART_SetConfig+0x310>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d136      	bne.n	8002a60 <UART_SetConfig+0x17c>
 80029f2:	4b7f      	ldr	r3, [pc, #508]	; (8002bf0 <UART_SetConfig+0x30c>)
 80029f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f6:	220c      	movs	r2, #12
 80029f8:	4013      	ands	r3, r2
 80029fa:	2b0c      	cmp	r3, #12
 80029fc:	d020      	beq.n	8002a40 <UART_SetConfig+0x15c>
 80029fe:	d827      	bhi.n	8002a50 <UART_SetConfig+0x16c>
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d00d      	beq.n	8002a20 <UART_SetConfig+0x13c>
 8002a04:	d824      	bhi.n	8002a50 <UART_SetConfig+0x16c>
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d002      	beq.n	8002a10 <UART_SetConfig+0x12c>
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	d010      	beq.n	8002a30 <UART_SetConfig+0x14c>
 8002a0e:	e01f      	b.n	8002a50 <UART_SetConfig+0x16c>
 8002a10:	231b      	movs	r3, #27
 8002a12:	2218      	movs	r2, #24
 8002a14:	4694      	mov	ip, r2
 8002a16:	44bc      	add	ip, r7
 8002a18:	4463      	add	r3, ip
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	701a      	strb	r2, [r3, #0]
 8002a1e:	e089      	b.n	8002b34 <UART_SetConfig+0x250>
 8002a20:	231b      	movs	r3, #27
 8002a22:	2218      	movs	r2, #24
 8002a24:	4694      	mov	ip, r2
 8002a26:	44bc      	add	ip, r7
 8002a28:	4463      	add	r3, ip
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	701a      	strb	r2, [r3, #0]
 8002a2e:	e081      	b.n	8002b34 <UART_SetConfig+0x250>
 8002a30:	231b      	movs	r3, #27
 8002a32:	2218      	movs	r2, #24
 8002a34:	4694      	mov	ip, r2
 8002a36:	44bc      	add	ip, r7
 8002a38:	4463      	add	r3, ip
 8002a3a:	2204      	movs	r2, #4
 8002a3c:	701a      	strb	r2, [r3, #0]
 8002a3e:	e079      	b.n	8002b34 <UART_SetConfig+0x250>
 8002a40:	231b      	movs	r3, #27
 8002a42:	2218      	movs	r2, #24
 8002a44:	4694      	mov	ip, r2
 8002a46:	44bc      	add	ip, r7
 8002a48:	4463      	add	r3, ip
 8002a4a:	2208      	movs	r2, #8
 8002a4c:	701a      	strb	r2, [r3, #0]
 8002a4e:	e071      	b.n	8002b34 <UART_SetConfig+0x250>
 8002a50:	231b      	movs	r3, #27
 8002a52:	2218      	movs	r2, #24
 8002a54:	4694      	mov	ip, r2
 8002a56:	44bc      	add	ip, r7
 8002a58:	4463      	add	r3, ip
 8002a5a:	2210      	movs	r2, #16
 8002a5c:	701a      	strb	r2, [r3, #0]
 8002a5e:	e069      	b.n	8002b34 <UART_SetConfig+0x250>
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a64      	ldr	r2, [pc, #400]	; (8002bf8 <UART_SetConfig+0x314>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d107      	bne.n	8002a7a <UART_SetConfig+0x196>
 8002a6a:	231b      	movs	r3, #27
 8002a6c:	2218      	movs	r2, #24
 8002a6e:	4694      	mov	ip, r2
 8002a70:	44bc      	add	ip, r7
 8002a72:	4463      	add	r3, ip
 8002a74:	2200      	movs	r2, #0
 8002a76:	701a      	strb	r2, [r3, #0]
 8002a78:	e05c      	b.n	8002b34 <UART_SetConfig+0x250>
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a5f      	ldr	r2, [pc, #380]	; (8002bfc <UART_SetConfig+0x318>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d107      	bne.n	8002a94 <UART_SetConfig+0x1b0>
 8002a84:	231b      	movs	r3, #27
 8002a86:	2218      	movs	r2, #24
 8002a88:	4694      	mov	ip, r2
 8002a8a:	44bc      	add	ip, r7
 8002a8c:	4463      	add	r3, ip
 8002a8e:	2200      	movs	r2, #0
 8002a90:	701a      	strb	r2, [r3, #0]
 8002a92:	e04f      	b.n	8002b34 <UART_SetConfig+0x250>
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a52      	ldr	r2, [pc, #328]	; (8002be4 <UART_SetConfig+0x300>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d143      	bne.n	8002b26 <UART_SetConfig+0x242>
 8002a9e:	4b54      	ldr	r3, [pc, #336]	; (8002bf0 <UART_SetConfig+0x30c>)
 8002aa0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002aa2:	23c0      	movs	r3, #192	; 0xc0
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	22c0      	movs	r2, #192	; 0xc0
 8002aaa:	0112      	lsls	r2, r2, #4
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d02a      	beq.n	8002b06 <UART_SetConfig+0x222>
 8002ab0:	22c0      	movs	r2, #192	; 0xc0
 8002ab2:	0112      	lsls	r2, r2, #4
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d82e      	bhi.n	8002b16 <UART_SetConfig+0x232>
 8002ab8:	2280      	movs	r2, #128	; 0x80
 8002aba:	0112      	lsls	r2, r2, #4
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d012      	beq.n	8002ae6 <UART_SetConfig+0x202>
 8002ac0:	2280      	movs	r2, #128	; 0x80
 8002ac2:	0112      	lsls	r2, r2, #4
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d826      	bhi.n	8002b16 <UART_SetConfig+0x232>
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d004      	beq.n	8002ad6 <UART_SetConfig+0x1f2>
 8002acc:	2280      	movs	r2, #128	; 0x80
 8002ace:	00d2      	lsls	r2, r2, #3
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d010      	beq.n	8002af6 <UART_SetConfig+0x212>
 8002ad4:	e01f      	b.n	8002b16 <UART_SetConfig+0x232>
 8002ad6:	231b      	movs	r3, #27
 8002ad8:	2218      	movs	r2, #24
 8002ada:	4694      	mov	ip, r2
 8002adc:	44bc      	add	ip, r7
 8002ade:	4463      	add	r3, ip
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	701a      	strb	r2, [r3, #0]
 8002ae4:	e026      	b.n	8002b34 <UART_SetConfig+0x250>
 8002ae6:	231b      	movs	r3, #27
 8002ae8:	2218      	movs	r2, #24
 8002aea:	4694      	mov	ip, r2
 8002aec:	44bc      	add	ip, r7
 8002aee:	4463      	add	r3, ip
 8002af0:	2202      	movs	r2, #2
 8002af2:	701a      	strb	r2, [r3, #0]
 8002af4:	e01e      	b.n	8002b34 <UART_SetConfig+0x250>
 8002af6:	231b      	movs	r3, #27
 8002af8:	2218      	movs	r2, #24
 8002afa:	4694      	mov	ip, r2
 8002afc:	44bc      	add	ip, r7
 8002afe:	4463      	add	r3, ip
 8002b00:	2204      	movs	r2, #4
 8002b02:	701a      	strb	r2, [r3, #0]
 8002b04:	e016      	b.n	8002b34 <UART_SetConfig+0x250>
 8002b06:	231b      	movs	r3, #27
 8002b08:	2218      	movs	r2, #24
 8002b0a:	4694      	mov	ip, r2
 8002b0c:	44bc      	add	ip, r7
 8002b0e:	4463      	add	r3, ip
 8002b10:	2208      	movs	r2, #8
 8002b12:	701a      	strb	r2, [r3, #0]
 8002b14:	e00e      	b.n	8002b34 <UART_SetConfig+0x250>
 8002b16:	231b      	movs	r3, #27
 8002b18:	2218      	movs	r2, #24
 8002b1a:	4694      	mov	ip, r2
 8002b1c:	44bc      	add	ip, r7
 8002b1e:	4463      	add	r3, ip
 8002b20:	2210      	movs	r2, #16
 8002b22:	701a      	strb	r2, [r3, #0]
 8002b24:	e006      	b.n	8002b34 <UART_SetConfig+0x250>
 8002b26:	231b      	movs	r3, #27
 8002b28:	2218      	movs	r2, #24
 8002b2a:	4694      	mov	ip, r2
 8002b2c:	44bc      	add	ip, r7
 8002b2e:	4463      	add	r3, ip
 8002b30:	2210      	movs	r2, #16
 8002b32:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a2a      	ldr	r2, [pc, #168]	; (8002be4 <UART_SetConfig+0x300>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d000      	beq.n	8002b40 <UART_SetConfig+0x25c>
 8002b3e:	e09e      	b.n	8002c7e <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b40:	231b      	movs	r3, #27
 8002b42:	2218      	movs	r2, #24
 8002b44:	4694      	mov	ip, r2
 8002b46:	44bc      	add	ip, r7
 8002b48:	4463      	add	r3, ip
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	d01d      	beq.n	8002b8c <UART_SetConfig+0x2a8>
 8002b50:	dc20      	bgt.n	8002b94 <UART_SetConfig+0x2b0>
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d015      	beq.n	8002b82 <UART_SetConfig+0x29e>
 8002b56:	dc1d      	bgt.n	8002b94 <UART_SetConfig+0x2b0>
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d002      	beq.n	8002b62 <UART_SetConfig+0x27e>
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d005      	beq.n	8002b6c <UART_SetConfig+0x288>
 8002b60:	e018      	b.n	8002b94 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b62:	f7ff f835 	bl	8001bd0 <HAL_RCC_GetPCLK1Freq>
 8002b66:	0003      	movs	r3, r0
 8002b68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b6a:	e01d      	b.n	8002ba8 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b6c:	4b20      	ldr	r3, [pc, #128]	; (8002bf0 <UART_SetConfig+0x30c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2210      	movs	r2, #16
 8002b72:	4013      	ands	r3, r2
 8002b74:	d002      	beq.n	8002b7c <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002b76:	4b22      	ldr	r3, [pc, #136]	; (8002c00 <UART_SetConfig+0x31c>)
 8002b78:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002b7a:	e015      	b.n	8002ba8 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 8002b7c:	4b21      	ldr	r3, [pc, #132]	; (8002c04 <UART_SetConfig+0x320>)
 8002b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b80:	e012      	b.n	8002ba8 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b82:	f7fe ff75 	bl	8001a70 <HAL_RCC_GetSysClockFreq>
 8002b86:	0003      	movs	r3, r0
 8002b88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b8a:	e00d      	b.n	8002ba8 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b8c:	2380      	movs	r3, #128	; 0x80
 8002b8e:	021b      	lsls	r3, r3, #8
 8002b90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b92:	e009      	b.n	8002ba8 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002b98:	231a      	movs	r3, #26
 8002b9a:	2218      	movs	r2, #24
 8002b9c:	4694      	mov	ip, r2
 8002b9e:	44bc      	add	ip, r7
 8002ba0:	4463      	add	r3, ip
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	701a      	strb	r2, [r3, #0]
        break;
 8002ba6:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d100      	bne.n	8002bb0 <UART_SetConfig+0x2cc>
 8002bae:	e13c      	b.n	8002e2a <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	0013      	movs	r3, r2
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	189b      	adds	r3, r3, r2
 8002bba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d305      	bcc.n	8002bcc <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002bc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d91d      	bls.n	8002c08 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 8002bcc:	231a      	movs	r3, #26
 8002bce:	2218      	movs	r2, #24
 8002bd0:	4694      	mov	ip, r2
 8002bd2:	44bc      	add	ip, r7
 8002bd4:	4463      	add	r3, ip
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	701a      	strb	r2, [r3, #0]
 8002bda:	e126      	b.n	8002e2a <UART_SetConfig+0x546>
 8002bdc:	efff69f3 	.word	0xefff69f3
 8002be0:	ffffcfff 	.word	0xffffcfff
 8002be4:	40004800 	.word	0x40004800
 8002be8:	fffff4ff 	.word	0xfffff4ff
 8002bec:	40013800 	.word	0x40013800
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	40004400 	.word	0x40004400
 8002bf8:	40004c00 	.word	0x40004c00
 8002bfc:	40005000 	.word	0x40005000
 8002c00:	003d0900 	.word	0x003d0900
 8002c04:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0a:	613b      	str	r3, [r7, #16]
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]
 8002c10:	6939      	ldr	r1, [r7, #16]
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	000b      	movs	r3, r1
 8002c16:	0e1b      	lsrs	r3, r3, #24
 8002c18:	0010      	movs	r0, r2
 8002c1a:	0205      	lsls	r5, r0, #8
 8002c1c:	431d      	orrs	r5, r3
 8002c1e:	000b      	movs	r3, r1
 8002c20:	021c      	lsls	r4, r3, #8
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	085b      	lsrs	r3, r3, #1
 8002c28:	60bb      	str	r3, [r7, #8]
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	68b8      	ldr	r0, [r7, #8]
 8002c30:	68f9      	ldr	r1, [r7, #12]
 8002c32:	1900      	adds	r0, r0, r4
 8002c34:	4169      	adcs	r1, r5
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	603b      	str	r3, [r7, #0]
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	607b      	str	r3, [r7, #4]
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f7fd faec 	bl	8000220 <__aeabi_uldivmod>
 8002c48:	0002      	movs	r2, r0
 8002c4a:	000b      	movs	r3, r1
 8002c4c:	0013      	movs	r3, r2
 8002c4e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c52:	23c0      	movs	r3, #192	; 0xc0
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d309      	bcc.n	8002c6e <UART_SetConfig+0x38a>
 8002c5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c5c:	2380      	movs	r3, #128	; 0x80
 8002c5e:	035b      	lsls	r3, r3, #13
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d204      	bcs.n	8002c6e <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c6a:	60da      	str	r2, [r3, #12]
 8002c6c:	e0dd      	b.n	8002e2a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8002c6e:	231a      	movs	r3, #26
 8002c70:	2218      	movs	r2, #24
 8002c72:	4694      	mov	ip, r2
 8002c74:	44bc      	add	ip, r7
 8002c76:	4463      	add	r3, ip
 8002c78:	2201      	movs	r2, #1
 8002c7a:	701a      	strb	r2, [r3, #0]
 8002c7c:	e0d5      	b.n	8002e2a <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	69da      	ldr	r2, [r3, #28]
 8002c82:	2380      	movs	r3, #128	; 0x80
 8002c84:	021b      	lsls	r3, r3, #8
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d000      	beq.n	8002c8c <UART_SetConfig+0x3a8>
 8002c8a:	e074      	b.n	8002d76 <UART_SetConfig+0x492>
  {
    switch (clocksource)
 8002c8c:	231b      	movs	r3, #27
 8002c8e:	2218      	movs	r2, #24
 8002c90:	4694      	mov	ip, r2
 8002c92:	44bc      	add	ip, r7
 8002c94:	4463      	add	r3, ip
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	2b08      	cmp	r3, #8
 8002c9a:	d822      	bhi.n	8002ce2 <UART_SetConfig+0x3fe>
 8002c9c:	009a      	lsls	r2, r3, #2
 8002c9e:	4b6b      	ldr	r3, [pc, #428]	; (8002e4c <UART_SetConfig+0x568>)
 8002ca0:	18d3      	adds	r3, r2, r3
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ca6:	f7fe ff93 	bl	8001bd0 <HAL_RCC_GetPCLK1Freq>
 8002caa:	0003      	movs	r3, r0
 8002cac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cae:	e022      	b.n	8002cf6 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cb0:	f7fe ffa4 	bl	8001bfc <HAL_RCC_GetPCLK2Freq>
 8002cb4:	0003      	movs	r3, r0
 8002cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cb8:	e01d      	b.n	8002cf6 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002cba:	4b65      	ldr	r3, [pc, #404]	; (8002e50 <UART_SetConfig+0x56c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2210      	movs	r2, #16
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	d002      	beq.n	8002cca <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002cc4:	4b63      	ldr	r3, [pc, #396]	; (8002e54 <UART_SetConfig+0x570>)
 8002cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002cc8:	e015      	b.n	8002cf6 <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 8002cca:	4b63      	ldr	r3, [pc, #396]	; (8002e58 <UART_SetConfig+0x574>)
 8002ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cce:	e012      	b.n	8002cf6 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cd0:	f7fe fece 	bl	8001a70 <HAL_RCC_GetSysClockFreq>
 8002cd4:	0003      	movs	r3, r0
 8002cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cd8:	e00d      	b.n	8002cf6 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cda:	2380      	movs	r3, #128	; 0x80
 8002cdc:	021b      	lsls	r3, r3, #8
 8002cde:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ce0:	e009      	b.n	8002cf6 <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002ce6:	231a      	movs	r3, #26
 8002ce8:	2218      	movs	r2, #24
 8002cea:	4694      	mov	ip, r2
 8002cec:	44bc      	add	ip, r7
 8002cee:	4463      	add	r3, ip
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	701a      	strb	r2, [r3, #0]
        break;
 8002cf4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d100      	bne.n	8002cfe <UART_SetConfig+0x41a>
 8002cfc:	e095      	b.n	8002e2a <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d00:	005a      	lsls	r2, r3, #1
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	085b      	lsrs	r3, r3, #1
 8002d08:	18d2      	adds	r2, r2, r3
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	0019      	movs	r1, r3
 8002d10:	0010      	movs	r0, r2
 8002d12:	f7fd f9f9 	bl	8000108 <__udivsi3>
 8002d16:	0003      	movs	r3, r0
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1e:	2b0f      	cmp	r3, #15
 8002d20:	d921      	bls.n	8002d66 <UART_SetConfig+0x482>
 8002d22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d24:	2380      	movs	r3, #128	; 0x80
 8002d26:	025b      	lsls	r3, r3, #9
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d21c      	bcs.n	8002d66 <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	200e      	movs	r0, #14
 8002d32:	2418      	movs	r4, #24
 8002d34:	193b      	adds	r3, r7, r4
 8002d36:	181b      	adds	r3, r3, r0
 8002d38:	210f      	movs	r1, #15
 8002d3a:	438a      	bics	r2, r1
 8002d3c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d40:	085b      	lsrs	r3, r3, #1
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	2207      	movs	r2, #7
 8002d46:	4013      	ands	r3, r2
 8002d48:	b299      	uxth	r1, r3
 8002d4a:	193b      	adds	r3, r7, r4
 8002d4c:	181b      	adds	r3, r3, r0
 8002d4e:	193a      	adds	r2, r7, r4
 8002d50:	1812      	adds	r2, r2, r0
 8002d52:	8812      	ldrh	r2, [r2, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	193a      	adds	r2, r7, r4
 8002d5e:	1812      	adds	r2, r2, r0
 8002d60:	8812      	ldrh	r2, [r2, #0]
 8002d62:	60da      	str	r2, [r3, #12]
 8002d64:	e061      	b.n	8002e2a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002d66:	231a      	movs	r3, #26
 8002d68:	2218      	movs	r2, #24
 8002d6a:	4694      	mov	ip, r2
 8002d6c:	44bc      	add	ip, r7
 8002d6e:	4463      	add	r3, ip
 8002d70:	2201      	movs	r2, #1
 8002d72:	701a      	strb	r2, [r3, #0]
 8002d74:	e059      	b.n	8002e2a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d76:	231b      	movs	r3, #27
 8002d78:	2218      	movs	r2, #24
 8002d7a:	4694      	mov	ip, r2
 8002d7c:	44bc      	add	ip, r7
 8002d7e:	4463      	add	r3, ip
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b08      	cmp	r3, #8
 8002d84:	d822      	bhi.n	8002dcc <UART_SetConfig+0x4e8>
 8002d86:	009a      	lsls	r2, r3, #2
 8002d88:	4b34      	ldr	r3, [pc, #208]	; (8002e5c <UART_SetConfig+0x578>)
 8002d8a:	18d3      	adds	r3, r2, r3
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d90:	f7fe ff1e 	bl	8001bd0 <HAL_RCC_GetPCLK1Freq>
 8002d94:	0003      	movs	r3, r0
 8002d96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d98:	e022      	b.n	8002de0 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d9a:	f7fe ff2f 	bl	8001bfc <HAL_RCC_GetPCLK2Freq>
 8002d9e:	0003      	movs	r3, r0
 8002da0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002da2:	e01d      	b.n	8002de0 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002da4:	4b2a      	ldr	r3, [pc, #168]	; (8002e50 <UART_SetConfig+0x56c>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2210      	movs	r2, #16
 8002daa:	4013      	ands	r3, r2
 8002dac:	d002      	beq.n	8002db4 <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002dae:	4b29      	ldr	r3, [pc, #164]	; (8002e54 <UART_SetConfig+0x570>)
 8002db0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002db2:	e015      	b.n	8002de0 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 8002db4:	4b28      	ldr	r3, [pc, #160]	; (8002e58 <UART_SetConfig+0x574>)
 8002db6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002db8:	e012      	b.n	8002de0 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dba:	f7fe fe59 	bl	8001a70 <HAL_RCC_GetSysClockFreq>
 8002dbe:	0003      	movs	r3, r0
 8002dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002dc2:	e00d      	b.n	8002de0 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dc4:	2380      	movs	r3, #128	; 0x80
 8002dc6:	021b      	lsls	r3, r3, #8
 8002dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002dca:	e009      	b.n	8002de0 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002dd0:	231a      	movs	r3, #26
 8002dd2:	2218      	movs	r2, #24
 8002dd4:	4694      	mov	ip, r2
 8002dd6:	44bc      	add	ip, r7
 8002dd8:	4463      	add	r3, ip
 8002dda:	2201      	movs	r2, #1
 8002ddc:	701a      	strb	r2, [r3, #0]
        break;
 8002dde:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d021      	beq.n	8002e2a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	085a      	lsrs	r2, r3, #1
 8002dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dee:	18d2      	adds	r2, r2, r3
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	0019      	movs	r1, r3
 8002df6:	0010      	movs	r0, r2
 8002df8:	f7fd f986 	bl	8000108 <__udivsi3>
 8002dfc:	0003      	movs	r3, r0
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e04:	2b0f      	cmp	r3, #15
 8002e06:	d909      	bls.n	8002e1c <UART_SetConfig+0x538>
 8002e08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e0a:	2380      	movs	r3, #128	; 0x80
 8002e0c:	025b      	lsls	r3, r3, #9
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d204      	bcs.n	8002e1c <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e18:	60da      	str	r2, [r3, #12]
 8002e1a:	e006      	b.n	8002e2a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002e1c:	231a      	movs	r3, #26
 8002e1e:	2218      	movs	r2, #24
 8002e20:	4694      	mov	ip, r2
 8002e22:	44bc      	add	ip, r7
 8002e24:	4463      	add	r3, ip
 8002e26:	2201      	movs	r2, #1
 8002e28:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	2200      	movs	r2, #0
 8002e34:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002e36:	231a      	movs	r3, #26
 8002e38:	2218      	movs	r2, #24
 8002e3a:	4694      	mov	ip, r2
 8002e3c:	44bc      	add	ip, r7
 8002e3e:	4463      	add	r3, ip
 8002e40:	781b      	ldrb	r3, [r3, #0]
}
 8002e42:	0018      	movs	r0, r3
 8002e44:	46bd      	mov	sp, r7
 8002e46:	b00e      	add	sp, #56	; 0x38
 8002e48:	bdb0      	pop	{r4, r5, r7, pc}
 8002e4a:	46c0      	nop			; (mov r8, r8)
 8002e4c:	08003274 	.word	0x08003274
 8002e50:	40021000 	.word	0x40021000
 8002e54:	003d0900 	.word	0x003d0900
 8002e58:	00f42400 	.word	0x00f42400
 8002e5c:	08003298 	.word	0x08003298

08002e60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	4013      	ands	r3, r2
 8002e70:	d00b      	beq.n	8002e8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	4a4a      	ldr	r2, [pc, #296]	; (8002fa4 <UART_AdvFeatureConfig+0x144>)
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	0019      	movs	r1, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8e:	2202      	movs	r2, #2
 8002e90:	4013      	ands	r3, r2
 8002e92:	d00b      	beq.n	8002eac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	4a43      	ldr	r2, [pc, #268]	; (8002fa8 <UART_AdvFeatureConfig+0x148>)
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	0019      	movs	r1, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	2204      	movs	r2, #4
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	d00b      	beq.n	8002ece <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	4a3b      	ldr	r2, [pc, #236]	; (8002fac <UART_AdvFeatureConfig+0x14c>)
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	0019      	movs	r1, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed2:	2208      	movs	r2, #8
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	d00b      	beq.n	8002ef0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	4a34      	ldr	r2, [pc, #208]	; (8002fb0 <UART_AdvFeatureConfig+0x150>)
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	0019      	movs	r1, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef4:	2210      	movs	r2, #16
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	d00b      	beq.n	8002f12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	4a2c      	ldr	r2, [pc, #176]	; (8002fb4 <UART_AdvFeatureConfig+0x154>)
 8002f02:	4013      	ands	r3, r2
 8002f04:	0019      	movs	r1, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	2220      	movs	r2, #32
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d00b      	beq.n	8002f34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	4a25      	ldr	r2, [pc, #148]	; (8002fb8 <UART_AdvFeatureConfig+0x158>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	0019      	movs	r1, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	2240      	movs	r2, #64	; 0x40
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	d01d      	beq.n	8002f7a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	4a1d      	ldr	r2, [pc, #116]	; (8002fbc <UART_AdvFeatureConfig+0x15c>)
 8002f46:	4013      	ands	r3, r2
 8002f48:	0019      	movs	r1, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f5a:	2380      	movs	r3, #128	; 0x80
 8002f5c:	035b      	lsls	r3, r3, #13
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d10b      	bne.n	8002f7a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	4a15      	ldr	r2, [pc, #84]	; (8002fc0 <UART_AdvFeatureConfig+0x160>)
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	0019      	movs	r1, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	2280      	movs	r2, #128	; 0x80
 8002f80:	4013      	ands	r3, r2
 8002f82:	d00b      	beq.n	8002f9c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	4a0e      	ldr	r2, [pc, #56]	; (8002fc4 <UART_AdvFeatureConfig+0x164>)
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	0019      	movs	r1, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	605a      	str	r2, [r3, #4]
  }
}
 8002f9c:	46c0      	nop			; (mov r8, r8)
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b002      	add	sp, #8
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	fffdffff 	.word	0xfffdffff
 8002fa8:	fffeffff 	.word	0xfffeffff
 8002fac:	fffbffff 	.word	0xfffbffff
 8002fb0:	ffff7fff 	.word	0xffff7fff
 8002fb4:	ffffefff 	.word	0xffffefff
 8002fb8:	ffffdfff 	.word	0xffffdfff
 8002fbc:	ffefffff 	.word	0xffefffff
 8002fc0:	ff9fffff 	.word	0xff9fffff
 8002fc4:	fff7ffff 	.word	0xfff7ffff

08002fc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af02      	add	r7, sp, #8
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2280      	movs	r2, #128	; 0x80
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002fd8:	f7fd fdb0 	bl	8000b3c <HAL_GetTick>
 8002fdc:	0003      	movs	r3, r0
 8002fde:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2208      	movs	r2, #8
 8002fe8:	4013      	ands	r3, r2
 8002fea:	2b08      	cmp	r3, #8
 8002fec:	d10c      	bne.n	8003008 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2280      	movs	r2, #128	; 0x80
 8002ff2:	0391      	lsls	r1, r2, #14
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	4a17      	ldr	r2, [pc, #92]	; (8003054 <UART_CheckIdleState+0x8c>)
 8002ff8:	9200      	str	r2, [sp, #0]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f000 f82c 	bl	8003058 <UART_WaitOnFlagUntilTimeout>
 8003000:	1e03      	subs	r3, r0, #0
 8003002:	d001      	beq.n	8003008 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e021      	b.n	800304c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2204      	movs	r2, #4
 8003010:	4013      	ands	r3, r2
 8003012:	2b04      	cmp	r3, #4
 8003014:	d10c      	bne.n	8003030 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2280      	movs	r2, #128	; 0x80
 800301a:	03d1      	lsls	r1, r2, #15
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	4a0d      	ldr	r2, [pc, #52]	; (8003054 <UART_CheckIdleState+0x8c>)
 8003020:	9200      	str	r2, [sp, #0]
 8003022:	2200      	movs	r2, #0
 8003024:	f000 f818 	bl	8003058 <UART_WaitOnFlagUntilTimeout>
 8003028:	1e03      	subs	r3, r0, #0
 800302a:	d001      	beq.n	8003030 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e00d      	b.n	800304c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2220      	movs	r2, #32
 8003034:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2220      	movs	r2, #32
 800303a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2274      	movs	r2, #116	; 0x74
 8003046:	2100      	movs	r1, #0
 8003048:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	0018      	movs	r0, r3
 800304e:	46bd      	mov	sp, r7
 8003050:	b004      	add	sp, #16
 8003052:	bd80      	pop	{r7, pc}
 8003054:	01ffffff 	.word	0x01ffffff

08003058 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b094      	sub	sp, #80	; 0x50
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	603b      	str	r3, [r7, #0]
 8003064:	1dfb      	adds	r3, r7, #7
 8003066:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003068:	e0a3      	b.n	80031b2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800306a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800306c:	3301      	adds	r3, #1
 800306e:	d100      	bne.n	8003072 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003070:	e09f      	b.n	80031b2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003072:	f7fd fd63 	bl	8000b3c <HAL_GetTick>
 8003076:	0002      	movs	r2, r0
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800307e:	429a      	cmp	r2, r3
 8003080:	d302      	bcc.n	8003088 <UART_WaitOnFlagUntilTimeout+0x30>
 8003082:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003084:	2b00      	cmp	r3, #0
 8003086:	d13d      	bne.n	8003104 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003088:	f3ef 8310 	mrs	r3, PRIMASK
 800308c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800308e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003090:	647b      	str	r3, [r7, #68]	; 0x44
 8003092:	2301      	movs	r3, #1
 8003094:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003098:	f383 8810 	msr	PRIMASK, r3
}
 800309c:	46c0      	nop			; (mov r8, r8)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	494c      	ldr	r1, [pc, #304]	; (80031dc <UART_WaitOnFlagUntilTimeout+0x184>)
 80030aa:	400a      	ands	r2, r1
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030b0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b4:	f383 8810 	msr	PRIMASK, r3
}
 80030b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030ba:	f3ef 8310 	mrs	r3, PRIMASK
 80030be:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80030c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030c2:	643b      	str	r3, [r7, #64]	; 0x40
 80030c4:	2301      	movs	r3, #1
 80030c6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ca:	f383 8810 	msr	PRIMASK, r3
}
 80030ce:	46c0      	nop			; (mov r8, r8)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2101      	movs	r1, #1
 80030dc:	438a      	bics	r2, r1
 80030de:	609a      	str	r2, [r3, #8]
 80030e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030e6:	f383 8810 	msr	PRIMASK, r3
}
 80030ea:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2220      	movs	r2, #32
 80030f0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2220      	movs	r2, #32
 80030f6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2274      	movs	r2, #116	; 0x74
 80030fc:	2100      	movs	r1, #0
 80030fe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e067      	b.n	80031d4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2204      	movs	r2, #4
 800310c:	4013      	ands	r3, r2
 800310e:	d050      	beq.n	80031b2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	69da      	ldr	r2, [r3, #28]
 8003116:	2380      	movs	r3, #128	; 0x80
 8003118:	011b      	lsls	r3, r3, #4
 800311a:	401a      	ands	r2, r3
 800311c:	2380      	movs	r3, #128	; 0x80
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	429a      	cmp	r2, r3
 8003122:	d146      	bne.n	80031b2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2280      	movs	r2, #128	; 0x80
 800312a:	0112      	lsls	r2, r2, #4
 800312c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800312e:	f3ef 8310 	mrs	r3, PRIMASK
 8003132:	613b      	str	r3, [r7, #16]
  return(result);
 8003134:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003136:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003138:	2301      	movs	r3, #1
 800313a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	f383 8810 	msr	PRIMASK, r3
}
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4923      	ldr	r1, [pc, #140]	; (80031dc <UART_WaitOnFlagUntilTimeout+0x184>)
 8003150:	400a      	ands	r2, r1
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003156:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	f383 8810 	msr	PRIMASK, r3
}
 800315e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003160:	f3ef 8310 	mrs	r3, PRIMASK
 8003164:	61fb      	str	r3, [r7, #28]
  return(result);
 8003166:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003168:	64bb      	str	r3, [r7, #72]	; 0x48
 800316a:	2301      	movs	r3, #1
 800316c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800316e:	6a3b      	ldr	r3, [r7, #32]
 8003170:	f383 8810 	msr	PRIMASK, r3
}
 8003174:	46c0      	nop			; (mov r8, r8)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2101      	movs	r1, #1
 8003182:	438a      	bics	r2, r1
 8003184:	609a      	str	r2, [r3, #8]
 8003186:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003188:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	f383 8810 	msr	PRIMASK, r3
}
 8003190:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2220      	movs	r2, #32
 8003196:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2220      	movs	r2, #32
 800319c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2280      	movs	r2, #128	; 0x80
 80031a2:	2120      	movs	r1, #32
 80031a4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2274      	movs	r2, #116	; 0x74
 80031aa:	2100      	movs	r1, #0
 80031ac:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e010      	b.n	80031d4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	4013      	ands	r3, r2
 80031bc:	68ba      	ldr	r2, [r7, #8]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	425a      	negs	r2, r3
 80031c2:	4153      	adcs	r3, r2
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	001a      	movs	r2, r3
 80031c8:	1dfb      	adds	r3, r7, #7
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d100      	bne.n	80031d2 <UART_WaitOnFlagUntilTimeout+0x17a>
 80031d0:	e74b      	b.n	800306a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	0018      	movs	r0, r3
 80031d6:	46bd      	mov	sp, r7
 80031d8:	b014      	add	sp, #80	; 0x50
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	fffffe5f 	.word	0xfffffe5f

080031e0 <__libc_init_array>:
 80031e0:	b570      	push	{r4, r5, r6, lr}
 80031e2:	2600      	movs	r6, #0
 80031e4:	4d0c      	ldr	r5, [pc, #48]	; (8003218 <__libc_init_array+0x38>)
 80031e6:	4c0d      	ldr	r4, [pc, #52]	; (800321c <__libc_init_array+0x3c>)
 80031e8:	1b64      	subs	r4, r4, r5
 80031ea:	10a4      	asrs	r4, r4, #2
 80031ec:	42a6      	cmp	r6, r4
 80031ee:	d109      	bne.n	8003204 <__libc_init_array+0x24>
 80031f0:	2600      	movs	r6, #0
 80031f2:	f000 f821 	bl	8003238 <_init>
 80031f6:	4d0a      	ldr	r5, [pc, #40]	; (8003220 <__libc_init_array+0x40>)
 80031f8:	4c0a      	ldr	r4, [pc, #40]	; (8003224 <__libc_init_array+0x44>)
 80031fa:	1b64      	subs	r4, r4, r5
 80031fc:	10a4      	asrs	r4, r4, #2
 80031fe:	42a6      	cmp	r6, r4
 8003200:	d105      	bne.n	800320e <__libc_init_array+0x2e>
 8003202:	bd70      	pop	{r4, r5, r6, pc}
 8003204:	00b3      	lsls	r3, r6, #2
 8003206:	58eb      	ldr	r3, [r5, r3]
 8003208:	4798      	blx	r3
 800320a:	3601      	adds	r6, #1
 800320c:	e7ee      	b.n	80031ec <__libc_init_array+0xc>
 800320e:	00b3      	lsls	r3, r6, #2
 8003210:	58eb      	ldr	r3, [r5, r3]
 8003212:	4798      	blx	r3
 8003214:	3601      	adds	r6, #1
 8003216:	e7f2      	b.n	80031fe <__libc_init_array+0x1e>
 8003218:	080032c4 	.word	0x080032c4
 800321c:	080032c4 	.word	0x080032c4
 8003220:	080032c4 	.word	0x080032c4
 8003224:	080032c8 	.word	0x080032c8

08003228 <memset>:
 8003228:	0003      	movs	r3, r0
 800322a:	1882      	adds	r2, r0, r2
 800322c:	4293      	cmp	r3, r2
 800322e:	d100      	bne.n	8003232 <memset+0xa>
 8003230:	4770      	bx	lr
 8003232:	7019      	strb	r1, [r3, #0]
 8003234:	3301      	adds	r3, #1
 8003236:	e7f9      	b.n	800322c <memset+0x4>

08003238 <_init>:
 8003238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800323a:	46c0      	nop			; (mov r8, r8)
 800323c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800323e:	bc08      	pop	{r3}
 8003240:	469e      	mov	lr, r3
 8003242:	4770      	bx	lr

08003244 <_fini>:
 8003244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003246:	46c0      	nop			; (mov r8, r8)
 8003248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800324a:	bc08      	pop	{r3}
 800324c:	469e      	mov	lr, r3
 800324e:	4770      	bx	lr
