
bdm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004790  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08004850  08004850  00014850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049f0  080049f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080049f0  080049f0  000149f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049f8  080049f8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049f8  080049f8  000149f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049fc  080049fc  000149fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004a00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000070  08004a70  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08004a70  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010021  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ac2  00000000  00000000  000300b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  00031b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b58  00000000  00000000  00032770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014887  00000000  00000000  000332c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b8ec  00000000  00000000  00047b4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008021f  00000000  00000000  0005343b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d365a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f68  00000000  00000000  000d36b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004838 	.word	0x08004838

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004838 	.word	0x08004838

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	1c08      	adds	r0, r1, #0
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f82e 	bl	80002d4 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	0415      	lsls	r5, r2, #16
 8000288:	0c2d      	lsrs	r5, r5, #16
 800028a:	000f      	movs	r7, r1
 800028c:	0001      	movs	r1, r0
 800028e:	002e      	movs	r6, r5
 8000290:	46c6      	mov	lr, r8
 8000292:	4684      	mov	ip, r0
 8000294:	0400      	lsls	r0, r0, #16
 8000296:	0c14      	lsrs	r4, r2, #16
 8000298:	0c00      	lsrs	r0, r0, #16
 800029a:	0c09      	lsrs	r1, r1, #16
 800029c:	4346      	muls	r6, r0
 800029e:	434d      	muls	r5, r1
 80002a0:	4360      	muls	r0, r4
 80002a2:	4361      	muls	r1, r4
 80002a4:	1940      	adds	r0, r0, r5
 80002a6:	0c34      	lsrs	r4, r6, #16
 80002a8:	1824      	adds	r4, r4, r0
 80002aa:	b500      	push	{lr}
 80002ac:	42a5      	cmp	r5, r4
 80002ae:	d903      	bls.n	80002b8 <__aeabi_lmul+0x34>
 80002b0:	2080      	movs	r0, #128	; 0x80
 80002b2:	0240      	lsls	r0, r0, #9
 80002b4:	4680      	mov	r8, r0
 80002b6:	4441      	add	r1, r8
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	186d      	adds	r5, r5, r1
 80002bc:	4661      	mov	r1, ip
 80002be:	4359      	muls	r1, r3
 80002c0:	437a      	muls	r2, r7
 80002c2:	0430      	lsls	r0, r6, #16
 80002c4:	1949      	adds	r1, r1, r5
 80002c6:	0424      	lsls	r4, r4, #16
 80002c8:	0c00      	lsrs	r0, r0, #16
 80002ca:	1820      	adds	r0, r4, r0
 80002cc:	1889      	adds	r1, r1, r2
 80002ce:	bc80      	pop	{r7}
 80002d0:	46b8      	mov	r8, r7
 80002d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002d4 <__udivmoddi4>:
 80002d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d6:	4657      	mov	r7, sl
 80002d8:	464e      	mov	r6, r9
 80002da:	4645      	mov	r5, r8
 80002dc:	46de      	mov	lr, fp
 80002de:	b5e0      	push	{r5, r6, r7, lr}
 80002e0:	0004      	movs	r4, r0
 80002e2:	000d      	movs	r5, r1
 80002e4:	4692      	mov	sl, r2
 80002e6:	4699      	mov	r9, r3
 80002e8:	b083      	sub	sp, #12
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d830      	bhi.n	8000350 <__udivmoddi4+0x7c>
 80002ee:	d02d      	beq.n	800034c <__udivmoddi4+0x78>
 80002f0:	4649      	mov	r1, r9
 80002f2:	4650      	mov	r0, sl
 80002f4:	f000 f8d8 	bl	80004a8 <__clzdi2>
 80002f8:	0029      	movs	r1, r5
 80002fa:	0006      	movs	r6, r0
 80002fc:	0020      	movs	r0, r4
 80002fe:	f000 f8d3 	bl	80004a8 <__clzdi2>
 8000302:	1a33      	subs	r3, r6, r0
 8000304:	4698      	mov	r8, r3
 8000306:	3b20      	subs	r3, #32
 8000308:	469b      	mov	fp, r3
 800030a:	d433      	bmi.n	8000374 <__udivmoddi4+0xa0>
 800030c:	465a      	mov	r2, fp
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	4642      	mov	r2, r8
 8000314:	001f      	movs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d83a      	bhi.n	8000396 <__udivmoddi4+0xc2>
 8000320:	42af      	cmp	r7, r5
 8000322:	d100      	bne.n	8000326 <__udivmoddi4+0x52>
 8000324:	e078      	b.n	8000418 <__udivmoddi4+0x144>
 8000326:	465b      	mov	r3, fp
 8000328:	1ba4      	subs	r4, r4, r6
 800032a:	41bd      	sbcs	r5, r7
 800032c:	2b00      	cmp	r3, #0
 800032e:	da00      	bge.n	8000332 <__udivmoddi4+0x5e>
 8000330:	e075      	b.n	800041e <__udivmoddi4+0x14a>
 8000332:	2200      	movs	r2, #0
 8000334:	2300      	movs	r3, #0
 8000336:	9200      	str	r2, [sp, #0]
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	465a      	mov	r2, fp
 800033e:	4093      	lsls	r3, r2
 8000340:	9301      	str	r3, [sp, #4]
 8000342:	2301      	movs	r3, #1
 8000344:	4642      	mov	r2, r8
 8000346:	4093      	lsls	r3, r2
 8000348:	9300      	str	r3, [sp, #0]
 800034a:	e028      	b.n	800039e <__udivmoddi4+0xca>
 800034c:	4282      	cmp	r2, r0
 800034e:	d9cf      	bls.n	80002f0 <__udivmoddi4+0x1c>
 8000350:	2200      	movs	r2, #0
 8000352:	2300      	movs	r3, #0
 8000354:	9200      	str	r2, [sp, #0]
 8000356:	9301      	str	r3, [sp, #4]
 8000358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <__udivmoddi4+0x8e>
 800035e:	601c      	str	r4, [r3, #0]
 8000360:	605d      	str	r5, [r3, #4]
 8000362:	9800      	ldr	r0, [sp, #0]
 8000364:	9901      	ldr	r1, [sp, #4]
 8000366:	b003      	add	sp, #12
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	46bb      	mov	fp, r7
 800036c:	46b2      	mov	sl, r6
 800036e:	46a9      	mov	r9, r5
 8000370:	46a0      	mov	r8, r4
 8000372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000374:	4642      	mov	r2, r8
 8000376:	2320      	movs	r3, #32
 8000378:	1a9b      	subs	r3, r3, r2
 800037a:	4652      	mov	r2, sl
 800037c:	40da      	lsrs	r2, r3
 800037e:	4641      	mov	r1, r8
 8000380:	0013      	movs	r3, r2
 8000382:	464a      	mov	r2, r9
 8000384:	408a      	lsls	r2, r1
 8000386:	0017      	movs	r7, r2
 8000388:	4642      	mov	r2, r8
 800038a:	431f      	orrs	r7, r3
 800038c:	4653      	mov	r3, sl
 800038e:	4093      	lsls	r3, r2
 8000390:	001e      	movs	r6, r3
 8000392:	42af      	cmp	r7, r5
 8000394:	d9c4      	bls.n	8000320 <__udivmoddi4+0x4c>
 8000396:	2200      	movs	r2, #0
 8000398:	2300      	movs	r3, #0
 800039a:	9200      	str	r2, [sp, #0]
 800039c:	9301      	str	r3, [sp, #4]
 800039e:	4643      	mov	r3, r8
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d0d9      	beq.n	8000358 <__udivmoddi4+0x84>
 80003a4:	07fb      	lsls	r3, r7, #31
 80003a6:	0872      	lsrs	r2, r6, #1
 80003a8:	431a      	orrs	r2, r3
 80003aa:	4646      	mov	r6, r8
 80003ac:	087b      	lsrs	r3, r7, #1
 80003ae:	e00e      	b.n	80003ce <__udivmoddi4+0xfa>
 80003b0:	42ab      	cmp	r3, r5
 80003b2:	d101      	bne.n	80003b8 <__udivmoddi4+0xe4>
 80003b4:	42a2      	cmp	r2, r4
 80003b6:	d80c      	bhi.n	80003d2 <__udivmoddi4+0xfe>
 80003b8:	1aa4      	subs	r4, r4, r2
 80003ba:	419d      	sbcs	r5, r3
 80003bc:	2001      	movs	r0, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2100      	movs	r1, #0
 80003c4:	3e01      	subs	r6, #1
 80003c6:	1824      	adds	r4, r4, r0
 80003c8:	414d      	adcs	r5, r1
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d006      	beq.n	80003dc <__udivmoddi4+0x108>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	d9ee      	bls.n	80003b0 <__udivmoddi4+0xdc>
 80003d2:	3e01      	subs	r6, #1
 80003d4:	1924      	adds	r4, r4, r4
 80003d6:	416d      	adcs	r5, r5
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d1f8      	bne.n	80003ce <__udivmoddi4+0xfa>
 80003dc:	9800      	ldr	r0, [sp, #0]
 80003de:	9901      	ldr	r1, [sp, #4]
 80003e0:	465b      	mov	r3, fp
 80003e2:	1900      	adds	r0, r0, r4
 80003e4:	4169      	adcs	r1, r5
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db24      	blt.n	8000434 <__udivmoddi4+0x160>
 80003ea:	002b      	movs	r3, r5
 80003ec:	465a      	mov	r2, fp
 80003ee:	4644      	mov	r4, r8
 80003f0:	40d3      	lsrs	r3, r2
 80003f2:	002a      	movs	r2, r5
 80003f4:	40e2      	lsrs	r2, r4
 80003f6:	001c      	movs	r4, r3
 80003f8:	465b      	mov	r3, fp
 80003fa:	0015      	movs	r5, r2
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	db2a      	blt.n	8000456 <__udivmoddi4+0x182>
 8000400:	0026      	movs	r6, r4
 8000402:	409e      	lsls	r6, r3
 8000404:	0033      	movs	r3, r6
 8000406:	0026      	movs	r6, r4
 8000408:	4647      	mov	r7, r8
 800040a:	40be      	lsls	r6, r7
 800040c:	0032      	movs	r2, r6
 800040e:	1a80      	subs	r0, r0, r2
 8000410:	4199      	sbcs	r1, r3
 8000412:	9000      	str	r0, [sp, #0]
 8000414:	9101      	str	r1, [sp, #4]
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x84>
 8000418:	42a3      	cmp	r3, r4
 800041a:	d8bc      	bhi.n	8000396 <__udivmoddi4+0xc2>
 800041c:	e783      	b.n	8000326 <__udivmoddi4+0x52>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	2100      	movs	r1, #0
 8000424:	1a9b      	subs	r3, r3, r2
 8000426:	2200      	movs	r2, #0
 8000428:	9100      	str	r1, [sp, #0]
 800042a:	9201      	str	r2, [sp, #4]
 800042c:	2201      	movs	r2, #1
 800042e:	40da      	lsrs	r2, r3
 8000430:	9201      	str	r2, [sp, #4]
 8000432:	e786      	b.n	8000342 <__udivmoddi4+0x6e>
 8000434:	4642      	mov	r2, r8
 8000436:	2320      	movs	r3, #32
 8000438:	1a9b      	subs	r3, r3, r2
 800043a:	002a      	movs	r2, r5
 800043c:	4646      	mov	r6, r8
 800043e:	409a      	lsls	r2, r3
 8000440:	0023      	movs	r3, r4
 8000442:	40f3      	lsrs	r3, r6
 8000444:	4644      	mov	r4, r8
 8000446:	4313      	orrs	r3, r2
 8000448:	002a      	movs	r2, r5
 800044a:	40e2      	lsrs	r2, r4
 800044c:	001c      	movs	r4, r3
 800044e:	465b      	mov	r3, fp
 8000450:	0015      	movs	r5, r2
 8000452:	2b00      	cmp	r3, #0
 8000454:	dad4      	bge.n	8000400 <__udivmoddi4+0x12c>
 8000456:	4642      	mov	r2, r8
 8000458:	002f      	movs	r7, r5
 800045a:	2320      	movs	r3, #32
 800045c:	0026      	movs	r6, r4
 800045e:	4097      	lsls	r7, r2
 8000460:	1a9b      	subs	r3, r3, r2
 8000462:	40de      	lsrs	r6, r3
 8000464:	003b      	movs	r3, r7
 8000466:	4333      	orrs	r3, r6
 8000468:	e7cd      	b.n	8000406 <__udivmoddi4+0x132>
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <__clzdi2>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d103      	bne.n	80004b6 <__clzdi2+0xe>
 80004ae:	f7ff ffdd 	bl	800046c <__clzsi2>
 80004b2:	3020      	adds	r0, #32
 80004b4:	e002      	b.n	80004bc <__clzdi2+0x14>
 80004b6:	1c08      	adds	r0, r1, #0
 80004b8:	f7ff ffd8 	bl	800046c <__clzsi2>
 80004bc:	bd10      	pop	{r4, pc}
 80004be:	46c0      	nop			; (mov r8, r8)

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f001 f89e 	bl	8001604 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f920 	bl	800070c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f9da 	bl	8000884 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004d0:	f000 f970 	bl	80007b4 <MX_SPI1_Init>
  MX_USART5_UART_Init();
 80004d4:	f000 f9a6 	bl	8000824 <MX_USART5_UART_Init>
  /* USER CODE BEGIN 2 */
	iis2dlpc_ctx.write_reg = platform_write;
 80004d8:	4b7b      	ldr	r3, [pc, #492]	; (80006c8 <main+0x208>)
 80004da:	4a7c      	ldr	r2, [pc, #496]	; (80006cc <main+0x20c>)
 80004dc:	601a      	str	r2, [r3, #0]
	iis2dlpc_ctx.read_reg = platform_read;
 80004de:	4b7a      	ldr	r3, [pc, #488]	; (80006c8 <main+0x208>)
 80004e0:	4a7b      	ldr	r2, [pc, #492]	; (80006d0 <main+0x210>)
 80004e2:	605a      	str	r2, [r3, #4]
	iis2dlpc_ctx.handle = &IIS2DLPC_BUS;
 80004e4:	4b78      	ldr	r3, [pc, #480]	; (80006c8 <main+0x208>)
 80004e6:	4a7b      	ldr	r2, [pc, #492]	; (80006d4 <main+0x214>)
 80004e8:	609a      	str	r2, [r3, #8]

	iis2dlpc_device_id_get ( &iis2dlpc_ctx , &iis2dlpc_whoami_reg ) ;
 80004ea:	4a7b      	ldr	r2, [pc, #492]	; (80006d8 <main+0x218>)
 80004ec:	4b76      	ldr	r3, [pc, #472]	; (80006c8 <main+0x208>)
 80004ee:	0011      	movs	r1, r2
 80004f0:	0018      	movs	r0, r3
 80004f2:	f000 fe9d 	bl	8001230 <iis2dlpc_device_id_get>
	if ( iis2dlpc_whoami_reg == IIS2DLPC_ID )
 80004f6:	4b78      	ldr	r3, [pc, #480]	; (80006d8 <main+0x218>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	2b44      	cmp	r3, #68	; 0x44
 80004fc:	d112      	bne.n	8000524 <main+0x64>
	{
		sprintf ( (char*)dbg_tx_buff , "Hello! My name is %d\n", iis2dlpc_whoami_reg ) ;
 80004fe:	4b76      	ldr	r3, [pc, #472]	; (80006d8 <main+0x218>)
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	001a      	movs	r2, r3
 8000504:	4975      	ldr	r1, [pc, #468]	; (80006dc <main+0x21c>)
 8000506:	4b76      	ldr	r3, [pc, #472]	; (80006e0 <main+0x220>)
 8000508:	0018      	movs	r0, r3
 800050a:	f003 fd79 	bl	8004000 <siprintf>
		dbg_tx ( dbg_tx_buff, strlen ( (char const*)dbg_tx_buff) ) ;
 800050e:	4b74      	ldr	r3, [pc, #464]	; (80006e0 <main+0x220>)
 8000510:	0018      	movs	r0, r3
 8000512:	f7ff fdf9 	bl	8000108 <strlen>
 8000516:	0003      	movs	r3, r0
 8000518:	b29a      	uxth	r2, r3
 800051a:	4b71      	ldr	r3, [pc, #452]	; (80006e0 <main+0x220>)
 800051c:	0011      	movs	r1, r2
 800051e:	0018      	movs	r0, r3
 8000520:	f000 fbb6 	bl	8000c90 <dbg_tx>
	else
	{
		/* manage here device not found */
	}
	/*Restore default configuration */
	iis2dlpc_reset_set ( &iis2dlpc_ctx , PROPERTY_ENABLE ) ;
 8000524:	4b68      	ldr	r3, [pc, #416]	; (80006c8 <main+0x208>)
 8000526:	2101      	movs	r1, #1
 8000528:	0018      	movs	r0, r3
 800052a:	f000 fe93 	bl	8001254 <iis2dlpc_reset_set>
	do {
		iis2dlpc_reset_get ( &iis2dlpc_ctx, &rst ) ;
 800052e:	4a6d      	ldr	r2, [pc, #436]	; (80006e4 <main+0x224>)
 8000530:	4b65      	ldr	r3, [pc, #404]	; (80006c8 <main+0x208>)
 8000532:	0011      	movs	r1, r2
 8000534:	0018      	movs	r0, r3
 8000536:	f000 febd 	bl	80012b4 <iis2dlpc_reset_get>
	} while ( rst ) ;
 800053a:	4b6a      	ldr	r3, [pc, #424]	; (80006e4 <main+0x224>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d1f5      	bne.n	800052e <main+0x6e>
	/*Set full scale */
	iis2dlpc_full_scale_set ( &iis2dlpc_ctx , IIS2DLPC_2g ) ;
 8000542:	4b61      	ldr	r3, [pc, #388]	; (80006c8 <main+0x208>)
 8000544:	2100      	movs	r1, #0
 8000546:	0018      	movs	r0, r3
 8000548:	f000 fe09 	bl	800115e <iis2dlpc_full_scale_set>
	/*Configure power mode */
	iis2dlpc_power_mode_set ( &iis2dlpc_ctx , IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit ) ;
 800054c:	4b5e      	ldr	r3, [pc, #376]	; (80006c8 <main+0x208>)
 800054e:	2110      	movs	r1, #16
 8000550:	0018      	movs	r0, r3
 8000552:	f000 fd40 	bl	8000fd6 <iis2dlpc_power_mode_set>
	/*Set Output Data Rate */
	iis2dlpc_data_rate_set ( &iis2dlpc_ctx , IIS2DLPC_XL_ODR_200Hz );
 8000556:	4b5c      	ldr	r3, [pc, #368]	; (80006c8 <main+0x208>)
 8000558:	2106      	movs	r1, #6
 800055a:	0018      	movs	r0, r3
 800055c:	f000 fda7 	bl	80010ae <iis2dlpc_data_rate_set>
	/*Apply high-pass digital filter on Wake-Up function */
	iis2dlpc_filter_path_set ( &iis2dlpc_ctx , IIS2DLPC_HIGH_PASS_ON_OUT ) ;
 8000560:	4b59      	ldr	r3, [pc, #356]	; (80006c8 <main+0x208>)
 8000562:	2110      	movs	r1, #16
 8000564:	0018      	movs	r0, r3
 8000566:	f000 fec0 	bl	80012ea <iis2dlpc_filter_path_set>
	 * is generated for each X,Y,Z filtered data exceeding the
	 * configured threshold
	*/
	// default iis2dlpc_wkup_dur_set(&dev_ctx, 0);
	// range is 0-3
	iis2dlpc_wkup_dur_set ( &iis2dlpc_ctx , IIS2DLPC_WAKEUP_DUR ) ;
 800056a:	4b57      	ldr	r3, [pc, #348]	; (80006c8 <main+0x208>)
 800056c:	2101      	movs	r1, #1
 800056e:	0018      	movs	r0, r3
 8000570:	f001 f817 	bl	80015a2 <iis2dlpc_wkup_dur_set>
	/* Set wake-up threshold
	 * Set Wake-Up threshold: 1 LSb corresponds to FS_XL/2^6
	 */
	// default iis2dlpc_wkup_threshold_set ( &iis2dlpc_ctx , 2 ) ;
	// range is 0-63
	iis2dlpc_wkup_threshold_set ( &iis2dlpc_ctx , IIS2DLPC_WAKEUP_THS ) ;
 8000574:	4b54      	ldr	r3, [pc, #336]	; (80006c8 <main+0x208>)
 8000576:	2101      	movs	r1, #1
 8000578:	0018      	movs	r0, r3
 800057a:	f000 ffc7 	bl	800150c <iis2dlpc_wkup_threshold_set>
	/*Enable interrupt generation on Wake-Up INT1 pin */
	iis2dlpc_pin_int1_route_get ( &iis2dlpc_ctx , &iis2dlpc_int_route.ctrl4_int1_pad_ctrl ) ;
 800057e:	4a5a      	ldr	r2, [pc, #360]	; (80006e8 <main+0x228>)
 8000580:	4b51      	ldr	r3, [pc, #324]	; (80006c8 <main+0x208>)
 8000582:	0011      	movs	r1, r2
 8000584:	0018      	movs	r0, r3
 8000586:	f000 ffaf 	bl	80014e8 <iis2dlpc_pin_int1_route_get>
	iis2dlpc_int_route.ctrl4_int1_pad_ctrl.int1_wu = PROPERTY_ENABLE ;
 800058a:	4b57      	ldr	r3, [pc, #348]	; (80006e8 <main+0x228>)
 800058c:	781a      	ldrb	r2, [r3, #0]
 800058e:	2120      	movs	r1, #32
 8000590:	430a      	orrs	r2, r1
 8000592:	701a      	strb	r2, [r3, #0]
	iis2dlpc_pin_int1_route_set ( &iis2dlpc_ctx , &iis2dlpc_int_route.ctrl4_int1_pad_ctrl ) ;
 8000594:	4a54      	ldr	r2, [pc, #336]	; (80006e8 <main+0x228>)
 8000596:	4b4c      	ldr	r3, [pc, #304]	; (80006c8 <main+0x208>)
 8000598:	0011      	movs	r1, r2
 800059a:	0018      	movs	r0, r3
 800059c:	f000 ff2f 	bl	80013fe <iis2dlpc_pin_int1_route_set>

	/* get IIS2DLPC raw temp */
	iis2dlpc_temperature_raw_get ( &iis2dlpc_ctx , &iis2dlpc_temp_reg ) ;
 80005a0:	4a52      	ldr	r2, [pc, #328]	; (80006ec <main+0x22c>)
 80005a2:	4b49      	ldr	r3, [pc, #292]	; (80006c8 <main+0x208>)
 80005a4:	0011      	movs	r1, r2
 80005a6:	0018      	movs	r0, r3
 80005a8:	f000 fe1b 	bl	80011e2 <iis2dlpc_temperature_raw_get>
	sprintf ( (char *)dbg_tx_buff , "IIS2DLPC temp is %d\r\n" , iis2dlpc_temp_reg ) ;
 80005ac:	4b4f      	ldr	r3, [pc, #316]	; (80006ec <main+0x22c>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	5e9b      	ldrsh	r3, [r3, r2]
 80005b2:	001a      	movs	r2, r3
 80005b4:	494e      	ldr	r1, [pc, #312]	; (80006f0 <main+0x230>)
 80005b6:	4b4a      	ldr	r3, [pc, #296]	; (80006e0 <main+0x220>)
 80005b8:	0018      	movs	r0, r3
 80005ba:	f003 fd21 	bl	8004000 <siprintf>
	dbg_tx ( dbg_tx_buff , strlen ( (char const*)dbg_tx_buff ) ) ;
 80005be:	4b48      	ldr	r3, [pc, #288]	; (80006e0 <main+0x220>)
 80005c0:	0018      	movs	r0, r3
 80005c2:	f7ff fda1 	bl	8000108 <strlen>
 80005c6:	0003      	movs	r3, r0
 80005c8:	b29a      	uxth	r2, r3
 80005ca:	4b45      	ldr	r3, [pc, #276]	; (80006e0 <main+0x220>)
 80005cc:	0011      	movs	r1, r2
 80005ce:	0018      	movs	r0, r3
 80005d0:	f000 fb5e 	bl	8000c90 <dbg_tx>

	iis2dlpc_int_notification_set ( &iis2dlpc_ctx , IIS2DLPC_LIR ) ;
 80005d4:	4b3c      	ldr	r3, [pc, #240]	; (80006c8 <main+0x208>)
 80005d6:	2101      	movs	r1, #1
 80005d8:	0018      	movs	r0, r3
 80005da:	f000 fee0 	bl	800139e <iis2dlpc_int_notification_set>

	iis2dlpc_conf_print ( &iis2dlpc_ctx );
 80005de:	4b3a      	ldr	r3, [pc, #232]	; (80006c8 <main+0x208>)
 80005e0:	0018      	movs	r0, r3
 80005e2:	f000 fa71 	bl	8000ac8 <iis2dlpc_conf_print>
	while (1)
	{
		//iis2dlpc_all_sources_t all_source;

		/* Check Wake-Up events */
		iis2dlpc_all_sources_get ( &iis2dlpc_ctx , &all_source ) ;
 80005e6:	4a43      	ldr	r2, [pc, #268]	; (80006f4 <main+0x234>)
 80005e8:	4b37      	ldr	r3, [pc, #220]	; (80006c8 <main+0x208>)
 80005ea:	0011      	movs	r1, r2
 80005ec:	0018      	movs	r0, r3
 80005ee:	f000 fde6 	bl	80011be <iis2dlpc_all_sources_get>

		if ( all_source.wake_up_src.wu_ia )
 80005f2:	4b40      	ldr	r3, [pc, #256]	; (80006f4 <main+0x234>)
 80005f4:	785b      	ldrb	r3, [r3, #1]
 80005f6:	2208      	movs	r2, #8
 80005f8:	4013      	ands	r3, r2
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d0f2      	beq.n	80005e6 <main+0x126>
		{
			sprintf ( (char *)dbg_tx_buff , "Wake-Up event on " ) ;
 8000600:	4a3d      	ldr	r2, [pc, #244]	; (80006f8 <main+0x238>)
 8000602:	4b37      	ldr	r3, [pc, #220]	; (80006e0 <main+0x220>)
 8000604:	0011      	movs	r1, r2
 8000606:	0018      	movs	r0, r3
 8000608:	f003 fcfa 	bl	8004000 <siprintf>
			if ( all_source.wake_up_src.x_wu )
 800060c:	4b39      	ldr	r3, [pc, #228]	; (80006f4 <main+0x234>)
 800060e:	785b      	ldrb	r3, [r3, #1]
 8000610:	2204      	movs	r2, #4
 8000612:	4013      	ands	r3, r2
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b00      	cmp	r3, #0
 8000618:	d00e      	beq.n	8000638 <main+0x178>
				strcat ( (char*)dbg_tx_buff , "X" ) ;
 800061a:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <main+0x220>)
 800061c:	0018      	movs	r0, r3
 800061e:	f7ff fd73 	bl	8000108 <strlen>
 8000622:	0003      	movs	r3, r0
 8000624:	001a      	movs	r2, r3
 8000626:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <main+0x220>)
 8000628:	18d2      	adds	r2, r2, r3
 800062a:	4b34      	ldr	r3, [pc, #208]	; (80006fc <main+0x23c>)
 800062c:	0010      	movs	r0, r2
 800062e:	0019      	movs	r1, r3
 8000630:	2302      	movs	r3, #2
 8000632:	001a      	movs	r2, r3
 8000634:	f003 fcd2 	bl	8003fdc <memcpy>
			if ( all_source.wake_up_src.y_wu )
 8000638:	4b2e      	ldr	r3, [pc, #184]	; (80006f4 <main+0x234>)
 800063a:	785b      	ldrb	r3, [r3, #1]
 800063c:	2202      	movs	r2, #2
 800063e:	4013      	ands	r3, r2
 8000640:	b2db      	uxtb	r3, r3
 8000642:	2b00      	cmp	r3, #0
 8000644:	d00e      	beq.n	8000664 <main+0x1a4>
				strcat ( (char *)dbg_tx_buff, "Y" ) ;
 8000646:	4b26      	ldr	r3, [pc, #152]	; (80006e0 <main+0x220>)
 8000648:	0018      	movs	r0, r3
 800064a:	f7ff fd5d 	bl	8000108 <strlen>
 800064e:	0003      	movs	r3, r0
 8000650:	001a      	movs	r2, r3
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <main+0x220>)
 8000654:	18d2      	adds	r2, r2, r3
 8000656:	4b2a      	ldr	r3, [pc, #168]	; (8000700 <main+0x240>)
 8000658:	0010      	movs	r0, r2
 800065a:	0019      	movs	r1, r3
 800065c:	2302      	movs	r3, #2
 800065e:	001a      	movs	r2, r3
 8000660:	f003 fcbc 	bl	8003fdc <memcpy>
			if ( all_source.wake_up_src.z_wu )
 8000664:	4b23      	ldr	r3, [pc, #140]	; (80006f4 <main+0x234>)
 8000666:	785b      	ldrb	r3, [r3, #1]
 8000668:	2201      	movs	r2, #1
 800066a:	4013      	ands	r3, r2
 800066c:	b2db      	uxtb	r3, r3
 800066e:	2b00      	cmp	r3, #0
 8000670:	d00e      	beq.n	8000690 <main+0x1d0>
				strcat ( (char*)dbg_tx_buff , "Z" ) ;
 8000672:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <main+0x220>)
 8000674:	0018      	movs	r0, r3
 8000676:	f7ff fd47 	bl	8000108 <strlen>
 800067a:	0003      	movs	r3, r0
 800067c:	001a      	movs	r2, r3
 800067e:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <main+0x220>)
 8000680:	18d2      	adds	r2, r2, r3
 8000682:	4b20      	ldr	r3, [pc, #128]	; (8000704 <main+0x244>)
 8000684:	0010      	movs	r0, r2
 8000686:	0019      	movs	r1, r3
 8000688:	2302      	movs	r3, #2
 800068a:	001a      	movs	r2, r3
 800068c:	f003 fca6 	bl	8003fdc <memcpy>
			strcat ( (char *)dbg_tx_buff , " direction\r\n" ) ;
 8000690:	4b13      	ldr	r3, [pc, #76]	; (80006e0 <main+0x220>)
 8000692:	0018      	movs	r0, r3
 8000694:	f7ff fd38 	bl	8000108 <strlen>
 8000698:	0003      	movs	r3, r0
 800069a:	001a      	movs	r2, r3
 800069c:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <main+0x220>)
 800069e:	18d2      	adds	r2, r2, r3
 80006a0:	4b19      	ldr	r3, [pc, #100]	; (8000708 <main+0x248>)
 80006a2:	0010      	movs	r0, r2
 80006a4:	0019      	movs	r1, r3
 80006a6:	230d      	movs	r3, #13
 80006a8:	001a      	movs	r2, r3
 80006aa:	f003 fc97 	bl	8003fdc <memcpy>
		    dbg_tx ( dbg_tx_buff , strlen ( (char const*)dbg_tx_buff ) ) ;
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <main+0x220>)
 80006b0:	0018      	movs	r0, r3
 80006b2:	f7ff fd29 	bl	8000108 <strlen>
 80006b6:	0003      	movs	r3, r0
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <main+0x220>)
 80006bc:	0011      	movs	r1, r2
 80006be:	0018      	movs	r0, r3
 80006c0:	f000 fae6 	bl	8000c90 <dbg_tx>
		iis2dlpc_all_sources_get ( &iis2dlpc_ctx , &all_source ) ;
 80006c4:	e78f      	b.n	80005e6 <main+0x126>
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	200001c0 	.word	0x200001c0
 80006cc:	08000981 	.word	0x08000981
 80006d0:	080009f1 	.word	0x080009f1
 80006d4:	20000268 	.word	0x20000268
 80006d8:	2000008c 	.word	0x2000008c
 80006dc:	08004850 	.word	0x08004850
 80006e0:	20000094 	.word	0x20000094
 80006e4:	2000008d 	.word	0x2000008d
 80006e8:	200001cc 	.word	0x200001cc
 80006ec:	20000090 	.word	0x20000090
 80006f0:	08004868 	.word	0x08004868
 80006f4:	200001d0 	.word	0x200001d0
 80006f8:	08004880 	.word	0x08004880
 80006fc:	08004894 	.word	0x08004894
 8000700:	08004898 	.word	0x08004898
 8000704:	0800489c 	.word	0x0800489c
 8000708:	080048a0 	.word	0x080048a0

0800070c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070c:	b590      	push	{r4, r7, lr}
 800070e:	b095      	sub	sp, #84	; 0x54
 8000710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	2418      	movs	r4, #24
 8000714:	193b      	adds	r3, r7, r4
 8000716:	0018      	movs	r0, r3
 8000718:	2338      	movs	r3, #56	; 0x38
 800071a:	001a      	movs	r2, r3
 800071c:	2100      	movs	r1, #0
 800071e:	f003 fc66 	bl	8003fee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	0018      	movs	r0, r3
 8000726:	2314      	movs	r3, #20
 8000728:	001a      	movs	r2, r3
 800072a:	2100      	movs	r1, #0
 800072c:	f003 fc5f 	bl	8003fee <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000730:	4b1e      	ldr	r3, [pc, #120]	; (80007ac <SystemClock_Config+0xa0>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a1e      	ldr	r2, [pc, #120]	; (80007b0 <SystemClock_Config+0xa4>)
 8000736:	401a      	ands	r2, r3
 8000738:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <SystemClock_Config+0xa0>)
 800073a:	2180      	movs	r1, #128	; 0x80
 800073c:	0109      	lsls	r1, r1, #4
 800073e:	430a      	orrs	r2, r1
 8000740:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000742:	0021      	movs	r1, r4
 8000744:	187b      	adds	r3, r7, r1
 8000746:	2210      	movs	r2, #16
 8000748:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2201      	movs	r2, #1
 800074e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000750:	187b      	adds	r3, r7, r1
 8000752:	2200      	movs	r2, #0
 8000754:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000756:	187b      	adds	r3, r7, r1
 8000758:	22a0      	movs	r2, #160	; 0xa0
 800075a:	0212      	lsls	r2, r2, #8
 800075c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800075e:	187b      	adds	r3, r7, r1
 8000760:	2200      	movs	r2, #0
 8000762:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000764:	187b      	adds	r3, r7, r1
 8000766:	0018      	movs	r0, r3
 8000768:	f001 fa92 	bl	8001c90 <HAL_RCC_OscConfig>
 800076c:	1e03      	subs	r3, r0, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000770:	f000 fac6 	bl	8000d00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	220f      	movs	r2, #15
 8000778:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	2200      	movs	r2, #0
 800077e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	2200      	movs	r2, #0
 800078a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	2100      	movs	r1, #0
 8000796:	0018      	movs	r0, r3
 8000798:	f001 fe4e 	bl	8002438 <HAL_RCC_ClockConfig>
 800079c:	1e03      	subs	r3, r0, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007a0:	f000 faae 	bl	8000d00 <Error_Handler>
  }
}
 80007a4:	46c0      	nop			; (mov r8, r8)
 80007a6:	46bd      	mov	sp, r7
 80007a8:	b015      	add	sp, #84	; 0x54
 80007aa:	bd90      	pop	{r4, r7, pc}
 80007ac:	40007000 	.word	0x40007000
 80007b0:	ffffe7ff 	.word	0xffffe7ff

080007b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007b8:	4b18      	ldr	r3, [pc, #96]	; (800081c <MX_SPI1_Init+0x68>)
 80007ba:	4a19      	ldr	r2, [pc, #100]	; (8000820 <MX_SPI1_Init+0x6c>)
 80007bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007be:	4b17      	ldr	r3, [pc, #92]	; (800081c <MX_SPI1_Init+0x68>)
 80007c0:	2282      	movs	r2, #130	; 0x82
 80007c2:	0052      	lsls	r2, r2, #1
 80007c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007c6:	4b15      	ldr	r3, [pc, #84]	; (800081c <MX_SPI1_Init+0x68>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007cc:	4b13      	ldr	r3, [pc, #76]	; (800081c <MX_SPI1_Init+0x68>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007d2:	4b12      	ldr	r3, [pc, #72]	; (800081c <MX_SPI1_Init+0x68>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d8:	4b10      	ldr	r3, [pc, #64]	; (800081c <MX_SPI1_Init+0x68>)
 80007da:	2200      	movs	r2, #0
 80007dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007de:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_SPI1_Init+0x68>)
 80007e0:	2280      	movs	r2, #128	; 0x80
 80007e2:	0092      	lsls	r2, r2, #2
 80007e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007e6:	4b0d      	ldr	r3, [pc, #52]	; (800081c <MX_SPI1_Init+0x68>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ec:	4b0b      	ldr	r3, [pc, #44]	; (800081c <MX_SPI1_Init+0x68>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007f2:	4b0a      	ldr	r3, [pc, #40]	; (800081c <MX_SPI1_Init+0x68>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f8:	4b08      	ldr	r3, [pc, #32]	; (800081c <MX_SPI1_Init+0x68>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007fe:	4b07      	ldr	r3, [pc, #28]	; (800081c <MX_SPI1_Init+0x68>)
 8000800:	2207      	movs	r2, #7
 8000802:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000804:	4b05      	ldr	r3, [pc, #20]	; (800081c <MX_SPI1_Init+0x68>)
 8000806:	0018      	movs	r0, r3
 8000808:	f002 f83a 	bl	8002880 <HAL_SPI_Init>
 800080c:	1e03      	subs	r3, r0, #0
 800080e:	d001      	beq.n	8000814 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000810:	f000 fa76 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000814:	46c0      	nop			; (mov r8, r8)
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	20000268 	.word	0x20000268
 8000820:	40013000 	.word	0x40013000

08000824 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_USART5_UART_Init+0x58>)
 800082a:	4a15      	ldr	r2, [pc, #84]	; (8000880 <MX_USART5_UART_Init+0x5c>)
 800082c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <MX_USART5_UART_Init+0x58>)
 8000830:	2296      	movs	r2, #150	; 0x96
 8000832:	0192      	lsls	r2, r2, #6
 8000834:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_USART5_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_USART5_UART_Init+0x58>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_USART5_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_USART5_UART_Init+0x58>)
 800084a:	220c      	movs	r2, #12
 800084c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_USART5_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_USART5_UART_Init+0x58>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <MX_USART5_UART_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_USART5_UART_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000866:	4b05      	ldr	r3, [pc, #20]	; (800087c <MX_USART5_UART_Init+0x58>)
 8000868:	0018      	movs	r0, r3
 800086a:	f002 fe13 	bl	8003494 <HAL_UART_Init>
 800086e:	1e03      	subs	r3, r0, #0
 8000870:	d001      	beq.n	8000876 <MX_USART5_UART_Init+0x52>
  {
    Error_Handler();
 8000872:	f000 fa45 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	200001e4 	.word	0x200001e4
 8000880:	40005000 	.word	0x40005000

08000884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000884:	b590      	push	{r4, r7, lr}
 8000886:	b089      	sub	sp, #36	; 0x24
 8000888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	240c      	movs	r4, #12
 800088c:	193b      	adds	r3, r7, r4
 800088e:	0018      	movs	r0, r3
 8000890:	2314      	movs	r3, #20
 8000892:	001a      	movs	r2, r3
 8000894:	2100      	movs	r1, #0
 8000896:	f003 fbaa 	bl	8003fee <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	4b37      	ldr	r3, [pc, #220]	; (8000978 <MX_GPIO_Init+0xf4>)
 800089c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800089e:	4b36      	ldr	r3, [pc, #216]	; (8000978 <MX_GPIO_Init+0xf4>)
 80008a0:	2101      	movs	r1, #1
 80008a2:	430a      	orrs	r2, r1
 80008a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80008a6:	4b34      	ldr	r3, [pc, #208]	; (8000978 <MX_GPIO_Init+0xf4>)
 80008a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008aa:	2201      	movs	r2, #1
 80008ac:	4013      	ands	r3, r2
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	4b31      	ldr	r3, [pc, #196]	; (8000978 <MX_GPIO_Init+0xf4>)
 80008b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008b6:	4b30      	ldr	r3, [pc, #192]	; (8000978 <MX_GPIO_Init+0xf4>)
 80008b8:	2102      	movs	r1, #2
 80008ba:	430a      	orrs	r2, r1
 80008bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80008be:	4b2e      	ldr	r3, [pc, #184]	; (8000978 <MX_GPIO_Init+0xf4>)
 80008c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c2:	2202      	movs	r2, #2
 80008c4:	4013      	ands	r3, r2
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IIS2DLPC_CS_GPIO_Port, IIS2DLPC_CS_Pin, GPIO_PIN_RESET);
 80008ca:	2380      	movs	r3, #128	; 0x80
 80008cc:	011b      	lsls	r3, r3, #4
 80008ce:	482b      	ldr	r0, [pc, #172]	; (800097c <MX_GPIO_Init+0xf8>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	0019      	movs	r1, r3
 80008d4:	f001 f9a3 	bl	8001c1e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IIS2DLPC_SHDN_GPIO_Port, IIS2DLPC_SHDN_Pin, GPIO_PIN_RESET);
 80008d8:	2380      	movs	r3, #128	; 0x80
 80008da:	0059      	lsls	r1, r3, #1
 80008dc:	23a0      	movs	r3, #160	; 0xa0
 80008de:	05db      	lsls	r3, r3, #23
 80008e0:	2200      	movs	r2, #0
 80008e2:	0018      	movs	r0, r3
 80008e4:	f001 f99b 	bl	8001c1e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IIS2DLPC_CS_Pin */
  GPIO_InitStruct.Pin = IIS2DLPC_CS_Pin;
 80008e8:	193b      	adds	r3, r7, r4
 80008ea:	2280      	movs	r2, #128	; 0x80
 80008ec:	0112      	lsls	r2, r2, #4
 80008ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	193b      	adds	r3, r7, r4
 80008f2:	2201      	movs	r2, #1
 80008f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	193b      	adds	r3, r7, r4
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	193b      	adds	r3, r7, r4
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(IIS2DLPC_CS_GPIO_Port, &GPIO_InitStruct);
 8000902:	193b      	adds	r3, r7, r4
 8000904:	4a1d      	ldr	r2, [pc, #116]	; (800097c <MX_GPIO_Init+0xf8>)
 8000906:	0019      	movs	r1, r3
 8000908:	0010      	movs	r0, r2
 800090a:	f000 ffed 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IIS2DLPC_SHDN_Pin */
  GPIO_InitStruct.Pin = IIS2DLPC_SHDN_Pin;
 800090e:	0021      	movs	r1, r4
 8000910:	187b      	adds	r3, r7, r1
 8000912:	2280      	movs	r2, #128	; 0x80
 8000914:	0052      	lsls	r2, r2, #1
 8000916:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	000c      	movs	r4, r1
 800091a:	193b      	adds	r3, r7, r4
 800091c:	2201      	movs	r2, #1
 800091e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	193b      	adds	r3, r7, r4
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	193b      	adds	r3, r7, r4
 8000928:	2200      	movs	r2, #0
 800092a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(IIS2DLPC_SHDN_GPIO_Port, &GPIO_InitStruct);
 800092c:	193a      	adds	r2, r7, r4
 800092e:	23a0      	movs	r3, #160	; 0xa0
 8000930:	05db      	lsls	r3, r3, #23
 8000932:	0011      	movs	r1, r2
 8000934:	0018      	movs	r0, r3
 8000936:	f000 ffd7 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IIS2DLPC_INT1_Pin */
  GPIO_InitStruct.Pin = IIS2DLPC_INT1_Pin;
 800093a:	0021      	movs	r1, r4
 800093c:	187b      	adds	r3, r7, r1
 800093e:	2280      	movs	r2, #128	; 0x80
 8000940:	0052      	lsls	r2, r2, #1
 8000942:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000944:	187b      	adds	r3, r7, r1
 8000946:	2288      	movs	r2, #136	; 0x88
 8000948:	0352      	lsls	r2, r2, #13
 800094a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	187b      	adds	r3, r7, r1
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IIS2DLPC_INT1_GPIO_Port, &GPIO_InitStruct);
 8000952:	187b      	adds	r3, r7, r1
 8000954:	4a09      	ldr	r2, [pc, #36]	; (800097c <MX_GPIO_Init+0xf8>)
 8000956:	0019      	movs	r1, r3
 8000958:	0010      	movs	r0, r2
 800095a:	f000 ffc5 	bl	80018e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	2100      	movs	r1, #0
 8000962:	2007      	movs	r0, #7
 8000964:	f000 ff8e 	bl	8001884 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000968:	2007      	movs	r0, #7
 800096a:	f000 ffa0 	bl	80018ae <HAL_NVIC_EnableIRQ>

}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	46bd      	mov	sp, r7
 8000972:	b009      	add	sp, #36	; 0x24
 8000974:	bd90      	pop	{r4, r7, pc}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	40021000 	.word	0x40021000
 800097c:	50000400 	.word	0x50000400

08000980 <platform_write>:
 * @param  bufp      pointer to data to write in register reg
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write ( void *handle , uint8_t reg , const uint8_t *bufp , uint16_t len )
{
 8000980:	b5b0      	push	{r4, r5, r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	0008      	movs	r0, r1
 800098a:	607a      	str	r2, [r7, #4]
 800098c:	0019      	movs	r1, r3
 800098e:	240b      	movs	r4, #11
 8000990:	193b      	adds	r3, r7, r4
 8000992:	1c02      	adds	r2, r0, #0
 8000994:	701a      	strb	r2, [r3, #0]
 8000996:	2508      	movs	r5, #8
 8000998:	197b      	adds	r3, r7, r5
 800099a:	1c0a      	adds	r2, r1, #0
 800099c:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin	( IIS2DLPC_CS_GPIO_Port , IIS2DLPC_CS_Pin , GPIO_PIN_RESET ) ;
 800099e:	2380      	movs	r3, #128	; 0x80
 80009a0:	011b      	lsls	r3, r3, #4
 80009a2:	4812      	ldr	r0, [pc, #72]	; (80009ec <platform_write+0x6c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	0019      	movs	r1, r3
 80009a8:	f001 f939 	bl	8001c1e <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 80009ac:	2014      	movs	r0, #20
 80009ae:	f000 fe99 	bl	80016e4 <HAL_Delay>
	HAL_SPI_Transmit	( handle , &reg , 1 , 1000 ) ;
 80009b2:	23fa      	movs	r3, #250	; 0xfa
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	1939      	adds	r1, r7, r4
 80009b8:	68f8      	ldr	r0, [r7, #12]
 80009ba:	2201      	movs	r2, #1
 80009bc:	f001 fff4 	bl	80029a8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit	( handle , (uint8_t*) bufp , len , 1000 ) ;
 80009c0:	23fa      	movs	r3, #250	; 0xfa
 80009c2:	009c      	lsls	r4, r3, #2
 80009c4:	197b      	adds	r3, r7, r5
 80009c6:	881a      	ldrh	r2, [r3, #0]
 80009c8:	6879      	ldr	r1, [r7, #4]
 80009ca:	68f8      	ldr	r0, [r7, #12]
 80009cc:	0023      	movs	r3, r4
 80009ce:	f001 ffeb 	bl	80029a8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin	( IIS2DLPC_CS_GPIO_Port , IIS2DLPC_CS_Pin , GPIO_PIN_SET) ;
 80009d2:	2380      	movs	r3, #128	; 0x80
 80009d4:	011b      	lsls	r3, r3, #4
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <platform_write+0x6c>)
 80009d8:	2201      	movs	r2, #1
 80009da:	0019      	movs	r1, r3
 80009dc:	f001 f91f 	bl	8001c1e <HAL_GPIO_WritePin>

	return 0;
 80009e0:	2300      	movs	r3, #0
}
 80009e2:	0018      	movs	r0, r3
 80009e4:	46bd      	mov	sp, r7
 80009e6:	b004      	add	sp, #16
 80009e8:	bdb0      	pop	{r4, r5, r7, pc}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	50000400 	.word	0x50000400

080009f0 <platform_read>:
 * @param  bufp      pointer to buffer that store the data read
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read ( void *handle , uint8_t reg , uint8_t *bufp , uint16_t len )
{
 80009f0:	b5b0      	push	{r4, r5, r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	0008      	movs	r0, r1
 80009fa:	607a      	str	r2, [r7, #4]
 80009fc:	0019      	movs	r1, r3
 80009fe:	240b      	movs	r4, #11
 8000a00:	193b      	adds	r3, r7, r4
 8000a02:	1c02      	adds	r2, r0, #0
 8000a04:	701a      	strb	r2, [r3, #0]
 8000a06:	2508      	movs	r5, #8
 8000a08:	197b      	adds	r3, r7, r5
 8000a0a:	1c0a      	adds	r2, r1, #0
 8000a0c:	801a      	strh	r2, [r3, #0]
	reg |= 0x80;
 8000a0e:	193b      	adds	r3, r7, r4
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2280      	movs	r2, #128	; 0x80
 8000a14:	4252      	negs	r2, r2
 8000a16:	4313      	orrs	r3, r2
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	193b      	adds	r3, r7, r4
 8000a1c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin ( IIS2DLPC_CS_GPIO_Port , IIS2DLPC_CS_Pin , GPIO_PIN_RESET) ;
 8000a1e:	2380      	movs	r3, #128	; 0x80
 8000a20:	011b      	lsls	r3, r3, #4
 8000a22:	4812      	ldr	r0, [pc, #72]	; (8000a6c <platform_read+0x7c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	0019      	movs	r1, r3
 8000a28:	f001 f8f9 	bl	8001c1e <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 8000a2c:	2014      	movs	r0, #20
 8000a2e:	f000 fe59 	bl	80016e4 <HAL_Delay>
	HAL_SPI_Transmit ( handle , &reg , 1 , 1000 ) ;
 8000a32:	23fa      	movs	r3, #250	; 0xfa
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	1939      	adds	r1, r7, r4
 8000a38:	68f8      	ldr	r0, [r7, #12]
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	f001 ffb4 	bl	80029a8 <HAL_SPI_Transmit>
	HAL_SPI_Receive ( handle , bufp , len , 1000 ) ;
 8000a40:	23fa      	movs	r3, #250	; 0xfa
 8000a42:	009c      	lsls	r4, r3, #2
 8000a44:	197b      	adds	r3, r7, r5
 8000a46:	881a      	ldrh	r2, [r3, #0]
 8000a48:	6879      	ldr	r1, [r7, #4]
 8000a4a:	68f8      	ldr	r0, [r7, #12]
 8000a4c:	0023      	movs	r3, r4
 8000a4e:	f002 f901 	bl	8002c54 <HAL_SPI_Receive>
	HAL_GPIO_WritePin ( IIS2DLPC_CS_GPIO_Port , IIS2DLPC_CS_Pin , GPIO_PIN_SET) ;
 8000a52:	2380      	movs	r3, #128	; 0x80
 8000a54:	011b      	lsls	r3, r3, #4
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <platform_read+0x7c>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	0019      	movs	r1, r3
 8000a5c:	f001 f8df 	bl	8001c1e <HAL_GPIO_WritePin>

	return 0;
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	0018      	movs	r0, r3
 8000a64:	46bd      	mov	sp, r7
 8000a66:	b004      	add	sp, #16
 8000a68:	bdb0      	pop	{r4, r5, r7, pc}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	50000400 	.word	0x50000400

08000a70 <iis2dlpc_int1_print>:

static void iis2dlpc_int1_print (void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	HAL_GPIO_ReadPin ( IIS2DLPC_INT1_GPIO_Port , IIS2DLPC_INT1_Pin ) ;
 8000a74:	2380      	movs	r3, #128	; 0x80
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	4a10      	ldr	r2, [pc, #64]	; (8000abc <iis2dlpc_int1_print+0x4c>)
 8000a7a:	0019      	movs	r1, r3
 8000a7c:	0010      	movs	r0, r2
 8000a7e:	f001 f8b1 	bl	8001be4 <HAL_GPIO_ReadPin>
	sprintf ( (char *)dbg_tx_buff , "IIS2DLPC_INT1_Pin is: %d\r\n" , (uint8_t)HAL_GPIO_ReadPin ( IIS2DLPC_INT1_GPIO_Port , IIS2DLPC_INT1_Pin ) ) ;
 8000a82:	2380      	movs	r3, #128	; 0x80
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	4a0d      	ldr	r2, [pc, #52]	; (8000abc <iis2dlpc_int1_print+0x4c>)
 8000a88:	0019      	movs	r1, r3
 8000a8a:	0010      	movs	r0, r2
 8000a8c:	f001 f8aa 	bl	8001be4 <HAL_GPIO_ReadPin>
 8000a90:	0003      	movs	r3, r0
 8000a92:	001a      	movs	r2, r3
 8000a94:	490a      	ldr	r1, [pc, #40]	; (8000ac0 <iis2dlpc_int1_print+0x50>)
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <iis2dlpc_int1_print+0x54>)
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f003 fab1 	bl	8004000 <siprintf>
	dbg_tx ( dbg_tx_buff , strlen ( (char const*)dbg_tx_buff ) ) ;
 8000a9e:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <iis2dlpc_int1_print+0x54>)
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f7ff fb31 	bl	8000108 <strlen>
 8000aa6:	0003      	movs	r3, r0
 8000aa8:	b29a      	uxth	r2, r3
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <iis2dlpc_int1_print+0x54>)
 8000aac:	0011      	movs	r1, r2
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f000 f8ee 	bl	8000c90 <dbg_tx>
}
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	50000400 	.word	0x50000400
 8000ac0:	080048b0 	.word	0x080048b0
 8000ac4:	20000094 	.word	0x20000094

08000ac8 <iis2dlpc_conf_print>:

static void	iis2dlpc_conf_print	( stmdev_ctx_t* iis2dlpc_ctx )
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	iis2dlpc_wkup_threshold_get ( iis2dlpc_ctx , &reg8bit ) ;
 8000ad0:	4a65      	ldr	r2, [pc, #404]	; (8000c68 <iis2dlpc_conf_print+0x1a0>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	0011      	movs	r1, r2
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f000 fd48 	bl	800156c <iis2dlpc_wkup_threshold_get>
	sprintf ( (char *)dbg_tx_buff , "WAKE_UP_THS: %d\r\n" , reg8bit ) ;
 8000adc:	4b62      	ldr	r3, [pc, #392]	; (8000c68 <iis2dlpc_conf_print+0x1a0>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	001a      	movs	r2, r3
 8000ae2:	4962      	ldr	r1, [pc, #392]	; (8000c6c <iis2dlpc_conf_print+0x1a4>)
 8000ae4:	4b62      	ldr	r3, [pc, #392]	; (8000c70 <iis2dlpc_conf_print+0x1a8>)
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f003 fa8a 	bl	8004000 <siprintf>
	dbg_tx ( dbg_tx_buff , strlen ( (char const*)dbg_tx_buff ) ) ;
 8000aec:	4b60      	ldr	r3, [pc, #384]	; (8000c70 <iis2dlpc_conf_print+0x1a8>)
 8000aee:	0018      	movs	r0, r3
 8000af0:	f7ff fb0a 	bl	8000108 <strlen>
 8000af4:	0003      	movs	r3, r0
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	4b5d      	ldr	r3, [pc, #372]	; (8000c70 <iis2dlpc_conf_print+0x1a8>)
 8000afa:	0011      	movs	r1, r2
 8000afc:	0018      	movs	r0, r3
 8000afe:	f000 f8c7 	bl	8000c90 <dbg_tx>

	iis2dlpc_read_reg ( iis2dlpc_ctx , IIS2DLPC_CTRL1 , &reg8bit , 1 ) ;
 8000b02:	4a59      	ldr	r2, [pc, #356]	; (8000c68 <iis2dlpc_conf_print+0x1a0>)
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	2301      	movs	r3, #1
 8000b08:	2120      	movs	r1, #32
 8000b0a:	f000 fa22 	bl	8000f52 <iis2dlpc_read_reg>
	sprintf ( (char *)dbg_tx_buff , "CTRL1: %d\r\n" , reg8bit ) ;
 8000b0e:	4b56      	ldr	r3, [pc, #344]	; (8000c68 <iis2dlpc_conf_print+0x1a0>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	001a      	movs	r2, r3
 8000b14:	4957      	ldr	r1, [pc, #348]	; (8000c74 <iis2dlpc_conf_print+0x1ac>)
 8000b16:	4b56      	ldr	r3, [pc, #344]	; (8000c70 <iis2dlpc_conf_print+0x1a8>)
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f003 fa71 	bl	8004000 <siprintf>
	dbg_tx ( dbg_tx_buff , strlen ( (char const*)dbg_tx_buff ) ) ;
 8000b1e:	4b54      	ldr	r3, [pc, #336]	; (8000c70 <iis2dlpc_conf_print+0x1a8>)
 8000b20:	0018      	movs	r0, r3
 8000b22:	f7ff faf1 	bl	8000108 <strlen>
 8000b26:	0003      	movs	r3, r0
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	4b51      	ldr	r3, [pc, #324]	; (8000c70 <iis2dlpc_conf_print+0x1a8>)
 8000b2c:	0011      	movs	r1, r2
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f000 f8ae 	bl	8000c90 <dbg_tx>

	iis2dlpc_read_reg ( iis2dlpc_ctx , IIS2DLPC_CTRL3 , &reg8bit , 1 ) ;
 8000b34:	4a4c      	ldr	r2, [pc, #304]	; (8000c68 <iis2dlpc_conf_print+0x1a0>)
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	2301      	movs	r3, #1
 8000b3a:	2122      	movs	r1, #34	; 0x22
 8000b3c:	f000 fa09 	bl	8000f52 <iis2dlpc_read_reg>
	sprintf ( (char *)dbg_tx_buff , "CTRL3: %d\r\n" , reg8bit ) ;
 8000b40:	4b49      	ldr	r3, [pc, #292]	; (8000c68 <iis2dlpc_conf_print+0x1a0>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	001a      	movs	r2, r3
 8000b46:	494c      	ldr	r1, [pc, #304]	; (8000c78 <iis2dlpc_conf_print+0x1b0>)
 8000b48:	4b49      	ldr	r3, [pc, #292]	; (8000c70 <iis2dlpc_conf_print+0x1a8>)
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f003 fa58 	bl	8004000 <siprintf>
	dbg_tx ( dbg_tx_buff , strlen ( (char const*)dbg_tx_buff ) ) ;
 8000b50:	4b47      	ldr	r3, [pc, #284]	; (8000c70 <iis2dlpc_conf_print+0x1a8>)
 8000b52:	0018      	movs	r0, r3
 8000b54:	f7ff fad8 	bl	8000108 <strlen>
 8000b58:	0003      	movs	r3, r0
 8000b5a:	b29a      	uxth	r2, r3
 8000b5c:	4b44      	ldr	r3, [pc, #272]	; (8000c70 <iis2dlpc_conf_print+0x1a8>)
 8000b5e:	0011      	movs	r1, r2
 8000b60:	0018      	movs	r0, r3
 8000b62:	f000 f895 	bl	8000c90 <dbg_tx>

	iis2dlpc_read_reg ( iis2dlpc_ctx , IIS2DLPC_CTRL4_INT1_PAD_CTRL , &reg8bit , 1 ) ;
 8000b66:	4a40      	ldr	r2, [pc, #256]	; (8000c68 <iis2dlpc_conf_print+0x1a0>)
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	2123      	movs	r1, #35	; 0x23
 8000b6e:	f000 f9f0 	bl	8000f52 <iis2dlpc_read_reg>
	sprintf ( (char *)dbg_tx_buff , "CTRL4: %d\r\n" , reg8bit ) ;
 8000b72:	4b3d      	ldr	r3, [pc, #244]	; (8000c68 <iis2dlpc_conf_print+0x1a0>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	001a      	movs	r2, r3
 8000b78:	4940      	ldr	r1, [pc, #256]	; (8000c7c <iis2dlpc_conf_print+0x1b4>)
 8000b7a:	4b3d      	ldr	r3, [pc, #244]	; (8000c70 <iis2dlpc_conf_print+0x1a8>)
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f003 fa3f 	bl	8004000 <siprintf>
	dbg_tx ( dbg_tx_buff , strlen ( (char const*)dbg_tx_buff ) ) ;
 8000b82:	4b3b      	ldr	r3, [pc, #236]	; (8000c70 <iis2dlpc_conf_print+0x1a8>)
 8000b84:	0018      	movs	r0, r3
 8000b86:	f7ff fabf 	bl	8000108 <strlen>
 8000b8a:	0003      	movs	r3, r0
 8000b8c:	b29a      	uxth	r2, r3
 8000b8e:	4b38      	ldr	r3, [pc, #224]	; (8000c70 <iis2dlpc_conf_print+0x1a8>)
 8000b90:	0011      	movs	r1, r2
 8000b92:	0018      	movs	r0, r3
 8000b94:	f000 f87c 	bl	8000c90 <dbg_tx>

	iis2dlpc_read_reg ( iis2dlpc_ctx , IIS2DLPC_CTRL5_INT2_PAD_CTRL , &reg8bit , 1 ) ;
 8000b98:	4a33      	ldr	r2, [pc, #204]	; (8000c68 <iis2dlpc_conf_print+0x1a0>)
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	2124      	movs	r1, #36	; 0x24
 8000ba0:	f000 f9d7 	bl	8000f52 <iis2dlpc_read_reg>
	sprintf ( (char *)dbg_tx_buff , "CTRL5: %d\r\n" , reg8bit ) ;
 8000ba4:	4b30      	ldr	r3, [pc, #192]	; (8000c68 <iis2dlpc_conf_print+0x1a0>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	001a      	movs	r2, r3
 8000baa:	4935      	ldr	r1, [pc, #212]	; (8000c80 <iis2dlpc_conf_print+0x1b8>)
 8000bac:	4b30      	ldr	r3, [pc, #192]	; (8000c70 <iis2dlpc_conf_print+0x1a8>)
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f003 fa26 	bl	8004000 <siprintf>
	dbg_tx ( dbg_tx_buff , strlen ( (char const*)dbg_tx_buff ) ) ;
 8000bb4:	4b2e      	ldr	r3, [pc, #184]	; (8000c70 <iis2dlpc_conf_print+0x1a8>)
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f7ff faa6 	bl	8000108 <strlen>
 8000bbc:	0003      	movs	r3, r0
 8000bbe:	b29a      	uxth	r2, r3
 8000bc0:	4b2b      	ldr	r3, [pc, #172]	; (8000c70 <iis2dlpc_conf_print+0x1a8>)
 8000bc2:	0011      	movs	r1, r2
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f000 f863 	bl	8000c90 <dbg_tx>

	iis2dlpc_read_reg ( iis2dlpc_ctx , IIS2DLPC_CTRL6 , &reg8bit , 1 ) ;
 8000bca:	4a27      	ldr	r2, [pc, #156]	; (8000c68 <iis2dlpc_conf_print+0x1a0>)
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	2301      	movs	r3, #1
 8000bd0:	2125      	movs	r1, #37	; 0x25
 8000bd2:	f000 f9be 	bl	8000f52 <iis2dlpc_read_reg>
	sprintf ( (char *)dbg_tx_buff , "CTRL6: %d\r\n" , reg8bit ) ;
 8000bd6:	4b24      	ldr	r3, [pc, #144]	; (8000c68 <iis2dlpc_conf_print+0x1a0>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	001a      	movs	r2, r3
 8000bdc:	4929      	ldr	r1, [pc, #164]	; (8000c84 <iis2dlpc_conf_print+0x1bc>)
 8000bde:	4b24      	ldr	r3, [pc, #144]	; (8000c70 <iis2dlpc_conf_print+0x1a8>)
 8000be0:	0018      	movs	r0, r3
 8000be2:	f003 fa0d 	bl	8004000 <siprintf>
	dbg_tx ( dbg_tx_buff , strlen ( (char const*)dbg_tx_buff ) ) ;
 8000be6:	4b22      	ldr	r3, [pc, #136]	; (8000c70 <iis2dlpc_conf_print+0x1a8>)
 8000be8:	0018      	movs	r0, r3
 8000bea:	f7ff fa8d 	bl	8000108 <strlen>
 8000bee:	0003      	movs	r3, r0
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	4b1f      	ldr	r3, [pc, #124]	; (8000c70 <iis2dlpc_conf_print+0x1a8>)
 8000bf4:	0011      	movs	r1, r2
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f000 f84a 	bl	8000c90 <dbg_tx>

	iis2dlpc_read_reg ( iis2dlpc_ctx , IIS2DLPC_STATUS , &reg8bit , 1 ) ;
 8000bfc:	4a1a      	ldr	r2, [pc, #104]	; (8000c68 <iis2dlpc_conf_print+0x1a0>)
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	2301      	movs	r3, #1
 8000c02:	2127      	movs	r1, #39	; 0x27
 8000c04:	f000 f9a5 	bl	8000f52 <iis2dlpc_read_reg>
	sprintf ( (char *)dbg_tx_buff , "STATUS: %d\r\n" , reg8bit ) ;
 8000c08:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <iis2dlpc_conf_print+0x1a0>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	001a      	movs	r2, r3
 8000c0e:	491e      	ldr	r1, [pc, #120]	; (8000c88 <iis2dlpc_conf_print+0x1c0>)
 8000c10:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <iis2dlpc_conf_print+0x1a8>)
 8000c12:	0018      	movs	r0, r3
 8000c14:	f003 f9f4 	bl	8004000 <siprintf>
	dbg_tx ( dbg_tx_buff , strlen ( (char const*)dbg_tx_buff ) ) ;
 8000c18:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <iis2dlpc_conf_print+0x1a8>)
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f7ff fa74 	bl	8000108 <strlen>
 8000c20:	0003      	movs	r3, r0
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <iis2dlpc_conf_print+0x1a8>)
 8000c26:	0011      	movs	r1, r2
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f000 f831 	bl	8000c90 <dbg_tx>

	iis2dlpc_read_reg ( iis2dlpc_ctx , IIS2DLPC_WAKE_UP_SRC , &reg8bit , 1 ) ;
 8000c2e:	4a0e      	ldr	r2, [pc, #56]	; (8000c68 <iis2dlpc_conf_print+0x1a0>)
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	2301      	movs	r3, #1
 8000c34:	2138      	movs	r1, #56	; 0x38
 8000c36:	f000 f98c 	bl	8000f52 <iis2dlpc_read_reg>
	sprintf ( (char *)dbg_tx_buff , "WAKE_UP_SRC: %d\r\n" , reg8bit ) ;
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <iis2dlpc_conf_print+0x1a0>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	001a      	movs	r2, r3
 8000c40:	4912      	ldr	r1, [pc, #72]	; (8000c8c <iis2dlpc_conf_print+0x1c4>)
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <iis2dlpc_conf_print+0x1a8>)
 8000c44:	0018      	movs	r0, r3
 8000c46:	f003 f9db 	bl	8004000 <siprintf>
	dbg_tx ( dbg_tx_buff , strlen ( (char const*)dbg_tx_buff ) ) ;
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <iis2dlpc_conf_print+0x1a8>)
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f7ff fa5b 	bl	8000108 <strlen>
 8000c52:	0003      	movs	r3, r0
 8000c54:	b29a      	uxth	r2, r3
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <iis2dlpc_conf_print+0x1a8>)
 8000c58:	0011      	movs	r1, r2
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f000 f818 	bl	8000c90 <dbg_tx>
}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	b002      	add	sp, #8
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	2000008e 	.word	0x2000008e
 8000c6c:	080048cc 	.word	0x080048cc
 8000c70:	20000094 	.word	0x20000094
 8000c74:	080048e0 	.word	0x080048e0
 8000c78:	080048ec 	.word	0x080048ec
 8000c7c:	080048f8 	.word	0x080048f8
 8000c80:	08004904 	.word	0x08004904
 8000c84:	08004910 	.word	0x08004910
 8000c88:	0800491c 	.word	0x0800491c
 8000c8c:	0800492c 	.word	0x0800492c

08000c90 <dbg_tx>:
 *
 * @param  tx_buffer     buffer to transmit
 * @param  len           number of byte to send
 *
 */
static void dbg_tx ( uint8_t* tx_buff , uint16_t len ) {
 8000c90:	b590      	push	{r4, r7, lr}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	000a      	movs	r2, r1
 8000c9a:	1cbb      	adds	r3, r7, #2
 8000c9c:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit ( &DBG , tx_buff , len , 1000 ); }
 8000c9e:	23fa      	movs	r3, #250	; 0xfa
 8000ca0:	009c      	lsls	r4, r3, #2
 8000ca2:	1cbb      	adds	r3, r7, #2
 8000ca4:	881a      	ldrh	r2, [r3, #0]
 8000ca6:	6879      	ldr	r1, [r7, #4]
 8000ca8:	4803      	ldr	r0, [pc, #12]	; (8000cb8 <dbg_tx+0x28>)
 8000caa:	0023      	movs	r3, r4
 8000cac:	f002 fc46 	bl	800353c <HAL_UART_Transmit>
 8000cb0:	46c0      	nop			; (mov r8, r8)
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	b003      	add	sp, #12
 8000cb6:	bd90      	pop	{r4, r7, pc}
 8000cb8:	200001e4 	.word	0x200001e4

08000cbc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback ( uint16_t GPIO_Pin )
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	0002      	movs	r2, r0
 8000cc4:	1dbb      	adds	r3, r7, #6
 8000cc6:	801a      	strh	r2, [r3, #0]
	sprintf ( (char*)dbg_tx_buff , "INT1 happened!\n" ) ;
 8000cc8:	4a0b      	ldr	r2, [pc, #44]	; (8000cf8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <HAL_GPIO_EXTI_Callback+0x40>)
 8000ccc:	0011      	movs	r1, r2
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f003 f996 	bl	8004000 <siprintf>
	dbg_tx ( dbg_tx_buff, strlen ( (char const*)dbg_tx_buff) ) ;
 8000cd4:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <HAL_GPIO_EXTI_Callback+0x40>)
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f7ff fa16 	bl	8000108 <strlen>
 8000cdc:	0003      	movs	r3, r0
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_GPIO_EXTI_Callback+0x40>)
 8000ce2:	0011      	movs	r1, r2
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f7ff ffd3 	bl	8000c90 <dbg_tx>

	iis2dlpc_int1_print();
 8000cea:	f7ff fec1 	bl	8000a70 <iis2dlpc_int1_print>
	//iis2dlpc_all_sources_get ( &iis2dlpc_ctx , &all_source ) ;
	//iis2dlpc_read_reg ( &iis2dlpc_ctx , IIS2DLPC_WAKE_UP_SRC , &reg8bit , 1 ) ;
	//iis2dlpc_int1_print();

}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	b002      	add	sp, #8
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	08004940 	.word	0x08004940
 8000cfc:	20000094 	.word	0x20000094

08000d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d04:	b672      	cpsid	i
}
 8000d06:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <Error_Handler+0x8>
	...

08000d0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <HAL_MspInit+0x24>)
 8000d12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <HAL_MspInit+0x24>)
 8000d16:	2101      	movs	r1, #1
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <HAL_MspInit+0x24>)
 8000d1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d20:	4b03      	ldr	r3, [pc, #12]	; (8000d30 <HAL_MspInit+0x24>)
 8000d22:	2180      	movs	r1, #128	; 0x80
 8000d24:	0549      	lsls	r1, r1, #21
 8000d26:	430a      	orrs	r2, r1
 8000d28:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40021000 	.word	0x40021000

08000d34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d34:	b590      	push	{r4, r7, lr}
 8000d36:	b089      	sub	sp, #36	; 0x24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	240c      	movs	r4, #12
 8000d3e:	193b      	adds	r3, r7, r4
 8000d40:	0018      	movs	r0, r3
 8000d42:	2314      	movs	r3, #20
 8000d44:	001a      	movs	r2, r3
 8000d46:	2100      	movs	r1, #0
 8000d48:	f003 f951 	bl	8003fee <memset>
  if(hspi->Instance==SPI1)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a18      	ldr	r2, [pc, #96]	; (8000db4 <HAL_SPI_MspInit+0x80>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d129      	bne.n	8000daa <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d56:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <HAL_SPI_MspInit+0x84>)
 8000d58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d5a:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <HAL_SPI_MspInit+0x84>)
 8000d5c:	2180      	movs	r1, #128	; 0x80
 8000d5e:	0149      	lsls	r1, r1, #5
 8000d60:	430a      	orrs	r2, r1
 8000d62:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d64:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <HAL_SPI_MspInit+0x84>)
 8000d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d68:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <HAL_SPI_MspInit+0x84>)
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d70:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <HAL_SPI_MspInit+0x84>)
 8000d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d74:	2201      	movs	r2, #1
 8000d76:	4013      	ands	r3, r2
 8000d78:	60bb      	str	r3, [r7, #8]
 8000d7a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d7c:	0021      	movs	r1, r4
 8000d7e:	187b      	adds	r3, r7, r1
 8000d80:	22e0      	movs	r2, #224	; 0xe0
 8000d82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	187b      	adds	r3, r7, r1
 8000d86:	2202      	movs	r2, #2
 8000d88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	187b      	adds	r3, r7, r1
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d90:	187b      	adds	r3, r7, r1
 8000d92:	2203      	movs	r2, #3
 8000d94:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000d96:	187b      	adds	r3, r7, r1
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9c:	187a      	adds	r2, r7, r1
 8000d9e:	23a0      	movs	r3, #160	; 0xa0
 8000da0:	05db      	lsls	r3, r3, #23
 8000da2:	0011      	movs	r1, r2
 8000da4:	0018      	movs	r0, r3
 8000da6:	f000 fd9f 	bl	80018e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	46bd      	mov	sp, r7
 8000dae:	b009      	add	sp, #36	; 0x24
 8000db0:	bd90      	pop	{r4, r7, pc}
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	40013000 	.word	0x40013000
 8000db8:	40021000 	.word	0x40021000

08000dbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dbc:	b590      	push	{r4, r7, lr}
 8000dbe:	b089      	sub	sp, #36	; 0x24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	240c      	movs	r4, #12
 8000dc6:	193b      	adds	r3, r7, r4
 8000dc8:	0018      	movs	r0, r3
 8000dca:	2314      	movs	r3, #20
 8000dcc:	001a      	movs	r2, r3
 8000dce:	2100      	movs	r1, #0
 8000dd0:	f003 f90d 	bl	8003fee <memset>
  if(huart->Instance==USART5)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a17      	ldr	r2, [pc, #92]	; (8000e38 <HAL_UART_MspInit+0x7c>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d128      	bne.n	8000e30 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART5_MspInit 0 */

  /* USER CODE END USART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART5_CLK_ENABLE();
 8000dde:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <HAL_UART_MspInit+0x80>)
 8000de0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000de2:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <HAL_UART_MspInit+0x80>)
 8000de4:	2180      	movs	r1, #128	; 0x80
 8000de6:	0349      	lsls	r1, r1, #13
 8000de8:	430a      	orrs	r2, r1
 8000dea:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dec:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <HAL_UART_MspInit+0x80>)
 8000dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000df0:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <HAL_UART_MspInit+0x80>)
 8000df2:	2102      	movs	r1, #2
 8000df4:	430a      	orrs	r2, r1
 8000df6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000df8:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <HAL_UART_MspInit+0x80>)
 8000dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	4013      	ands	r3, r2
 8000e00:	60bb      	str	r3, [r7, #8]
 8000e02:	68bb      	ldr	r3, [r7, #8]
    /**USART5 GPIO Configuration
    PB3     ------> USART5_TX
    PB4     ------> USART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000e04:	0021      	movs	r1, r4
 8000e06:	187b      	adds	r3, r7, r1
 8000e08:	2218      	movs	r2, #24
 8000e0a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	187b      	adds	r3, r7, r1
 8000e0e:	2202      	movs	r2, #2
 8000e10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	187b      	adds	r3, r7, r1
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e18:	187b      	adds	r3, r7, r1
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 8000e1e:	187b      	adds	r3, r7, r1
 8000e20:	2206      	movs	r2, #6
 8000e22:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e24:	187b      	adds	r3, r7, r1
 8000e26:	4a06      	ldr	r2, [pc, #24]	; (8000e40 <HAL_UART_MspInit+0x84>)
 8000e28:	0019      	movs	r1, r3
 8000e2a:	0010      	movs	r0, r2
 8000e2c:	f000 fd5c 	bl	80018e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8000e30:	46c0      	nop			; (mov r8, r8)
 8000e32:	46bd      	mov	sp, r7
 8000e34:	b009      	add	sp, #36	; 0x24
 8000e36:	bd90      	pop	{r4, r7, pc}
 8000e38:	40005000 	.word	0x40005000
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	50000400 	.word	0x50000400

08000e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <NMI_Handler+0x4>

08000e4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4e:	e7fe      	b.n	8000e4e <HardFault_Handler+0x4>

08000e50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e54:	46c0      	nop			; (mov r8, r8)
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e68:	f000 fc20 	bl	80016ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e6c:	46c0      	nop			; (mov r8, r8)
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000e76:	2380      	movs	r3, #128	; 0x80
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f000 feec 	bl	8001c58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000e80:	46c0      	nop			; (mov r8, r8)
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e90:	4a14      	ldr	r2, [pc, #80]	; (8000ee4 <_sbrk+0x5c>)
 8000e92:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <_sbrk+0x60>)
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e9c:	4b13      	ldr	r3, [pc, #76]	; (8000eec <_sbrk+0x64>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d102      	bne.n	8000eaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea4:	4b11      	ldr	r3, [pc, #68]	; (8000eec <_sbrk+0x64>)
 8000ea6:	4a12      	ldr	r2, [pc, #72]	; (8000ef0 <_sbrk+0x68>)
 8000ea8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eaa:	4b10      	ldr	r3, [pc, #64]	; (8000eec <_sbrk+0x64>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	18d3      	adds	r3, r2, r3
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d207      	bcs.n	8000ec8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eb8:	f003 f866 	bl	8003f88 <__errno>
 8000ebc:	0003      	movs	r3, r0
 8000ebe:	220c      	movs	r2, #12
 8000ec0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	425b      	negs	r3, r3
 8000ec6:	e009      	b.n	8000edc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <_sbrk+0x64>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ece:	4b07      	ldr	r3, [pc, #28]	; (8000eec <_sbrk+0x64>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	18d2      	adds	r2, r2, r3
 8000ed6:	4b05      	ldr	r3, [pc, #20]	; (8000eec <_sbrk+0x64>)
 8000ed8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000eda:	68fb      	ldr	r3, [r7, #12]
}
 8000edc:	0018      	movs	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	b006      	add	sp, #24
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20005000 	.word	0x20005000
 8000ee8:	00000400 	.word	0x00000400
 8000eec:	200001d8 	.word	0x200001d8
 8000ef0:	200002d8 	.word	0x200002d8

08000ef4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef8:	46c0      	nop			; (mov r8, r8)
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000f00:	480d      	ldr	r0, [pc, #52]	; (8000f38 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000f02:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f04:	480d      	ldr	r0, [pc, #52]	; (8000f3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f06:	490e      	ldr	r1, [pc, #56]	; (8000f40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f08:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <LoopForever+0xe>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f0c:	e002      	b.n	8000f14 <LoopCopyDataInit>

08000f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f12:	3304      	adds	r3, #4

08000f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f18:	d3f9      	bcc.n	8000f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1a:	4a0b      	ldr	r2, [pc, #44]	; (8000f48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f1c:	4c0b      	ldr	r4, [pc, #44]	; (8000f4c <LoopForever+0x16>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f20:	e001      	b.n	8000f26 <LoopFillZerobss>

08000f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f24:	3204      	adds	r2, #4

08000f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f28:	d3fb      	bcc.n	8000f22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f2a:	f7ff ffe3 	bl	8000ef4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f2e:	f003 f831 	bl	8003f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f32:	f7ff fac5 	bl	80004c0 <main>

08000f36 <LoopForever>:

LoopForever:
    b LoopForever
 8000f36:	e7fe      	b.n	8000f36 <LoopForever>
   ldr   r0, =_estack
 8000f38:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f40:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f44:	08004a00 	.word	0x08004a00
  ldr r2, =_sbss
 8000f48:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f4c:	200002d4 	.word	0x200002d4

08000f50 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f50:	e7fe      	b.n	8000f50 <ADC1_COMP_IRQHandler>

08000f52 <iis2dlpc_read_reg>:
  *
  */
int32_t iis2dlpc_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8000f52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f54:	b087      	sub	sp, #28
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	60f8      	str	r0, [r7, #12]
 8000f5a:	0008      	movs	r0, r1
 8000f5c:	607a      	str	r2, [r7, #4]
 8000f5e:	0019      	movs	r1, r3
 8000f60:	260b      	movs	r6, #11
 8000f62:	19bb      	adds	r3, r7, r6
 8000f64:	1c02      	adds	r2, r0, #0
 8000f66:	701a      	strb	r2, [r3, #0]
 8000f68:	2508      	movs	r5, #8
 8000f6a:	197b      	adds	r3, r7, r5
 8000f6c:	1c0a      	adds	r2, r1, #0
 8000f6e:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	685c      	ldr	r4, [r3, #4]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	6898      	ldr	r0, [r3, #8]
 8000f78:	197b      	adds	r3, r7, r5
 8000f7a:	881d      	ldrh	r5, [r3, #0]
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	19bb      	adds	r3, r7, r6
 8000f80:	7819      	ldrb	r1, [r3, #0]
 8000f82:	002b      	movs	r3, r5
 8000f84:	47a0      	blx	r4
 8000f86:	0003      	movs	r3, r0
 8000f88:	617b      	str	r3, [r7, #20]

  return ret;
 8000f8a:	697b      	ldr	r3, [r7, #20]
}
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	b007      	add	sp, #28
 8000f92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f94 <iis2dlpc_write_reg>:
  *
  */
int32_t iis2dlpc_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8000f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f96:	b087      	sub	sp, #28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	0008      	movs	r0, r1
 8000f9e:	607a      	str	r2, [r7, #4]
 8000fa0:	0019      	movs	r1, r3
 8000fa2:	260b      	movs	r6, #11
 8000fa4:	19bb      	adds	r3, r7, r6
 8000fa6:	1c02      	adds	r2, r0, #0
 8000fa8:	701a      	strb	r2, [r3, #0]
 8000faa:	2508      	movs	r5, #8
 8000fac:	197b      	adds	r3, r7, r5
 8000fae:	1c0a      	adds	r2, r1, #0
 8000fb0:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	681c      	ldr	r4, [r3, #0]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	6898      	ldr	r0, [r3, #8]
 8000fba:	197b      	adds	r3, r7, r5
 8000fbc:	881d      	ldrh	r5, [r3, #0]
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	19bb      	adds	r3, r7, r6
 8000fc2:	7819      	ldrb	r1, [r3, #0]
 8000fc4:	002b      	movs	r3, r5
 8000fc6:	47a0      	blx	r4
 8000fc8:	0003      	movs	r3, r0
 8000fca:	617b      	str	r3, [r7, #20]

  return ret;
 8000fcc:	697b      	ldr	r3, [r7, #20]
}
 8000fce:	0018      	movs	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	b007      	add	sp, #28
 8000fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000fd6 <iis2dlpc_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_power_mode_set(stmdev_ctx_t *ctx,
                                iis2dlpc_mode_t val)
{
 8000fd6:	b590      	push	{r4, r7, lr}
 8000fd8:	b087      	sub	sp, #28
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
 8000fde:	000a      	movs	r2, r1
 8000fe0:	1cfb      	adds	r3, r7, #3
 8000fe2:	701a      	strb	r2, [r3, #0]
  iis2dlpc_ctrl1_t ctrl1;
  iis2dlpc_ctrl6_t ctrl6;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 8000fe4:	2410      	movs	r4, #16
 8000fe6:	193a      	adds	r2, r7, r4
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	2301      	movs	r3, #1
 8000fec:	2120      	movs	r1, #32
 8000fee:	f7ff ffb0 	bl	8000f52 <iis2dlpc_read_reg>
 8000ff2:	0003      	movs	r3, r0
 8000ff4:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d129      	bne.n	8001050 <iis2dlpc_power_mode_set+0x7a>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8000ffc:	1cfb      	adds	r3, r7, #3
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	089b      	lsrs	r3, r3, #2
 8001002:	1c1a      	adds	r2, r3, #0
 8001004:	2303      	movs	r3, #3
 8001006:	4013      	ands	r3, r2
 8001008:	b2da      	uxtb	r2, r3
 800100a:	193b      	adds	r3, r7, r4
 800100c:	2103      	movs	r1, #3
 800100e:	400a      	ands	r2, r1
 8001010:	0090      	lsls	r0, r2, #2
 8001012:	781a      	ldrb	r2, [r3, #0]
 8001014:	210c      	movs	r1, #12
 8001016:	438a      	bics	r2, r1
 8001018:	1c11      	adds	r1, r2, #0
 800101a:	1c02      	adds	r2, r0, #0
 800101c:	430a      	orrs	r2, r1
 800101e:	701a      	strb	r2, [r3, #0]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8001020:	1cfb      	adds	r3, r7, #3
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2203      	movs	r2, #3
 8001026:	4013      	ands	r3, r2
 8001028:	b2da      	uxtb	r2, r3
 800102a:	193b      	adds	r3, r7, r4
 800102c:	2103      	movs	r1, #3
 800102e:	400a      	ands	r2, r1
 8001030:	0010      	movs	r0, r2
 8001032:	781a      	ldrb	r2, [r3, #0]
 8001034:	2103      	movs	r1, #3
 8001036:	438a      	bics	r2, r1
 8001038:	1c11      	adds	r1, r2, #0
 800103a:	1c02      	adds	r2, r0, #0
 800103c:	430a      	orrs	r2, r1
 800103e:	701a      	strb	r2, [r3, #0]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 8001040:	193a      	adds	r2, r7, r4
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	2301      	movs	r3, #1
 8001046:	2120      	movs	r1, #32
 8001048:	f7ff ffa4 	bl	8000f94 <iis2dlpc_write_reg>
 800104c:	0003      	movs	r3, r0
 800104e:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d108      	bne.n	8001068 <iis2dlpc_power_mode_set+0x92>
  {
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &ctrl6, 1);
 8001056:	230c      	movs	r3, #12
 8001058:	18fa      	adds	r2, r7, r3
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	2301      	movs	r3, #1
 800105e:	2125      	movs	r1, #37	; 0x25
 8001060:	f7ff ff77 	bl	8000f52 <iis2dlpc_read_reg>
 8001064:	0003      	movs	r3, r0
 8001066:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d11a      	bne.n	80010a4 <iis2dlpc_power_mode_set+0xce>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 800106e:	1cfb      	adds	r3, r7, #3
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	091b      	lsrs	r3, r3, #4
 8001074:	1c1a      	adds	r2, r3, #0
 8001076:	2301      	movs	r3, #1
 8001078:	4013      	ands	r3, r2
 800107a:	b2da      	uxtb	r2, r3
 800107c:	240c      	movs	r4, #12
 800107e:	193b      	adds	r3, r7, r4
 8001080:	2101      	movs	r1, #1
 8001082:	400a      	ands	r2, r1
 8001084:	0090      	lsls	r0, r2, #2
 8001086:	781a      	ldrb	r2, [r3, #0]
 8001088:	2104      	movs	r1, #4
 800108a:	438a      	bics	r2, r1
 800108c:	1c11      	adds	r1, r2, #0
 800108e:	1c02      	adds	r2, r0, #0
 8001090:	430a      	orrs	r2, r1
 8001092:	701a      	strb	r2, [r3, #0]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &ctrl6, 1);
 8001094:	193a      	adds	r2, r7, r4
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	2301      	movs	r3, #1
 800109a:	2125      	movs	r1, #37	; 0x25
 800109c:	f7ff ff7a 	bl	8000f94 <iis2dlpc_write_reg>
 80010a0:	0003      	movs	r3, r0
 80010a2:	617b      	str	r3, [r7, #20]
  else
  {
    ret = ret;
  }

  return ret;
 80010a4:	697b      	ldr	r3, [r7, #20]
}
 80010a6:	0018      	movs	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	b007      	add	sp, #28
 80010ac:	bd90      	pop	{r4, r7, pc}

080010ae <iis2dlpc_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_data_rate_set(stmdev_ctx_t *ctx, iis2dlpc_odr_t val)
{
 80010ae:	b590      	push	{r4, r7, lr}
 80010b0:	b087      	sub	sp, #28
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
 80010b6:	000a      	movs	r2, r1
 80010b8:	1cfb      	adds	r3, r7, #3
 80010ba:	701a      	strb	r2, [r3, #0]
  iis2dlpc_ctrl1_t ctrl1;
  iis2dlpc_ctrl3_t ctrl3;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 80010bc:	2410      	movs	r4, #16
 80010be:	193a      	adds	r2, r7, r4
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	2301      	movs	r3, #1
 80010c4:	2120      	movs	r1, #32
 80010c6:	f7ff ff44 	bl	8000f52 <iis2dlpc_read_reg>
 80010ca:	0003      	movs	r3, r0
 80010cc:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d115      	bne.n	8001100 <iis2dlpc_data_rate_set+0x52>
  {
    ctrl1.odr = (uint8_t) val;
 80010d4:	1cfb      	adds	r3, r7, #3
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	220f      	movs	r2, #15
 80010da:	4013      	ands	r3, r2
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	193b      	adds	r3, r7, r4
 80010e0:	0110      	lsls	r0, r2, #4
 80010e2:	781a      	ldrb	r2, [r3, #0]
 80010e4:	210f      	movs	r1, #15
 80010e6:	400a      	ands	r2, r1
 80010e8:	1c11      	adds	r1, r2, #0
 80010ea:	1c02      	adds	r2, r0, #0
 80010ec:	430a      	orrs	r2, r1
 80010ee:	701a      	strb	r2, [r3, #0]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 80010f0:	193a      	adds	r2, r7, r4
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	2301      	movs	r3, #1
 80010f6:	2120      	movs	r1, #32
 80010f8:	f7ff ff4c 	bl	8000f94 <iis2dlpc_write_reg>
 80010fc:	0003      	movs	r3, r0
 80010fe:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d108      	bne.n	8001118 <iis2dlpc_data_rate_set+0x6a>
  {
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL3, (uint8_t *) &ctrl3, 1);
 8001106:	230c      	movs	r3, #12
 8001108:	18fa      	adds	r2, r7, r3
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	2301      	movs	r3, #1
 800110e:	2122      	movs	r1, #34	; 0x22
 8001110:	f7ff ff1f 	bl	8000f52 <iis2dlpc_read_reg>
 8001114:	0003      	movs	r3, r0
 8001116:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d11a      	bne.n	8001154 <iis2dlpc_data_rate_set+0xa6>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 800111e:	1cfb      	adds	r3, r7, #3
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	091b      	lsrs	r3, r3, #4
 8001124:	1c1a      	adds	r2, r3, #0
 8001126:	2303      	movs	r3, #3
 8001128:	4013      	ands	r3, r2
 800112a:	b2da      	uxtb	r2, r3
 800112c:	240c      	movs	r4, #12
 800112e:	193b      	adds	r3, r7, r4
 8001130:	2103      	movs	r1, #3
 8001132:	400a      	ands	r2, r1
 8001134:	0010      	movs	r0, r2
 8001136:	781a      	ldrb	r2, [r3, #0]
 8001138:	2103      	movs	r1, #3
 800113a:	438a      	bics	r2, r1
 800113c:	1c11      	adds	r1, r2, #0
 800113e:	1c02      	adds	r2, r0, #0
 8001140:	430a      	orrs	r2, r1
 8001142:	701a      	strb	r2, [r3, #0]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL3, (uint8_t *) &ctrl3, 1);
 8001144:	193a      	adds	r2, r7, r4
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	2301      	movs	r3, #1
 800114a:	2122      	movs	r1, #34	; 0x22
 800114c:	f7ff ff22 	bl	8000f94 <iis2dlpc_write_reg>
 8001150:	0003      	movs	r3, r0
 8001152:	617b      	str	r3, [r7, #20]
  else
  {
    ret = ret;
  }

  return ret;
 8001154:	697b      	ldr	r3, [r7, #20]
}
 8001156:	0018      	movs	r0, r3
 8001158:	46bd      	mov	sp, r7
 800115a:	b007      	add	sp, #28
 800115c:	bd90      	pop	{r4, r7, pc}

0800115e <iis2dlpc_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_full_scale_set(stmdev_ctx_t *ctx, iis2dlpc_fs_t val)
{
 800115e:	b590      	push	{r4, r7, lr}
 8001160:	b085      	sub	sp, #20
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	000a      	movs	r2, r1
 8001168:	1cfb      	adds	r3, r7, #3
 800116a:	701a      	strb	r2, [r3, #0]
  iis2dlpc_ctrl6_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &reg, 1);
 800116c:	2408      	movs	r4, #8
 800116e:	193a      	adds	r2, r7, r4
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	2301      	movs	r3, #1
 8001174:	2125      	movs	r1, #37	; 0x25
 8001176:	f7ff feec 	bl	8000f52 <iis2dlpc_read_reg>
 800117a:	0003      	movs	r3, r0
 800117c:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d117      	bne.n	80011b4 <iis2dlpc_full_scale_set+0x56>
  {
    reg.fs = (uint8_t) val;
 8001184:	1cfb      	adds	r3, r7, #3
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2203      	movs	r2, #3
 800118a:	4013      	ands	r3, r2
 800118c:	b2da      	uxtb	r2, r3
 800118e:	193b      	adds	r3, r7, r4
 8001190:	2103      	movs	r1, #3
 8001192:	400a      	ands	r2, r1
 8001194:	0110      	lsls	r0, r2, #4
 8001196:	781a      	ldrb	r2, [r3, #0]
 8001198:	2130      	movs	r1, #48	; 0x30
 800119a:	438a      	bics	r2, r1
 800119c:	1c11      	adds	r1, r2, #0
 800119e:	1c02      	adds	r2, r0, #0
 80011a0:	430a      	orrs	r2, r1
 80011a2:	701a      	strb	r2, [r3, #0]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &reg, 1);
 80011a4:	193a      	adds	r2, r7, r4
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	2301      	movs	r3, #1
 80011aa:	2125      	movs	r1, #37	; 0x25
 80011ac:	f7ff fef2 	bl	8000f94 <iis2dlpc_write_reg>
 80011b0:	0003      	movs	r3, r0
 80011b2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80011b4:	68fb      	ldr	r3, [r7, #12]
}
 80011b6:	0018      	movs	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	b005      	add	sp, #20
 80011bc:	bd90      	pop	{r4, r7, pc}

080011be <iis2dlpc_all_sources_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_all_sources_get(stmdev_ctx_t *ctx,
                                 iis2dlpc_all_sources_t *val)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b084      	sub	sp, #16
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_STATUS_DUP, (uint8_t *) val, 5);
 80011c8:	683a      	ldr	r2, [r7, #0]
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	2305      	movs	r3, #5
 80011ce:	2137      	movs	r1, #55	; 0x37
 80011d0:	f7ff febf 	bl	8000f52 <iis2dlpc_read_reg>
 80011d4:	0003      	movs	r3, r0
 80011d6:	60fb      	str	r3, [r7, #12]

  return ret;
 80011d8:	68fb      	ldr	r3, [r7, #12]
}
 80011da:	0018      	movs	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	b004      	add	sp, #16
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <iis2dlpc_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80011e2:	b590      	push	{r4, r7, lr}
 80011e4:	b085      	sub	sp, #20
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_OUT_T_L, buff, 2);
 80011ec:	2408      	movs	r4, #8
 80011ee:	193a      	adds	r2, r7, r4
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	2302      	movs	r3, #2
 80011f4:	210d      	movs	r1, #13
 80011f6:	f7ff feac 	bl	8000f52 <iis2dlpc_read_reg>
 80011fa:	0003      	movs	r3, r0
 80011fc:	60fb      	str	r3, [r7, #12]
  *val = (int16_t)buff[1];
 80011fe:	0021      	movs	r1, r4
 8001200:	187b      	adds	r3, r7, r1
 8001202:	785b      	ldrb	r3, [r3, #1]
 8001204:	b21a      	sxth	r2, r3
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	2200      	movs	r2, #0
 800120e:	5e9b      	ldrsh	r3, [r3, r2]
 8001210:	b29b      	uxth	r3, r3
 8001212:	021b      	lsls	r3, r3, #8
 8001214:	b29a      	uxth	r2, r3
 8001216:	187b      	adds	r3, r7, r1
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	b29b      	uxth	r3, r3
 800121c:	18d3      	adds	r3, r2, r3
 800121e:	b29b      	uxth	r3, r3
 8001220:	b21a      	sxth	r2, r3
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	801a      	strh	r2, [r3, #0]

  return ret;
 8001226:	68fb      	ldr	r3, [r7, #12]
}
 8001228:	0018      	movs	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	b005      	add	sp, #20
 800122e:	bd90      	pop	{r4, r7, pc}

08001230 <iis2dlpc_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_WHO_AM_I, buff, 1);
 800123a:	683a      	ldr	r2, [r7, #0]
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	2301      	movs	r3, #1
 8001240:	210f      	movs	r1, #15
 8001242:	f7ff fe86 	bl	8000f52 <iis2dlpc_read_reg>
 8001246:	0003      	movs	r3, r0
 8001248:	60fb      	str	r3, [r7, #12]

  return ret;
 800124a:	68fb      	ldr	r3, [r7, #12]
}
 800124c:	0018      	movs	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	b004      	add	sp, #16
 8001252:	bd80      	pop	{r7, pc}

08001254 <iis2dlpc_reset_set>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001254:	b590      	push	{r4, r7, lr}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	000a      	movs	r2, r1
 800125e:	1cfb      	adds	r3, r7, #3
 8001260:	701a      	strb	r2, [r3, #0]
  iis2dlpc_ctrl2_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 8001262:	2408      	movs	r4, #8
 8001264:	193a      	adds	r2, r7, r4
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	2301      	movs	r3, #1
 800126a:	2121      	movs	r1, #33	; 0x21
 800126c:	f7ff fe71 	bl	8000f52 <iis2dlpc_read_reg>
 8001270:	0003      	movs	r3, r0
 8001272:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d117      	bne.n	80012aa <iis2dlpc_reset_set+0x56>
  {
    reg.soft_reset = val;
 800127a:	1cfb      	adds	r3, r7, #3
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2201      	movs	r2, #1
 8001280:	4013      	ands	r3, r2
 8001282:	b2da      	uxtb	r2, r3
 8001284:	193b      	adds	r3, r7, r4
 8001286:	2101      	movs	r1, #1
 8001288:	400a      	ands	r2, r1
 800128a:	0190      	lsls	r0, r2, #6
 800128c:	781a      	ldrb	r2, [r3, #0]
 800128e:	2140      	movs	r1, #64	; 0x40
 8001290:	438a      	bics	r2, r1
 8001292:	1c11      	adds	r1, r2, #0
 8001294:	1c02      	adds	r2, r0, #0
 8001296:	430a      	orrs	r2, r1
 8001298:	701a      	strb	r2, [r3, #0]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 800129a:	193a      	adds	r2, r7, r4
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	2301      	movs	r3, #1
 80012a0:	2121      	movs	r1, #33	; 0x21
 80012a2:	f7ff fe77 	bl	8000f94 <iis2dlpc_write_reg>
 80012a6:	0003      	movs	r3, r0
 80012a8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80012aa:	68fb      	ldr	r3, [r7, #12]
}
 80012ac:	0018      	movs	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	b005      	add	sp, #20
 80012b2:	bd90      	pop	{r4, r7, pc}

080012b4 <iis2dlpc_reset_get>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80012b4:	b590      	push	{r4, r7, lr}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  iis2dlpc_ctrl2_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 80012be:	2408      	movs	r4, #8
 80012c0:	193a      	adds	r2, r7, r4
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	2301      	movs	r3, #1
 80012c6:	2121      	movs	r1, #33	; 0x21
 80012c8:	f7ff fe43 	bl	8000f52 <iis2dlpc_read_reg>
 80012cc:	0003      	movs	r3, r0
 80012ce:	60fb      	str	r3, [r7, #12]
  *val = reg.soft_reset;
 80012d0:	193b      	adds	r3, r7, r4
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	065b      	lsls	r3, r3, #25
 80012d6:	0fdb      	lsrs	r3, r3, #31
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	001a      	movs	r2, r3
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	701a      	strb	r2, [r3, #0]

  return ret;
 80012e0:	68fb      	ldr	r3, [r7, #12]
}
 80012e2:	0018      	movs	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	b005      	add	sp, #20
 80012e8:	bd90      	pop	{r4, r7, pc}

080012ea <iis2dlpc_filter_path_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_filter_path_set(stmdev_ctx_t *ctx,
                                 iis2dlpc_fds_t val)
{
 80012ea:	b590      	push	{r4, r7, lr}
 80012ec:	b087      	sub	sp, #28
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
 80012f2:	000a      	movs	r2, r1
 80012f4:	1cfb      	adds	r3, r7, #3
 80012f6:	701a      	strb	r2, [r3, #0]
  iis2dlpc_ctrl6_t ctrl6;
  iis2dlpc_ctrl7_t ctrl_reg7;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &ctrl6, 1);
 80012f8:	2410      	movs	r4, #16
 80012fa:	193a      	adds	r2, r7, r4
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	2301      	movs	r3, #1
 8001300:	2125      	movs	r1, #37	; 0x25
 8001302:	f7ff fe26 	bl	8000f52 <iis2dlpc_read_reg>
 8001306:	0003      	movs	r3, r0
 8001308:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d119      	bne.n	8001344 <iis2dlpc_filter_path_set+0x5a>
  {
    ctrl6.fds = ((uint8_t) val & 0x10U) >> 4;
 8001310:	1cfb      	adds	r3, r7, #3
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	091b      	lsrs	r3, r3, #4
 8001316:	1c1a      	adds	r2, r3, #0
 8001318:	2301      	movs	r3, #1
 800131a:	4013      	ands	r3, r2
 800131c:	b2da      	uxtb	r2, r3
 800131e:	193b      	adds	r3, r7, r4
 8001320:	2101      	movs	r1, #1
 8001322:	400a      	ands	r2, r1
 8001324:	00d0      	lsls	r0, r2, #3
 8001326:	781a      	ldrb	r2, [r3, #0]
 8001328:	2108      	movs	r1, #8
 800132a:	438a      	bics	r2, r1
 800132c:	1c11      	adds	r1, r2, #0
 800132e:	1c02      	adds	r2, r0, #0
 8001330:	430a      	orrs	r2, r1
 8001332:	701a      	strb	r2, [r3, #0]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &ctrl6, 1);
 8001334:	193a      	adds	r2, r7, r4
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	2301      	movs	r3, #1
 800133a:	2125      	movs	r1, #37	; 0x25
 800133c:	f7ff fe2a 	bl	8000f94 <iis2dlpc_write_reg>
 8001340:	0003      	movs	r3, r0
 8001342:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d108      	bne.n	800135c <iis2dlpc_filter_path_set+0x72>
  {
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL7, (uint8_t *) &ctrl_reg7, 1);
 800134a:	230c      	movs	r3, #12
 800134c:	18fa      	adds	r2, r7, r3
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	2301      	movs	r3, #1
 8001352:	213f      	movs	r1, #63	; 0x3f
 8001354:	f7ff fdfd 	bl	8000f52 <iis2dlpc_read_reg>
 8001358:	0003      	movs	r3, r0
 800135a:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d118      	bne.n	8001394 <iis2dlpc_filter_path_set+0xaa>
  {
    ctrl_reg7.usr_off_on_out = (uint8_t) val & 0x01U;
 8001362:	1cfb      	adds	r3, r7, #3
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2201      	movs	r2, #1
 8001368:	4013      	ands	r3, r2
 800136a:	b2da      	uxtb	r2, r3
 800136c:	240c      	movs	r4, #12
 800136e:	193b      	adds	r3, r7, r4
 8001370:	2101      	movs	r1, #1
 8001372:	400a      	ands	r2, r1
 8001374:	0110      	lsls	r0, r2, #4
 8001376:	781a      	ldrb	r2, [r3, #0]
 8001378:	2110      	movs	r1, #16
 800137a:	438a      	bics	r2, r1
 800137c:	1c11      	adds	r1, r2, #0
 800137e:	1c02      	adds	r2, r0, #0
 8001380:	430a      	orrs	r2, r1
 8001382:	701a      	strb	r2, [r3, #0]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL7, (uint8_t *) &ctrl_reg7, 1);
 8001384:	193a      	adds	r2, r7, r4
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	2301      	movs	r3, #1
 800138a:	213f      	movs	r1, #63	; 0x3f
 800138c:	f7ff fe02 	bl	8000f94 <iis2dlpc_write_reg>
 8001390:	0003      	movs	r3, r0
 8001392:	617b      	str	r3, [r7, #20]
  else
  {
    ret = ret;
  }

  return ret;
 8001394:	697b      	ldr	r3, [r7, #20]
}
 8001396:	0018      	movs	r0, r3
 8001398:	46bd      	mov	sp, r7
 800139a:	b007      	add	sp, #28
 800139c:	bd90      	pop	{r4, r7, pc}

0800139e <iis2dlpc_int_notification_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_int_notification_set(stmdev_ctx_t *ctx,
                                      iis2dlpc_lir_t val)
{
 800139e:	b590      	push	{r4, r7, lr}
 80013a0:	b085      	sub	sp, #20
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
 80013a6:	000a      	movs	r2, r1
 80013a8:	1cfb      	adds	r3, r7, #3
 80013aa:	701a      	strb	r2, [r3, #0]
  iis2dlpc_ctrl3_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL3, (uint8_t *) &reg, 1);
 80013ac:	2408      	movs	r4, #8
 80013ae:	193a      	adds	r2, r7, r4
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	2301      	movs	r3, #1
 80013b4:	2122      	movs	r1, #34	; 0x22
 80013b6:	f7ff fdcc 	bl	8000f52 <iis2dlpc_read_reg>
 80013ba:	0003      	movs	r3, r0
 80013bc:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d117      	bne.n	80013f4 <iis2dlpc_int_notification_set+0x56>
  {
    reg.lir = (uint8_t) val;
 80013c4:	1cfb      	adds	r3, r7, #3
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2201      	movs	r2, #1
 80013ca:	4013      	ands	r3, r2
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	193b      	adds	r3, r7, r4
 80013d0:	2101      	movs	r1, #1
 80013d2:	400a      	ands	r2, r1
 80013d4:	0110      	lsls	r0, r2, #4
 80013d6:	781a      	ldrb	r2, [r3, #0]
 80013d8:	2110      	movs	r1, #16
 80013da:	438a      	bics	r2, r1
 80013dc:	1c11      	adds	r1, r2, #0
 80013de:	1c02      	adds	r2, r0, #0
 80013e0:	430a      	orrs	r2, r1
 80013e2:	701a      	strb	r2, [r3, #0]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL3, (uint8_t *) &reg, 1);
 80013e4:	193a      	adds	r2, r7, r4
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	2301      	movs	r3, #1
 80013ea:	2122      	movs	r1, #34	; 0x22
 80013ec:	f7ff fdd2 	bl	8000f94 <iis2dlpc_write_reg>
 80013f0:	0003      	movs	r3, r0
 80013f2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80013f4:	68fb      	ldr	r3, [r7, #12]
}
 80013f6:	0018      	movs	r0, r3
 80013f8:	46bd      	mov	sp, r7
 80013fa:	b005      	add	sp, #20
 80013fc:	bd90      	pop	{r4, r7, pc}

080013fe <iis2dlpc_pin_int1_route_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_pin_int1_route_set(stmdev_ctx_t *ctx,
                                    iis2dlpc_ctrl4_int1_pad_ctrl_t *val)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b086      	sub	sp, #24
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
 8001406:	6039      	str	r1, [r7, #0]
  iis2dlpc_ctrl5_int2_pad_ctrl_t ctrl5_int2_pad_ctrl;
  iis2dlpc_ctrl7_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL5_INT2_PAD_CTRL,
 8001408:	2310      	movs	r3, #16
 800140a:	18fa      	adds	r2, r7, r3
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	2301      	movs	r3, #1
 8001410:	2124      	movs	r1, #36	; 0x24
 8001412:	f7ff fd9e 	bl	8000f52 <iis2dlpc_read_reg>
 8001416:	0003      	movs	r3, r0
 8001418:	617b      	str	r3, [r7, #20]
                          (uint8_t *) &ctrl5_int2_pad_ctrl, 1);

  if (ret == 0)
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d108      	bne.n	8001432 <iis2dlpc_pin_int1_route_set+0x34>
  {
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL7, (uint8_t *) &reg, 1);
 8001420:	230c      	movs	r3, #12
 8001422:	18fa      	adds	r2, r7, r3
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	2301      	movs	r3, #1
 8001428:	213f      	movs	r1, #63	; 0x3f
 800142a:	f7ff fd92 	bl	8000f52 <iis2dlpc_read_reg>
 800142e:	0003      	movs	r3, r0
 8001430:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d146      	bne.n	80014c6 <iis2dlpc_pin_int1_route_set+0xc8>
  {
    if ((ctrl5_int2_pad_ctrl.int2_sleep_state
 8001438:	2110      	movs	r1, #16
 800143a:	187b      	adds	r3, r7, r1
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	061b      	lsls	r3, r3, #24
 8001440:	0fdb      	lsrs	r3, r3, #31
 8001442:	b2da      	uxtb	r2, r3
         | ctrl5_int2_pad_ctrl.int2_sleep_chg
 8001444:	187b      	adds	r3, r7, r1
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	065b      	lsls	r3, r3, #25
 800144a:	0fdb      	lsrs	r3, r3, #31
 800144c:	b2db      	uxtb	r3, r3
 800144e:	4313      	orrs	r3, r2
 8001450:	b2da      	uxtb	r2, r3
         | val->int1_tap
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	071b      	lsls	r3, r3, #28
 8001458:	0fdb      	lsrs	r3, r3, #31
 800145a:	b2db      	uxtb	r3, r3
 800145c:	4313      	orrs	r3, r2
 800145e:	b2da      	uxtb	r2, r3
         | val->int1_ff
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	06db      	lsls	r3, r3, #27
 8001466:	0fdb      	lsrs	r3, r3, #31
 8001468:	b2db      	uxtb	r3, r3
 800146a:	4313      	orrs	r3, r2
 800146c:	b2da      	uxtb	r2, r3
         | val->int1_wu
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	069b      	lsls	r3, r3, #26
 8001474:	0fdb      	lsrs	r3, r3, #31
 8001476:	b2db      	uxtb	r3, r3
 8001478:	4313      	orrs	r3, r2
 800147a:	b2da      	uxtb	r2, r3
         | val->int1_single_tap
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	065b      	lsls	r3, r3, #25
 8001482:	0fdb      	lsrs	r3, r3, #31
 8001484:	b2db      	uxtb	r3, r3
 8001486:	4313      	orrs	r3, r2
 8001488:	b2da      	uxtb	r2, r3
         | val->int1_6d) != PROPERTY_DISABLE)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	061b      	lsls	r3, r3, #24
 8001490:	0fdb      	lsrs	r3, r3, #31
 8001492:	b2db      	uxtb	r3, r3
 8001494:	4313      	orrs	r3, r2
 8001496:	b2db      	uxtb	r3, r3
    if ((ctrl5_int2_pad_ctrl.int2_sleep_state
 8001498:	2b00      	cmp	r3, #0
 800149a:	d006      	beq.n	80014aa <iis2dlpc_pin_int1_route_set+0xac>
    {
      reg.interrupts_enable = PROPERTY_ENABLE;
 800149c:	230c      	movs	r3, #12
 800149e:	18fb      	adds	r3, r7, r3
 80014a0:	781a      	ldrb	r2, [r3, #0]
 80014a2:	2120      	movs	r1, #32
 80014a4:	430a      	orrs	r2, r1
 80014a6:	701a      	strb	r2, [r3, #0]
 80014a8:	e005      	b.n	80014b6 <iis2dlpc_pin_int1_route_set+0xb8>
    }

    else
    {
      reg.interrupts_enable = PROPERTY_DISABLE;
 80014aa:	230c      	movs	r3, #12
 80014ac:	18fb      	adds	r3, r7, r3
 80014ae:	781a      	ldrb	r2, [r3, #0]
 80014b0:	2120      	movs	r1, #32
 80014b2:	438a      	bics	r2, r1
 80014b4:	701a      	strb	r2, [r3, #0]
    }

    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL4_INT1_PAD_CTRL,
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	2301      	movs	r3, #1
 80014bc:	2123      	movs	r1, #35	; 0x23
 80014be:	f7ff fd69 	bl	8000f94 <iis2dlpc_write_reg>
 80014c2:	0003      	movs	r3, r0
 80014c4:	617b      	str	r3, [r7, #20]
                             (uint8_t *) val, 1);
  }

  if (ret == 0)
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d108      	bne.n	80014de <iis2dlpc_pin_int1_route_set+0xe0>
  {
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL7, (uint8_t *) &reg, 1);
 80014cc:	230c      	movs	r3, #12
 80014ce:	18fa      	adds	r2, r7, r3
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	2301      	movs	r3, #1
 80014d4:	213f      	movs	r1, #63	; 0x3f
 80014d6:	f7ff fd5d 	bl	8000f94 <iis2dlpc_write_reg>
 80014da:	0003      	movs	r3, r0
 80014dc:	617b      	str	r3, [r7, #20]
  else
  {
    ret = ret;
  }

  return ret;
 80014de:	697b      	ldr	r3, [r7, #20]
}
 80014e0:	0018      	movs	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	b006      	add	sp, #24
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <iis2dlpc_pin_int1_route_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_pin_int1_route_get(stmdev_ctx_t *ctx,
                                    iis2dlpc_ctrl4_int1_pad_ctrl_t *val)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL4_INT1_PAD_CTRL,
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	2301      	movs	r3, #1
 80014f8:	2123      	movs	r1, #35	; 0x23
 80014fa:	f7ff fd2a 	bl	8000f52 <iis2dlpc_read_reg>
 80014fe:	0003      	movs	r3, r0
 8001500:	60fb      	str	r3, [r7, #12]
                          (uint8_t *) val, 1);

  return ret;
 8001502:	68fb      	ldr	r3, [r7, #12]
}
 8001504:	0018      	movs	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	b004      	add	sp, #16
 800150a:	bd80      	pop	{r7, pc}

0800150c <iis2dlpc_wkup_threshold_set>:
  * @param  val      change the values of wk_ths in reg WAKE_UP_THS
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_wkup_threshold_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800150c:	b590      	push	{r4, r7, lr}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	000a      	movs	r2, r1
 8001516:	1cfb      	adds	r3, r7, #3
 8001518:	701a      	strb	r2, [r3, #0]
  iis2dlpc_wake_up_ths_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_WAKE_UP_THS, (uint8_t *) &reg, 1);
 800151a:	2408      	movs	r4, #8
 800151c:	193a      	adds	r2, r7, r4
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	2301      	movs	r3, #1
 8001522:	2134      	movs	r1, #52	; 0x34
 8001524:	f7ff fd15 	bl	8000f52 <iis2dlpc_read_reg>
 8001528:	0003      	movs	r3, r0
 800152a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d117      	bne.n	8001562 <iis2dlpc_wkup_threshold_set+0x56>
  {
    reg.wk_ths = val;
 8001532:	1cfb      	adds	r3, r7, #3
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	223f      	movs	r2, #63	; 0x3f
 8001538:	4013      	ands	r3, r2
 800153a:	b2da      	uxtb	r2, r3
 800153c:	193b      	adds	r3, r7, r4
 800153e:	213f      	movs	r1, #63	; 0x3f
 8001540:	400a      	ands	r2, r1
 8001542:	0010      	movs	r0, r2
 8001544:	781a      	ldrb	r2, [r3, #0]
 8001546:	213f      	movs	r1, #63	; 0x3f
 8001548:	438a      	bics	r2, r1
 800154a:	1c11      	adds	r1, r2, #0
 800154c:	1c02      	adds	r2, r0, #0
 800154e:	430a      	orrs	r2, r1
 8001550:	701a      	strb	r2, [r3, #0]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_WAKE_UP_THS, (uint8_t *) &reg, 1);
 8001552:	193a      	adds	r2, r7, r4
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	2301      	movs	r3, #1
 8001558:	2134      	movs	r1, #52	; 0x34
 800155a:	f7ff fd1b 	bl	8000f94 <iis2dlpc_write_reg>
 800155e:	0003      	movs	r3, r0
 8001560:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001562:	68fb      	ldr	r3, [r7, #12]
}
 8001564:	0018      	movs	r0, r3
 8001566:	46bd      	mov	sp, r7
 8001568:	b005      	add	sp, #20
 800156a:	bd90      	pop	{r4, r7, pc}

0800156c <iis2dlpc_wkup_threshold_get>:
  * @param  val      change the values of wk_ths in reg WAKE_UP_THS
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_wkup_threshold_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800156c:	b590      	push	{r4, r7, lr}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  iis2dlpc_wake_up_ths_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_WAKE_UP_THS, (uint8_t *) &reg, 1);
 8001576:	2408      	movs	r4, #8
 8001578:	193a      	adds	r2, r7, r4
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	2301      	movs	r3, #1
 800157e:	2134      	movs	r1, #52	; 0x34
 8001580:	f7ff fce7 	bl	8000f52 <iis2dlpc_read_reg>
 8001584:	0003      	movs	r3, r0
 8001586:	60fb      	str	r3, [r7, #12]
  *val = reg.wk_ths;
 8001588:	193b      	adds	r3, r7, r4
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	069b      	lsls	r3, r3, #26
 800158e:	0e9b      	lsrs	r3, r3, #26
 8001590:	b2db      	uxtb	r3, r3
 8001592:	001a      	movs	r2, r3
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	701a      	strb	r2, [r3, #0]

  return ret;
 8001598:	68fb      	ldr	r3, [r7, #12]
}
 800159a:	0018      	movs	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	b005      	add	sp, #20
 80015a0:	bd90      	pop	{r4, r7, pc}

080015a2 <iis2dlpc_wkup_dur_set>:
  * @param  val      change the values of wake_dur in reg WAKE_UP_DUR
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_wkup_dur_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80015a2:	b590      	push	{r4, r7, lr}
 80015a4:	b085      	sub	sp, #20
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
 80015aa:	000a      	movs	r2, r1
 80015ac:	1cfb      	adds	r3, r7, #3
 80015ae:	701a      	strb	r2, [r3, #0]
  iis2dlpc_wake_up_dur_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_WAKE_UP_DUR, (uint8_t *) &reg, 1);
 80015b0:	2408      	movs	r4, #8
 80015b2:	193a      	adds	r2, r7, r4
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	2301      	movs	r3, #1
 80015b8:	2135      	movs	r1, #53	; 0x35
 80015ba:	f7ff fcca 	bl	8000f52 <iis2dlpc_read_reg>
 80015be:	0003      	movs	r3, r0
 80015c0:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d117      	bne.n	80015f8 <iis2dlpc_wkup_dur_set+0x56>
  {
    reg.wake_dur = val;
 80015c8:	1cfb      	adds	r3, r7, #3
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2203      	movs	r2, #3
 80015ce:	4013      	ands	r3, r2
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	193b      	adds	r3, r7, r4
 80015d4:	2103      	movs	r1, #3
 80015d6:	400a      	ands	r2, r1
 80015d8:	0150      	lsls	r0, r2, #5
 80015da:	781a      	ldrb	r2, [r3, #0]
 80015dc:	2160      	movs	r1, #96	; 0x60
 80015de:	438a      	bics	r2, r1
 80015e0:	1c11      	adds	r1, r2, #0
 80015e2:	1c02      	adds	r2, r0, #0
 80015e4:	430a      	orrs	r2, r1
 80015e6:	701a      	strb	r2, [r3, #0]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_WAKE_UP_DUR, (uint8_t *) &reg, 1);
 80015e8:	193a      	adds	r2, r7, r4
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	2301      	movs	r3, #1
 80015ee:	2135      	movs	r1, #53	; 0x35
 80015f0:	f7ff fcd0 	bl	8000f94 <iis2dlpc_write_reg>
 80015f4:	0003      	movs	r3, r0
 80015f6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80015f8:	68fb      	ldr	r3, [r7, #12]
}
 80015fa:	0018      	movs	r0, r3
 80015fc:	46bd      	mov	sp, r7
 80015fe:	b005      	add	sp, #20
 8001600:	bd90      	pop	{r4, r7, pc}
	...

08001604 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800160a:	1dfb      	adds	r3, r7, #7
 800160c:	2200      	movs	r2, #0
 800160e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001610:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <HAL_Init+0x3c>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <HAL_Init+0x3c>)
 8001616:	2140      	movs	r1, #64	; 0x40
 8001618:	430a      	orrs	r2, r1
 800161a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800161c:	2003      	movs	r0, #3
 800161e:	f000 f811 	bl	8001644 <HAL_InitTick>
 8001622:	1e03      	subs	r3, r0, #0
 8001624:	d003      	beq.n	800162e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001626:	1dfb      	adds	r3, r7, #7
 8001628:	2201      	movs	r2, #1
 800162a:	701a      	strb	r2, [r3, #0]
 800162c:	e001      	b.n	8001632 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800162e:	f7ff fb6d 	bl	8000d0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001632:	1dfb      	adds	r3, r7, #7
 8001634:	781b      	ldrb	r3, [r3, #0]
}
 8001636:	0018      	movs	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	b002      	add	sp, #8
 800163c:	bd80      	pop	{r7, pc}
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	40022000 	.word	0x40022000

08001644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001644:	b590      	push	{r4, r7, lr}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800164c:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <HAL_InitTick+0x5c>)
 800164e:	681c      	ldr	r4, [r3, #0]
 8001650:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <HAL_InitTick+0x60>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	0019      	movs	r1, r3
 8001656:	23fa      	movs	r3, #250	; 0xfa
 8001658:	0098      	lsls	r0, r3, #2
 800165a:	f7fe fd67 	bl	800012c <__udivsi3>
 800165e:	0003      	movs	r3, r0
 8001660:	0019      	movs	r1, r3
 8001662:	0020      	movs	r0, r4
 8001664:	f7fe fd62 	bl	800012c <__udivsi3>
 8001668:	0003      	movs	r3, r0
 800166a:	0018      	movs	r0, r3
 800166c:	f000 f92f 	bl	80018ce <HAL_SYSTICK_Config>
 8001670:	1e03      	subs	r3, r0, #0
 8001672:	d001      	beq.n	8001678 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e00f      	b.n	8001698 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b03      	cmp	r3, #3
 800167c:	d80b      	bhi.n	8001696 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	2301      	movs	r3, #1
 8001682:	425b      	negs	r3, r3
 8001684:	2200      	movs	r2, #0
 8001686:	0018      	movs	r0, r3
 8001688:	f000 f8fc 	bl	8001884 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_InitTick+0x64>)
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001692:	2300      	movs	r3, #0
 8001694:	e000      	b.n	8001698 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
}
 8001698:	0018      	movs	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	b003      	add	sp, #12
 800169e:	bd90      	pop	{r4, r7, pc}
 80016a0:	20000000 	.word	0x20000000
 80016a4:	20000008 	.word	0x20000008
 80016a8:	20000004 	.word	0x20000004

080016ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <HAL_IncTick+0x1c>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	001a      	movs	r2, r3
 80016b6:	4b05      	ldr	r3, [pc, #20]	; (80016cc <HAL_IncTick+0x20>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	18d2      	adds	r2, r2, r3
 80016bc:	4b03      	ldr	r3, [pc, #12]	; (80016cc <HAL_IncTick+0x20>)
 80016be:	601a      	str	r2, [r3, #0]
}
 80016c0:	46c0      	nop			; (mov r8, r8)
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	20000008 	.word	0x20000008
 80016cc:	200002c0 	.word	0x200002c0

080016d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  return uwTick;
 80016d4:	4b02      	ldr	r3, [pc, #8]	; (80016e0 <HAL_GetTick+0x10>)
 80016d6:	681b      	ldr	r3, [r3, #0]
}
 80016d8:	0018      	movs	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	46c0      	nop			; (mov r8, r8)
 80016e0:	200002c0 	.word	0x200002c0

080016e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016ec:	f7ff fff0 	bl	80016d0 <HAL_GetTick>
 80016f0:	0003      	movs	r3, r0
 80016f2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	3301      	adds	r3, #1
 80016fc:	d005      	beq.n	800170a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016fe:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <HAL_Delay+0x44>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	001a      	movs	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	189b      	adds	r3, r3, r2
 8001708:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	f7ff ffe0 	bl	80016d0 <HAL_GetTick>
 8001710:	0002      	movs	r2, r0
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	429a      	cmp	r2, r3
 800171a:	d8f7      	bhi.n	800170c <HAL_Delay+0x28>
  {
  }
}
 800171c:	46c0      	nop			; (mov r8, r8)
 800171e:	46c0      	nop			; (mov r8, r8)
 8001720:	46bd      	mov	sp, r7
 8001722:	b004      	add	sp, #16
 8001724:	bd80      	pop	{r7, pc}
 8001726:	46c0      	nop			; (mov r8, r8)
 8001728:	20000008 	.word	0x20000008

0800172c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	0002      	movs	r2, r0
 8001734:	1dfb      	adds	r3, r7, #7
 8001736:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001738:	1dfb      	adds	r3, r7, #7
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b7f      	cmp	r3, #127	; 0x7f
 800173e:	d809      	bhi.n	8001754 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001740:	1dfb      	adds	r3, r7, #7
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	001a      	movs	r2, r3
 8001746:	231f      	movs	r3, #31
 8001748:	401a      	ands	r2, r3
 800174a:	4b04      	ldr	r3, [pc, #16]	; (800175c <__NVIC_EnableIRQ+0x30>)
 800174c:	2101      	movs	r1, #1
 800174e:	4091      	lsls	r1, r2
 8001750:	000a      	movs	r2, r1
 8001752:	601a      	str	r2, [r3, #0]
  }
}
 8001754:	46c0      	nop			; (mov r8, r8)
 8001756:	46bd      	mov	sp, r7
 8001758:	b002      	add	sp, #8
 800175a:	bd80      	pop	{r7, pc}
 800175c:	e000e100 	.word	0xe000e100

08001760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001760:	b590      	push	{r4, r7, lr}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	0002      	movs	r2, r0
 8001768:	6039      	str	r1, [r7, #0]
 800176a:	1dfb      	adds	r3, r7, #7
 800176c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800176e:	1dfb      	adds	r3, r7, #7
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b7f      	cmp	r3, #127	; 0x7f
 8001774:	d828      	bhi.n	80017c8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001776:	4a2f      	ldr	r2, [pc, #188]	; (8001834 <__NVIC_SetPriority+0xd4>)
 8001778:	1dfb      	adds	r3, r7, #7
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	b25b      	sxtb	r3, r3
 800177e:	089b      	lsrs	r3, r3, #2
 8001780:	33c0      	adds	r3, #192	; 0xc0
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	589b      	ldr	r3, [r3, r2]
 8001786:	1dfa      	adds	r2, r7, #7
 8001788:	7812      	ldrb	r2, [r2, #0]
 800178a:	0011      	movs	r1, r2
 800178c:	2203      	movs	r2, #3
 800178e:	400a      	ands	r2, r1
 8001790:	00d2      	lsls	r2, r2, #3
 8001792:	21ff      	movs	r1, #255	; 0xff
 8001794:	4091      	lsls	r1, r2
 8001796:	000a      	movs	r2, r1
 8001798:	43d2      	mvns	r2, r2
 800179a:	401a      	ands	r2, r3
 800179c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	019b      	lsls	r3, r3, #6
 80017a2:	22ff      	movs	r2, #255	; 0xff
 80017a4:	401a      	ands	r2, r3
 80017a6:	1dfb      	adds	r3, r7, #7
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	0018      	movs	r0, r3
 80017ac:	2303      	movs	r3, #3
 80017ae:	4003      	ands	r3, r0
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017b4:	481f      	ldr	r0, [pc, #124]	; (8001834 <__NVIC_SetPriority+0xd4>)
 80017b6:	1dfb      	adds	r3, r7, #7
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	b25b      	sxtb	r3, r3
 80017bc:	089b      	lsrs	r3, r3, #2
 80017be:	430a      	orrs	r2, r1
 80017c0:	33c0      	adds	r3, #192	; 0xc0
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80017c6:	e031      	b.n	800182c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017c8:	4a1b      	ldr	r2, [pc, #108]	; (8001838 <__NVIC_SetPriority+0xd8>)
 80017ca:	1dfb      	adds	r3, r7, #7
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	0019      	movs	r1, r3
 80017d0:	230f      	movs	r3, #15
 80017d2:	400b      	ands	r3, r1
 80017d4:	3b08      	subs	r3, #8
 80017d6:	089b      	lsrs	r3, r3, #2
 80017d8:	3306      	adds	r3, #6
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	18d3      	adds	r3, r2, r3
 80017de:	3304      	adds	r3, #4
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	1dfa      	adds	r2, r7, #7
 80017e4:	7812      	ldrb	r2, [r2, #0]
 80017e6:	0011      	movs	r1, r2
 80017e8:	2203      	movs	r2, #3
 80017ea:	400a      	ands	r2, r1
 80017ec:	00d2      	lsls	r2, r2, #3
 80017ee:	21ff      	movs	r1, #255	; 0xff
 80017f0:	4091      	lsls	r1, r2
 80017f2:	000a      	movs	r2, r1
 80017f4:	43d2      	mvns	r2, r2
 80017f6:	401a      	ands	r2, r3
 80017f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	019b      	lsls	r3, r3, #6
 80017fe:	22ff      	movs	r2, #255	; 0xff
 8001800:	401a      	ands	r2, r3
 8001802:	1dfb      	adds	r3, r7, #7
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	0018      	movs	r0, r3
 8001808:	2303      	movs	r3, #3
 800180a:	4003      	ands	r3, r0
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001810:	4809      	ldr	r0, [pc, #36]	; (8001838 <__NVIC_SetPriority+0xd8>)
 8001812:	1dfb      	adds	r3, r7, #7
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	001c      	movs	r4, r3
 8001818:	230f      	movs	r3, #15
 800181a:	4023      	ands	r3, r4
 800181c:	3b08      	subs	r3, #8
 800181e:	089b      	lsrs	r3, r3, #2
 8001820:	430a      	orrs	r2, r1
 8001822:	3306      	adds	r3, #6
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	18c3      	adds	r3, r0, r3
 8001828:	3304      	adds	r3, #4
 800182a:	601a      	str	r2, [r3, #0]
}
 800182c:	46c0      	nop			; (mov r8, r8)
 800182e:	46bd      	mov	sp, r7
 8001830:	b003      	add	sp, #12
 8001832:	bd90      	pop	{r4, r7, pc}
 8001834:	e000e100 	.word	0xe000e100
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	1e5a      	subs	r2, r3, #1
 8001848:	2380      	movs	r3, #128	; 0x80
 800184a:	045b      	lsls	r3, r3, #17
 800184c:	429a      	cmp	r2, r3
 800184e:	d301      	bcc.n	8001854 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001850:	2301      	movs	r3, #1
 8001852:	e010      	b.n	8001876 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001854:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <SysTick_Config+0x44>)
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	3a01      	subs	r2, #1
 800185a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800185c:	2301      	movs	r3, #1
 800185e:	425b      	negs	r3, r3
 8001860:	2103      	movs	r1, #3
 8001862:	0018      	movs	r0, r3
 8001864:	f7ff ff7c 	bl	8001760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001868:	4b05      	ldr	r3, [pc, #20]	; (8001880 <SysTick_Config+0x44>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186e:	4b04      	ldr	r3, [pc, #16]	; (8001880 <SysTick_Config+0x44>)
 8001870:	2207      	movs	r2, #7
 8001872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001874:	2300      	movs	r3, #0
}
 8001876:	0018      	movs	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	b002      	add	sp, #8
 800187c:	bd80      	pop	{r7, pc}
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	e000e010 	.word	0xe000e010

08001884 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	607a      	str	r2, [r7, #4]
 800188e:	210f      	movs	r1, #15
 8001890:	187b      	adds	r3, r7, r1
 8001892:	1c02      	adds	r2, r0, #0
 8001894:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	187b      	adds	r3, r7, r1
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	b25b      	sxtb	r3, r3
 800189e:	0011      	movs	r1, r2
 80018a0:	0018      	movs	r0, r3
 80018a2:	f7ff ff5d 	bl	8001760 <__NVIC_SetPriority>
}
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	46bd      	mov	sp, r7
 80018aa:	b004      	add	sp, #16
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	0002      	movs	r2, r0
 80018b6:	1dfb      	adds	r3, r7, #7
 80018b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018ba:	1dfb      	adds	r3, r7, #7
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	b25b      	sxtb	r3, r3
 80018c0:	0018      	movs	r0, r3
 80018c2:	f7ff ff33 	bl	800172c <__NVIC_EnableIRQ>
}
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	46bd      	mov	sp, r7
 80018ca:	b002      	add	sp, #8
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	0018      	movs	r0, r3
 80018da:	f7ff ffaf 	bl	800183c <SysTick_Config>
 80018de:	0003      	movs	r3, r0
}
 80018e0:	0018      	movs	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	b002      	add	sp, #8
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80018fe:	e155      	b.n	8001bac <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2101      	movs	r1, #1
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	4091      	lsls	r1, r2
 800190a:	000a      	movs	r2, r1
 800190c:	4013      	ands	r3, r2
 800190e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d100      	bne.n	8001918 <HAL_GPIO_Init+0x30>
 8001916:	e146      	b.n	8001ba6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2203      	movs	r2, #3
 800191e:	4013      	ands	r3, r2
 8001920:	2b01      	cmp	r3, #1
 8001922:	d005      	beq.n	8001930 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2203      	movs	r2, #3
 800192a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800192c:	2b02      	cmp	r3, #2
 800192e:	d130      	bne.n	8001992 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	2203      	movs	r2, #3
 800193c:	409a      	lsls	r2, r3
 800193e:	0013      	movs	r3, r2
 8001940:	43da      	mvns	r2, r3
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	4013      	ands	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	68da      	ldr	r2, [r3, #12]
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	409a      	lsls	r2, r3
 8001952:	0013      	movs	r3, r2
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	4313      	orrs	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001966:	2201      	movs	r2, #1
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	409a      	lsls	r2, r3
 800196c:	0013      	movs	r3, r2
 800196e:	43da      	mvns	r2, r3
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	4013      	ands	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	091b      	lsrs	r3, r3, #4
 800197c:	2201      	movs	r2, #1
 800197e:	401a      	ands	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	409a      	lsls	r2, r3
 8001984:	0013      	movs	r3, r2
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4313      	orrs	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2203      	movs	r2, #3
 8001998:	4013      	ands	r3, r2
 800199a:	2b03      	cmp	r3, #3
 800199c:	d017      	beq.n	80019ce <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	2203      	movs	r2, #3
 80019aa:	409a      	lsls	r2, r3
 80019ac:	0013      	movs	r3, r2
 80019ae:	43da      	mvns	r2, r3
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	4013      	ands	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	409a      	lsls	r2, r3
 80019c0:	0013      	movs	r3, r2
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2203      	movs	r2, #3
 80019d4:	4013      	ands	r3, r2
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d123      	bne.n	8001a22 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	08da      	lsrs	r2, r3, #3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3208      	adds	r2, #8
 80019e2:	0092      	lsls	r2, r2, #2
 80019e4:	58d3      	ldr	r3, [r2, r3]
 80019e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	2207      	movs	r2, #7
 80019ec:	4013      	ands	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	220f      	movs	r2, #15
 80019f2:	409a      	lsls	r2, r3
 80019f4:	0013      	movs	r3, r2
 80019f6:	43da      	mvns	r2, r3
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	4013      	ands	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	691a      	ldr	r2, [r3, #16]
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	2107      	movs	r1, #7
 8001a06:	400b      	ands	r3, r1
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	409a      	lsls	r2, r3
 8001a0c:	0013      	movs	r3, r2
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	08da      	lsrs	r2, r3, #3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3208      	adds	r2, #8
 8001a1c:	0092      	lsls	r2, r2, #2
 8001a1e:	6939      	ldr	r1, [r7, #16]
 8001a20:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	409a      	lsls	r2, r3
 8001a30:	0013      	movs	r3, r2
 8001a32:	43da      	mvns	r2, r3
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	4013      	ands	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2203      	movs	r2, #3
 8001a40:	401a      	ands	r2, r3
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	409a      	lsls	r2, r3
 8001a48:	0013      	movs	r3, r2
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	23c0      	movs	r3, #192	; 0xc0
 8001a5c:	029b      	lsls	r3, r3, #10
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d100      	bne.n	8001a64 <HAL_GPIO_Init+0x17c>
 8001a62:	e0a0      	b.n	8001ba6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a64:	4b57      	ldr	r3, [pc, #348]	; (8001bc4 <HAL_GPIO_Init+0x2dc>)
 8001a66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a68:	4b56      	ldr	r3, [pc, #344]	; (8001bc4 <HAL_GPIO_Init+0x2dc>)
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a70:	4a55      	ldr	r2, [pc, #340]	; (8001bc8 <HAL_GPIO_Init+0x2e0>)
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	089b      	lsrs	r3, r3, #2
 8001a76:	3302      	adds	r3, #2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	589b      	ldr	r3, [r3, r2]
 8001a7c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	2203      	movs	r2, #3
 8001a82:	4013      	ands	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	220f      	movs	r2, #15
 8001a88:	409a      	lsls	r2, r3
 8001a8a:	0013      	movs	r3, r2
 8001a8c:	43da      	mvns	r2, r3
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	23a0      	movs	r3, #160	; 0xa0
 8001a98:	05db      	lsls	r3, r3, #23
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d01f      	beq.n	8001ade <HAL_GPIO_Init+0x1f6>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a4a      	ldr	r2, [pc, #296]	; (8001bcc <HAL_GPIO_Init+0x2e4>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d019      	beq.n	8001ada <HAL_GPIO_Init+0x1f2>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a49      	ldr	r2, [pc, #292]	; (8001bd0 <HAL_GPIO_Init+0x2e8>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d013      	beq.n	8001ad6 <HAL_GPIO_Init+0x1ee>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a48      	ldr	r2, [pc, #288]	; (8001bd4 <HAL_GPIO_Init+0x2ec>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d00d      	beq.n	8001ad2 <HAL_GPIO_Init+0x1ea>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a47      	ldr	r2, [pc, #284]	; (8001bd8 <HAL_GPIO_Init+0x2f0>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d007      	beq.n	8001ace <HAL_GPIO_Init+0x1e6>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a46      	ldr	r2, [pc, #280]	; (8001bdc <HAL_GPIO_Init+0x2f4>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d101      	bne.n	8001aca <HAL_GPIO_Init+0x1e2>
 8001ac6:	2305      	movs	r3, #5
 8001ac8:	e00a      	b.n	8001ae0 <HAL_GPIO_Init+0x1f8>
 8001aca:	2306      	movs	r3, #6
 8001acc:	e008      	b.n	8001ae0 <HAL_GPIO_Init+0x1f8>
 8001ace:	2304      	movs	r3, #4
 8001ad0:	e006      	b.n	8001ae0 <HAL_GPIO_Init+0x1f8>
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e004      	b.n	8001ae0 <HAL_GPIO_Init+0x1f8>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e002      	b.n	8001ae0 <HAL_GPIO_Init+0x1f8>
 8001ada:	2301      	movs	r3, #1
 8001adc:	e000      	b.n	8001ae0 <HAL_GPIO_Init+0x1f8>
 8001ade:	2300      	movs	r3, #0
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	2103      	movs	r1, #3
 8001ae4:	400a      	ands	r2, r1
 8001ae6:	0092      	lsls	r2, r2, #2
 8001ae8:	4093      	lsls	r3, r2
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001af0:	4935      	ldr	r1, [pc, #212]	; (8001bc8 <HAL_GPIO_Init+0x2e0>)
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	089b      	lsrs	r3, r3, #2
 8001af6:	3302      	adds	r3, #2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001afe:	4b38      	ldr	r3, [pc, #224]	; (8001be0 <HAL_GPIO_Init+0x2f8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	43da      	mvns	r2, r3
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685a      	ldr	r2, [r3, #4]
 8001b12:	2380      	movs	r3, #128	; 0x80
 8001b14:	025b      	lsls	r3, r3, #9
 8001b16:	4013      	ands	r3, r2
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b22:	4b2f      	ldr	r3, [pc, #188]	; (8001be0 <HAL_GPIO_Init+0x2f8>)
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001b28:	4b2d      	ldr	r3, [pc, #180]	; (8001be0 <HAL_GPIO_Init+0x2f8>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	43da      	mvns	r2, r3
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	4013      	ands	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	2380      	movs	r3, #128	; 0x80
 8001b3e:	029b      	lsls	r3, r3, #10
 8001b40:	4013      	ands	r3, r2
 8001b42:	d003      	beq.n	8001b4c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b4c:	4b24      	ldr	r3, [pc, #144]	; (8001be0 <HAL_GPIO_Init+0x2f8>)
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b52:	4b23      	ldr	r3, [pc, #140]	; (8001be0 <HAL_GPIO_Init+0x2f8>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	2380      	movs	r3, #128	; 0x80
 8001b68:	035b      	lsls	r3, r3, #13
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d003      	beq.n	8001b76 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b76:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <HAL_GPIO_Init+0x2f8>)
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001b7c:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <HAL_GPIO_Init+0x2f8>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	43da      	mvns	r2, r3
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	2380      	movs	r3, #128	; 0x80
 8001b92:	039b      	lsls	r3, r3, #14
 8001b94:	4013      	ands	r3, r2
 8001b96:	d003      	beq.n	8001ba0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ba0:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <HAL_GPIO_Init+0x2f8>)
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	40da      	lsrs	r2, r3
 8001bb4:	1e13      	subs	r3, r2, #0
 8001bb6:	d000      	beq.n	8001bba <HAL_GPIO_Init+0x2d2>
 8001bb8:	e6a2      	b.n	8001900 <HAL_GPIO_Init+0x18>
  }
}
 8001bba:	46c0      	nop			; (mov r8, r8)
 8001bbc:	46c0      	nop			; (mov r8, r8)
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	b006      	add	sp, #24
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40010000 	.word	0x40010000
 8001bcc:	50000400 	.word	0x50000400
 8001bd0:	50000800 	.word	0x50000800
 8001bd4:	50000c00 	.word	0x50000c00
 8001bd8:	50001000 	.word	0x50001000
 8001bdc:	50001c00 	.word	0x50001c00
 8001be0:	40010400 	.word	0x40010400

08001be4 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	000a      	movs	r2, r1
 8001bee:	1cbb      	adds	r3, r7, #2
 8001bf0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	1cba      	adds	r2, r7, #2
 8001bf8:	8812      	ldrh	r2, [r2, #0]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d004      	beq.n	8001c08 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001bfe:	230f      	movs	r3, #15
 8001c00:	18fb      	adds	r3, r7, r3
 8001c02:	2201      	movs	r2, #1
 8001c04:	701a      	strb	r2, [r3, #0]
 8001c06:	e003      	b.n	8001c10 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c08:	230f      	movs	r3, #15
 8001c0a:	18fb      	adds	r3, r7, r3
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001c10:	230f      	movs	r3, #15
 8001c12:	18fb      	adds	r3, r7, r3
 8001c14:	781b      	ldrb	r3, [r3, #0]
}
 8001c16:	0018      	movs	r0, r3
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	b004      	add	sp, #16
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
 8001c26:	0008      	movs	r0, r1
 8001c28:	0011      	movs	r1, r2
 8001c2a:	1cbb      	adds	r3, r7, #2
 8001c2c:	1c02      	adds	r2, r0, #0
 8001c2e:	801a      	strh	r2, [r3, #0]
 8001c30:	1c7b      	adds	r3, r7, #1
 8001c32:	1c0a      	adds	r2, r1, #0
 8001c34:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c36:	1c7b      	adds	r3, r7, #1
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d004      	beq.n	8001c48 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c3e:	1cbb      	adds	r3, r7, #2
 8001c40:	881a      	ldrh	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001c46:	e003      	b.n	8001c50 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001c48:	1cbb      	adds	r3, r7, #2
 8001c4a:	881a      	ldrh	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c50:	46c0      	nop			; (mov r8, r8)
 8001c52:	46bd      	mov	sp, r7
 8001c54:	b002      	add	sp, #8
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	0002      	movs	r2, r0
 8001c60:	1dbb      	adds	r3, r7, #6
 8001c62:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001c66:	695b      	ldr	r3, [r3, #20]
 8001c68:	1dba      	adds	r2, r7, #6
 8001c6a:	8812      	ldrh	r2, [r2, #0]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	d008      	beq.n	8001c82 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c70:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001c72:	1dba      	adds	r2, r7, #6
 8001c74:	8812      	ldrh	r2, [r2, #0]
 8001c76:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c78:	1dbb      	adds	r3, r7, #6
 8001c7a:	881b      	ldrh	r3, [r3, #0]
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f7ff f81d 	bl	8000cbc <HAL_GPIO_EXTI_Callback>
  }
}
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	46bd      	mov	sp, r7
 8001c86:	b002      	add	sp, #8
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	40010400 	.word	0x40010400

08001c90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c90:	b5b0      	push	{r4, r5, r7, lr}
 8001c92:	b08a      	sub	sp, #40	; 0x28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d102      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	f000 fbbf 	bl	8002422 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ca4:	4bc9      	ldr	r3, [pc, #804]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	220c      	movs	r2, #12
 8001caa:	4013      	ands	r3, r2
 8001cac:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cae:	4bc7      	ldr	r3, [pc, #796]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001cb0:	68da      	ldr	r2, [r3, #12]
 8001cb2:	2380      	movs	r3, #128	; 0x80
 8001cb4:	025b      	lsls	r3, r3, #9
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d100      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x36>
 8001cc4:	e07e      	b.n	8001dc4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d007      	beq.n	8001cdc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	2b0c      	cmp	r3, #12
 8001cd0:	d112      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x68>
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	2380      	movs	r3, #128	; 0x80
 8001cd6:	025b      	lsls	r3, r3, #9
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d10d      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cdc:	4bbb      	ldr	r3, [pc, #748]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	2380      	movs	r3, #128	; 0x80
 8001ce2:	029b      	lsls	r3, r3, #10
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d100      	bne.n	8001cea <HAL_RCC_OscConfig+0x5a>
 8001ce8:	e06b      	b.n	8001dc2 <HAL_RCC_OscConfig+0x132>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d167      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	f000 fb95 	bl	8002422 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	2380      	movs	r3, #128	; 0x80
 8001cfe:	025b      	lsls	r3, r3, #9
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d107      	bne.n	8001d14 <HAL_RCC_OscConfig+0x84>
 8001d04:	4bb1      	ldr	r3, [pc, #708]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4bb0      	ldr	r3, [pc, #704]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001d0a:	2180      	movs	r1, #128	; 0x80
 8001d0c:	0249      	lsls	r1, r1, #9
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	e027      	b.n	8001d64 <HAL_RCC_OscConfig+0xd4>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	23a0      	movs	r3, #160	; 0xa0
 8001d1a:	02db      	lsls	r3, r3, #11
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d10e      	bne.n	8001d3e <HAL_RCC_OscConfig+0xae>
 8001d20:	4baa      	ldr	r3, [pc, #680]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4ba9      	ldr	r3, [pc, #676]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001d26:	2180      	movs	r1, #128	; 0x80
 8001d28:	02c9      	lsls	r1, r1, #11
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	4ba7      	ldr	r3, [pc, #668]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	4ba6      	ldr	r3, [pc, #664]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001d34:	2180      	movs	r1, #128	; 0x80
 8001d36:	0249      	lsls	r1, r1, #9
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	e012      	b.n	8001d64 <HAL_RCC_OscConfig+0xd4>
 8001d3e:	4ba3      	ldr	r3, [pc, #652]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	4ba2      	ldr	r3, [pc, #648]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001d44:	49a2      	ldr	r1, [pc, #648]	; (8001fd0 <HAL_RCC_OscConfig+0x340>)
 8001d46:	400a      	ands	r2, r1
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	4ba0      	ldr	r3, [pc, #640]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	2380      	movs	r3, #128	; 0x80
 8001d50:	025b      	lsls	r3, r3, #9
 8001d52:	4013      	ands	r3, r2
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	4b9c      	ldr	r3, [pc, #624]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4b9b      	ldr	r3, [pc, #620]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001d5e:	499d      	ldr	r1, [pc, #628]	; (8001fd4 <HAL_RCC_OscConfig+0x344>)
 8001d60:	400a      	ands	r2, r1
 8001d62:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d015      	beq.n	8001d98 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6c:	f7ff fcb0 	bl	80016d0 <HAL_GetTick>
 8001d70:	0003      	movs	r3, r0
 8001d72:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d74:	e009      	b.n	8001d8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d76:	f7ff fcab 	bl	80016d0 <HAL_GetTick>
 8001d7a:	0002      	movs	r2, r0
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b64      	cmp	r3, #100	; 0x64
 8001d82:	d902      	bls.n	8001d8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	f000 fb4c 	bl	8002422 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d8a:	4b90      	ldr	r3, [pc, #576]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	2380      	movs	r3, #128	; 0x80
 8001d90:	029b      	lsls	r3, r3, #10
 8001d92:	4013      	ands	r3, r2
 8001d94:	d0ef      	beq.n	8001d76 <HAL_RCC_OscConfig+0xe6>
 8001d96:	e015      	b.n	8001dc4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d98:	f7ff fc9a 	bl	80016d0 <HAL_GetTick>
 8001d9c:	0003      	movs	r3, r0
 8001d9e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001da2:	f7ff fc95 	bl	80016d0 <HAL_GetTick>
 8001da6:	0002      	movs	r2, r0
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b64      	cmp	r3, #100	; 0x64
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e336      	b.n	8002422 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001db4:	4b85      	ldr	r3, [pc, #532]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	2380      	movs	r3, #128	; 0x80
 8001dba:	029b      	lsls	r3, r3, #10
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d1f0      	bne.n	8001da2 <HAL_RCC_OscConfig+0x112>
 8001dc0:	e000      	b.n	8001dc4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2202      	movs	r2, #2
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d100      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x140>
 8001dce:	e099      	b.n	8001f04 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	2220      	movs	r2, #32
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d009      	beq.n	8001df2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001dde:	4b7b      	ldr	r3, [pc, #492]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	4b7a      	ldr	r3, [pc, #488]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001de4:	2120      	movs	r1, #32
 8001de6:	430a      	orrs	r2, r1
 8001de8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	2220      	movs	r2, #32
 8001dee:	4393      	bics	r3, r2
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	2b04      	cmp	r3, #4
 8001df6:	d005      	beq.n	8001e04 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	2b0c      	cmp	r3, #12
 8001dfc:	d13e      	bne.n	8001e7c <HAL_RCC_OscConfig+0x1ec>
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d13b      	bne.n	8001e7c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001e04:	4b71      	ldr	r3, [pc, #452]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2204      	movs	r2, #4
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	d004      	beq.n	8001e18 <HAL_RCC_OscConfig+0x188>
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e304      	b.n	8002422 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e18:	4b6c      	ldr	r3, [pc, #432]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	4a6e      	ldr	r2, [pc, #440]	; (8001fd8 <HAL_RCC_OscConfig+0x348>)
 8001e1e:	4013      	ands	r3, r2
 8001e20:	0019      	movs	r1, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	021a      	lsls	r2, r3, #8
 8001e28:	4b68      	ldr	r3, [pc, #416]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001e2e:	4b67      	ldr	r3, [pc, #412]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2209      	movs	r2, #9
 8001e34:	4393      	bics	r3, r2
 8001e36:	0019      	movs	r1, r3
 8001e38:	4b64      	ldr	r3, [pc, #400]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e40:	f000 fc42 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 8001e44:	0001      	movs	r1, r0
 8001e46:	4b61      	ldr	r3, [pc, #388]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	091b      	lsrs	r3, r3, #4
 8001e4c:	220f      	movs	r2, #15
 8001e4e:	4013      	ands	r3, r2
 8001e50:	4a62      	ldr	r2, [pc, #392]	; (8001fdc <HAL_RCC_OscConfig+0x34c>)
 8001e52:	5cd3      	ldrb	r3, [r2, r3]
 8001e54:	000a      	movs	r2, r1
 8001e56:	40da      	lsrs	r2, r3
 8001e58:	4b61      	ldr	r3, [pc, #388]	; (8001fe0 <HAL_RCC_OscConfig+0x350>)
 8001e5a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001e5c:	4b61      	ldr	r3, [pc, #388]	; (8001fe4 <HAL_RCC_OscConfig+0x354>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2513      	movs	r5, #19
 8001e62:	197c      	adds	r4, r7, r5
 8001e64:	0018      	movs	r0, r3
 8001e66:	f7ff fbed 	bl	8001644 <HAL_InitTick>
 8001e6a:	0003      	movs	r3, r0
 8001e6c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001e6e:	197b      	adds	r3, r7, r5
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d046      	beq.n	8001f04 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001e76:	197b      	adds	r3, r7, r5
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	e2d2      	b.n	8002422 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d027      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001e82:	4b52      	ldr	r3, [pc, #328]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2209      	movs	r2, #9
 8001e88:	4393      	bics	r3, r2
 8001e8a:	0019      	movs	r1, r3
 8001e8c:	4b4f      	ldr	r3, [pc, #316]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e90:	430a      	orrs	r2, r1
 8001e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e94:	f7ff fc1c 	bl	80016d0 <HAL_GetTick>
 8001e98:	0003      	movs	r3, r0
 8001e9a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e9e:	f7ff fc17 	bl	80016d0 <HAL_GetTick>
 8001ea2:	0002      	movs	r2, r0
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e2b8      	b.n	8002422 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001eb0:	4b46      	ldr	r3, [pc, #280]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2204      	movs	r2, #4
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d0f1      	beq.n	8001e9e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eba:	4b44      	ldr	r3, [pc, #272]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	4a46      	ldr	r2, [pc, #280]	; (8001fd8 <HAL_RCC_OscConfig+0x348>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	0019      	movs	r1, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	021a      	lsls	r2, r3, #8
 8001eca:	4b40      	ldr	r3, [pc, #256]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	605a      	str	r2, [r3, #4]
 8001ed0:	e018      	b.n	8001f04 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ed2:	4b3e      	ldr	r3, [pc, #248]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	4b3d      	ldr	r3, [pc, #244]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001ed8:	2101      	movs	r1, #1
 8001eda:	438a      	bics	r2, r1
 8001edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ede:	f7ff fbf7 	bl	80016d0 <HAL_GetTick>
 8001ee2:	0003      	movs	r3, r0
 8001ee4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ee8:	f7ff fbf2 	bl	80016d0 <HAL_GetTick>
 8001eec:	0002      	movs	r2, r0
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e293      	b.n	8002422 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001efa:	4b34      	ldr	r3, [pc, #208]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2204      	movs	r2, #4
 8001f00:	4013      	ands	r3, r2
 8001f02:	d1f1      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2210      	movs	r2, #16
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	d100      	bne.n	8001f10 <HAL_RCC_OscConfig+0x280>
 8001f0e:	e0a2      	b.n	8002056 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d140      	bne.n	8001f98 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f16:	4b2d      	ldr	r3, [pc, #180]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	2380      	movs	r3, #128	; 0x80
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4013      	ands	r3, r2
 8001f20:	d005      	beq.n	8001f2e <HAL_RCC_OscConfig+0x29e>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e279      	b.n	8002422 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f2e:	4b27      	ldr	r3, [pc, #156]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	4a2d      	ldr	r2, [pc, #180]	; (8001fe8 <HAL_RCC_OscConfig+0x358>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	0019      	movs	r1, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f3c:	4b23      	ldr	r3, [pc, #140]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f42:	4b22      	ldr	r3, [pc, #136]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	021b      	lsls	r3, r3, #8
 8001f48:	0a19      	lsrs	r1, r3, #8
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	061a      	lsls	r2, r3, #24
 8001f50:	4b1e      	ldr	r3, [pc, #120]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001f52:	430a      	orrs	r2, r1
 8001f54:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5a:	0b5b      	lsrs	r3, r3, #13
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	2280      	movs	r2, #128	; 0x80
 8001f60:	0212      	lsls	r2, r2, #8
 8001f62:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001f64:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	091b      	lsrs	r3, r3, #4
 8001f6a:	210f      	movs	r1, #15
 8001f6c:	400b      	ands	r3, r1
 8001f6e:	491b      	ldr	r1, [pc, #108]	; (8001fdc <HAL_RCC_OscConfig+0x34c>)
 8001f70:	5ccb      	ldrb	r3, [r1, r3]
 8001f72:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001f74:	4b1a      	ldr	r3, [pc, #104]	; (8001fe0 <HAL_RCC_OscConfig+0x350>)
 8001f76:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001f78:	4b1a      	ldr	r3, [pc, #104]	; (8001fe4 <HAL_RCC_OscConfig+0x354>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2513      	movs	r5, #19
 8001f7e:	197c      	adds	r4, r7, r5
 8001f80:	0018      	movs	r0, r3
 8001f82:	f7ff fb5f 	bl	8001644 <HAL_InitTick>
 8001f86:	0003      	movs	r3, r0
 8001f88:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001f8a:	197b      	adds	r3, r7, r5
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d061      	beq.n	8002056 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001f92:	197b      	adds	r3, r7, r5
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	e244      	b.n	8002422 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d040      	beq.n	8002022 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001fa0:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <HAL_RCC_OscConfig+0x33c>)
 8001fa6:	2180      	movs	r1, #128	; 0x80
 8001fa8:	0049      	lsls	r1, r1, #1
 8001faa:	430a      	orrs	r2, r1
 8001fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fae:	f7ff fb8f 	bl	80016d0 <HAL_GetTick>
 8001fb2:	0003      	movs	r3, r0
 8001fb4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001fb6:	e019      	b.n	8001fec <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fb8:	f7ff fb8a 	bl	80016d0 <HAL_GetTick>
 8001fbc:	0002      	movs	r2, r0
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d912      	bls.n	8001fec <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e22b      	b.n	8002422 <HAL_RCC_OscConfig+0x792>
 8001fca:	46c0      	nop			; (mov r8, r8)
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	fffeffff 	.word	0xfffeffff
 8001fd4:	fffbffff 	.word	0xfffbffff
 8001fd8:	ffffe0ff 	.word	0xffffe0ff
 8001fdc:	08004950 	.word	0x08004950
 8001fe0:	20000000 	.word	0x20000000
 8001fe4:	20000004 	.word	0x20000004
 8001fe8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001fec:	4bca      	ldr	r3, [pc, #808]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d0df      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ff8:	4bc7      	ldr	r3, [pc, #796]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	4ac7      	ldr	r2, [pc, #796]	; (800231c <HAL_RCC_OscConfig+0x68c>)
 8001ffe:	4013      	ands	r3, r2
 8002000:	0019      	movs	r1, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002006:	4bc4      	ldr	r3, [pc, #784]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 8002008:	430a      	orrs	r2, r1
 800200a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800200c:	4bc2      	ldr	r3, [pc, #776]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	021b      	lsls	r3, r3, #8
 8002012:	0a19      	lsrs	r1, r3, #8
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	061a      	lsls	r2, r3, #24
 800201a:	4bbf      	ldr	r3, [pc, #764]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 800201c:	430a      	orrs	r2, r1
 800201e:	605a      	str	r2, [r3, #4]
 8002020:	e019      	b.n	8002056 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002022:	4bbd      	ldr	r3, [pc, #756]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	4bbc      	ldr	r3, [pc, #752]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 8002028:	49bd      	ldr	r1, [pc, #756]	; (8002320 <HAL_RCC_OscConfig+0x690>)
 800202a:	400a      	ands	r2, r1
 800202c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202e:	f7ff fb4f 	bl	80016d0 <HAL_GetTick>
 8002032:	0003      	movs	r3, r0
 8002034:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002038:	f7ff fb4a 	bl	80016d0 <HAL_GetTick>
 800203c:	0002      	movs	r2, r0
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e1eb      	b.n	8002422 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800204a:	4bb3      	ldr	r3, [pc, #716]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	2380      	movs	r3, #128	; 0x80
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4013      	ands	r3, r2
 8002054:	d1f0      	bne.n	8002038 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2208      	movs	r2, #8
 800205c:	4013      	ands	r3, r2
 800205e:	d036      	beq.n	80020ce <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	695b      	ldr	r3, [r3, #20]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d019      	beq.n	800209c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002068:	4bab      	ldr	r3, [pc, #684]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 800206a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800206c:	4baa      	ldr	r3, [pc, #680]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 800206e:	2101      	movs	r1, #1
 8002070:	430a      	orrs	r2, r1
 8002072:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002074:	f7ff fb2c 	bl	80016d0 <HAL_GetTick>
 8002078:	0003      	movs	r3, r0
 800207a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800207e:	f7ff fb27 	bl	80016d0 <HAL_GetTick>
 8002082:	0002      	movs	r2, r0
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e1c8      	b.n	8002422 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002090:	4ba1      	ldr	r3, [pc, #644]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 8002092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002094:	2202      	movs	r2, #2
 8002096:	4013      	ands	r3, r2
 8002098:	d0f1      	beq.n	800207e <HAL_RCC_OscConfig+0x3ee>
 800209a:	e018      	b.n	80020ce <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800209c:	4b9e      	ldr	r3, [pc, #632]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 800209e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020a0:	4b9d      	ldr	r3, [pc, #628]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 80020a2:	2101      	movs	r1, #1
 80020a4:	438a      	bics	r2, r1
 80020a6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a8:	f7ff fb12 	bl	80016d0 <HAL_GetTick>
 80020ac:	0003      	movs	r3, r0
 80020ae:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020b2:	f7ff fb0d 	bl	80016d0 <HAL_GetTick>
 80020b6:	0002      	movs	r2, r0
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e1ae      	b.n	8002422 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80020c4:	4b94      	ldr	r3, [pc, #592]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 80020c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020c8:	2202      	movs	r2, #2
 80020ca:	4013      	ands	r3, r2
 80020cc:	d1f1      	bne.n	80020b2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2204      	movs	r2, #4
 80020d4:	4013      	ands	r3, r2
 80020d6:	d100      	bne.n	80020da <HAL_RCC_OscConfig+0x44a>
 80020d8:	e0ae      	b.n	8002238 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020da:	2023      	movs	r0, #35	; 0x23
 80020dc:	183b      	adds	r3, r7, r0
 80020de:	2200      	movs	r2, #0
 80020e0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020e2:	4b8d      	ldr	r3, [pc, #564]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 80020e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020e6:	2380      	movs	r3, #128	; 0x80
 80020e8:	055b      	lsls	r3, r3, #21
 80020ea:	4013      	ands	r3, r2
 80020ec:	d109      	bne.n	8002102 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ee:	4b8a      	ldr	r3, [pc, #552]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 80020f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020f2:	4b89      	ldr	r3, [pc, #548]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 80020f4:	2180      	movs	r1, #128	; 0x80
 80020f6:	0549      	lsls	r1, r1, #21
 80020f8:	430a      	orrs	r2, r1
 80020fa:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80020fc:	183b      	adds	r3, r7, r0
 80020fe:	2201      	movs	r2, #1
 8002100:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002102:	4b88      	ldr	r3, [pc, #544]	; (8002324 <HAL_RCC_OscConfig+0x694>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	2380      	movs	r3, #128	; 0x80
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	4013      	ands	r3, r2
 800210c:	d11a      	bne.n	8002144 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800210e:	4b85      	ldr	r3, [pc, #532]	; (8002324 <HAL_RCC_OscConfig+0x694>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	4b84      	ldr	r3, [pc, #528]	; (8002324 <HAL_RCC_OscConfig+0x694>)
 8002114:	2180      	movs	r1, #128	; 0x80
 8002116:	0049      	lsls	r1, r1, #1
 8002118:	430a      	orrs	r2, r1
 800211a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800211c:	f7ff fad8 	bl	80016d0 <HAL_GetTick>
 8002120:	0003      	movs	r3, r0
 8002122:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002126:	f7ff fad3 	bl	80016d0 <HAL_GetTick>
 800212a:	0002      	movs	r2, r0
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b64      	cmp	r3, #100	; 0x64
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e174      	b.n	8002422 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002138:	4b7a      	ldr	r3, [pc, #488]	; (8002324 <HAL_RCC_OscConfig+0x694>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	2380      	movs	r3, #128	; 0x80
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4013      	ands	r3, r2
 8002142:	d0f0      	beq.n	8002126 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	2380      	movs	r3, #128	; 0x80
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	429a      	cmp	r2, r3
 800214e:	d107      	bne.n	8002160 <HAL_RCC_OscConfig+0x4d0>
 8002150:	4b71      	ldr	r3, [pc, #452]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 8002152:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002154:	4b70      	ldr	r3, [pc, #448]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 8002156:	2180      	movs	r1, #128	; 0x80
 8002158:	0049      	lsls	r1, r1, #1
 800215a:	430a      	orrs	r2, r1
 800215c:	651a      	str	r2, [r3, #80]	; 0x50
 800215e:	e031      	b.n	80021c4 <HAL_RCC_OscConfig+0x534>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10c      	bne.n	8002182 <HAL_RCC_OscConfig+0x4f2>
 8002168:	4b6b      	ldr	r3, [pc, #428]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 800216a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800216c:	4b6a      	ldr	r3, [pc, #424]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 800216e:	496c      	ldr	r1, [pc, #432]	; (8002320 <HAL_RCC_OscConfig+0x690>)
 8002170:	400a      	ands	r2, r1
 8002172:	651a      	str	r2, [r3, #80]	; 0x50
 8002174:	4b68      	ldr	r3, [pc, #416]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 8002176:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002178:	4b67      	ldr	r3, [pc, #412]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 800217a:	496b      	ldr	r1, [pc, #428]	; (8002328 <HAL_RCC_OscConfig+0x698>)
 800217c:	400a      	ands	r2, r1
 800217e:	651a      	str	r2, [r3, #80]	; 0x50
 8002180:	e020      	b.n	80021c4 <HAL_RCC_OscConfig+0x534>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	23a0      	movs	r3, #160	; 0xa0
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	429a      	cmp	r2, r3
 800218c:	d10e      	bne.n	80021ac <HAL_RCC_OscConfig+0x51c>
 800218e:	4b62      	ldr	r3, [pc, #392]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 8002190:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002192:	4b61      	ldr	r3, [pc, #388]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 8002194:	2180      	movs	r1, #128	; 0x80
 8002196:	00c9      	lsls	r1, r1, #3
 8002198:	430a      	orrs	r2, r1
 800219a:	651a      	str	r2, [r3, #80]	; 0x50
 800219c:	4b5e      	ldr	r3, [pc, #376]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 800219e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021a0:	4b5d      	ldr	r3, [pc, #372]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 80021a2:	2180      	movs	r1, #128	; 0x80
 80021a4:	0049      	lsls	r1, r1, #1
 80021a6:	430a      	orrs	r2, r1
 80021a8:	651a      	str	r2, [r3, #80]	; 0x50
 80021aa:	e00b      	b.n	80021c4 <HAL_RCC_OscConfig+0x534>
 80021ac:	4b5a      	ldr	r3, [pc, #360]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 80021ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021b0:	4b59      	ldr	r3, [pc, #356]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 80021b2:	495b      	ldr	r1, [pc, #364]	; (8002320 <HAL_RCC_OscConfig+0x690>)
 80021b4:	400a      	ands	r2, r1
 80021b6:	651a      	str	r2, [r3, #80]	; 0x50
 80021b8:	4b57      	ldr	r3, [pc, #348]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 80021ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021bc:	4b56      	ldr	r3, [pc, #344]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 80021be:	495a      	ldr	r1, [pc, #360]	; (8002328 <HAL_RCC_OscConfig+0x698>)
 80021c0:	400a      	ands	r2, r1
 80021c2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d015      	beq.n	80021f8 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021cc:	f7ff fa80 	bl	80016d0 <HAL_GetTick>
 80021d0:	0003      	movs	r3, r0
 80021d2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021d4:	e009      	b.n	80021ea <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d6:	f7ff fa7b 	bl	80016d0 <HAL_GetTick>
 80021da:	0002      	movs	r2, r0
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	4a52      	ldr	r2, [pc, #328]	; (800232c <HAL_RCC_OscConfig+0x69c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e11b      	b.n	8002422 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021ea:	4b4b      	ldr	r3, [pc, #300]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 80021ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021ee:	2380      	movs	r3, #128	; 0x80
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4013      	ands	r3, r2
 80021f4:	d0ef      	beq.n	80021d6 <HAL_RCC_OscConfig+0x546>
 80021f6:	e014      	b.n	8002222 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f8:	f7ff fa6a 	bl	80016d0 <HAL_GetTick>
 80021fc:	0003      	movs	r3, r0
 80021fe:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002200:	e009      	b.n	8002216 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002202:	f7ff fa65 	bl	80016d0 <HAL_GetTick>
 8002206:	0002      	movs	r2, r0
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	4a47      	ldr	r2, [pc, #284]	; (800232c <HAL_RCC_OscConfig+0x69c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e105      	b.n	8002422 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002216:	4b40      	ldr	r3, [pc, #256]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 8002218:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800221a:	2380      	movs	r3, #128	; 0x80
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4013      	ands	r3, r2
 8002220:	d1ef      	bne.n	8002202 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002222:	2323      	movs	r3, #35	; 0x23
 8002224:	18fb      	adds	r3, r7, r3
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d105      	bne.n	8002238 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800222c:	4b3a      	ldr	r3, [pc, #232]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 800222e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002230:	4b39      	ldr	r3, [pc, #228]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 8002232:	493f      	ldr	r1, [pc, #252]	; (8002330 <HAL_RCC_OscConfig+0x6a0>)
 8002234:	400a      	ands	r2, r1
 8002236:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2220      	movs	r2, #32
 800223e:	4013      	ands	r3, r2
 8002240:	d049      	beq.n	80022d6 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d026      	beq.n	8002298 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800224a:	4b33      	ldr	r3, [pc, #204]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	4b32      	ldr	r3, [pc, #200]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 8002250:	2101      	movs	r1, #1
 8002252:	430a      	orrs	r2, r1
 8002254:	609a      	str	r2, [r3, #8]
 8002256:	4b30      	ldr	r3, [pc, #192]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 8002258:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800225a:	4b2f      	ldr	r3, [pc, #188]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 800225c:	2101      	movs	r1, #1
 800225e:	430a      	orrs	r2, r1
 8002260:	635a      	str	r2, [r3, #52]	; 0x34
 8002262:	4b34      	ldr	r3, [pc, #208]	; (8002334 <HAL_RCC_OscConfig+0x6a4>)
 8002264:	6a1a      	ldr	r2, [r3, #32]
 8002266:	4b33      	ldr	r3, [pc, #204]	; (8002334 <HAL_RCC_OscConfig+0x6a4>)
 8002268:	2180      	movs	r1, #128	; 0x80
 800226a:	0189      	lsls	r1, r1, #6
 800226c:	430a      	orrs	r2, r1
 800226e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002270:	f7ff fa2e 	bl	80016d0 <HAL_GetTick>
 8002274:	0003      	movs	r3, r0
 8002276:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800227a:	f7ff fa29 	bl	80016d0 <HAL_GetTick>
 800227e:	0002      	movs	r2, r0
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e0ca      	b.n	8002422 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800228c:	4b22      	ldr	r3, [pc, #136]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	2202      	movs	r2, #2
 8002292:	4013      	ands	r3, r2
 8002294:	d0f1      	beq.n	800227a <HAL_RCC_OscConfig+0x5ea>
 8002296:	e01e      	b.n	80022d6 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002298:	4b1f      	ldr	r3, [pc, #124]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	4b1e      	ldr	r3, [pc, #120]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 800229e:	2101      	movs	r1, #1
 80022a0:	438a      	bics	r2, r1
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	4b23      	ldr	r3, [pc, #140]	; (8002334 <HAL_RCC_OscConfig+0x6a4>)
 80022a6:	6a1a      	ldr	r2, [r3, #32]
 80022a8:	4b22      	ldr	r3, [pc, #136]	; (8002334 <HAL_RCC_OscConfig+0x6a4>)
 80022aa:	4923      	ldr	r1, [pc, #140]	; (8002338 <HAL_RCC_OscConfig+0x6a8>)
 80022ac:	400a      	ands	r2, r1
 80022ae:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b0:	f7ff fa0e 	bl	80016d0 <HAL_GetTick>
 80022b4:	0003      	movs	r3, r0
 80022b6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022ba:	f7ff fa09 	bl	80016d0 <HAL_GetTick>
 80022be:	0002      	movs	r2, r0
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e0aa      	b.n	8002422 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80022cc:	4b12      	ldr	r3, [pc, #72]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	2202      	movs	r2, #2
 80022d2:	4013      	ands	r3, r2
 80022d4:	d1f1      	bne.n	80022ba <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d100      	bne.n	80022e0 <HAL_RCC_OscConfig+0x650>
 80022de:	e09f      	b.n	8002420 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	2b0c      	cmp	r3, #12
 80022e4:	d100      	bne.n	80022e8 <HAL_RCC_OscConfig+0x658>
 80022e6:	e078      	b.n	80023da <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d159      	bne.n	80023a4 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f0:	4b09      	ldr	r3, [pc, #36]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	4b08      	ldr	r3, [pc, #32]	; (8002318 <HAL_RCC_OscConfig+0x688>)
 80022f6:	4911      	ldr	r1, [pc, #68]	; (800233c <HAL_RCC_OscConfig+0x6ac>)
 80022f8:	400a      	ands	r2, r1
 80022fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fc:	f7ff f9e8 	bl	80016d0 <HAL_GetTick>
 8002300:	0003      	movs	r3, r0
 8002302:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002304:	e01c      	b.n	8002340 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002306:	f7ff f9e3 	bl	80016d0 <HAL_GetTick>
 800230a:	0002      	movs	r2, r0
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d915      	bls.n	8002340 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e084      	b.n	8002422 <HAL_RCC_OscConfig+0x792>
 8002318:	40021000 	.word	0x40021000
 800231c:	ffff1fff 	.word	0xffff1fff
 8002320:	fffffeff 	.word	0xfffffeff
 8002324:	40007000 	.word	0x40007000
 8002328:	fffffbff 	.word	0xfffffbff
 800232c:	00001388 	.word	0x00001388
 8002330:	efffffff 	.word	0xefffffff
 8002334:	40010000 	.word	0x40010000
 8002338:	ffffdfff 	.word	0xffffdfff
 800233c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002340:	4b3a      	ldr	r3, [pc, #232]	; (800242c <HAL_RCC_OscConfig+0x79c>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	2380      	movs	r3, #128	; 0x80
 8002346:	049b      	lsls	r3, r3, #18
 8002348:	4013      	ands	r3, r2
 800234a:	d1dc      	bne.n	8002306 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800234c:	4b37      	ldr	r3, [pc, #220]	; (800242c <HAL_RCC_OscConfig+0x79c>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	4a37      	ldr	r2, [pc, #220]	; (8002430 <HAL_RCC_OscConfig+0x7a0>)
 8002352:	4013      	ands	r3, r2
 8002354:	0019      	movs	r1, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002364:	431a      	orrs	r2, r3
 8002366:	4b31      	ldr	r3, [pc, #196]	; (800242c <HAL_RCC_OscConfig+0x79c>)
 8002368:	430a      	orrs	r2, r1
 800236a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800236c:	4b2f      	ldr	r3, [pc, #188]	; (800242c <HAL_RCC_OscConfig+0x79c>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	4b2e      	ldr	r3, [pc, #184]	; (800242c <HAL_RCC_OscConfig+0x79c>)
 8002372:	2180      	movs	r1, #128	; 0x80
 8002374:	0449      	lsls	r1, r1, #17
 8002376:	430a      	orrs	r2, r1
 8002378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237a:	f7ff f9a9 	bl	80016d0 <HAL_GetTick>
 800237e:	0003      	movs	r3, r0
 8002380:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002384:	f7ff f9a4 	bl	80016d0 <HAL_GetTick>
 8002388:	0002      	movs	r2, r0
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e045      	b.n	8002422 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002396:	4b25      	ldr	r3, [pc, #148]	; (800242c <HAL_RCC_OscConfig+0x79c>)
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	2380      	movs	r3, #128	; 0x80
 800239c:	049b      	lsls	r3, r3, #18
 800239e:	4013      	ands	r3, r2
 80023a0:	d0f0      	beq.n	8002384 <HAL_RCC_OscConfig+0x6f4>
 80023a2:	e03d      	b.n	8002420 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a4:	4b21      	ldr	r3, [pc, #132]	; (800242c <HAL_RCC_OscConfig+0x79c>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4b20      	ldr	r3, [pc, #128]	; (800242c <HAL_RCC_OscConfig+0x79c>)
 80023aa:	4922      	ldr	r1, [pc, #136]	; (8002434 <HAL_RCC_OscConfig+0x7a4>)
 80023ac:	400a      	ands	r2, r1
 80023ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b0:	f7ff f98e 	bl	80016d0 <HAL_GetTick>
 80023b4:	0003      	movs	r3, r0
 80023b6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ba:	f7ff f989 	bl	80016d0 <HAL_GetTick>
 80023be:	0002      	movs	r2, r0
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e02a      	b.n	8002422 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80023cc:	4b17      	ldr	r3, [pc, #92]	; (800242c <HAL_RCC_OscConfig+0x79c>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	2380      	movs	r3, #128	; 0x80
 80023d2:	049b      	lsls	r3, r3, #18
 80023d4:	4013      	ands	r3, r2
 80023d6:	d1f0      	bne.n	80023ba <HAL_RCC_OscConfig+0x72a>
 80023d8:	e022      	b.n	8002420 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d101      	bne.n	80023e6 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e01d      	b.n	8002422 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023e6:	4b11      	ldr	r3, [pc, #68]	; (800242c <HAL_RCC_OscConfig+0x79c>)
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	2380      	movs	r3, #128	; 0x80
 80023f0:	025b      	lsls	r3, r3, #9
 80023f2:	401a      	ands	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d10f      	bne.n	800241c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	23f0      	movs	r3, #240	; 0xf0
 8002400:	039b      	lsls	r3, r3, #14
 8002402:	401a      	ands	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002408:	429a      	cmp	r2, r3
 800240a:	d107      	bne.n	800241c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	23c0      	movs	r3, #192	; 0xc0
 8002410:	041b      	lsls	r3, r3, #16
 8002412:	401a      	ands	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002418:	429a      	cmp	r2, r3
 800241a:	d001      	beq.n	8002420 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e000      	b.n	8002422 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	0018      	movs	r0, r3
 8002424:	46bd      	mov	sp, r7
 8002426:	b00a      	add	sp, #40	; 0x28
 8002428:	bdb0      	pop	{r4, r5, r7, pc}
 800242a:	46c0      	nop			; (mov r8, r8)
 800242c:	40021000 	.word	0x40021000
 8002430:	ff02ffff 	.word	0xff02ffff
 8002434:	feffffff 	.word	0xfeffffff

08002438 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002438:	b5b0      	push	{r4, r5, r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e128      	b.n	800269e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800244c:	4b96      	ldr	r3, [pc, #600]	; (80026a8 <HAL_RCC_ClockConfig+0x270>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2201      	movs	r2, #1
 8002452:	4013      	ands	r3, r2
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	429a      	cmp	r2, r3
 8002458:	d91e      	bls.n	8002498 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245a:	4b93      	ldr	r3, [pc, #588]	; (80026a8 <HAL_RCC_ClockConfig+0x270>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2201      	movs	r2, #1
 8002460:	4393      	bics	r3, r2
 8002462:	0019      	movs	r1, r3
 8002464:	4b90      	ldr	r3, [pc, #576]	; (80026a8 <HAL_RCC_ClockConfig+0x270>)
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800246c:	f7ff f930 	bl	80016d0 <HAL_GetTick>
 8002470:	0003      	movs	r3, r0
 8002472:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002474:	e009      	b.n	800248a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002476:	f7ff f92b 	bl	80016d0 <HAL_GetTick>
 800247a:	0002      	movs	r2, r0
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	4a8a      	ldr	r2, [pc, #552]	; (80026ac <HAL_RCC_ClockConfig+0x274>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d901      	bls.n	800248a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e109      	b.n	800269e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800248a:	4b87      	ldr	r3, [pc, #540]	; (80026a8 <HAL_RCC_ClockConfig+0x270>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2201      	movs	r2, #1
 8002490:	4013      	ands	r3, r2
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d1ee      	bne.n	8002476 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2202      	movs	r2, #2
 800249e:	4013      	ands	r3, r2
 80024a0:	d009      	beq.n	80024b6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024a2:	4b83      	ldr	r3, [pc, #524]	; (80026b0 <HAL_RCC_ClockConfig+0x278>)
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	22f0      	movs	r2, #240	; 0xf0
 80024a8:	4393      	bics	r3, r2
 80024aa:	0019      	movs	r1, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	4b7f      	ldr	r3, [pc, #508]	; (80026b0 <HAL_RCC_ClockConfig+0x278>)
 80024b2:	430a      	orrs	r2, r1
 80024b4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2201      	movs	r2, #1
 80024bc:	4013      	ands	r3, r2
 80024be:	d100      	bne.n	80024c2 <HAL_RCC_ClockConfig+0x8a>
 80024c0:	e089      	b.n	80025d6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d107      	bne.n	80024da <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024ca:	4b79      	ldr	r3, [pc, #484]	; (80026b0 <HAL_RCC_ClockConfig+0x278>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	2380      	movs	r3, #128	; 0x80
 80024d0:	029b      	lsls	r3, r3, #10
 80024d2:	4013      	ands	r3, r2
 80024d4:	d120      	bne.n	8002518 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e0e1      	b.n	800269e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b03      	cmp	r3, #3
 80024e0:	d107      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024e2:	4b73      	ldr	r3, [pc, #460]	; (80026b0 <HAL_RCC_ClockConfig+0x278>)
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	2380      	movs	r3, #128	; 0x80
 80024e8:	049b      	lsls	r3, r3, #18
 80024ea:	4013      	ands	r3, r2
 80024ec:	d114      	bne.n	8002518 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e0d5      	b.n	800269e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d106      	bne.n	8002508 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024fa:	4b6d      	ldr	r3, [pc, #436]	; (80026b0 <HAL_RCC_ClockConfig+0x278>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2204      	movs	r2, #4
 8002500:	4013      	ands	r3, r2
 8002502:	d109      	bne.n	8002518 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e0ca      	b.n	800269e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002508:	4b69      	ldr	r3, [pc, #420]	; (80026b0 <HAL_RCC_ClockConfig+0x278>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	2380      	movs	r3, #128	; 0x80
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4013      	ands	r3, r2
 8002512:	d101      	bne.n	8002518 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e0c2      	b.n	800269e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002518:	4b65      	ldr	r3, [pc, #404]	; (80026b0 <HAL_RCC_ClockConfig+0x278>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	2203      	movs	r2, #3
 800251e:	4393      	bics	r3, r2
 8002520:	0019      	movs	r1, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	4b62      	ldr	r3, [pc, #392]	; (80026b0 <HAL_RCC_ClockConfig+0x278>)
 8002528:	430a      	orrs	r2, r1
 800252a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800252c:	f7ff f8d0 	bl	80016d0 <HAL_GetTick>
 8002530:	0003      	movs	r3, r0
 8002532:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b02      	cmp	r3, #2
 800253a:	d111      	bne.n	8002560 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800253c:	e009      	b.n	8002552 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800253e:	f7ff f8c7 	bl	80016d0 <HAL_GetTick>
 8002542:	0002      	movs	r2, r0
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	4a58      	ldr	r2, [pc, #352]	; (80026ac <HAL_RCC_ClockConfig+0x274>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e0a5      	b.n	800269e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002552:	4b57      	ldr	r3, [pc, #348]	; (80026b0 <HAL_RCC_ClockConfig+0x278>)
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	220c      	movs	r2, #12
 8002558:	4013      	ands	r3, r2
 800255a:	2b08      	cmp	r3, #8
 800255c:	d1ef      	bne.n	800253e <HAL_RCC_ClockConfig+0x106>
 800255e:	e03a      	b.n	80025d6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b03      	cmp	r3, #3
 8002566:	d111      	bne.n	800258c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002568:	e009      	b.n	800257e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800256a:	f7ff f8b1 	bl	80016d0 <HAL_GetTick>
 800256e:	0002      	movs	r2, r0
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	4a4d      	ldr	r2, [pc, #308]	; (80026ac <HAL_RCC_ClockConfig+0x274>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d901      	bls.n	800257e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e08f      	b.n	800269e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800257e:	4b4c      	ldr	r3, [pc, #304]	; (80026b0 <HAL_RCC_ClockConfig+0x278>)
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	220c      	movs	r2, #12
 8002584:	4013      	ands	r3, r2
 8002586:	2b0c      	cmp	r3, #12
 8002588:	d1ef      	bne.n	800256a <HAL_RCC_ClockConfig+0x132>
 800258a:	e024      	b.n	80025d6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d11b      	bne.n	80025cc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002594:	e009      	b.n	80025aa <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002596:	f7ff f89b 	bl	80016d0 <HAL_GetTick>
 800259a:	0002      	movs	r2, r0
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	4a42      	ldr	r2, [pc, #264]	; (80026ac <HAL_RCC_ClockConfig+0x274>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e079      	b.n	800269e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80025aa:	4b41      	ldr	r3, [pc, #260]	; (80026b0 <HAL_RCC_ClockConfig+0x278>)
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	220c      	movs	r2, #12
 80025b0:	4013      	ands	r3, r2
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d1ef      	bne.n	8002596 <HAL_RCC_ClockConfig+0x15e>
 80025b6:	e00e      	b.n	80025d6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b8:	f7ff f88a 	bl	80016d0 <HAL_GetTick>
 80025bc:	0002      	movs	r2, r0
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	4a3a      	ldr	r2, [pc, #232]	; (80026ac <HAL_RCC_ClockConfig+0x274>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e068      	b.n	800269e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80025cc:	4b38      	ldr	r3, [pc, #224]	; (80026b0 <HAL_RCC_ClockConfig+0x278>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	220c      	movs	r2, #12
 80025d2:	4013      	ands	r3, r2
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025d6:	4b34      	ldr	r3, [pc, #208]	; (80026a8 <HAL_RCC_ClockConfig+0x270>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2201      	movs	r2, #1
 80025dc:	4013      	ands	r3, r2
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d21e      	bcs.n	8002622 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e4:	4b30      	ldr	r3, [pc, #192]	; (80026a8 <HAL_RCC_ClockConfig+0x270>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2201      	movs	r2, #1
 80025ea:	4393      	bics	r3, r2
 80025ec:	0019      	movs	r1, r3
 80025ee:	4b2e      	ldr	r3, [pc, #184]	; (80026a8 <HAL_RCC_ClockConfig+0x270>)
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025f6:	f7ff f86b 	bl	80016d0 <HAL_GetTick>
 80025fa:	0003      	movs	r3, r0
 80025fc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fe:	e009      	b.n	8002614 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002600:	f7ff f866 	bl	80016d0 <HAL_GetTick>
 8002604:	0002      	movs	r2, r0
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	4a28      	ldr	r2, [pc, #160]	; (80026ac <HAL_RCC_ClockConfig+0x274>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e044      	b.n	800269e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002614:	4b24      	ldr	r3, [pc, #144]	; (80026a8 <HAL_RCC_ClockConfig+0x270>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2201      	movs	r2, #1
 800261a:	4013      	ands	r3, r2
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	429a      	cmp	r2, r3
 8002620:	d1ee      	bne.n	8002600 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2204      	movs	r2, #4
 8002628:	4013      	ands	r3, r2
 800262a:	d009      	beq.n	8002640 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800262c:	4b20      	ldr	r3, [pc, #128]	; (80026b0 <HAL_RCC_ClockConfig+0x278>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	4a20      	ldr	r2, [pc, #128]	; (80026b4 <HAL_RCC_ClockConfig+0x27c>)
 8002632:	4013      	ands	r3, r2
 8002634:	0019      	movs	r1, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	4b1d      	ldr	r3, [pc, #116]	; (80026b0 <HAL_RCC_ClockConfig+0x278>)
 800263c:	430a      	orrs	r2, r1
 800263e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2208      	movs	r2, #8
 8002646:	4013      	ands	r3, r2
 8002648:	d00a      	beq.n	8002660 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800264a:	4b19      	ldr	r3, [pc, #100]	; (80026b0 <HAL_RCC_ClockConfig+0x278>)
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	4a1a      	ldr	r2, [pc, #104]	; (80026b8 <HAL_RCC_ClockConfig+0x280>)
 8002650:	4013      	ands	r3, r2
 8002652:	0019      	movs	r1, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	00da      	lsls	r2, r3, #3
 800265a:	4b15      	ldr	r3, [pc, #84]	; (80026b0 <HAL_RCC_ClockConfig+0x278>)
 800265c:	430a      	orrs	r2, r1
 800265e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002660:	f000 f832 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 8002664:	0001      	movs	r1, r0
 8002666:	4b12      	ldr	r3, [pc, #72]	; (80026b0 <HAL_RCC_ClockConfig+0x278>)
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	091b      	lsrs	r3, r3, #4
 800266c:	220f      	movs	r2, #15
 800266e:	4013      	ands	r3, r2
 8002670:	4a12      	ldr	r2, [pc, #72]	; (80026bc <HAL_RCC_ClockConfig+0x284>)
 8002672:	5cd3      	ldrb	r3, [r2, r3]
 8002674:	000a      	movs	r2, r1
 8002676:	40da      	lsrs	r2, r3
 8002678:	4b11      	ldr	r3, [pc, #68]	; (80026c0 <HAL_RCC_ClockConfig+0x288>)
 800267a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800267c:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <HAL_RCC_ClockConfig+0x28c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	250b      	movs	r5, #11
 8002682:	197c      	adds	r4, r7, r5
 8002684:	0018      	movs	r0, r3
 8002686:	f7fe ffdd 	bl	8001644 <HAL_InitTick>
 800268a:	0003      	movs	r3, r0
 800268c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800268e:	197b      	adds	r3, r7, r5
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d002      	beq.n	800269c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002696:	197b      	adds	r3, r7, r5
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	e000      	b.n	800269e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	0018      	movs	r0, r3
 80026a0:	46bd      	mov	sp, r7
 80026a2:	b004      	add	sp, #16
 80026a4:	bdb0      	pop	{r4, r5, r7, pc}
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	40022000 	.word	0x40022000
 80026ac:	00001388 	.word	0x00001388
 80026b0:	40021000 	.word	0x40021000
 80026b4:	fffff8ff 	.word	0xfffff8ff
 80026b8:	ffffc7ff 	.word	0xffffc7ff
 80026bc:	08004950 	.word	0x08004950
 80026c0:	20000000 	.word	0x20000000
 80026c4:	20000004 	.word	0x20000004

080026c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026c8:	b5b0      	push	{r4, r5, r7, lr}
 80026ca:	b08e      	sub	sp, #56	; 0x38
 80026cc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80026ce:	4b4c      	ldr	r3, [pc, #304]	; (8002800 <HAL_RCC_GetSysClockFreq+0x138>)
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026d6:	230c      	movs	r3, #12
 80026d8:	4013      	ands	r3, r2
 80026da:	2b0c      	cmp	r3, #12
 80026dc:	d014      	beq.n	8002708 <HAL_RCC_GetSysClockFreq+0x40>
 80026de:	d900      	bls.n	80026e2 <HAL_RCC_GetSysClockFreq+0x1a>
 80026e0:	e07b      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x112>
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d002      	beq.n	80026ec <HAL_RCC_GetSysClockFreq+0x24>
 80026e6:	2b08      	cmp	r3, #8
 80026e8:	d00b      	beq.n	8002702 <HAL_RCC_GetSysClockFreq+0x3a>
 80026ea:	e076      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80026ec:	4b44      	ldr	r3, [pc, #272]	; (8002800 <HAL_RCC_GetSysClockFreq+0x138>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2210      	movs	r2, #16
 80026f2:	4013      	ands	r3, r2
 80026f4:	d002      	beq.n	80026fc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80026f6:	4b43      	ldr	r3, [pc, #268]	; (8002804 <HAL_RCC_GetSysClockFreq+0x13c>)
 80026f8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80026fa:	e07c      	b.n	80027f6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80026fc:	4b42      	ldr	r3, [pc, #264]	; (8002808 <HAL_RCC_GetSysClockFreq+0x140>)
 80026fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002700:	e079      	b.n	80027f6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002702:	4b42      	ldr	r3, [pc, #264]	; (800280c <HAL_RCC_GetSysClockFreq+0x144>)
 8002704:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002706:	e076      	b.n	80027f6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270a:	0c9a      	lsrs	r2, r3, #18
 800270c:	230f      	movs	r3, #15
 800270e:	401a      	ands	r2, r3
 8002710:	4b3f      	ldr	r3, [pc, #252]	; (8002810 <HAL_RCC_GetSysClockFreq+0x148>)
 8002712:	5c9b      	ldrb	r3, [r3, r2]
 8002714:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002718:	0d9a      	lsrs	r2, r3, #22
 800271a:	2303      	movs	r3, #3
 800271c:	4013      	ands	r3, r2
 800271e:	3301      	adds	r3, #1
 8002720:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002722:	4b37      	ldr	r3, [pc, #220]	; (8002800 <HAL_RCC_GetSysClockFreq+0x138>)
 8002724:	68da      	ldr	r2, [r3, #12]
 8002726:	2380      	movs	r3, #128	; 0x80
 8002728:	025b      	lsls	r3, r3, #9
 800272a:	4013      	ands	r3, r2
 800272c:	d01a      	beq.n	8002764 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800272e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002730:	61bb      	str	r3, [r7, #24]
 8002732:	2300      	movs	r3, #0
 8002734:	61fb      	str	r3, [r7, #28]
 8002736:	4a35      	ldr	r2, [pc, #212]	; (800280c <HAL_RCC_GetSysClockFreq+0x144>)
 8002738:	2300      	movs	r3, #0
 800273a:	69b8      	ldr	r0, [r7, #24]
 800273c:	69f9      	ldr	r1, [r7, #28]
 800273e:	f7fd fda1 	bl	8000284 <__aeabi_lmul>
 8002742:	0002      	movs	r2, r0
 8002744:	000b      	movs	r3, r1
 8002746:	0010      	movs	r0, r2
 8002748:	0019      	movs	r1, r3
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f7fd fd75 	bl	8000244 <__aeabi_uldivmod>
 800275a:	0002      	movs	r2, r0
 800275c:	000b      	movs	r3, r1
 800275e:	0013      	movs	r3, r2
 8002760:	637b      	str	r3, [r7, #52]	; 0x34
 8002762:	e037      	b.n	80027d4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002764:	4b26      	ldr	r3, [pc, #152]	; (8002800 <HAL_RCC_GetSysClockFreq+0x138>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2210      	movs	r2, #16
 800276a:	4013      	ands	r3, r2
 800276c:	d01a      	beq.n	80027a4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800276e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002770:	60bb      	str	r3, [r7, #8]
 8002772:	2300      	movs	r3, #0
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	4a23      	ldr	r2, [pc, #140]	; (8002804 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002778:	2300      	movs	r3, #0
 800277a:	68b8      	ldr	r0, [r7, #8]
 800277c:	68f9      	ldr	r1, [r7, #12]
 800277e:	f7fd fd81 	bl	8000284 <__aeabi_lmul>
 8002782:	0002      	movs	r2, r0
 8002784:	000b      	movs	r3, r1
 8002786:	0010      	movs	r0, r2
 8002788:	0019      	movs	r1, r3
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	603b      	str	r3, [r7, #0]
 800278e:	2300      	movs	r3, #0
 8002790:	607b      	str	r3, [r7, #4]
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f7fd fd55 	bl	8000244 <__aeabi_uldivmod>
 800279a:	0002      	movs	r2, r0
 800279c:	000b      	movs	r3, r1
 800279e:	0013      	movs	r3, r2
 80027a0:	637b      	str	r3, [r7, #52]	; 0x34
 80027a2:	e017      	b.n	80027d4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80027a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a6:	0018      	movs	r0, r3
 80027a8:	2300      	movs	r3, #0
 80027aa:	0019      	movs	r1, r3
 80027ac:	4a16      	ldr	r2, [pc, #88]	; (8002808 <HAL_RCC_GetSysClockFreq+0x140>)
 80027ae:	2300      	movs	r3, #0
 80027b0:	f7fd fd68 	bl	8000284 <__aeabi_lmul>
 80027b4:	0002      	movs	r2, r0
 80027b6:	000b      	movs	r3, r1
 80027b8:	0010      	movs	r0, r2
 80027ba:	0019      	movs	r1, r3
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	001c      	movs	r4, r3
 80027c0:	2300      	movs	r3, #0
 80027c2:	001d      	movs	r5, r3
 80027c4:	0022      	movs	r2, r4
 80027c6:	002b      	movs	r3, r5
 80027c8:	f7fd fd3c 	bl	8000244 <__aeabi_uldivmod>
 80027cc:	0002      	movs	r2, r0
 80027ce:	000b      	movs	r3, r1
 80027d0:	0013      	movs	r3, r2
 80027d2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80027d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80027d8:	e00d      	b.n	80027f6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80027da:	4b09      	ldr	r3, [pc, #36]	; (8002800 <HAL_RCC_GetSysClockFreq+0x138>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	0b5b      	lsrs	r3, r3, #13
 80027e0:	2207      	movs	r2, #7
 80027e2:	4013      	ands	r3, r2
 80027e4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80027e6:	6a3b      	ldr	r3, [r7, #32]
 80027e8:	3301      	adds	r3, #1
 80027ea:	2280      	movs	r2, #128	; 0x80
 80027ec:	0212      	lsls	r2, r2, #8
 80027ee:	409a      	lsls	r2, r3
 80027f0:	0013      	movs	r3, r2
 80027f2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80027f4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80027f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80027f8:	0018      	movs	r0, r3
 80027fa:	46bd      	mov	sp, r7
 80027fc:	b00e      	add	sp, #56	; 0x38
 80027fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002800:	40021000 	.word	0x40021000
 8002804:	003d0900 	.word	0x003d0900
 8002808:	00f42400 	.word	0x00f42400
 800280c:	007a1200 	.word	0x007a1200
 8002810:	08004968 	.word	0x08004968

08002814 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002818:	4b02      	ldr	r3, [pc, #8]	; (8002824 <HAL_RCC_GetHCLKFreq+0x10>)
 800281a:	681b      	ldr	r3, [r3, #0]
}
 800281c:	0018      	movs	r0, r3
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	20000000 	.word	0x20000000

08002828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800282c:	f7ff fff2 	bl	8002814 <HAL_RCC_GetHCLKFreq>
 8002830:	0001      	movs	r1, r0
 8002832:	4b06      	ldr	r3, [pc, #24]	; (800284c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	0a1b      	lsrs	r3, r3, #8
 8002838:	2207      	movs	r2, #7
 800283a:	4013      	ands	r3, r2
 800283c:	4a04      	ldr	r2, [pc, #16]	; (8002850 <HAL_RCC_GetPCLK1Freq+0x28>)
 800283e:	5cd3      	ldrb	r3, [r2, r3]
 8002840:	40d9      	lsrs	r1, r3
 8002842:	000b      	movs	r3, r1
}
 8002844:	0018      	movs	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	40021000 	.word	0x40021000
 8002850:	08004960 	.word	0x08004960

08002854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002858:	f7ff ffdc 	bl	8002814 <HAL_RCC_GetHCLKFreq>
 800285c:	0001      	movs	r1, r0
 800285e:	4b06      	ldr	r3, [pc, #24]	; (8002878 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	0adb      	lsrs	r3, r3, #11
 8002864:	2207      	movs	r2, #7
 8002866:	4013      	ands	r3, r2
 8002868:	4a04      	ldr	r2, [pc, #16]	; (800287c <HAL_RCC_GetPCLK2Freq+0x28>)
 800286a:	5cd3      	ldrb	r3, [r2, r3]
 800286c:	40d9      	lsrs	r1, r3
 800286e:	000b      	movs	r3, r1
}
 8002870:	0018      	movs	r0, r3
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	40021000 	.word	0x40021000
 800287c:	08004960 	.word	0x08004960

08002880 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e083      	b.n	800299a <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	2b00      	cmp	r3, #0
 8002898:	d109      	bne.n	80028ae <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	2382      	movs	r3, #130	; 0x82
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d009      	beq.n	80028ba <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	61da      	str	r2, [r3, #28]
 80028ac:	e005      	b.n	80028ba <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2251      	movs	r2, #81	; 0x51
 80028c4:	5c9b      	ldrb	r3, [r3, r2]
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d107      	bne.n	80028dc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2250      	movs	r2, #80	; 0x50
 80028d0:	2100      	movs	r1, #0
 80028d2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	0018      	movs	r0, r3
 80028d8:	f7fe fa2c 	bl	8000d34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2251      	movs	r2, #81	; 0x51
 80028e0:	2102      	movs	r1, #2
 80028e2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2140      	movs	r1, #64	; 0x40
 80028f0:	438a      	bics	r2, r1
 80028f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	2382      	movs	r3, #130	; 0x82
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	401a      	ands	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6899      	ldr	r1, [r3, #8]
 8002902:	2384      	movs	r3, #132	; 0x84
 8002904:	021b      	lsls	r3, r3, #8
 8002906:	400b      	ands	r3, r1
 8002908:	431a      	orrs	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68d9      	ldr	r1, [r3, #12]
 800290e:	2380      	movs	r3, #128	; 0x80
 8002910:	011b      	lsls	r3, r3, #4
 8002912:	400b      	ands	r3, r1
 8002914:	431a      	orrs	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	2102      	movs	r1, #2
 800291c:	400b      	ands	r3, r1
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	2101      	movs	r1, #1
 8002926:	400b      	ands	r3, r1
 8002928:	431a      	orrs	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6999      	ldr	r1, [r3, #24]
 800292e:	2380      	movs	r3, #128	; 0x80
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	400b      	ands	r3, r1
 8002934:	431a      	orrs	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	2138      	movs	r1, #56	; 0x38
 800293c:	400b      	ands	r3, r1
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	2180      	movs	r1, #128	; 0x80
 8002946:	400b      	ands	r3, r1
 8002948:	431a      	orrs	r2, r3
 800294a:	0011      	movs	r1, r2
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002950:	2380      	movs	r3, #128	; 0x80
 8002952:	019b      	lsls	r3, r3, #6
 8002954:	401a      	ands	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	0c1b      	lsrs	r3, r3, #16
 8002964:	2204      	movs	r2, #4
 8002966:	4013      	ands	r3, r2
 8002968:	0019      	movs	r1, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	2210      	movs	r2, #16
 8002970:	401a      	ands	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	69da      	ldr	r2, [r3, #28]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4907      	ldr	r1, [pc, #28]	; (80029a4 <HAL_SPI_Init+0x124>)
 8002986:	400a      	ands	r2, r1
 8002988:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2251      	movs	r2, #81	; 0x51
 8002994:	2101      	movs	r1, #1
 8002996:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	0018      	movs	r0, r3
 800299c:	46bd      	mov	sp, r7
 800299e:	b002      	add	sp, #8
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	46c0      	nop			; (mov r8, r8)
 80029a4:	fffff7ff 	.word	0xfffff7ff

080029a8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b088      	sub	sp, #32
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	603b      	str	r3, [r7, #0]
 80029b4:	1dbb      	adds	r3, r7, #6
 80029b6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80029b8:	231f      	movs	r3, #31
 80029ba:	18fb      	adds	r3, r7, r3
 80029bc:	2200      	movs	r2, #0
 80029be:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2250      	movs	r2, #80	; 0x50
 80029c4:	5c9b      	ldrb	r3, [r3, r2]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d101      	bne.n	80029ce <HAL_SPI_Transmit+0x26>
 80029ca:	2302      	movs	r3, #2
 80029cc:	e13e      	b.n	8002c4c <HAL_SPI_Transmit+0x2a4>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2250      	movs	r2, #80	; 0x50
 80029d2:	2101      	movs	r1, #1
 80029d4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029d6:	f7fe fe7b 	bl	80016d0 <HAL_GetTick>
 80029da:	0003      	movs	r3, r0
 80029dc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80029de:	2316      	movs	r3, #22
 80029e0:	18fb      	adds	r3, r7, r3
 80029e2:	1dba      	adds	r2, r7, #6
 80029e4:	8812      	ldrh	r2, [r2, #0]
 80029e6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2251      	movs	r2, #81	; 0x51
 80029ec:	5c9b      	ldrb	r3, [r3, r2]
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d004      	beq.n	80029fe <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80029f4:	231f      	movs	r3, #31
 80029f6:	18fb      	adds	r3, r7, r3
 80029f8:	2202      	movs	r2, #2
 80029fa:	701a      	strb	r2, [r3, #0]
    goto error;
 80029fc:	e11b      	b.n	8002c36 <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_SPI_Transmit+0x64>
 8002a04:	1dbb      	adds	r3, r7, #6
 8002a06:	881b      	ldrh	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d104      	bne.n	8002a16 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002a0c:	231f      	movs	r3, #31
 8002a0e:	18fb      	adds	r3, r7, r3
 8002a10:	2201      	movs	r2, #1
 8002a12:	701a      	strb	r2, [r3, #0]
    goto error;
 8002a14:	e10f      	b.n	8002c36 <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2251      	movs	r2, #81	; 0x51
 8002a1a:	2103      	movs	r1, #3
 8002a1c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	68ba      	ldr	r2, [r7, #8]
 8002a28:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	1dba      	adds	r2, r7, #6
 8002a2e:	8812      	ldrh	r2, [r2, #0]
 8002a30:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	1dba      	adds	r2, r7, #6
 8002a36:	8812      	ldrh	r2, [r2, #0]
 8002a38:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	2380      	movs	r3, #128	; 0x80
 8002a5e:	021b      	lsls	r3, r3, #8
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d110      	bne.n	8002a86 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2140      	movs	r1, #64	; 0x40
 8002a70:	438a      	bics	r2, r1
 8002a72:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2180      	movs	r1, #128	; 0x80
 8002a80:	01c9      	lsls	r1, r1, #7
 8002a82:	430a      	orrs	r2, r1
 8002a84:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2240      	movs	r2, #64	; 0x40
 8002a8e:	4013      	ands	r3, r2
 8002a90:	2b40      	cmp	r3, #64	; 0x40
 8002a92:	d007      	beq.n	8002aa4 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2140      	movs	r1, #64	; 0x40
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	68da      	ldr	r2, [r3, #12]
 8002aa8:	2380      	movs	r3, #128	; 0x80
 8002aaa:	011b      	lsls	r3, r3, #4
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d14e      	bne.n	8002b4e <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d004      	beq.n	8002ac2 <HAL_SPI_Transmit+0x11a>
 8002ab8:	2316      	movs	r3, #22
 8002aba:	18fb      	adds	r3, r7, r3
 8002abc:	881b      	ldrh	r3, [r3, #0]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d13f      	bne.n	8002b42 <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	881a      	ldrh	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	1c9a      	adds	r2, r3, #2
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ae6:	e02c      	b.n	8002b42 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	2202      	movs	r2, #2
 8002af0:	4013      	ands	r3, r2
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d112      	bne.n	8002b1c <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	881a      	ldrh	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	1c9a      	adds	r2, r3, #2
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	3b01      	subs	r3, #1
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b1a:	e012      	b.n	8002b42 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b1c:	f7fe fdd8 	bl	80016d0 <HAL_GetTick>
 8002b20:	0002      	movs	r2, r0
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d802      	bhi.n	8002b32 <HAL_SPI_Transmit+0x18a>
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	d102      	bne.n	8002b38 <HAL_SPI_Transmit+0x190>
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d104      	bne.n	8002b42 <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 8002b38:	231f      	movs	r3, #31
 8002b3a:	18fb      	adds	r3, r7, r3
 8002b3c:	2203      	movs	r2, #3
 8002b3e:	701a      	strb	r2, [r3, #0]
          goto error;
 8002b40:	e079      	b.n	8002c36 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1cd      	bne.n	8002ae8 <HAL_SPI_Transmit+0x140>
 8002b4c:	e04f      	b.n	8002bee <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d004      	beq.n	8002b60 <HAL_SPI_Transmit+0x1b8>
 8002b56:	2316      	movs	r3, #22
 8002b58:	18fb      	adds	r3, r7, r3
 8002b5a:	881b      	ldrh	r3, [r3, #0]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d141      	bne.n	8002be4 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	330c      	adds	r3, #12
 8002b6a:	7812      	ldrb	r2, [r2, #0]
 8002b6c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	1c5a      	adds	r2, r3, #1
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002b86:	e02d      	b.n	8002be4 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	2202      	movs	r2, #2
 8002b90:	4013      	ands	r3, r2
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d113      	bne.n	8002bbe <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	330c      	adds	r3, #12
 8002ba0:	7812      	ldrb	r2, [r2, #0]
 8002ba2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba8:	1c5a      	adds	r2, r3, #1
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	86da      	strh	r2, [r3, #54]	; 0x36
 8002bbc:	e012      	b.n	8002be4 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bbe:	f7fe fd87 	bl	80016d0 <HAL_GetTick>
 8002bc2:	0002      	movs	r2, r0
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d802      	bhi.n	8002bd4 <HAL_SPI_Transmit+0x22c>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	d102      	bne.n	8002bda <HAL_SPI_Transmit+0x232>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d104      	bne.n	8002be4 <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 8002bda:	231f      	movs	r3, #31
 8002bdc:	18fb      	adds	r3, r7, r3
 8002bde:	2203      	movs	r2, #3
 8002be0:	701a      	strb	r2, [r3, #0]
          goto error;
 8002be2:	e028      	b.n	8002c36 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1cc      	bne.n	8002b88 <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	6839      	ldr	r1, [r7, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	f000 fc07 	bl	8003408 <SPI_EndRxTxTransaction>
 8002bfa:	1e03      	subs	r3, r0, #0
 8002bfc:	d002      	beq.n	8002c04 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2220      	movs	r2, #32
 8002c02:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10a      	bne.n	8002c22 <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	613b      	str	r3, [r7, #16]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	613b      	str	r3, [r7, #16]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	613b      	str	r3, [r7, #16]
 8002c20:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d004      	beq.n	8002c34 <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 8002c2a:	231f      	movs	r3, #31
 8002c2c:	18fb      	adds	r3, r7, r3
 8002c2e:	2201      	movs	r2, #1
 8002c30:	701a      	strb	r2, [r3, #0]
 8002c32:	e000      	b.n	8002c36 <HAL_SPI_Transmit+0x28e>
  }

error:
 8002c34:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2251      	movs	r2, #81	; 0x51
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2250      	movs	r2, #80	; 0x50
 8002c42:	2100      	movs	r1, #0
 8002c44:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002c46:	231f      	movs	r3, #31
 8002c48:	18fb      	adds	r3, r7, r3
 8002c4a:	781b      	ldrb	r3, [r3, #0]
}
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b008      	add	sp, #32
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c54:	b590      	push	{r4, r7, lr}
 8002c56:	b089      	sub	sp, #36	; 0x24
 8002c58:	af02      	add	r7, sp, #8
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	603b      	str	r3, [r7, #0]
 8002c60:	1dbb      	adds	r3, r7, #6
 8002c62:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c64:	2317      	movs	r3, #23
 8002c66:	18fb      	adds	r3, r7, r3
 8002c68:	2200      	movs	r2, #0
 8002c6a:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	2382      	movs	r3, #130	; 0x82
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d113      	bne.n	8002ca0 <HAL_SPI_Receive+0x4c>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10f      	bne.n	8002ca0 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2251      	movs	r2, #81	; 0x51
 8002c84:	2104      	movs	r1, #4
 8002c86:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002c88:	1dbb      	adds	r3, r7, #6
 8002c8a:	881c      	ldrh	r4, [r3, #0]
 8002c8c:	68ba      	ldr	r2, [r7, #8]
 8002c8e:	68b9      	ldr	r1, [r7, #8]
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	0023      	movs	r3, r4
 8002c98:	f000 f902 	bl	8002ea0 <HAL_SPI_TransmitReceive>
 8002c9c:	0003      	movs	r3, r0
 8002c9e:	e0f9      	b.n	8002e94 <HAL_SPI_Receive+0x240>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2250      	movs	r2, #80	; 0x50
 8002ca4:	5c9b      	ldrb	r3, [r3, r2]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d101      	bne.n	8002cae <HAL_SPI_Receive+0x5a>
 8002caa:	2302      	movs	r3, #2
 8002cac:	e0f2      	b.n	8002e94 <HAL_SPI_Receive+0x240>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2250      	movs	r2, #80	; 0x50
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cb6:	f7fe fd0b 	bl	80016d0 <HAL_GetTick>
 8002cba:	0003      	movs	r3, r0
 8002cbc:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2251      	movs	r2, #81	; 0x51
 8002cc2:	5c9b      	ldrb	r3, [r3, r2]
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d004      	beq.n	8002cd4 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8002cca:	2317      	movs	r3, #23
 8002ccc:	18fb      	adds	r3, r7, r3
 8002cce:	2202      	movs	r2, #2
 8002cd0:	701a      	strb	r2, [r3, #0]
    goto error;
 8002cd2:	e0d4      	b.n	8002e7e <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_SPI_Receive+0x8e>
 8002cda:	1dbb      	adds	r3, r7, #6
 8002cdc:	881b      	ldrh	r3, [r3, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d104      	bne.n	8002cec <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8002ce2:	2317      	movs	r3, #23
 8002ce4:	18fb      	adds	r3, r7, r3
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	701a      	strb	r2, [r3, #0]
    goto error;
 8002cea:	e0c8      	b.n	8002e7e <HAL_SPI_Receive+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2251      	movs	r2, #81	; 0x51
 8002cf0:	2104      	movs	r1, #4
 8002cf2:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	1dba      	adds	r2, r7, #6
 8002d04:	8812      	ldrh	r2, [r2, #0]
 8002d06:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	1dba      	adds	r2, r7, #6
 8002d0c:	8812      	ldrh	r2, [r2, #0]
 8002d0e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	689a      	ldr	r2, [r3, #8]
 8002d32:	2380      	movs	r3, #128	; 0x80
 8002d34:	021b      	lsls	r3, r3, #8
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d10f      	bne.n	8002d5a <HAL_SPI_Receive+0x106>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2140      	movs	r1, #64	; 0x40
 8002d46:	438a      	bics	r2, r1
 8002d48:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4951      	ldr	r1, [pc, #324]	; (8002e9c <HAL_SPI_Receive+0x248>)
 8002d56:	400a      	ands	r2, r1
 8002d58:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2240      	movs	r2, #64	; 0x40
 8002d62:	4013      	ands	r3, r2
 8002d64:	2b40      	cmp	r3, #64	; 0x40
 8002d66:	d007      	beq.n	8002d78 <HAL_SPI_Receive+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2140      	movs	r1, #64	; 0x40
 8002d74:	430a      	orrs	r2, r1
 8002d76:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d164      	bne.n	8002e4a <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002d80:	e02f      	b.n	8002de2 <HAL_SPI_Receive+0x18e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d115      	bne.n	8002dbc <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	330c      	adds	r3, #12
 8002d96:	001a      	movs	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9c:	7812      	ldrb	r2, [r2, #0]
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da6:	1c5a      	adds	r2, r3, #1
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	3b01      	subs	r3, #1
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002dba:	e012      	b.n	8002de2 <HAL_SPI_Receive+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dbc:	f7fe fc88 	bl	80016d0 <HAL_GetTick>
 8002dc0:	0002      	movs	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d802      	bhi.n	8002dd2 <HAL_SPI_Receive+0x17e>
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	d102      	bne.n	8002dd8 <HAL_SPI_Receive+0x184>
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d104      	bne.n	8002de2 <HAL_SPI_Receive+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8002dd8:	2317      	movs	r3, #23
 8002dda:	18fb      	adds	r3, r7, r3
 8002ddc:	2203      	movs	r2, #3
 8002dde:	701a      	strb	r2, [r3, #0]
          goto error;
 8002de0:	e04d      	b.n	8002e7e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1ca      	bne.n	8002d82 <HAL_SPI_Receive+0x12e>
 8002dec:	e032      	b.n	8002e54 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	2201      	movs	r2, #1
 8002df6:	4013      	ands	r3, r2
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d113      	bne.n	8002e24 <HAL_SPI_Receive+0x1d0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e06:	b292      	uxth	r2, r2
 8002e08:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0e:	1c9a      	adds	r2, r3, #2
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e22:	e012      	b.n	8002e4a <HAL_SPI_Receive+0x1f6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e24:	f7fe fc54 	bl	80016d0 <HAL_GetTick>
 8002e28:	0002      	movs	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d802      	bhi.n	8002e3a <HAL_SPI_Receive+0x1e6>
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	3301      	adds	r3, #1
 8002e38:	d102      	bne.n	8002e40 <HAL_SPI_Receive+0x1ec>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d104      	bne.n	8002e4a <HAL_SPI_Receive+0x1f6>
        {
          errorcode = HAL_TIMEOUT;
 8002e40:	2317      	movs	r3, #23
 8002e42:	18fb      	adds	r3, r7, r3
 8002e44:	2203      	movs	r2, #3
 8002e46:	701a      	strb	r2, [r3, #0]
          goto error;
 8002e48:	e019      	b.n	8002e7e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1cc      	bne.n	8002dee <HAL_SPI_Receive+0x19a>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	6839      	ldr	r1, [r7, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f000 fa6a 	bl	8003334 <SPI_EndRxTransaction>
 8002e60:	1e03      	subs	r3, r0, #0
 8002e62:	d002      	beq.n	8002e6a <HAL_SPI_Receive+0x216>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2220      	movs	r2, #32
 8002e68:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d004      	beq.n	8002e7c <HAL_SPI_Receive+0x228>
  {
    errorcode = HAL_ERROR;
 8002e72:	2317      	movs	r3, #23
 8002e74:	18fb      	adds	r3, r7, r3
 8002e76:	2201      	movs	r2, #1
 8002e78:	701a      	strb	r2, [r3, #0]
 8002e7a:	e000      	b.n	8002e7e <HAL_SPI_Receive+0x22a>
  }

error :
 8002e7c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2251      	movs	r2, #81	; 0x51
 8002e82:	2101      	movs	r1, #1
 8002e84:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2250      	movs	r2, #80	; 0x50
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002e8e:	2317      	movs	r3, #23
 8002e90:	18fb      	adds	r3, r7, r3
 8002e92:	781b      	ldrb	r3, [r3, #0]
}
 8002e94:	0018      	movs	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	b007      	add	sp, #28
 8002e9a:	bd90      	pop	{r4, r7, pc}
 8002e9c:	ffffbfff 	.word	0xffffbfff

08002ea0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b08c      	sub	sp, #48	; 0x30
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
 8002eac:	001a      	movs	r2, r3
 8002eae:	1cbb      	adds	r3, r7, #2
 8002eb0:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002eb6:	232b      	movs	r3, #43	; 0x2b
 8002eb8:	18fb      	adds	r3, r7, r3
 8002eba:	2200      	movs	r2, #0
 8002ebc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2250      	movs	r2, #80	; 0x50
 8002ec2:	5c9b      	ldrb	r3, [r3, r2]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d101      	bne.n	8002ecc <HAL_SPI_TransmitReceive+0x2c>
 8002ec8:	2302      	movs	r3, #2
 8002eca:	e1a0      	b.n	800320e <HAL_SPI_TransmitReceive+0x36e>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2250      	movs	r2, #80	; 0x50
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ed4:	f7fe fbfc 	bl	80016d0 <HAL_GetTick>
 8002ed8:	0003      	movs	r3, r0
 8002eda:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002edc:	2023      	movs	r0, #35	; 0x23
 8002ede:	183b      	adds	r3, r7, r0
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	2151      	movs	r1, #81	; 0x51
 8002ee4:	5c52      	ldrb	r2, [r2, r1]
 8002ee6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002eee:	231a      	movs	r3, #26
 8002ef0:	18fb      	adds	r3, r7, r3
 8002ef2:	1cba      	adds	r2, r7, #2
 8002ef4:	8812      	ldrh	r2, [r2, #0]
 8002ef6:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ef8:	183b      	adds	r3, r7, r0
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d011      	beq.n	8002f24 <HAL_SPI_TransmitReceive+0x84>
 8002f00:	69fa      	ldr	r2, [r7, #28]
 8002f02:	2382      	movs	r3, #130	; 0x82
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d107      	bne.n	8002f1a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d103      	bne.n	8002f1a <HAL_SPI_TransmitReceive+0x7a>
 8002f12:	183b      	adds	r3, r7, r0
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d004      	beq.n	8002f24 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002f1a:	232b      	movs	r3, #43	; 0x2b
 8002f1c:	18fb      	adds	r3, r7, r3
 8002f1e:	2202      	movs	r2, #2
 8002f20:	701a      	strb	r2, [r3, #0]
    goto error;
 8002f22:	e169      	b.n	80031f8 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d006      	beq.n	8002f38 <HAL_SPI_TransmitReceive+0x98>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d003      	beq.n	8002f38 <HAL_SPI_TransmitReceive+0x98>
 8002f30:	1cbb      	adds	r3, r7, #2
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d104      	bne.n	8002f42 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002f38:	232b      	movs	r3, #43	; 0x2b
 8002f3a:	18fb      	adds	r3, r7, r3
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002f40:	e15a      	b.n	80031f8 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2251      	movs	r2, #81	; 0x51
 8002f46:	5c9b      	ldrb	r3, [r3, r2]
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d003      	beq.n	8002f56 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2251      	movs	r2, #81	; 0x51
 8002f52:	2105      	movs	r1, #5
 8002f54:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	1cba      	adds	r2, r7, #2
 8002f66:	8812      	ldrh	r2, [r2, #0]
 8002f68:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	1cba      	adds	r2, r7, #2
 8002f6e:	8812      	ldrh	r2, [r2, #0]
 8002f70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	68ba      	ldr	r2, [r7, #8]
 8002f76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	1cba      	adds	r2, r7, #2
 8002f7c:	8812      	ldrh	r2, [r2, #0]
 8002f7e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	1cba      	adds	r2, r7, #2
 8002f84:	8812      	ldrh	r2, [r2, #0]
 8002f86:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2240      	movs	r2, #64	; 0x40
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	2b40      	cmp	r3, #64	; 0x40
 8002fa0:	d007      	beq.n	8002fb2 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2140      	movs	r1, #64	; 0x40
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	2380      	movs	r3, #128	; 0x80
 8002fb8:	011b      	lsls	r3, r3, #4
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d000      	beq.n	8002fc0 <HAL_SPI_TransmitReceive+0x120>
 8002fbe:	e07a      	b.n	80030b6 <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d004      	beq.n	8002fd2 <HAL_SPI_TransmitReceive+0x132>
 8002fc8:	231a      	movs	r3, #26
 8002fca:	18fb      	adds	r3, r7, r3
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d166      	bne.n	80030a0 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	881a      	ldrh	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	1c9a      	adds	r2, r3, #2
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ff6:	e053      	b.n	80030a0 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	2202      	movs	r2, #2
 8003000:	4013      	ands	r3, r2
 8003002:	2b02      	cmp	r3, #2
 8003004:	d11b      	bne.n	800303e <HAL_SPI_TransmitReceive+0x19e>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800300a:	b29b      	uxth	r3, r3
 800300c:	2b00      	cmp	r3, #0
 800300e:	d016      	beq.n	800303e <HAL_SPI_TransmitReceive+0x19e>
 8003010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003012:	2b01      	cmp	r3, #1
 8003014:	d113      	bne.n	800303e <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301a:	881a      	ldrh	r2, [r3, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	1c9a      	adds	r2, r3, #2
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003030:	b29b      	uxth	r3, r3
 8003032:	3b01      	subs	r3, #1
 8003034:	b29a      	uxth	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800303a:	2300      	movs	r3, #0
 800303c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	2201      	movs	r2, #1
 8003046:	4013      	ands	r3, r2
 8003048:	2b01      	cmp	r3, #1
 800304a:	d119      	bne.n	8003080 <HAL_SPI_TransmitReceive+0x1e0>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003050:	b29b      	uxth	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d014      	beq.n	8003080 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003060:	b292      	uxth	r2, r2
 8003062:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003068:	1c9a      	adds	r2, r3, #2
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003072:	b29b      	uxth	r3, r3
 8003074:	3b01      	subs	r3, #1
 8003076:	b29a      	uxth	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800307c:	2301      	movs	r3, #1
 800307e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003080:	f7fe fb26 	bl	80016d0 <HAL_GetTick>
 8003084:	0002      	movs	r2, r0
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800308c:	429a      	cmp	r2, r3
 800308e:	d807      	bhi.n	80030a0 <HAL_SPI_TransmitReceive+0x200>
 8003090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003092:	3301      	adds	r3, #1
 8003094:	d004      	beq.n	80030a0 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 8003096:	232b      	movs	r3, #43	; 0x2b
 8003098:	18fb      	adds	r3, r7, r3
 800309a:	2203      	movs	r2, #3
 800309c:	701a      	strb	r2, [r3, #0]
        goto error;
 800309e:	e0ab      	b.n	80031f8 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1a6      	bne.n	8002ff8 <HAL_SPI_TransmitReceive+0x158>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1a1      	bne.n	8002ff8 <HAL_SPI_TransmitReceive+0x158>
 80030b4:	e07f      	b.n	80031b6 <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d005      	beq.n	80030ca <HAL_SPI_TransmitReceive+0x22a>
 80030be:	231a      	movs	r3, #26
 80030c0:	18fb      	adds	r3, r7, r3
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d000      	beq.n	80030ca <HAL_SPI_TransmitReceive+0x22a>
 80030c8:	e06b      	b.n	80031a2 <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	330c      	adds	r3, #12
 80030d4:	7812      	ldrb	r2, [r2, #0]
 80030d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030dc:	1c5a      	adds	r2, r3, #1
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	3b01      	subs	r3, #1
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030f0:	e057      	b.n	80031a2 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2202      	movs	r2, #2
 80030fa:	4013      	ands	r3, r2
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d11c      	bne.n	800313a <HAL_SPI_TransmitReceive+0x29a>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003104:	b29b      	uxth	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d017      	beq.n	800313a <HAL_SPI_TransmitReceive+0x29a>
 800310a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310c:	2b01      	cmp	r3, #1
 800310e:	d114      	bne.n	800313a <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	330c      	adds	r3, #12
 800311a:	7812      	ldrb	r2, [r2, #0]
 800311c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	1c5a      	adds	r2, r3, #1
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800312c:	b29b      	uxth	r3, r3
 800312e:	3b01      	subs	r3, #1
 8003130:	b29a      	uxth	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003136:	2300      	movs	r3, #0
 8003138:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	2201      	movs	r2, #1
 8003142:	4013      	ands	r3, r2
 8003144:	2b01      	cmp	r3, #1
 8003146:	d119      	bne.n	800317c <HAL_SPI_TransmitReceive+0x2dc>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800314c:	b29b      	uxth	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d014      	beq.n	800317c <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68da      	ldr	r2, [r3, #12]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315c:	b2d2      	uxtb	r2, r2
 800315e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003164:	1c5a      	adds	r2, r3, #1
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800316e:	b29b      	uxth	r3, r3
 8003170:	3b01      	subs	r3, #1
 8003172:	b29a      	uxth	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003178:	2301      	movs	r3, #1
 800317a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800317c:	f7fe faa8 	bl	80016d0 <HAL_GetTick>
 8003180:	0002      	movs	r2, r0
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003188:	429a      	cmp	r2, r3
 800318a:	d802      	bhi.n	8003192 <HAL_SPI_TransmitReceive+0x2f2>
 800318c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800318e:	3301      	adds	r3, #1
 8003190:	d102      	bne.n	8003198 <HAL_SPI_TransmitReceive+0x2f8>
 8003192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003194:	2b00      	cmp	r3, #0
 8003196:	d104      	bne.n	80031a2 <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 8003198:	232b      	movs	r3, #43	; 0x2b
 800319a:	18fb      	adds	r3, r7, r3
 800319c:	2203      	movs	r2, #3
 800319e:	701a      	strb	r2, [r3, #0]
        goto error;
 80031a0:	e02a      	b.n	80031f8 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1a2      	bne.n	80030f2 <HAL_SPI_TransmitReceive+0x252>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d19d      	bne.n	80030f2 <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	0018      	movs	r0, r3
 80031be:	f000 f923 	bl	8003408 <SPI_EndRxTxTransaction>
 80031c2:	1e03      	subs	r3, r0, #0
 80031c4:	d007      	beq.n	80031d6 <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 80031c6:	232b      	movs	r3, #43	; 0x2b
 80031c8:	18fb      	adds	r3, r7, r3
 80031ca:	2201      	movs	r2, #1
 80031cc:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2220      	movs	r2, #32
 80031d2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80031d4:	e010      	b.n	80031f8 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10b      	bne.n	80031f6 <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031de:	2300      	movs	r3, #0
 80031e0:	617b      	str	r3, [r7, #20]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	617b      	str	r3, [r7, #20]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	617b      	str	r3, [r7, #20]
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	e000      	b.n	80031f8 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 80031f6:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2251      	movs	r2, #81	; 0x51
 80031fc:	2101      	movs	r1, #1
 80031fe:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2250      	movs	r2, #80	; 0x50
 8003204:	2100      	movs	r1, #0
 8003206:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003208:	232b      	movs	r3, #43	; 0x2b
 800320a:	18fb      	adds	r3, r7, r3
 800320c:	781b      	ldrb	r3, [r3, #0]
}
 800320e:	0018      	movs	r0, r3
 8003210:	46bd      	mov	sp, r7
 8003212:	b00c      	add	sp, #48	; 0x30
 8003214:	bd80      	pop	{r7, pc}
	...

08003218 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b088      	sub	sp, #32
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	603b      	str	r3, [r7, #0]
 8003224:	1dfb      	adds	r3, r7, #7
 8003226:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003228:	f7fe fa52 	bl	80016d0 <HAL_GetTick>
 800322c:	0002      	movs	r2, r0
 800322e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003230:	1a9b      	subs	r3, r3, r2
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	18d3      	adds	r3, r2, r3
 8003236:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003238:	f7fe fa4a 	bl	80016d0 <HAL_GetTick>
 800323c:	0003      	movs	r3, r0
 800323e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003240:	4b3a      	ldr	r3, [pc, #232]	; (800332c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	015b      	lsls	r3, r3, #5
 8003246:	0d1b      	lsrs	r3, r3, #20
 8003248:	69fa      	ldr	r2, [r7, #28]
 800324a:	4353      	muls	r3, r2
 800324c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800324e:	e058      	b.n	8003302 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	3301      	adds	r3, #1
 8003254:	d055      	beq.n	8003302 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003256:	f7fe fa3b 	bl	80016d0 <HAL_GetTick>
 800325a:	0002      	movs	r2, r0
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	69fa      	ldr	r2, [r7, #28]
 8003262:	429a      	cmp	r2, r3
 8003264:	d902      	bls.n	800326c <SPI_WaitFlagStateUntilTimeout+0x54>
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d142      	bne.n	80032f2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	21e0      	movs	r1, #224	; 0xe0
 8003278:	438a      	bics	r2, r1
 800327a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	2382      	movs	r3, #130	; 0x82
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	429a      	cmp	r2, r3
 8003286:	d113      	bne.n	80032b0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	2380      	movs	r3, #128	; 0x80
 800328e:	021b      	lsls	r3, r3, #8
 8003290:	429a      	cmp	r2, r3
 8003292:	d005      	beq.n	80032a0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	2380      	movs	r3, #128	; 0x80
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	429a      	cmp	r2, r3
 800329e:	d107      	bne.n	80032b0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2140      	movs	r1, #64	; 0x40
 80032ac:	438a      	bics	r2, r1
 80032ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032b4:	2380      	movs	r3, #128	; 0x80
 80032b6:	019b      	lsls	r3, r3, #6
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d110      	bne.n	80032de <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	491a      	ldr	r1, [pc, #104]	; (8003330 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80032c8:	400a      	ands	r2, r1
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2180      	movs	r1, #128	; 0x80
 80032d8:	0189      	lsls	r1, r1, #6
 80032da:	430a      	orrs	r2, r1
 80032dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2251      	movs	r2, #81	; 0x51
 80032e2:	2101      	movs	r1, #1
 80032e4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2250      	movs	r2, #80	; 0x50
 80032ea:	2100      	movs	r1, #0
 80032ec:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e017      	b.n	8003322 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d101      	bne.n	80032fc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80032f8:	2300      	movs	r3, #0
 80032fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	3b01      	subs	r3, #1
 8003300:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	4013      	ands	r3, r2
 800330c:	68ba      	ldr	r2, [r7, #8]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	425a      	negs	r2, r3
 8003312:	4153      	adcs	r3, r2
 8003314:	b2db      	uxtb	r3, r3
 8003316:	001a      	movs	r2, r3
 8003318:	1dfb      	adds	r3, r7, #7
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	429a      	cmp	r2, r3
 800331e:	d197      	bne.n	8003250 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	0018      	movs	r0, r3
 8003324:	46bd      	mov	sp, r7
 8003326:	b008      	add	sp, #32
 8003328:	bd80      	pop	{r7, pc}
 800332a:	46c0      	nop			; (mov r8, r8)
 800332c:	20000000 	.word	0x20000000
 8003330:	ffffdfff 	.word	0xffffdfff

08003334 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af02      	add	r7, sp, #8
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	2382      	movs	r3, #130	; 0x82
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	429a      	cmp	r2, r3
 800334a:	d113      	bne.n	8003374 <SPI_EndRxTransaction+0x40>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	2380      	movs	r3, #128	; 0x80
 8003352:	021b      	lsls	r3, r3, #8
 8003354:	429a      	cmp	r2, r3
 8003356:	d005      	beq.n	8003364 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	2380      	movs	r3, #128	; 0x80
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	429a      	cmp	r2, r3
 8003362:	d107      	bne.n	8003374 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2140      	movs	r1, #64	; 0x40
 8003370:	438a      	bics	r2, r1
 8003372:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	2382      	movs	r3, #130	; 0x82
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	429a      	cmp	r2, r3
 800337e:	d12b      	bne.n	80033d8 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	2380      	movs	r3, #128	; 0x80
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	429a      	cmp	r2, r3
 800338a:	d012      	beq.n	80033b2 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	0013      	movs	r3, r2
 8003396:	2200      	movs	r2, #0
 8003398:	2180      	movs	r1, #128	; 0x80
 800339a:	f7ff ff3d 	bl	8003218 <SPI_WaitFlagStateUntilTimeout>
 800339e:	1e03      	subs	r3, r0, #0
 80033a0:	d02d      	beq.n	80033fe <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a6:	2220      	movs	r2, #32
 80033a8:	431a      	orrs	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e026      	b.n	8003400 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	0013      	movs	r3, r2
 80033bc:	2200      	movs	r2, #0
 80033be:	2101      	movs	r1, #1
 80033c0:	f7ff ff2a 	bl	8003218 <SPI_WaitFlagStateUntilTimeout>
 80033c4:	1e03      	subs	r3, r0, #0
 80033c6:	d01a      	beq.n	80033fe <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033cc:	2220      	movs	r2, #32
 80033ce:	431a      	orrs	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e013      	b.n	8003400 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	0013      	movs	r3, r2
 80033e2:	2200      	movs	r2, #0
 80033e4:	2101      	movs	r1, #1
 80033e6:	f7ff ff17 	bl	8003218 <SPI_WaitFlagStateUntilTimeout>
 80033ea:	1e03      	subs	r3, r0, #0
 80033ec:	d007      	beq.n	80033fe <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f2:	2220      	movs	r2, #32
 80033f4:	431a      	orrs	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e000      	b.n	8003400 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	0018      	movs	r0, r3
 8003402:	46bd      	mov	sp, r7
 8003404:	b004      	add	sp, #16
 8003406:	bd80      	pop	{r7, pc}

08003408 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b088      	sub	sp, #32
 800340c:	af02      	add	r7, sp, #8
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003414:	4b1d      	ldr	r3, [pc, #116]	; (800348c <SPI_EndRxTxTransaction+0x84>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	491d      	ldr	r1, [pc, #116]	; (8003490 <SPI_EndRxTxTransaction+0x88>)
 800341a:	0018      	movs	r0, r3
 800341c:	f7fc fe86 	bl	800012c <__udivsi3>
 8003420:	0003      	movs	r3, r0
 8003422:	001a      	movs	r2, r3
 8003424:	0013      	movs	r3, r2
 8003426:	015b      	lsls	r3, r3, #5
 8003428:	1a9b      	subs	r3, r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	189b      	adds	r3, r3, r2
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	2382      	movs	r3, #130	; 0x82
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	429a      	cmp	r2, r3
 800343c:	d112      	bne.n	8003464 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	0013      	movs	r3, r2
 8003448:	2200      	movs	r2, #0
 800344a:	2180      	movs	r1, #128	; 0x80
 800344c:	f7ff fee4 	bl	8003218 <SPI_WaitFlagStateUntilTimeout>
 8003450:	1e03      	subs	r3, r0, #0
 8003452:	d016      	beq.n	8003482 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003458:	2220      	movs	r2, #32
 800345a:	431a      	orrs	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e00f      	b.n	8003484 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00a      	beq.n	8003480 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	3b01      	subs	r3, #1
 800346e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	2280      	movs	r2, #128	; 0x80
 8003478:	4013      	ands	r3, r2
 800347a:	2b80      	cmp	r3, #128	; 0x80
 800347c:	d0f2      	beq.n	8003464 <SPI_EndRxTxTransaction+0x5c>
 800347e:	e000      	b.n	8003482 <SPI_EndRxTxTransaction+0x7a>
        break;
 8003480:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	0018      	movs	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	b006      	add	sp, #24
 800348a:	bd80      	pop	{r7, pc}
 800348c:	20000000 	.word	0x20000000
 8003490:	016e3600 	.word	0x016e3600

08003494 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e044      	b.n	8003530 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d107      	bne.n	80034be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2274      	movs	r2, #116	; 0x74
 80034b2:	2100      	movs	r1, #0
 80034b4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	0018      	movs	r0, r3
 80034ba:	f7fd fc7f 	bl	8000dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2224      	movs	r2, #36	; 0x24
 80034c2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2101      	movs	r1, #1
 80034d0:	438a      	bics	r2, r1
 80034d2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	0018      	movs	r0, r3
 80034d8:	f000 f8d8 	bl	800368c <UART_SetConfig>
 80034dc:	0003      	movs	r3, r0
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d101      	bne.n	80034e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e024      	b.n	8003530 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	0018      	movs	r0, r3
 80034f2:	f000 fb89 	bl	8003c08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	490d      	ldr	r1, [pc, #52]	; (8003538 <HAL_UART_Init+0xa4>)
 8003502:	400a      	ands	r2, r1
 8003504:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	212a      	movs	r1, #42	; 0x2a
 8003512:	438a      	bics	r2, r1
 8003514:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2101      	movs	r1, #1
 8003522:	430a      	orrs	r2, r1
 8003524:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	0018      	movs	r0, r3
 800352a:	f000 fc21 	bl	8003d70 <UART_CheckIdleState>
 800352e:	0003      	movs	r3, r0
}
 8003530:	0018      	movs	r0, r3
 8003532:	46bd      	mov	sp, r7
 8003534:	b002      	add	sp, #8
 8003536:	bd80      	pop	{r7, pc}
 8003538:	ffffb7ff 	.word	0xffffb7ff

0800353c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b08a      	sub	sp, #40	; 0x28
 8003540:	af02      	add	r7, sp, #8
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	603b      	str	r3, [r7, #0]
 8003548:	1dbb      	adds	r3, r7, #6
 800354a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003550:	2b20      	cmp	r3, #32
 8003552:	d000      	beq.n	8003556 <HAL_UART_Transmit+0x1a>
 8003554:	e095      	b.n	8003682 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d003      	beq.n	8003564 <HAL_UART_Transmit+0x28>
 800355c:	1dbb      	adds	r3, r7, #6
 800355e:	881b      	ldrh	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e08d      	b.n	8003684 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	2380      	movs	r3, #128	; 0x80
 800356e:	015b      	lsls	r3, r3, #5
 8003570:	429a      	cmp	r2, r3
 8003572:	d109      	bne.n	8003588 <HAL_UART_Transmit+0x4c>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d105      	bne.n	8003588 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2201      	movs	r2, #1
 8003580:	4013      	ands	r3, r2
 8003582:	d001      	beq.n	8003588 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e07d      	b.n	8003684 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2274      	movs	r2, #116	; 0x74
 800358c:	5c9b      	ldrb	r3, [r3, r2]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d101      	bne.n	8003596 <HAL_UART_Transmit+0x5a>
 8003592:	2302      	movs	r3, #2
 8003594:	e076      	b.n	8003684 <HAL_UART_Transmit+0x148>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2274      	movs	r2, #116	; 0x74
 800359a:	2101      	movs	r1, #1
 800359c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2280      	movs	r2, #128	; 0x80
 80035a2:	2100      	movs	r1, #0
 80035a4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2221      	movs	r2, #33	; 0x21
 80035aa:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035ac:	f7fe f890 	bl	80016d0 <HAL_GetTick>
 80035b0:	0003      	movs	r3, r0
 80035b2:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	1dba      	adds	r2, r7, #6
 80035b8:	2150      	movs	r1, #80	; 0x50
 80035ba:	8812      	ldrh	r2, [r2, #0]
 80035bc:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	1dba      	adds	r2, r7, #6
 80035c2:	2152      	movs	r1, #82	; 0x52
 80035c4:	8812      	ldrh	r2, [r2, #0]
 80035c6:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	2380      	movs	r3, #128	; 0x80
 80035ce:	015b      	lsls	r3, r3, #5
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d108      	bne.n	80035e6 <HAL_UART_Transmit+0xaa>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d104      	bne.n	80035e6 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80035dc:	2300      	movs	r3, #0
 80035de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	61bb      	str	r3, [r7, #24]
 80035e4:	e003      	b.n	80035ee <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035ea:	2300      	movs	r3, #0
 80035ec:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2274      	movs	r2, #116	; 0x74
 80035f2:	2100      	movs	r1, #0
 80035f4:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80035f6:	e02c      	b.n	8003652 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	0013      	movs	r3, r2
 8003602:	2200      	movs	r2, #0
 8003604:	2180      	movs	r1, #128	; 0x80
 8003606:	f000 fbfb 	bl	8003e00 <UART_WaitOnFlagUntilTimeout>
 800360a:	1e03      	subs	r3, r0, #0
 800360c:	d001      	beq.n	8003612 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e038      	b.n	8003684 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10b      	bne.n	8003630 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	881b      	ldrh	r3, [r3, #0]
 800361c:	001a      	movs	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	05d2      	lsls	r2, r2, #23
 8003624:	0dd2      	lsrs	r2, r2, #23
 8003626:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	3302      	adds	r3, #2
 800362c:	61bb      	str	r3, [r7, #24]
 800362e:	e007      	b.n	8003640 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	781a      	ldrb	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	3301      	adds	r3, #1
 800363e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2252      	movs	r2, #82	; 0x52
 8003644:	5a9b      	ldrh	r3, [r3, r2]
 8003646:	b29b      	uxth	r3, r3
 8003648:	3b01      	subs	r3, #1
 800364a:	b299      	uxth	r1, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2252      	movs	r2, #82	; 0x52
 8003650:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2252      	movs	r2, #82	; 0x52
 8003656:	5a9b      	ldrh	r3, [r3, r2]
 8003658:	b29b      	uxth	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1cc      	bne.n	80035f8 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	0013      	movs	r3, r2
 8003668:	2200      	movs	r2, #0
 800366a:	2140      	movs	r1, #64	; 0x40
 800366c:	f000 fbc8 	bl	8003e00 <UART_WaitOnFlagUntilTimeout>
 8003670:	1e03      	subs	r3, r0, #0
 8003672:	d001      	beq.n	8003678 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e005      	b.n	8003684 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2220      	movs	r2, #32
 800367c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	e000      	b.n	8003684 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8003682:	2302      	movs	r3, #2
  }
}
 8003684:	0018      	movs	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	b008      	add	sp, #32
 800368a:	bd80      	pop	{r7, pc}

0800368c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800368c:	b5b0      	push	{r4, r5, r7, lr}
 800368e:	b08e      	sub	sp, #56	; 0x38
 8003690:	af00      	add	r7, sp, #0
 8003692:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003694:	231a      	movs	r3, #26
 8003696:	2218      	movs	r2, #24
 8003698:	4694      	mov	ip, r2
 800369a:	44bc      	add	ip, r7
 800369c:	4463      	add	r3, ip
 800369e:	2200      	movs	r2, #0
 80036a0:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	431a      	orrs	r2, r3
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	695b      	ldr	r3, [r3, #20]
 80036b0:	431a      	orrs	r2, r3
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4ab0      	ldr	r2, [pc, #704]	; (8003984 <UART_SetConfig+0x2f8>)
 80036c2:	4013      	ands	r3, r2
 80036c4:	0019      	movs	r1, r3
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036cc:	430a      	orrs	r2, r1
 80036ce:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	4aac      	ldr	r2, [pc, #688]	; (8003988 <UART_SetConfig+0x2fc>)
 80036d8:	4013      	ands	r3, r2
 80036da:	0019      	movs	r1, r3
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	68da      	ldr	r2, [r3, #12]
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4aa6      	ldr	r2, [pc, #664]	; (800398c <UART_SetConfig+0x300>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d004      	beq.n	8003702 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036fe:	4313      	orrs	r3, r2
 8003700:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	4aa1      	ldr	r2, [pc, #644]	; (8003990 <UART_SetConfig+0x304>)
 800370a:	4013      	ands	r3, r2
 800370c:	0019      	movs	r1, r3
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003714:	430a      	orrs	r2, r1
 8003716:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a9d      	ldr	r2, [pc, #628]	; (8003994 <UART_SetConfig+0x308>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d136      	bne.n	8003790 <UART_SetConfig+0x104>
 8003722:	4b9d      	ldr	r3, [pc, #628]	; (8003998 <UART_SetConfig+0x30c>)
 8003724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003726:	2203      	movs	r2, #3
 8003728:	4013      	ands	r3, r2
 800372a:	2b03      	cmp	r3, #3
 800372c:	d020      	beq.n	8003770 <UART_SetConfig+0xe4>
 800372e:	d827      	bhi.n	8003780 <UART_SetConfig+0xf4>
 8003730:	2b02      	cmp	r3, #2
 8003732:	d00d      	beq.n	8003750 <UART_SetConfig+0xc4>
 8003734:	d824      	bhi.n	8003780 <UART_SetConfig+0xf4>
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <UART_SetConfig+0xb4>
 800373a:	2b01      	cmp	r3, #1
 800373c:	d010      	beq.n	8003760 <UART_SetConfig+0xd4>
 800373e:	e01f      	b.n	8003780 <UART_SetConfig+0xf4>
 8003740:	231b      	movs	r3, #27
 8003742:	2218      	movs	r2, #24
 8003744:	4694      	mov	ip, r2
 8003746:	44bc      	add	ip, r7
 8003748:	4463      	add	r3, ip
 800374a:	2201      	movs	r2, #1
 800374c:	701a      	strb	r2, [r3, #0]
 800374e:	e0c5      	b.n	80038dc <UART_SetConfig+0x250>
 8003750:	231b      	movs	r3, #27
 8003752:	2218      	movs	r2, #24
 8003754:	4694      	mov	ip, r2
 8003756:	44bc      	add	ip, r7
 8003758:	4463      	add	r3, ip
 800375a:	2202      	movs	r2, #2
 800375c:	701a      	strb	r2, [r3, #0]
 800375e:	e0bd      	b.n	80038dc <UART_SetConfig+0x250>
 8003760:	231b      	movs	r3, #27
 8003762:	2218      	movs	r2, #24
 8003764:	4694      	mov	ip, r2
 8003766:	44bc      	add	ip, r7
 8003768:	4463      	add	r3, ip
 800376a:	2204      	movs	r2, #4
 800376c:	701a      	strb	r2, [r3, #0]
 800376e:	e0b5      	b.n	80038dc <UART_SetConfig+0x250>
 8003770:	231b      	movs	r3, #27
 8003772:	2218      	movs	r2, #24
 8003774:	4694      	mov	ip, r2
 8003776:	44bc      	add	ip, r7
 8003778:	4463      	add	r3, ip
 800377a:	2208      	movs	r2, #8
 800377c:	701a      	strb	r2, [r3, #0]
 800377e:	e0ad      	b.n	80038dc <UART_SetConfig+0x250>
 8003780:	231b      	movs	r3, #27
 8003782:	2218      	movs	r2, #24
 8003784:	4694      	mov	ip, r2
 8003786:	44bc      	add	ip, r7
 8003788:	4463      	add	r3, ip
 800378a:	2210      	movs	r2, #16
 800378c:	701a      	strb	r2, [r3, #0]
 800378e:	e0a5      	b.n	80038dc <UART_SetConfig+0x250>
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a81      	ldr	r2, [pc, #516]	; (800399c <UART_SetConfig+0x310>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d136      	bne.n	8003808 <UART_SetConfig+0x17c>
 800379a:	4b7f      	ldr	r3, [pc, #508]	; (8003998 <UART_SetConfig+0x30c>)
 800379c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800379e:	220c      	movs	r2, #12
 80037a0:	4013      	ands	r3, r2
 80037a2:	2b0c      	cmp	r3, #12
 80037a4:	d020      	beq.n	80037e8 <UART_SetConfig+0x15c>
 80037a6:	d827      	bhi.n	80037f8 <UART_SetConfig+0x16c>
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	d00d      	beq.n	80037c8 <UART_SetConfig+0x13c>
 80037ac:	d824      	bhi.n	80037f8 <UART_SetConfig+0x16c>
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d002      	beq.n	80037b8 <UART_SetConfig+0x12c>
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d010      	beq.n	80037d8 <UART_SetConfig+0x14c>
 80037b6:	e01f      	b.n	80037f8 <UART_SetConfig+0x16c>
 80037b8:	231b      	movs	r3, #27
 80037ba:	2218      	movs	r2, #24
 80037bc:	4694      	mov	ip, r2
 80037be:	44bc      	add	ip, r7
 80037c0:	4463      	add	r3, ip
 80037c2:	2200      	movs	r2, #0
 80037c4:	701a      	strb	r2, [r3, #0]
 80037c6:	e089      	b.n	80038dc <UART_SetConfig+0x250>
 80037c8:	231b      	movs	r3, #27
 80037ca:	2218      	movs	r2, #24
 80037cc:	4694      	mov	ip, r2
 80037ce:	44bc      	add	ip, r7
 80037d0:	4463      	add	r3, ip
 80037d2:	2202      	movs	r2, #2
 80037d4:	701a      	strb	r2, [r3, #0]
 80037d6:	e081      	b.n	80038dc <UART_SetConfig+0x250>
 80037d8:	231b      	movs	r3, #27
 80037da:	2218      	movs	r2, #24
 80037dc:	4694      	mov	ip, r2
 80037de:	44bc      	add	ip, r7
 80037e0:	4463      	add	r3, ip
 80037e2:	2204      	movs	r2, #4
 80037e4:	701a      	strb	r2, [r3, #0]
 80037e6:	e079      	b.n	80038dc <UART_SetConfig+0x250>
 80037e8:	231b      	movs	r3, #27
 80037ea:	2218      	movs	r2, #24
 80037ec:	4694      	mov	ip, r2
 80037ee:	44bc      	add	ip, r7
 80037f0:	4463      	add	r3, ip
 80037f2:	2208      	movs	r2, #8
 80037f4:	701a      	strb	r2, [r3, #0]
 80037f6:	e071      	b.n	80038dc <UART_SetConfig+0x250>
 80037f8:	231b      	movs	r3, #27
 80037fa:	2218      	movs	r2, #24
 80037fc:	4694      	mov	ip, r2
 80037fe:	44bc      	add	ip, r7
 8003800:	4463      	add	r3, ip
 8003802:	2210      	movs	r2, #16
 8003804:	701a      	strb	r2, [r3, #0]
 8003806:	e069      	b.n	80038dc <UART_SetConfig+0x250>
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a64      	ldr	r2, [pc, #400]	; (80039a0 <UART_SetConfig+0x314>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d107      	bne.n	8003822 <UART_SetConfig+0x196>
 8003812:	231b      	movs	r3, #27
 8003814:	2218      	movs	r2, #24
 8003816:	4694      	mov	ip, r2
 8003818:	44bc      	add	ip, r7
 800381a:	4463      	add	r3, ip
 800381c:	2200      	movs	r2, #0
 800381e:	701a      	strb	r2, [r3, #0]
 8003820:	e05c      	b.n	80038dc <UART_SetConfig+0x250>
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a5f      	ldr	r2, [pc, #380]	; (80039a4 <UART_SetConfig+0x318>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d107      	bne.n	800383c <UART_SetConfig+0x1b0>
 800382c:	231b      	movs	r3, #27
 800382e:	2218      	movs	r2, #24
 8003830:	4694      	mov	ip, r2
 8003832:	44bc      	add	ip, r7
 8003834:	4463      	add	r3, ip
 8003836:	2200      	movs	r2, #0
 8003838:	701a      	strb	r2, [r3, #0]
 800383a:	e04f      	b.n	80038dc <UART_SetConfig+0x250>
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a52      	ldr	r2, [pc, #328]	; (800398c <UART_SetConfig+0x300>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d143      	bne.n	80038ce <UART_SetConfig+0x242>
 8003846:	4b54      	ldr	r3, [pc, #336]	; (8003998 <UART_SetConfig+0x30c>)
 8003848:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800384a:	23c0      	movs	r3, #192	; 0xc0
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	4013      	ands	r3, r2
 8003850:	22c0      	movs	r2, #192	; 0xc0
 8003852:	0112      	lsls	r2, r2, #4
 8003854:	4293      	cmp	r3, r2
 8003856:	d02a      	beq.n	80038ae <UART_SetConfig+0x222>
 8003858:	22c0      	movs	r2, #192	; 0xc0
 800385a:	0112      	lsls	r2, r2, #4
 800385c:	4293      	cmp	r3, r2
 800385e:	d82e      	bhi.n	80038be <UART_SetConfig+0x232>
 8003860:	2280      	movs	r2, #128	; 0x80
 8003862:	0112      	lsls	r2, r2, #4
 8003864:	4293      	cmp	r3, r2
 8003866:	d012      	beq.n	800388e <UART_SetConfig+0x202>
 8003868:	2280      	movs	r2, #128	; 0x80
 800386a:	0112      	lsls	r2, r2, #4
 800386c:	4293      	cmp	r3, r2
 800386e:	d826      	bhi.n	80038be <UART_SetConfig+0x232>
 8003870:	2b00      	cmp	r3, #0
 8003872:	d004      	beq.n	800387e <UART_SetConfig+0x1f2>
 8003874:	2280      	movs	r2, #128	; 0x80
 8003876:	00d2      	lsls	r2, r2, #3
 8003878:	4293      	cmp	r3, r2
 800387a:	d010      	beq.n	800389e <UART_SetConfig+0x212>
 800387c:	e01f      	b.n	80038be <UART_SetConfig+0x232>
 800387e:	231b      	movs	r3, #27
 8003880:	2218      	movs	r2, #24
 8003882:	4694      	mov	ip, r2
 8003884:	44bc      	add	ip, r7
 8003886:	4463      	add	r3, ip
 8003888:	2200      	movs	r2, #0
 800388a:	701a      	strb	r2, [r3, #0]
 800388c:	e026      	b.n	80038dc <UART_SetConfig+0x250>
 800388e:	231b      	movs	r3, #27
 8003890:	2218      	movs	r2, #24
 8003892:	4694      	mov	ip, r2
 8003894:	44bc      	add	ip, r7
 8003896:	4463      	add	r3, ip
 8003898:	2202      	movs	r2, #2
 800389a:	701a      	strb	r2, [r3, #0]
 800389c:	e01e      	b.n	80038dc <UART_SetConfig+0x250>
 800389e:	231b      	movs	r3, #27
 80038a0:	2218      	movs	r2, #24
 80038a2:	4694      	mov	ip, r2
 80038a4:	44bc      	add	ip, r7
 80038a6:	4463      	add	r3, ip
 80038a8:	2204      	movs	r2, #4
 80038aa:	701a      	strb	r2, [r3, #0]
 80038ac:	e016      	b.n	80038dc <UART_SetConfig+0x250>
 80038ae:	231b      	movs	r3, #27
 80038b0:	2218      	movs	r2, #24
 80038b2:	4694      	mov	ip, r2
 80038b4:	44bc      	add	ip, r7
 80038b6:	4463      	add	r3, ip
 80038b8:	2208      	movs	r2, #8
 80038ba:	701a      	strb	r2, [r3, #0]
 80038bc:	e00e      	b.n	80038dc <UART_SetConfig+0x250>
 80038be:	231b      	movs	r3, #27
 80038c0:	2218      	movs	r2, #24
 80038c2:	4694      	mov	ip, r2
 80038c4:	44bc      	add	ip, r7
 80038c6:	4463      	add	r3, ip
 80038c8:	2210      	movs	r2, #16
 80038ca:	701a      	strb	r2, [r3, #0]
 80038cc:	e006      	b.n	80038dc <UART_SetConfig+0x250>
 80038ce:	231b      	movs	r3, #27
 80038d0:	2218      	movs	r2, #24
 80038d2:	4694      	mov	ip, r2
 80038d4:	44bc      	add	ip, r7
 80038d6:	4463      	add	r3, ip
 80038d8:	2210      	movs	r2, #16
 80038da:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a2a      	ldr	r2, [pc, #168]	; (800398c <UART_SetConfig+0x300>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d000      	beq.n	80038e8 <UART_SetConfig+0x25c>
 80038e6:	e09e      	b.n	8003a26 <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80038e8:	231b      	movs	r3, #27
 80038ea:	2218      	movs	r2, #24
 80038ec:	4694      	mov	ip, r2
 80038ee:	44bc      	add	ip, r7
 80038f0:	4463      	add	r3, ip
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	2b08      	cmp	r3, #8
 80038f6:	d01d      	beq.n	8003934 <UART_SetConfig+0x2a8>
 80038f8:	dc20      	bgt.n	800393c <UART_SetConfig+0x2b0>
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	d015      	beq.n	800392a <UART_SetConfig+0x29e>
 80038fe:	dc1d      	bgt.n	800393c <UART_SetConfig+0x2b0>
 8003900:	2b00      	cmp	r3, #0
 8003902:	d002      	beq.n	800390a <UART_SetConfig+0x27e>
 8003904:	2b02      	cmp	r3, #2
 8003906:	d005      	beq.n	8003914 <UART_SetConfig+0x288>
 8003908:	e018      	b.n	800393c <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800390a:	f7fe ff8d 	bl	8002828 <HAL_RCC_GetPCLK1Freq>
 800390e:	0003      	movs	r3, r0
 8003910:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003912:	e01d      	b.n	8003950 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003914:	4b20      	ldr	r3, [pc, #128]	; (8003998 <UART_SetConfig+0x30c>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2210      	movs	r2, #16
 800391a:	4013      	ands	r3, r2
 800391c:	d002      	beq.n	8003924 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800391e:	4b22      	ldr	r3, [pc, #136]	; (80039a8 <UART_SetConfig+0x31c>)
 8003920:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003922:	e015      	b.n	8003950 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 8003924:	4b21      	ldr	r3, [pc, #132]	; (80039ac <UART_SetConfig+0x320>)
 8003926:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003928:	e012      	b.n	8003950 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800392a:	f7fe fecd 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 800392e:	0003      	movs	r3, r0
 8003930:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003932:	e00d      	b.n	8003950 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003934:	2380      	movs	r3, #128	; 0x80
 8003936:	021b      	lsls	r3, r3, #8
 8003938:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800393a:	e009      	b.n	8003950 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 800393c:	2300      	movs	r3, #0
 800393e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003940:	231a      	movs	r3, #26
 8003942:	2218      	movs	r2, #24
 8003944:	4694      	mov	ip, r2
 8003946:	44bc      	add	ip, r7
 8003948:	4463      	add	r3, ip
 800394a:	2201      	movs	r2, #1
 800394c:	701a      	strb	r2, [r3, #0]
        break;
 800394e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003952:	2b00      	cmp	r3, #0
 8003954:	d100      	bne.n	8003958 <UART_SetConfig+0x2cc>
 8003956:	e13c      	b.n	8003bd2 <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	0013      	movs	r3, r2
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	189b      	adds	r3, r3, r2
 8003962:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003964:	429a      	cmp	r2, r3
 8003966:	d305      	bcc.n	8003974 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800396e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003970:	429a      	cmp	r2, r3
 8003972:	d91d      	bls.n	80039b0 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 8003974:	231a      	movs	r3, #26
 8003976:	2218      	movs	r2, #24
 8003978:	4694      	mov	ip, r2
 800397a:	44bc      	add	ip, r7
 800397c:	4463      	add	r3, ip
 800397e:	2201      	movs	r2, #1
 8003980:	701a      	strb	r2, [r3, #0]
 8003982:	e126      	b.n	8003bd2 <UART_SetConfig+0x546>
 8003984:	efff69f3 	.word	0xefff69f3
 8003988:	ffffcfff 	.word	0xffffcfff
 800398c:	40004800 	.word	0x40004800
 8003990:	fffff4ff 	.word	0xfffff4ff
 8003994:	40013800 	.word	0x40013800
 8003998:	40021000 	.word	0x40021000
 800399c:	40004400 	.word	0x40004400
 80039a0:	40004c00 	.word	0x40004c00
 80039a4:	40005000 	.word	0x40005000
 80039a8:	003d0900 	.word	0x003d0900
 80039ac:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80039b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b2:	613b      	str	r3, [r7, #16]
 80039b4:	2300      	movs	r3, #0
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	6939      	ldr	r1, [r7, #16]
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	000b      	movs	r3, r1
 80039be:	0e1b      	lsrs	r3, r3, #24
 80039c0:	0010      	movs	r0, r2
 80039c2:	0205      	lsls	r5, r0, #8
 80039c4:	431d      	orrs	r5, r3
 80039c6:	000b      	movs	r3, r1
 80039c8:	021c      	lsls	r4, r3, #8
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	085b      	lsrs	r3, r3, #1
 80039d0:	60bb      	str	r3, [r7, #8]
 80039d2:	2300      	movs	r3, #0
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	68b8      	ldr	r0, [r7, #8]
 80039d8:	68f9      	ldr	r1, [r7, #12]
 80039da:	1900      	adds	r0, r0, r4
 80039dc:	4169      	adcs	r1, r5
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	603b      	str	r3, [r7, #0]
 80039e4:	2300      	movs	r3, #0
 80039e6:	607b      	str	r3, [r7, #4]
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f7fc fc2a 	bl	8000244 <__aeabi_uldivmod>
 80039f0:	0002      	movs	r2, r0
 80039f2:	000b      	movs	r3, r1
 80039f4:	0013      	movs	r3, r2
 80039f6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80039f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039fa:	23c0      	movs	r3, #192	; 0xc0
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d309      	bcc.n	8003a16 <UART_SetConfig+0x38a>
 8003a02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a04:	2380      	movs	r3, #128	; 0x80
 8003a06:	035b      	lsls	r3, r3, #13
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d204      	bcs.n	8003a16 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a12:	60da      	str	r2, [r3, #12]
 8003a14:	e0dd      	b.n	8003bd2 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8003a16:	231a      	movs	r3, #26
 8003a18:	2218      	movs	r2, #24
 8003a1a:	4694      	mov	ip, r2
 8003a1c:	44bc      	add	ip, r7
 8003a1e:	4463      	add	r3, ip
 8003a20:	2201      	movs	r2, #1
 8003a22:	701a      	strb	r2, [r3, #0]
 8003a24:	e0d5      	b.n	8003bd2 <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	69da      	ldr	r2, [r3, #28]
 8003a2a:	2380      	movs	r3, #128	; 0x80
 8003a2c:	021b      	lsls	r3, r3, #8
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d000      	beq.n	8003a34 <UART_SetConfig+0x3a8>
 8003a32:	e074      	b.n	8003b1e <UART_SetConfig+0x492>
  {
    switch (clocksource)
 8003a34:	231b      	movs	r3, #27
 8003a36:	2218      	movs	r2, #24
 8003a38:	4694      	mov	ip, r2
 8003a3a:	44bc      	add	ip, r7
 8003a3c:	4463      	add	r3, ip
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	2b08      	cmp	r3, #8
 8003a42:	d822      	bhi.n	8003a8a <UART_SetConfig+0x3fe>
 8003a44:	009a      	lsls	r2, r3, #2
 8003a46:	4b6b      	ldr	r3, [pc, #428]	; (8003bf4 <UART_SetConfig+0x568>)
 8003a48:	18d3      	adds	r3, r2, r3
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a4e:	f7fe feeb 	bl	8002828 <HAL_RCC_GetPCLK1Freq>
 8003a52:	0003      	movs	r3, r0
 8003a54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a56:	e022      	b.n	8003a9e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a58:	f7fe fefc 	bl	8002854 <HAL_RCC_GetPCLK2Freq>
 8003a5c:	0003      	movs	r3, r0
 8003a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a60:	e01d      	b.n	8003a9e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a62:	4b65      	ldr	r3, [pc, #404]	; (8003bf8 <UART_SetConfig+0x56c>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2210      	movs	r2, #16
 8003a68:	4013      	ands	r3, r2
 8003a6a:	d002      	beq.n	8003a72 <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003a6c:	4b63      	ldr	r3, [pc, #396]	; (8003bfc <UART_SetConfig+0x570>)
 8003a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003a70:	e015      	b.n	8003a9e <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 8003a72:	4b63      	ldr	r3, [pc, #396]	; (8003c00 <UART_SetConfig+0x574>)
 8003a74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a76:	e012      	b.n	8003a9e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a78:	f7fe fe26 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 8003a7c:	0003      	movs	r3, r0
 8003a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a80:	e00d      	b.n	8003a9e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a82:	2380      	movs	r3, #128	; 0x80
 8003a84:	021b      	lsls	r3, r3, #8
 8003a86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a88:	e009      	b.n	8003a9e <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003a8e:	231a      	movs	r3, #26
 8003a90:	2218      	movs	r2, #24
 8003a92:	4694      	mov	ip, r2
 8003a94:	44bc      	add	ip, r7
 8003a96:	4463      	add	r3, ip
 8003a98:	2201      	movs	r2, #1
 8003a9a:	701a      	strb	r2, [r3, #0]
        break;
 8003a9c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d100      	bne.n	8003aa6 <UART_SetConfig+0x41a>
 8003aa4:	e095      	b.n	8003bd2 <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa8:	005a      	lsls	r2, r3, #1
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	085b      	lsrs	r3, r3, #1
 8003ab0:	18d2      	adds	r2, r2, r3
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	0019      	movs	r1, r3
 8003ab8:	0010      	movs	r0, r2
 8003aba:	f7fc fb37 	bl	800012c <__udivsi3>
 8003abe:	0003      	movs	r3, r0
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac6:	2b0f      	cmp	r3, #15
 8003ac8:	d921      	bls.n	8003b0e <UART_SetConfig+0x482>
 8003aca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003acc:	2380      	movs	r3, #128	; 0x80
 8003ace:	025b      	lsls	r3, r3, #9
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d21c      	bcs.n	8003b0e <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	200e      	movs	r0, #14
 8003ada:	2418      	movs	r4, #24
 8003adc:	193b      	adds	r3, r7, r4
 8003ade:	181b      	adds	r3, r3, r0
 8003ae0:	210f      	movs	r1, #15
 8003ae2:	438a      	bics	r2, r1
 8003ae4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae8:	085b      	lsrs	r3, r3, #1
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	2207      	movs	r2, #7
 8003aee:	4013      	ands	r3, r2
 8003af0:	b299      	uxth	r1, r3
 8003af2:	193b      	adds	r3, r7, r4
 8003af4:	181b      	adds	r3, r3, r0
 8003af6:	193a      	adds	r2, r7, r4
 8003af8:	1812      	adds	r2, r2, r0
 8003afa:	8812      	ldrh	r2, [r2, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	193a      	adds	r2, r7, r4
 8003b06:	1812      	adds	r2, r2, r0
 8003b08:	8812      	ldrh	r2, [r2, #0]
 8003b0a:	60da      	str	r2, [r3, #12]
 8003b0c:	e061      	b.n	8003bd2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003b0e:	231a      	movs	r3, #26
 8003b10:	2218      	movs	r2, #24
 8003b12:	4694      	mov	ip, r2
 8003b14:	44bc      	add	ip, r7
 8003b16:	4463      	add	r3, ip
 8003b18:	2201      	movs	r2, #1
 8003b1a:	701a      	strb	r2, [r3, #0]
 8003b1c:	e059      	b.n	8003bd2 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b1e:	231b      	movs	r3, #27
 8003b20:	2218      	movs	r2, #24
 8003b22:	4694      	mov	ip, r2
 8003b24:	44bc      	add	ip, r7
 8003b26:	4463      	add	r3, ip
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2b08      	cmp	r3, #8
 8003b2c:	d822      	bhi.n	8003b74 <UART_SetConfig+0x4e8>
 8003b2e:	009a      	lsls	r2, r3, #2
 8003b30:	4b34      	ldr	r3, [pc, #208]	; (8003c04 <UART_SetConfig+0x578>)
 8003b32:	18d3      	adds	r3, r2, r3
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b38:	f7fe fe76 	bl	8002828 <HAL_RCC_GetPCLK1Freq>
 8003b3c:	0003      	movs	r3, r0
 8003b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b40:	e022      	b.n	8003b88 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b42:	f7fe fe87 	bl	8002854 <HAL_RCC_GetPCLK2Freq>
 8003b46:	0003      	movs	r3, r0
 8003b48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b4a:	e01d      	b.n	8003b88 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b4c:	4b2a      	ldr	r3, [pc, #168]	; (8003bf8 <UART_SetConfig+0x56c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2210      	movs	r2, #16
 8003b52:	4013      	ands	r3, r2
 8003b54:	d002      	beq.n	8003b5c <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003b56:	4b29      	ldr	r3, [pc, #164]	; (8003bfc <UART_SetConfig+0x570>)
 8003b58:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003b5a:	e015      	b.n	8003b88 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 8003b5c:	4b28      	ldr	r3, [pc, #160]	; (8003c00 <UART_SetConfig+0x574>)
 8003b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b60:	e012      	b.n	8003b88 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b62:	f7fe fdb1 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 8003b66:	0003      	movs	r3, r0
 8003b68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b6a:	e00d      	b.n	8003b88 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b6c:	2380      	movs	r3, #128	; 0x80
 8003b6e:	021b      	lsls	r3, r3, #8
 8003b70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b72:	e009      	b.n	8003b88 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 8003b74:	2300      	movs	r3, #0
 8003b76:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003b78:	231a      	movs	r3, #26
 8003b7a:	2218      	movs	r2, #24
 8003b7c:	4694      	mov	ip, r2
 8003b7e:	44bc      	add	ip, r7
 8003b80:	4463      	add	r3, ip
 8003b82:	2201      	movs	r2, #1
 8003b84:	701a      	strb	r2, [r3, #0]
        break;
 8003b86:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d021      	beq.n	8003bd2 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	085a      	lsrs	r2, r3, #1
 8003b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b96:	18d2      	adds	r2, r2, r3
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	0019      	movs	r1, r3
 8003b9e:	0010      	movs	r0, r2
 8003ba0:	f7fc fac4 	bl	800012c <__udivsi3>
 8003ba4:	0003      	movs	r3, r0
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bac:	2b0f      	cmp	r3, #15
 8003bae:	d909      	bls.n	8003bc4 <UART_SetConfig+0x538>
 8003bb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bb2:	2380      	movs	r3, #128	; 0x80
 8003bb4:	025b      	lsls	r3, r3, #9
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d204      	bcs.n	8003bc4 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bc0:	60da      	str	r2, [r3, #12]
 8003bc2:	e006      	b.n	8003bd2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003bc4:	231a      	movs	r3, #26
 8003bc6:	2218      	movs	r2, #24
 8003bc8:	4694      	mov	ip, r2
 8003bca:	44bc      	add	ip, r7
 8003bcc:	4463      	add	r3, ip
 8003bce:	2201      	movs	r2, #1
 8003bd0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003bde:	231a      	movs	r3, #26
 8003be0:	2218      	movs	r2, #24
 8003be2:	4694      	mov	ip, r2
 8003be4:	44bc      	add	ip, r7
 8003be6:	4463      	add	r3, ip
 8003be8:	781b      	ldrb	r3, [r3, #0]
}
 8003bea:	0018      	movs	r0, r3
 8003bec:	46bd      	mov	sp, r7
 8003bee:	b00e      	add	sp, #56	; 0x38
 8003bf0:	bdb0      	pop	{r4, r5, r7, pc}
 8003bf2:	46c0      	nop			; (mov r8, r8)
 8003bf4:	08004974 	.word	0x08004974
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	003d0900 	.word	0x003d0900
 8003c00:	00f42400 	.word	0x00f42400
 8003c04:	08004998 	.word	0x08004998

08003c08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	2201      	movs	r2, #1
 8003c16:	4013      	ands	r3, r2
 8003c18:	d00b      	beq.n	8003c32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	4a4a      	ldr	r2, [pc, #296]	; (8003d4c <UART_AdvFeatureConfig+0x144>)
 8003c22:	4013      	ands	r3, r2
 8003c24:	0019      	movs	r1, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	2202      	movs	r2, #2
 8003c38:	4013      	ands	r3, r2
 8003c3a:	d00b      	beq.n	8003c54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	4a43      	ldr	r2, [pc, #268]	; (8003d50 <UART_AdvFeatureConfig+0x148>)
 8003c44:	4013      	ands	r3, r2
 8003c46:	0019      	movs	r1, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	2204      	movs	r2, #4
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	d00b      	beq.n	8003c76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	4a3b      	ldr	r2, [pc, #236]	; (8003d54 <UART_AdvFeatureConfig+0x14c>)
 8003c66:	4013      	ands	r3, r2
 8003c68:	0019      	movs	r1, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7a:	2208      	movs	r2, #8
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	d00b      	beq.n	8003c98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	4a34      	ldr	r2, [pc, #208]	; (8003d58 <UART_AdvFeatureConfig+0x150>)
 8003c88:	4013      	ands	r3, r2
 8003c8a:	0019      	movs	r1, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	430a      	orrs	r2, r1
 8003c96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9c:	2210      	movs	r2, #16
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	d00b      	beq.n	8003cba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	4a2c      	ldr	r2, [pc, #176]	; (8003d5c <UART_AdvFeatureConfig+0x154>)
 8003caa:	4013      	ands	r3, r2
 8003cac:	0019      	movs	r1, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	d00b      	beq.n	8003cdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	4a25      	ldr	r2, [pc, #148]	; (8003d60 <UART_AdvFeatureConfig+0x158>)
 8003ccc:	4013      	ands	r3, r2
 8003cce:	0019      	movs	r1, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	2240      	movs	r2, #64	; 0x40
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	d01d      	beq.n	8003d22 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	4a1d      	ldr	r2, [pc, #116]	; (8003d64 <UART_AdvFeatureConfig+0x15c>)
 8003cee:	4013      	ands	r3, r2
 8003cf0:	0019      	movs	r1, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d02:	2380      	movs	r3, #128	; 0x80
 8003d04:	035b      	lsls	r3, r3, #13
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d10b      	bne.n	8003d22 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	4a15      	ldr	r2, [pc, #84]	; (8003d68 <UART_AdvFeatureConfig+0x160>)
 8003d12:	4013      	ands	r3, r2
 8003d14:	0019      	movs	r1, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	2280      	movs	r2, #128	; 0x80
 8003d28:	4013      	ands	r3, r2
 8003d2a:	d00b      	beq.n	8003d44 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	4a0e      	ldr	r2, [pc, #56]	; (8003d6c <UART_AdvFeatureConfig+0x164>)
 8003d34:	4013      	ands	r3, r2
 8003d36:	0019      	movs	r1, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	605a      	str	r2, [r3, #4]
  }
}
 8003d44:	46c0      	nop			; (mov r8, r8)
 8003d46:	46bd      	mov	sp, r7
 8003d48:	b002      	add	sp, #8
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	fffdffff 	.word	0xfffdffff
 8003d50:	fffeffff 	.word	0xfffeffff
 8003d54:	fffbffff 	.word	0xfffbffff
 8003d58:	ffff7fff 	.word	0xffff7fff
 8003d5c:	ffffefff 	.word	0xffffefff
 8003d60:	ffffdfff 	.word	0xffffdfff
 8003d64:	ffefffff 	.word	0xffefffff
 8003d68:	ff9fffff 	.word	0xff9fffff
 8003d6c:	fff7ffff 	.word	0xfff7ffff

08003d70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af02      	add	r7, sp, #8
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2280      	movs	r2, #128	; 0x80
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d80:	f7fd fca6 	bl	80016d0 <HAL_GetTick>
 8003d84:	0003      	movs	r3, r0
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2208      	movs	r2, #8
 8003d90:	4013      	ands	r3, r2
 8003d92:	2b08      	cmp	r3, #8
 8003d94:	d10c      	bne.n	8003db0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2280      	movs	r2, #128	; 0x80
 8003d9a:	0391      	lsls	r1, r2, #14
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	4a17      	ldr	r2, [pc, #92]	; (8003dfc <UART_CheckIdleState+0x8c>)
 8003da0:	9200      	str	r2, [sp, #0]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f000 f82c 	bl	8003e00 <UART_WaitOnFlagUntilTimeout>
 8003da8:	1e03      	subs	r3, r0, #0
 8003daa:	d001      	beq.n	8003db0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e021      	b.n	8003df4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2204      	movs	r2, #4
 8003db8:	4013      	ands	r3, r2
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	d10c      	bne.n	8003dd8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2280      	movs	r2, #128	; 0x80
 8003dc2:	03d1      	lsls	r1, r2, #15
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	4a0d      	ldr	r2, [pc, #52]	; (8003dfc <UART_CheckIdleState+0x8c>)
 8003dc8:	9200      	str	r2, [sp, #0]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f000 f818 	bl	8003e00 <UART_WaitOnFlagUntilTimeout>
 8003dd0:	1e03      	subs	r3, r0, #0
 8003dd2:	d001      	beq.n	8003dd8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e00d      	b.n	8003df4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2220      	movs	r2, #32
 8003de2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2274      	movs	r2, #116	; 0x74
 8003dee:	2100      	movs	r1, #0
 8003df0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	0018      	movs	r0, r3
 8003df6:	46bd      	mov	sp, r7
 8003df8:	b004      	add	sp, #16
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	01ffffff 	.word	0x01ffffff

08003e00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b094      	sub	sp, #80	; 0x50
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	603b      	str	r3, [r7, #0]
 8003e0c:	1dfb      	adds	r3, r7, #7
 8003e0e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e10:	e0a3      	b.n	8003f5a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e14:	3301      	adds	r3, #1
 8003e16:	d100      	bne.n	8003e1a <UART_WaitOnFlagUntilTimeout+0x1a>
 8003e18:	e09f      	b.n	8003f5a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e1a:	f7fd fc59 	bl	80016d0 <HAL_GetTick>
 8003e1e:	0002      	movs	r2, r0
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d302      	bcc.n	8003e30 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d13d      	bne.n	8003eac <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e30:	f3ef 8310 	mrs	r3, PRIMASK
 8003e34:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e38:	647b      	str	r3, [r7, #68]	; 0x44
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e40:	f383 8810 	msr	PRIMASK, r3
}
 8003e44:	46c0      	nop			; (mov r8, r8)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	494c      	ldr	r1, [pc, #304]	; (8003f84 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003e52:	400a      	ands	r2, r1
 8003e54:	601a      	str	r2, [r3, #0]
 8003e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e58:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5c:	f383 8810 	msr	PRIMASK, r3
}
 8003e60:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e62:	f3ef 8310 	mrs	r3, PRIMASK
 8003e66:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e6a:	643b      	str	r3, [r7, #64]	; 0x40
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e72:	f383 8810 	msr	PRIMASK, r3
}
 8003e76:	46c0      	nop			; (mov r8, r8)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2101      	movs	r1, #1
 8003e84:	438a      	bics	r2, r1
 8003e86:	609a      	str	r2, [r3, #8]
 8003e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e8e:	f383 8810 	msr	PRIMASK, r3
}
 8003e92:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2220      	movs	r2, #32
 8003e98:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2274      	movs	r2, #116	; 0x74
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e067      	b.n	8003f7c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2204      	movs	r2, #4
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	d050      	beq.n	8003f5a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	69da      	ldr	r2, [r3, #28]
 8003ebe:	2380      	movs	r3, #128	; 0x80
 8003ec0:	011b      	lsls	r3, r3, #4
 8003ec2:	401a      	ands	r2, r3
 8003ec4:	2380      	movs	r3, #128	; 0x80
 8003ec6:	011b      	lsls	r3, r3, #4
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d146      	bne.n	8003f5a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2280      	movs	r2, #128	; 0x80
 8003ed2:	0112      	lsls	r2, r2, #4
 8003ed4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8003eda:	613b      	str	r3, [r7, #16]
  return(result);
 8003edc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ede:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f383 8810 	msr	PRIMASK, r3
}
 8003eea:	46c0      	nop			; (mov r8, r8)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4923      	ldr	r1, [pc, #140]	; (8003f84 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003ef8:	400a      	ands	r2, r1
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003efe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	f383 8810 	msr	PRIMASK, r3
}
 8003f06:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f08:	f3ef 8310 	mrs	r3, PRIMASK
 8003f0c:	61fb      	str	r3, [r7, #28]
  return(result);
 8003f0e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f10:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f12:	2301      	movs	r3, #1
 8003f14:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f16:	6a3b      	ldr	r3, [r7, #32]
 8003f18:	f383 8810 	msr	PRIMASK, r3
}
 8003f1c:	46c0      	nop			; (mov r8, r8)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2101      	movs	r1, #1
 8003f2a:	438a      	bics	r2, r1
 8003f2c:	609a      	str	r2, [r3, #8]
 8003f2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f30:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	f383 8810 	msr	PRIMASK, r3
}
 8003f38:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2220      	movs	r2, #32
 8003f44:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2280      	movs	r2, #128	; 0x80
 8003f4a:	2120      	movs	r1, #32
 8003f4c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2274      	movs	r2, #116	; 0x74
 8003f52:	2100      	movs	r1, #0
 8003f54:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e010      	b.n	8003f7c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	69db      	ldr	r3, [r3, #28]
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	4013      	ands	r3, r2
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	425a      	negs	r2, r3
 8003f6a:	4153      	adcs	r3, r2
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	001a      	movs	r2, r3
 8003f70:	1dfb      	adds	r3, r7, #7
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d100      	bne.n	8003f7a <UART_WaitOnFlagUntilTimeout+0x17a>
 8003f78:	e74b      	b.n	8003e12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	b014      	add	sp, #80	; 0x50
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	fffffe5f 	.word	0xfffffe5f

08003f88 <__errno>:
 8003f88:	4b01      	ldr	r3, [pc, #4]	; (8003f90 <__errno+0x8>)
 8003f8a:	6818      	ldr	r0, [r3, #0]
 8003f8c:	4770      	bx	lr
 8003f8e:	46c0      	nop			; (mov r8, r8)
 8003f90:	2000000c 	.word	0x2000000c

08003f94 <__libc_init_array>:
 8003f94:	b570      	push	{r4, r5, r6, lr}
 8003f96:	2600      	movs	r6, #0
 8003f98:	4d0c      	ldr	r5, [pc, #48]	; (8003fcc <__libc_init_array+0x38>)
 8003f9a:	4c0d      	ldr	r4, [pc, #52]	; (8003fd0 <__libc_init_array+0x3c>)
 8003f9c:	1b64      	subs	r4, r4, r5
 8003f9e:	10a4      	asrs	r4, r4, #2
 8003fa0:	42a6      	cmp	r6, r4
 8003fa2:	d109      	bne.n	8003fb8 <__libc_init_array+0x24>
 8003fa4:	2600      	movs	r6, #0
 8003fa6:	f000 fc47 	bl	8004838 <_init>
 8003faa:	4d0a      	ldr	r5, [pc, #40]	; (8003fd4 <__libc_init_array+0x40>)
 8003fac:	4c0a      	ldr	r4, [pc, #40]	; (8003fd8 <__libc_init_array+0x44>)
 8003fae:	1b64      	subs	r4, r4, r5
 8003fb0:	10a4      	asrs	r4, r4, #2
 8003fb2:	42a6      	cmp	r6, r4
 8003fb4:	d105      	bne.n	8003fc2 <__libc_init_array+0x2e>
 8003fb6:	bd70      	pop	{r4, r5, r6, pc}
 8003fb8:	00b3      	lsls	r3, r6, #2
 8003fba:	58eb      	ldr	r3, [r5, r3]
 8003fbc:	4798      	blx	r3
 8003fbe:	3601      	adds	r6, #1
 8003fc0:	e7ee      	b.n	8003fa0 <__libc_init_array+0xc>
 8003fc2:	00b3      	lsls	r3, r6, #2
 8003fc4:	58eb      	ldr	r3, [r5, r3]
 8003fc6:	4798      	blx	r3
 8003fc8:	3601      	adds	r6, #1
 8003fca:	e7f2      	b.n	8003fb2 <__libc_init_array+0x1e>
 8003fcc:	080049f8 	.word	0x080049f8
 8003fd0:	080049f8 	.word	0x080049f8
 8003fd4:	080049f8 	.word	0x080049f8
 8003fd8:	080049fc 	.word	0x080049fc

08003fdc <memcpy>:
 8003fdc:	2300      	movs	r3, #0
 8003fde:	b510      	push	{r4, lr}
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d100      	bne.n	8003fe6 <memcpy+0xa>
 8003fe4:	bd10      	pop	{r4, pc}
 8003fe6:	5ccc      	ldrb	r4, [r1, r3]
 8003fe8:	54c4      	strb	r4, [r0, r3]
 8003fea:	3301      	adds	r3, #1
 8003fec:	e7f8      	b.n	8003fe0 <memcpy+0x4>

08003fee <memset>:
 8003fee:	0003      	movs	r3, r0
 8003ff0:	1882      	adds	r2, r0, r2
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d100      	bne.n	8003ff8 <memset+0xa>
 8003ff6:	4770      	bx	lr
 8003ff8:	7019      	strb	r1, [r3, #0]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	e7f9      	b.n	8003ff2 <memset+0x4>
	...

08004000 <siprintf>:
 8004000:	b40e      	push	{r1, r2, r3}
 8004002:	b500      	push	{lr}
 8004004:	490b      	ldr	r1, [pc, #44]	; (8004034 <siprintf+0x34>)
 8004006:	b09c      	sub	sp, #112	; 0x70
 8004008:	ab1d      	add	r3, sp, #116	; 0x74
 800400a:	9002      	str	r0, [sp, #8]
 800400c:	9006      	str	r0, [sp, #24]
 800400e:	9107      	str	r1, [sp, #28]
 8004010:	9104      	str	r1, [sp, #16]
 8004012:	4809      	ldr	r0, [pc, #36]	; (8004038 <siprintf+0x38>)
 8004014:	4909      	ldr	r1, [pc, #36]	; (800403c <siprintf+0x3c>)
 8004016:	cb04      	ldmia	r3!, {r2}
 8004018:	9105      	str	r1, [sp, #20]
 800401a:	6800      	ldr	r0, [r0, #0]
 800401c:	a902      	add	r1, sp, #8
 800401e:	9301      	str	r3, [sp, #4]
 8004020:	f000 f870 	bl	8004104 <_svfiprintf_r>
 8004024:	2300      	movs	r3, #0
 8004026:	9a02      	ldr	r2, [sp, #8]
 8004028:	7013      	strb	r3, [r2, #0]
 800402a:	b01c      	add	sp, #112	; 0x70
 800402c:	bc08      	pop	{r3}
 800402e:	b003      	add	sp, #12
 8004030:	4718      	bx	r3
 8004032:	46c0      	nop			; (mov r8, r8)
 8004034:	7fffffff 	.word	0x7fffffff
 8004038:	2000000c 	.word	0x2000000c
 800403c:	ffff0208 	.word	0xffff0208

08004040 <__ssputs_r>:
 8004040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004042:	688e      	ldr	r6, [r1, #8]
 8004044:	b085      	sub	sp, #20
 8004046:	0007      	movs	r7, r0
 8004048:	000c      	movs	r4, r1
 800404a:	9203      	str	r2, [sp, #12]
 800404c:	9301      	str	r3, [sp, #4]
 800404e:	429e      	cmp	r6, r3
 8004050:	d83c      	bhi.n	80040cc <__ssputs_r+0x8c>
 8004052:	2390      	movs	r3, #144	; 0x90
 8004054:	898a      	ldrh	r2, [r1, #12]
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	421a      	tst	r2, r3
 800405a:	d034      	beq.n	80040c6 <__ssputs_r+0x86>
 800405c:	2503      	movs	r5, #3
 800405e:	6909      	ldr	r1, [r1, #16]
 8004060:	6823      	ldr	r3, [r4, #0]
 8004062:	1a5b      	subs	r3, r3, r1
 8004064:	9302      	str	r3, [sp, #8]
 8004066:	6963      	ldr	r3, [r4, #20]
 8004068:	9802      	ldr	r0, [sp, #8]
 800406a:	435d      	muls	r5, r3
 800406c:	0feb      	lsrs	r3, r5, #31
 800406e:	195d      	adds	r5, r3, r5
 8004070:	9b01      	ldr	r3, [sp, #4]
 8004072:	106d      	asrs	r5, r5, #1
 8004074:	3301      	adds	r3, #1
 8004076:	181b      	adds	r3, r3, r0
 8004078:	42ab      	cmp	r3, r5
 800407a:	d900      	bls.n	800407e <__ssputs_r+0x3e>
 800407c:	001d      	movs	r5, r3
 800407e:	0553      	lsls	r3, r2, #21
 8004080:	d532      	bpl.n	80040e8 <__ssputs_r+0xa8>
 8004082:	0029      	movs	r1, r5
 8004084:	0038      	movs	r0, r7
 8004086:	f000 fb27 	bl	80046d8 <_malloc_r>
 800408a:	1e06      	subs	r6, r0, #0
 800408c:	d109      	bne.n	80040a2 <__ssputs_r+0x62>
 800408e:	230c      	movs	r3, #12
 8004090:	603b      	str	r3, [r7, #0]
 8004092:	2340      	movs	r3, #64	; 0x40
 8004094:	2001      	movs	r0, #1
 8004096:	89a2      	ldrh	r2, [r4, #12]
 8004098:	4240      	negs	r0, r0
 800409a:	4313      	orrs	r3, r2
 800409c:	81a3      	strh	r3, [r4, #12]
 800409e:	b005      	add	sp, #20
 80040a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040a2:	9a02      	ldr	r2, [sp, #8]
 80040a4:	6921      	ldr	r1, [r4, #16]
 80040a6:	f7ff ff99 	bl	8003fdc <memcpy>
 80040aa:	89a3      	ldrh	r3, [r4, #12]
 80040ac:	4a14      	ldr	r2, [pc, #80]	; (8004100 <__ssputs_r+0xc0>)
 80040ae:	401a      	ands	r2, r3
 80040b0:	2380      	movs	r3, #128	; 0x80
 80040b2:	4313      	orrs	r3, r2
 80040b4:	81a3      	strh	r3, [r4, #12]
 80040b6:	9b02      	ldr	r3, [sp, #8]
 80040b8:	6126      	str	r6, [r4, #16]
 80040ba:	18f6      	adds	r6, r6, r3
 80040bc:	6026      	str	r6, [r4, #0]
 80040be:	6165      	str	r5, [r4, #20]
 80040c0:	9e01      	ldr	r6, [sp, #4]
 80040c2:	1aed      	subs	r5, r5, r3
 80040c4:	60a5      	str	r5, [r4, #8]
 80040c6:	9b01      	ldr	r3, [sp, #4]
 80040c8:	429e      	cmp	r6, r3
 80040ca:	d900      	bls.n	80040ce <__ssputs_r+0x8e>
 80040cc:	9e01      	ldr	r6, [sp, #4]
 80040ce:	0032      	movs	r2, r6
 80040d0:	9903      	ldr	r1, [sp, #12]
 80040d2:	6820      	ldr	r0, [r4, #0]
 80040d4:	f000 faa3 	bl	800461e <memmove>
 80040d8:	68a3      	ldr	r3, [r4, #8]
 80040da:	2000      	movs	r0, #0
 80040dc:	1b9b      	subs	r3, r3, r6
 80040de:	60a3      	str	r3, [r4, #8]
 80040e0:	6823      	ldr	r3, [r4, #0]
 80040e2:	199e      	adds	r6, r3, r6
 80040e4:	6026      	str	r6, [r4, #0]
 80040e6:	e7da      	b.n	800409e <__ssputs_r+0x5e>
 80040e8:	002a      	movs	r2, r5
 80040ea:	0038      	movs	r0, r7
 80040ec:	f000 fb52 	bl	8004794 <_realloc_r>
 80040f0:	1e06      	subs	r6, r0, #0
 80040f2:	d1e0      	bne.n	80040b6 <__ssputs_r+0x76>
 80040f4:	0038      	movs	r0, r7
 80040f6:	6921      	ldr	r1, [r4, #16]
 80040f8:	f000 faa4 	bl	8004644 <_free_r>
 80040fc:	e7c7      	b.n	800408e <__ssputs_r+0x4e>
 80040fe:	46c0      	nop			; (mov r8, r8)
 8004100:	fffffb7f 	.word	0xfffffb7f

08004104 <_svfiprintf_r>:
 8004104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004106:	b0a1      	sub	sp, #132	; 0x84
 8004108:	9003      	str	r0, [sp, #12]
 800410a:	001d      	movs	r5, r3
 800410c:	898b      	ldrh	r3, [r1, #12]
 800410e:	000f      	movs	r7, r1
 8004110:	0016      	movs	r6, r2
 8004112:	061b      	lsls	r3, r3, #24
 8004114:	d511      	bpl.n	800413a <_svfiprintf_r+0x36>
 8004116:	690b      	ldr	r3, [r1, #16]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10e      	bne.n	800413a <_svfiprintf_r+0x36>
 800411c:	2140      	movs	r1, #64	; 0x40
 800411e:	f000 fadb 	bl	80046d8 <_malloc_r>
 8004122:	6038      	str	r0, [r7, #0]
 8004124:	6138      	str	r0, [r7, #16]
 8004126:	2800      	cmp	r0, #0
 8004128:	d105      	bne.n	8004136 <_svfiprintf_r+0x32>
 800412a:	230c      	movs	r3, #12
 800412c:	9a03      	ldr	r2, [sp, #12]
 800412e:	3801      	subs	r0, #1
 8004130:	6013      	str	r3, [r2, #0]
 8004132:	b021      	add	sp, #132	; 0x84
 8004134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004136:	2340      	movs	r3, #64	; 0x40
 8004138:	617b      	str	r3, [r7, #20]
 800413a:	2300      	movs	r3, #0
 800413c:	ac08      	add	r4, sp, #32
 800413e:	6163      	str	r3, [r4, #20]
 8004140:	3320      	adds	r3, #32
 8004142:	7663      	strb	r3, [r4, #25]
 8004144:	3310      	adds	r3, #16
 8004146:	76a3      	strb	r3, [r4, #26]
 8004148:	9507      	str	r5, [sp, #28]
 800414a:	0035      	movs	r5, r6
 800414c:	782b      	ldrb	r3, [r5, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <_svfiprintf_r+0x52>
 8004152:	2b25      	cmp	r3, #37	; 0x25
 8004154:	d147      	bne.n	80041e6 <_svfiprintf_r+0xe2>
 8004156:	1bab      	subs	r3, r5, r6
 8004158:	9305      	str	r3, [sp, #20]
 800415a:	42b5      	cmp	r5, r6
 800415c:	d00c      	beq.n	8004178 <_svfiprintf_r+0x74>
 800415e:	0032      	movs	r2, r6
 8004160:	0039      	movs	r1, r7
 8004162:	9803      	ldr	r0, [sp, #12]
 8004164:	f7ff ff6c 	bl	8004040 <__ssputs_r>
 8004168:	1c43      	adds	r3, r0, #1
 800416a:	d100      	bne.n	800416e <_svfiprintf_r+0x6a>
 800416c:	e0ae      	b.n	80042cc <_svfiprintf_r+0x1c8>
 800416e:	6962      	ldr	r2, [r4, #20]
 8004170:	9b05      	ldr	r3, [sp, #20]
 8004172:	4694      	mov	ip, r2
 8004174:	4463      	add	r3, ip
 8004176:	6163      	str	r3, [r4, #20]
 8004178:	782b      	ldrb	r3, [r5, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d100      	bne.n	8004180 <_svfiprintf_r+0x7c>
 800417e:	e0a5      	b.n	80042cc <_svfiprintf_r+0x1c8>
 8004180:	2201      	movs	r2, #1
 8004182:	2300      	movs	r3, #0
 8004184:	4252      	negs	r2, r2
 8004186:	6062      	str	r2, [r4, #4]
 8004188:	a904      	add	r1, sp, #16
 800418a:	3254      	adds	r2, #84	; 0x54
 800418c:	1852      	adds	r2, r2, r1
 800418e:	1c6e      	adds	r6, r5, #1
 8004190:	6023      	str	r3, [r4, #0]
 8004192:	60e3      	str	r3, [r4, #12]
 8004194:	60a3      	str	r3, [r4, #8]
 8004196:	7013      	strb	r3, [r2, #0]
 8004198:	65a3      	str	r3, [r4, #88]	; 0x58
 800419a:	2205      	movs	r2, #5
 800419c:	7831      	ldrb	r1, [r6, #0]
 800419e:	4854      	ldr	r0, [pc, #336]	; (80042f0 <_svfiprintf_r+0x1ec>)
 80041a0:	f000 fa32 	bl	8004608 <memchr>
 80041a4:	1c75      	adds	r5, r6, #1
 80041a6:	2800      	cmp	r0, #0
 80041a8:	d11f      	bne.n	80041ea <_svfiprintf_r+0xe6>
 80041aa:	6822      	ldr	r2, [r4, #0]
 80041ac:	06d3      	lsls	r3, r2, #27
 80041ae:	d504      	bpl.n	80041ba <_svfiprintf_r+0xb6>
 80041b0:	2353      	movs	r3, #83	; 0x53
 80041b2:	a904      	add	r1, sp, #16
 80041b4:	185b      	adds	r3, r3, r1
 80041b6:	2120      	movs	r1, #32
 80041b8:	7019      	strb	r1, [r3, #0]
 80041ba:	0713      	lsls	r3, r2, #28
 80041bc:	d504      	bpl.n	80041c8 <_svfiprintf_r+0xc4>
 80041be:	2353      	movs	r3, #83	; 0x53
 80041c0:	a904      	add	r1, sp, #16
 80041c2:	185b      	adds	r3, r3, r1
 80041c4:	212b      	movs	r1, #43	; 0x2b
 80041c6:	7019      	strb	r1, [r3, #0]
 80041c8:	7833      	ldrb	r3, [r6, #0]
 80041ca:	2b2a      	cmp	r3, #42	; 0x2a
 80041cc:	d016      	beq.n	80041fc <_svfiprintf_r+0xf8>
 80041ce:	0035      	movs	r5, r6
 80041d0:	2100      	movs	r1, #0
 80041d2:	200a      	movs	r0, #10
 80041d4:	68e3      	ldr	r3, [r4, #12]
 80041d6:	782a      	ldrb	r2, [r5, #0]
 80041d8:	1c6e      	adds	r6, r5, #1
 80041da:	3a30      	subs	r2, #48	; 0x30
 80041dc:	2a09      	cmp	r2, #9
 80041de:	d94e      	bls.n	800427e <_svfiprintf_r+0x17a>
 80041e0:	2900      	cmp	r1, #0
 80041e2:	d111      	bne.n	8004208 <_svfiprintf_r+0x104>
 80041e4:	e017      	b.n	8004216 <_svfiprintf_r+0x112>
 80041e6:	3501      	adds	r5, #1
 80041e8:	e7b0      	b.n	800414c <_svfiprintf_r+0x48>
 80041ea:	4b41      	ldr	r3, [pc, #260]	; (80042f0 <_svfiprintf_r+0x1ec>)
 80041ec:	6822      	ldr	r2, [r4, #0]
 80041ee:	1ac0      	subs	r0, r0, r3
 80041f0:	2301      	movs	r3, #1
 80041f2:	4083      	lsls	r3, r0
 80041f4:	4313      	orrs	r3, r2
 80041f6:	002e      	movs	r6, r5
 80041f8:	6023      	str	r3, [r4, #0]
 80041fa:	e7ce      	b.n	800419a <_svfiprintf_r+0x96>
 80041fc:	9b07      	ldr	r3, [sp, #28]
 80041fe:	1d19      	adds	r1, r3, #4
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	9107      	str	r1, [sp, #28]
 8004204:	2b00      	cmp	r3, #0
 8004206:	db01      	blt.n	800420c <_svfiprintf_r+0x108>
 8004208:	930b      	str	r3, [sp, #44]	; 0x2c
 800420a:	e004      	b.n	8004216 <_svfiprintf_r+0x112>
 800420c:	425b      	negs	r3, r3
 800420e:	60e3      	str	r3, [r4, #12]
 8004210:	2302      	movs	r3, #2
 8004212:	4313      	orrs	r3, r2
 8004214:	6023      	str	r3, [r4, #0]
 8004216:	782b      	ldrb	r3, [r5, #0]
 8004218:	2b2e      	cmp	r3, #46	; 0x2e
 800421a:	d10a      	bne.n	8004232 <_svfiprintf_r+0x12e>
 800421c:	786b      	ldrb	r3, [r5, #1]
 800421e:	2b2a      	cmp	r3, #42	; 0x2a
 8004220:	d135      	bne.n	800428e <_svfiprintf_r+0x18a>
 8004222:	9b07      	ldr	r3, [sp, #28]
 8004224:	3502      	adds	r5, #2
 8004226:	1d1a      	adds	r2, r3, #4
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	9207      	str	r2, [sp, #28]
 800422c:	2b00      	cmp	r3, #0
 800422e:	db2b      	blt.n	8004288 <_svfiprintf_r+0x184>
 8004230:	9309      	str	r3, [sp, #36]	; 0x24
 8004232:	4e30      	ldr	r6, [pc, #192]	; (80042f4 <_svfiprintf_r+0x1f0>)
 8004234:	2203      	movs	r2, #3
 8004236:	0030      	movs	r0, r6
 8004238:	7829      	ldrb	r1, [r5, #0]
 800423a:	f000 f9e5 	bl	8004608 <memchr>
 800423e:	2800      	cmp	r0, #0
 8004240:	d006      	beq.n	8004250 <_svfiprintf_r+0x14c>
 8004242:	2340      	movs	r3, #64	; 0x40
 8004244:	1b80      	subs	r0, r0, r6
 8004246:	4083      	lsls	r3, r0
 8004248:	6822      	ldr	r2, [r4, #0]
 800424a:	3501      	adds	r5, #1
 800424c:	4313      	orrs	r3, r2
 800424e:	6023      	str	r3, [r4, #0]
 8004250:	7829      	ldrb	r1, [r5, #0]
 8004252:	2206      	movs	r2, #6
 8004254:	4828      	ldr	r0, [pc, #160]	; (80042f8 <_svfiprintf_r+0x1f4>)
 8004256:	1c6e      	adds	r6, r5, #1
 8004258:	7621      	strb	r1, [r4, #24]
 800425a:	f000 f9d5 	bl	8004608 <memchr>
 800425e:	2800      	cmp	r0, #0
 8004260:	d03c      	beq.n	80042dc <_svfiprintf_r+0x1d8>
 8004262:	4b26      	ldr	r3, [pc, #152]	; (80042fc <_svfiprintf_r+0x1f8>)
 8004264:	2b00      	cmp	r3, #0
 8004266:	d125      	bne.n	80042b4 <_svfiprintf_r+0x1b0>
 8004268:	2207      	movs	r2, #7
 800426a:	9b07      	ldr	r3, [sp, #28]
 800426c:	3307      	adds	r3, #7
 800426e:	4393      	bics	r3, r2
 8004270:	3308      	adds	r3, #8
 8004272:	9307      	str	r3, [sp, #28]
 8004274:	6963      	ldr	r3, [r4, #20]
 8004276:	9a04      	ldr	r2, [sp, #16]
 8004278:	189b      	adds	r3, r3, r2
 800427a:	6163      	str	r3, [r4, #20]
 800427c:	e765      	b.n	800414a <_svfiprintf_r+0x46>
 800427e:	4343      	muls	r3, r0
 8004280:	0035      	movs	r5, r6
 8004282:	2101      	movs	r1, #1
 8004284:	189b      	adds	r3, r3, r2
 8004286:	e7a6      	b.n	80041d6 <_svfiprintf_r+0xd2>
 8004288:	2301      	movs	r3, #1
 800428a:	425b      	negs	r3, r3
 800428c:	e7d0      	b.n	8004230 <_svfiprintf_r+0x12c>
 800428e:	2300      	movs	r3, #0
 8004290:	200a      	movs	r0, #10
 8004292:	001a      	movs	r2, r3
 8004294:	3501      	adds	r5, #1
 8004296:	6063      	str	r3, [r4, #4]
 8004298:	7829      	ldrb	r1, [r5, #0]
 800429a:	1c6e      	adds	r6, r5, #1
 800429c:	3930      	subs	r1, #48	; 0x30
 800429e:	2909      	cmp	r1, #9
 80042a0:	d903      	bls.n	80042aa <_svfiprintf_r+0x1a6>
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0c5      	beq.n	8004232 <_svfiprintf_r+0x12e>
 80042a6:	9209      	str	r2, [sp, #36]	; 0x24
 80042a8:	e7c3      	b.n	8004232 <_svfiprintf_r+0x12e>
 80042aa:	4342      	muls	r2, r0
 80042ac:	0035      	movs	r5, r6
 80042ae:	2301      	movs	r3, #1
 80042b0:	1852      	adds	r2, r2, r1
 80042b2:	e7f1      	b.n	8004298 <_svfiprintf_r+0x194>
 80042b4:	ab07      	add	r3, sp, #28
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	003a      	movs	r2, r7
 80042ba:	0021      	movs	r1, r4
 80042bc:	4b10      	ldr	r3, [pc, #64]	; (8004300 <_svfiprintf_r+0x1fc>)
 80042be:	9803      	ldr	r0, [sp, #12]
 80042c0:	e000      	b.n	80042c4 <_svfiprintf_r+0x1c0>
 80042c2:	bf00      	nop
 80042c4:	9004      	str	r0, [sp, #16]
 80042c6:	9b04      	ldr	r3, [sp, #16]
 80042c8:	3301      	adds	r3, #1
 80042ca:	d1d3      	bne.n	8004274 <_svfiprintf_r+0x170>
 80042cc:	89bb      	ldrh	r3, [r7, #12]
 80042ce:	980d      	ldr	r0, [sp, #52]	; 0x34
 80042d0:	065b      	lsls	r3, r3, #25
 80042d2:	d400      	bmi.n	80042d6 <_svfiprintf_r+0x1d2>
 80042d4:	e72d      	b.n	8004132 <_svfiprintf_r+0x2e>
 80042d6:	2001      	movs	r0, #1
 80042d8:	4240      	negs	r0, r0
 80042da:	e72a      	b.n	8004132 <_svfiprintf_r+0x2e>
 80042dc:	ab07      	add	r3, sp, #28
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	003a      	movs	r2, r7
 80042e2:	0021      	movs	r1, r4
 80042e4:	4b06      	ldr	r3, [pc, #24]	; (8004300 <_svfiprintf_r+0x1fc>)
 80042e6:	9803      	ldr	r0, [sp, #12]
 80042e8:	f000 f87c 	bl	80043e4 <_printf_i>
 80042ec:	e7ea      	b.n	80042c4 <_svfiprintf_r+0x1c0>
 80042ee:	46c0      	nop			; (mov r8, r8)
 80042f0:	080049bc 	.word	0x080049bc
 80042f4:	080049c2 	.word	0x080049c2
 80042f8:	080049c6 	.word	0x080049c6
 80042fc:	00000000 	.word	0x00000000
 8004300:	08004041 	.word	0x08004041

08004304 <_printf_common>:
 8004304:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004306:	0015      	movs	r5, r2
 8004308:	9301      	str	r3, [sp, #4]
 800430a:	688a      	ldr	r2, [r1, #8]
 800430c:	690b      	ldr	r3, [r1, #16]
 800430e:	000c      	movs	r4, r1
 8004310:	9000      	str	r0, [sp, #0]
 8004312:	4293      	cmp	r3, r2
 8004314:	da00      	bge.n	8004318 <_printf_common+0x14>
 8004316:	0013      	movs	r3, r2
 8004318:	0022      	movs	r2, r4
 800431a:	602b      	str	r3, [r5, #0]
 800431c:	3243      	adds	r2, #67	; 0x43
 800431e:	7812      	ldrb	r2, [r2, #0]
 8004320:	2a00      	cmp	r2, #0
 8004322:	d001      	beq.n	8004328 <_printf_common+0x24>
 8004324:	3301      	adds	r3, #1
 8004326:	602b      	str	r3, [r5, #0]
 8004328:	6823      	ldr	r3, [r4, #0]
 800432a:	069b      	lsls	r3, r3, #26
 800432c:	d502      	bpl.n	8004334 <_printf_common+0x30>
 800432e:	682b      	ldr	r3, [r5, #0]
 8004330:	3302      	adds	r3, #2
 8004332:	602b      	str	r3, [r5, #0]
 8004334:	6822      	ldr	r2, [r4, #0]
 8004336:	2306      	movs	r3, #6
 8004338:	0017      	movs	r7, r2
 800433a:	401f      	ands	r7, r3
 800433c:	421a      	tst	r2, r3
 800433e:	d027      	beq.n	8004390 <_printf_common+0x8c>
 8004340:	0023      	movs	r3, r4
 8004342:	3343      	adds	r3, #67	; 0x43
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	1e5a      	subs	r2, r3, #1
 8004348:	4193      	sbcs	r3, r2
 800434a:	6822      	ldr	r2, [r4, #0]
 800434c:	0692      	lsls	r2, r2, #26
 800434e:	d430      	bmi.n	80043b2 <_printf_common+0xae>
 8004350:	0022      	movs	r2, r4
 8004352:	9901      	ldr	r1, [sp, #4]
 8004354:	9800      	ldr	r0, [sp, #0]
 8004356:	9e08      	ldr	r6, [sp, #32]
 8004358:	3243      	adds	r2, #67	; 0x43
 800435a:	47b0      	blx	r6
 800435c:	1c43      	adds	r3, r0, #1
 800435e:	d025      	beq.n	80043ac <_printf_common+0xa8>
 8004360:	2306      	movs	r3, #6
 8004362:	6820      	ldr	r0, [r4, #0]
 8004364:	682a      	ldr	r2, [r5, #0]
 8004366:	68e1      	ldr	r1, [r4, #12]
 8004368:	2500      	movs	r5, #0
 800436a:	4003      	ands	r3, r0
 800436c:	2b04      	cmp	r3, #4
 800436e:	d103      	bne.n	8004378 <_printf_common+0x74>
 8004370:	1a8d      	subs	r5, r1, r2
 8004372:	43eb      	mvns	r3, r5
 8004374:	17db      	asrs	r3, r3, #31
 8004376:	401d      	ands	r5, r3
 8004378:	68a3      	ldr	r3, [r4, #8]
 800437a:	6922      	ldr	r2, [r4, #16]
 800437c:	4293      	cmp	r3, r2
 800437e:	dd01      	ble.n	8004384 <_printf_common+0x80>
 8004380:	1a9b      	subs	r3, r3, r2
 8004382:	18ed      	adds	r5, r5, r3
 8004384:	2700      	movs	r7, #0
 8004386:	42bd      	cmp	r5, r7
 8004388:	d120      	bne.n	80043cc <_printf_common+0xc8>
 800438a:	2000      	movs	r0, #0
 800438c:	e010      	b.n	80043b0 <_printf_common+0xac>
 800438e:	3701      	adds	r7, #1
 8004390:	68e3      	ldr	r3, [r4, #12]
 8004392:	682a      	ldr	r2, [r5, #0]
 8004394:	1a9b      	subs	r3, r3, r2
 8004396:	42bb      	cmp	r3, r7
 8004398:	ddd2      	ble.n	8004340 <_printf_common+0x3c>
 800439a:	0022      	movs	r2, r4
 800439c:	2301      	movs	r3, #1
 800439e:	9901      	ldr	r1, [sp, #4]
 80043a0:	9800      	ldr	r0, [sp, #0]
 80043a2:	9e08      	ldr	r6, [sp, #32]
 80043a4:	3219      	adds	r2, #25
 80043a6:	47b0      	blx	r6
 80043a8:	1c43      	adds	r3, r0, #1
 80043aa:	d1f0      	bne.n	800438e <_printf_common+0x8a>
 80043ac:	2001      	movs	r0, #1
 80043ae:	4240      	negs	r0, r0
 80043b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80043b2:	2030      	movs	r0, #48	; 0x30
 80043b4:	18e1      	adds	r1, r4, r3
 80043b6:	3143      	adds	r1, #67	; 0x43
 80043b8:	7008      	strb	r0, [r1, #0]
 80043ba:	0021      	movs	r1, r4
 80043bc:	1c5a      	adds	r2, r3, #1
 80043be:	3145      	adds	r1, #69	; 0x45
 80043c0:	7809      	ldrb	r1, [r1, #0]
 80043c2:	18a2      	adds	r2, r4, r2
 80043c4:	3243      	adds	r2, #67	; 0x43
 80043c6:	3302      	adds	r3, #2
 80043c8:	7011      	strb	r1, [r2, #0]
 80043ca:	e7c1      	b.n	8004350 <_printf_common+0x4c>
 80043cc:	0022      	movs	r2, r4
 80043ce:	2301      	movs	r3, #1
 80043d0:	9901      	ldr	r1, [sp, #4]
 80043d2:	9800      	ldr	r0, [sp, #0]
 80043d4:	9e08      	ldr	r6, [sp, #32]
 80043d6:	321a      	adds	r2, #26
 80043d8:	47b0      	blx	r6
 80043da:	1c43      	adds	r3, r0, #1
 80043dc:	d0e6      	beq.n	80043ac <_printf_common+0xa8>
 80043de:	3701      	adds	r7, #1
 80043e0:	e7d1      	b.n	8004386 <_printf_common+0x82>
	...

080043e4 <_printf_i>:
 80043e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043e6:	b08b      	sub	sp, #44	; 0x2c
 80043e8:	9206      	str	r2, [sp, #24]
 80043ea:	000a      	movs	r2, r1
 80043ec:	3243      	adds	r2, #67	; 0x43
 80043ee:	9307      	str	r3, [sp, #28]
 80043f0:	9005      	str	r0, [sp, #20]
 80043f2:	9204      	str	r2, [sp, #16]
 80043f4:	7e0a      	ldrb	r2, [r1, #24]
 80043f6:	000c      	movs	r4, r1
 80043f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80043fa:	2a78      	cmp	r2, #120	; 0x78
 80043fc:	d806      	bhi.n	800440c <_printf_i+0x28>
 80043fe:	2a62      	cmp	r2, #98	; 0x62
 8004400:	d808      	bhi.n	8004414 <_printf_i+0x30>
 8004402:	2a00      	cmp	r2, #0
 8004404:	d100      	bne.n	8004408 <_printf_i+0x24>
 8004406:	e0c0      	b.n	800458a <_printf_i+0x1a6>
 8004408:	2a58      	cmp	r2, #88	; 0x58
 800440a:	d052      	beq.n	80044b2 <_printf_i+0xce>
 800440c:	0026      	movs	r6, r4
 800440e:	3642      	adds	r6, #66	; 0x42
 8004410:	7032      	strb	r2, [r6, #0]
 8004412:	e022      	b.n	800445a <_printf_i+0x76>
 8004414:	0010      	movs	r0, r2
 8004416:	3863      	subs	r0, #99	; 0x63
 8004418:	2815      	cmp	r0, #21
 800441a:	d8f7      	bhi.n	800440c <_printf_i+0x28>
 800441c:	f7fb fe7c 	bl	8000118 <__gnu_thumb1_case_shi>
 8004420:	001f0016 	.word	0x001f0016
 8004424:	fff6fff6 	.word	0xfff6fff6
 8004428:	fff6fff6 	.word	0xfff6fff6
 800442c:	fff6001f 	.word	0xfff6001f
 8004430:	fff6fff6 	.word	0xfff6fff6
 8004434:	00a8fff6 	.word	0x00a8fff6
 8004438:	009a0036 	.word	0x009a0036
 800443c:	fff6fff6 	.word	0xfff6fff6
 8004440:	fff600b9 	.word	0xfff600b9
 8004444:	fff60036 	.word	0xfff60036
 8004448:	009efff6 	.word	0x009efff6
 800444c:	0026      	movs	r6, r4
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	3642      	adds	r6, #66	; 0x42
 8004452:	1d11      	adds	r1, r2, #4
 8004454:	6019      	str	r1, [r3, #0]
 8004456:	6813      	ldr	r3, [r2, #0]
 8004458:	7033      	strb	r3, [r6, #0]
 800445a:	2301      	movs	r3, #1
 800445c:	e0a7      	b.n	80045ae <_printf_i+0x1ca>
 800445e:	6808      	ldr	r0, [r1, #0]
 8004460:	6819      	ldr	r1, [r3, #0]
 8004462:	1d0a      	adds	r2, r1, #4
 8004464:	0605      	lsls	r5, r0, #24
 8004466:	d50b      	bpl.n	8004480 <_printf_i+0x9c>
 8004468:	680d      	ldr	r5, [r1, #0]
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	2d00      	cmp	r5, #0
 800446e:	da03      	bge.n	8004478 <_printf_i+0x94>
 8004470:	232d      	movs	r3, #45	; 0x2d
 8004472:	9a04      	ldr	r2, [sp, #16]
 8004474:	426d      	negs	r5, r5
 8004476:	7013      	strb	r3, [r2, #0]
 8004478:	4b61      	ldr	r3, [pc, #388]	; (8004600 <_printf_i+0x21c>)
 800447a:	270a      	movs	r7, #10
 800447c:	9303      	str	r3, [sp, #12]
 800447e:	e032      	b.n	80044e6 <_printf_i+0x102>
 8004480:	680d      	ldr	r5, [r1, #0]
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	0641      	lsls	r1, r0, #25
 8004486:	d5f1      	bpl.n	800446c <_printf_i+0x88>
 8004488:	b22d      	sxth	r5, r5
 800448a:	e7ef      	b.n	800446c <_printf_i+0x88>
 800448c:	680d      	ldr	r5, [r1, #0]
 800448e:	6819      	ldr	r1, [r3, #0]
 8004490:	1d08      	adds	r0, r1, #4
 8004492:	6018      	str	r0, [r3, #0]
 8004494:	062e      	lsls	r6, r5, #24
 8004496:	d501      	bpl.n	800449c <_printf_i+0xb8>
 8004498:	680d      	ldr	r5, [r1, #0]
 800449a:	e003      	b.n	80044a4 <_printf_i+0xc0>
 800449c:	066d      	lsls	r5, r5, #25
 800449e:	d5fb      	bpl.n	8004498 <_printf_i+0xb4>
 80044a0:	680d      	ldr	r5, [r1, #0]
 80044a2:	b2ad      	uxth	r5, r5
 80044a4:	4b56      	ldr	r3, [pc, #344]	; (8004600 <_printf_i+0x21c>)
 80044a6:	270a      	movs	r7, #10
 80044a8:	9303      	str	r3, [sp, #12]
 80044aa:	2a6f      	cmp	r2, #111	; 0x6f
 80044ac:	d117      	bne.n	80044de <_printf_i+0xfa>
 80044ae:	2708      	movs	r7, #8
 80044b0:	e015      	b.n	80044de <_printf_i+0xfa>
 80044b2:	3145      	adds	r1, #69	; 0x45
 80044b4:	700a      	strb	r2, [r1, #0]
 80044b6:	4a52      	ldr	r2, [pc, #328]	; (8004600 <_printf_i+0x21c>)
 80044b8:	9203      	str	r2, [sp, #12]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	6821      	ldr	r1, [r4, #0]
 80044be:	ca20      	ldmia	r2!, {r5}
 80044c0:	601a      	str	r2, [r3, #0]
 80044c2:	0608      	lsls	r0, r1, #24
 80044c4:	d550      	bpl.n	8004568 <_printf_i+0x184>
 80044c6:	07cb      	lsls	r3, r1, #31
 80044c8:	d502      	bpl.n	80044d0 <_printf_i+0xec>
 80044ca:	2320      	movs	r3, #32
 80044cc:	4319      	orrs	r1, r3
 80044ce:	6021      	str	r1, [r4, #0]
 80044d0:	2710      	movs	r7, #16
 80044d2:	2d00      	cmp	r5, #0
 80044d4:	d103      	bne.n	80044de <_printf_i+0xfa>
 80044d6:	2320      	movs	r3, #32
 80044d8:	6822      	ldr	r2, [r4, #0]
 80044da:	439a      	bics	r2, r3
 80044dc:	6022      	str	r2, [r4, #0]
 80044de:	0023      	movs	r3, r4
 80044e0:	2200      	movs	r2, #0
 80044e2:	3343      	adds	r3, #67	; 0x43
 80044e4:	701a      	strb	r2, [r3, #0]
 80044e6:	6863      	ldr	r3, [r4, #4]
 80044e8:	60a3      	str	r3, [r4, #8]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	db03      	blt.n	80044f6 <_printf_i+0x112>
 80044ee:	2204      	movs	r2, #4
 80044f0:	6821      	ldr	r1, [r4, #0]
 80044f2:	4391      	bics	r1, r2
 80044f4:	6021      	str	r1, [r4, #0]
 80044f6:	2d00      	cmp	r5, #0
 80044f8:	d102      	bne.n	8004500 <_printf_i+0x11c>
 80044fa:	9e04      	ldr	r6, [sp, #16]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00c      	beq.n	800451a <_printf_i+0x136>
 8004500:	9e04      	ldr	r6, [sp, #16]
 8004502:	0028      	movs	r0, r5
 8004504:	0039      	movs	r1, r7
 8004506:	f7fb fe97 	bl	8000238 <__aeabi_uidivmod>
 800450a:	9b03      	ldr	r3, [sp, #12]
 800450c:	3e01      	subs	r6, #1
 800450e:	5c5b      	ldrb	r3, [r3, r1]
 8004510:	7033      	strb	r3, [r6, #0]
 8004512:	002b      	movs	r3, r5
 8004514:	0005      	movs	r5, r0
 8004516:	429f      	cmp	r7, r3
 8004518:	d9f3      	bls.n	8004502 <_printf_i+0x11e>
 800451a:	2f08      	cmp	r7, #8
 800451c:	d109      	bne.n	8004532 <_printf_i+0x14e>
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	07db      	lsls	r3, r3, #31
 8004522:	d506      	bpl.n	8004532 <_printf_i+0x14e>
 8004524:	6863      	ldr	r3, [r4, #4]
 8004526:	6922      	ldr	r2, [r4, #16]
 8004528:	4293      	cmp	r3, r2
 800452a:	dc02      	bgt.n	8004532 <_printf_i+0x14e>
 800452c:	2330      	movs	r3, #48	; 0x30
 800452e:	3e01      	subs	r6, #1
 8004530:	7033      	strb	r3, [r6, #0]
 8004532:	9b04      	ldr	r3, [sp, #16]
 8004534:	1b9b      	subs	r3, r3, r6
 8004536:	6123      	str	r3, [r4, #16]
 8004538:	9b07      	ldr	r3, [sp, #28]
 800453a:	0021      	movs	r1, r4
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	9805      	ldr	r0, [sp, #20]
 8004540:	9b06      	ldr	r3, [sp, #24]
 8004542:	aa09      	add	r2, sp, #36	; 0x24
 8004544:	f7ff fede 	bl	8004304 <_printf_common>
 8004548:	1c43      	adds	r3, r0, #1
 800454a:	d135      	bne.n	80045b8 <_printf_i+0x1d4>
 800454c:	2001      	movs	r0, #1
 800454e:	4240      	negs	r0, r0
 8004550:	b00b      	add	sp, #44	; 0x2c
 8004552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004554:	2220      	movs	r2, #32
 8004556:	6809      	ldr	r1, [r1, #0]
 8004558:	430a      	orrs	r2, r1
 800455a:	6022      	str	r2, [r4, #0]
 800455c:	0022      	movs	r2, r4
 800455e:	2178      	movs	r1, #120	; 0x78
 8004560:	3245      	adds	r2, #69	; 0x45
 8004562:	7011      	strb	r1, [r2, #0]
 8004564:	4a27      	ldr	r2, [pc, #156]	; (8004604 <_printf_i+0x220>)
 8004566:	e7a7      	b.n	80044b8 <_printf_i+0xd4>
 8004568:	0648      	lsls	r0, r1, #25
 800456a:	d5ac      	bpl.n	80044c6 <_printf_i+0xe2>
 800456c:	b2ad      	uxth	r5, r5
 800456e:	e7aa      	b.n	80044c6 <_printf_i+0xe2>
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	680d      	ldr	r5, [r1, #0]
 8004574:	1d10      	adds	r0, r2, #4
 8004576:	6949      	ldr	r1, [r1, #20]
 8004578:	6018      	str	r0, [r3, #0]
 800457a:	6813      	ldr	r3, [r2, #0]
 800457c:	062e      	lsls	r6, r5, #24
 800457e:	d501      	bpl.n	8004584 <_printf_i+0x1a0>
 8004580:	6019      	str	r1, [r3, #0]
 8004582:	e002      	b.n	800458a <_printf_i+0x1a6>
 8004584:	066d      	lsls	r5, r5, #25
 8004586:	d5fb      	bpl.n	8004580 <_printf_i+0x19c>
 8004588:	8019      	strh	r1, [r3, #0]
 800458a:	2300      	movs	r3, #0
 800458c:	9e04      	ldr	r6, [sp, #16]
 800458e:	6123      	str	r3, [r4, #16]
 8004590:	e7d2      	b.n	8004538 <_printf_i+0x154>
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	1d11      	adds	r1, r2, #4
 8004596:	6019      	str	r1, [r3, #0]
 8004598:	6816      	ldr	r6, [r2, #0]
 800459a:	2100      	movs	r1, #0
 800459c:	0030      	movs	r0, r6
 800459e:	6862      	ldr	r2, [r4, #4]
 80045a0:	f000 f832 	bl	8004608 <memchr>
 80045a4:	2800      	cmp	r0, #0
 80045a6:	d001      	beq.n	80045ac <_printf_i+0x1c8>
 80045a8:	1b80      	subs	r0, r0, r6
 80045aa:	6060      	str	r0, [r4, #4]
 80045ac:	6863      	ldr	r3, [r4, #4]
 80045ae:	6123      	str	r3, [r4, #16]
 80045b0:	2300      	movs	r3, #0
 80045b2:	9a04      	ldr	r2, [sp, #16]
 80045b4:	7013      	strb	r3, [r2, #0]
 80045b6:	e7bf      	b.n	8004538 <_printf_i+0x154>
 80045b8:	6923      	ldr	r3, [r4, #16]
 80045ba:	0032      	movs	r2, r6
 80045bc:	9906      	ldr	r1, [sp, #24]
 80045be:	9805      	ldr	r0, [sp, #20]
 80045c0:	9d07      	ldr	r5, [sp, #28]
 80045c2:	47a8      	blx	r5
 80045c4:	1c43      	adds	r3, r0, #1
 80045c6:	d0c1      	beq.n	800454c <_printf_i+0x168>
 80045c8:	6823      	ldr	r3, [r4, #0]
 80045ca:	079b      	lsls	r3, r3, #30
 80045cc:	d415      	bmi.n	80045fa <_printf_i+0x216>
 80045ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045d0:	68e0      	ldr	r0, [r4, #12]
 80045d2:	4298      	cmp	r0, r3
 80045d4:	dabc      	bge.n	8004550 <_printf_i+0x16c>
 80045d6:	0018      	movs	r0, r3
 80045d8:	e7ba      	b.n	8004550 <_printf_i+0x16c>
 80045da:	0022      	movs	r2, r4
 80045dc:	2301      	movs	r3, #1
 80045de:	9906      	ldr	r1, [sp, #24]
 80045e0:	9805      	ldr	r0, [sp, #20]
 80045e2:	9e07      	ldr	r6, [sp, #28]
 80045e4:	3219      	adds	r2, #25
 80045e6:	47b0      	blx	r6
 80045e8:	1c43      	adds	r3, r0, #1
 80045ea:	d0af      	beq.n	800454c <_printf_i+0x168>
 80045ec:	3501      	adds	r5, #1
 80045ee:	68e3      	ldr	r3, [r4, #12]
 80045f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045f2:	1a9b      	subs	r3, r3, r2
 80045f4:	42ab      	cmp	r3, r5
 80045f6:	dcf0      	bgt.n	80045da <_printf_i+0x1f6>
 80045f8:	e7e9      	b.n	80045ce <_printf_i+0x1ea>
 80045fa:	2500      	movs	r5, #0
 80045fc:	e7f7      	b.n	80045ee <_printf_i+0x20a>
 80045fe:	46c0      	nop			; (mov r8, r8)
 8004600:	080049cd 	.word	0x080049cd
 8004604:	080049de 	.word	0x080049de

08004608 <memchr>:
 8004608:	b2c9      	uxtb	r1, r1
 800460a:	1882      	adds	r2, r0, r2
 800460c:	4290      	cmp	r0, r2
 800460e:	d101      	bne.n	8004614 <memchr+0xc>
 8004610:	2000      	movs	r0, #0
 8004612:	4770      	bx	lr
 8004614:	7803      	ldrb	r3, [r0, #0]
 8004616:	428b      	cmp	r3, r1
 8004618:	d0fb      	beq.n	8004612 <memchr+0xa>
 800461a:	3001      	adds	r0, #1
 800461c:	e7f6      	b.n	800460c <memchr+0x4>

0800461e <memmove>:
 800461e:	b510      	push	{r4, lr}
 8004620:	4288      	cmp	r0, r1
 8004622:	d902      	bls.n	800462a <memmove+0xc>
 8004624:	188b      	adds	r3, r1, r2
 8004626:	4298      	cmp	r0, r3
 8004628:	d303      	bcc.n	8004632 <memmove+0x14>
 800462a:	2300      	movs	r3, #0
 800462c:	e007      	b.n	800463e <memmove+0x20>
 800462e:	5c8b      	ldrb	r3, [r1, r2]
 8004630:	5483      	strb	r3, [r0, r2]
 8004632:	3a01      	subs	r2, #1
 8004634:	d2fb      	bcs.n	800462e <memmove+0x10>
 8004636:	bd10      	pop	{r4, pc}
 8004638:	5ccc      	ldrb	r4, [r1, r3]
 800463a:	54c4      	strb	r4, [r0, r3]
 800463c:	3301      	adds	r3, #1
 800463e:	429a      	cmp	r2, r3
 8004640:	d1fa      	bne.n	8004638 <memmove+0x1a>
 8004642:	e7f8      	b.n	8004636 <memmove+0x18>

08004644 <_free_r>:
 8004644:	b570      	push	{r4, r5, r6, lr}
 8004646:	0005      	movs	r5, r0
 8004648:	2900      	cmp	r1, #0
 800464a:	d010      	beq.n	800466e <_free_r+0x2a>
 800464c:	1f0c      	subs	r4, r1, #4
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	da00      	bge.n	8004656 <_free_r+0x12>
 8004654:	18e4      	adds	r4, r4, r3
 8004656:	0028      	movs	r0, r5
 8004658:	f000 f8d4 	bl	8004804 <__malloc_lock>
 800465c:	4a1d      	ldr	r2, [pc, #116]	; (80046d4 <_free_r+0x90>)
 800465e:	6813      	ldr	r3, [r2, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d105      	bne.n	8004670 <_free_r+0x2c>
 8004664:	6063      	str	r3, [r4, #4]
 8004666:	6014      	str	r4, [r2, #0]
 8004668:	0028      	movs	r0, r5
 800466a:	f000 f8d3 	bl	8004814 <__malloc_unlock>
 800466e:	bd70      	pop	{r4, r5, r6, pc}
 8004670:	42a3      	cmp	r3, r4
 8004672:	d908      	bls.n	8004686 <_free_r+0x42>
 8004674:	6821      	ldr	r1, [r4, #0]
 8004676:	1860      	adds	r0, r4, r1
 8004678:	4283      	cmp	r3, r0
 800467a:	d1f3      	bne.n	8004664 <_free_r+0x20>
 800467c:	6818      	ldr	r0, [r3, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	1841      	adds	r1, r0, r1
 8004682:	6021      	str	r1, [r4, #0]
 8004684:	e7ee      	b.n	8004664 <_free_r+0x20>
 8004686:	001a      	movs	r2, r3
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <_free_r+0x4e>
 800468e:	42a3      	cmp	r3, r4
 8004690:	d9f9      	bls.n	8004686 <_free_r+0x42>
 8004692:	6811      	ldr	r1, [r2, #0]
 8004694:	1850      	adds	r0, r2, r1
 8004696:	42a0      	cmp	r0, r4
 8004698:	d10b      	bne.n	80046b2 <_free_r+0x6e>
 800469a:	6820      	ldr	r0, [r4, #0]
 800469c:	1809      	adds	r1, r1, r0
 800469e:	1850      	adds	r0, r2, r1
 80046a0:	6011      	str	r1, [r2, #0]
 80046a2:	4283      	cmp	r3, r0
 80046a4:	d1e0      	bne.n	8004668 <_free_r+0x24>
 80046a6:	6818      	ldr	r0, [r3, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	1841      	adds	r1, r0, r1
 80046ac:	6011      	str	r1, [r2, #0]
 80046ae:	6053      	str	r3, [r2, #4]
 80046b0:	e7da      	b.n	8004668 <_free_r+0x24>
 80046b2:	42a0      	cmp	r0, r4
 80046b4:	d902      	bls.n	80046bc <_free_r+0x78>
 80046b6:	230c      	movs	r3, #12
 80046b8:	602b      	str	r3, [r5, #0]
 80046ba:	e7d5      	b.n	8004668 <_free_r+0x24>
 80046bc:	6821      	ldr	r1, [r4, #0]
 80046be:	1860      	adds	r0, r4, r1
 80046c0:	4283      	cmp	r3, r0
 80046c2:	d103      	bne.n	80046cc <_free_r+0x88>
 80046c4:	6818      	ldr	r0, [r3, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	1841      	adds	r1, r0, r1
 80046ca:	6021      	str	r1, [r4, #0]
 80046cc:	6063      	str	r3, [r4, #4]
 80046ce:	6054      	str	r4, [r2, #4]
 80046d0:	e7ca      	b.n	8004668 <_free_r+0x24>
 80046d2:	46c0      	nop			; (mov r8, r8)
 80046d4:	200001dc 	.word	0x200001dc

080046d8 <_malloc_r>:
 80046d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046da:	2303      	movs	r3, #3
 80046dc:	1ccd      	adds	r5, r1, #3
 80046de:	439d      	bics	r5, r3
 80046e0:	3508      	adds	r5, #8
 80046e2:	0006      	movs	r6, r0
 80046e4:	2d0c      	cmp	r5, #12
 80046e6:	d21f      	bcs.n	8004728 <_malloc_r+0x50>
 80046e8:	250c      	movs	r5, #12
 80046ea:	42a9      	cmp	r1, r5
 80046ec:	d81e      	bhi.n	800472c <_malloc_r+0x54>
 80046ee:	0030      	movs	r0, r6
 80046f0:	f000 f888 	bl	8004804 <__malloc_lock>
 80046f4:	4925      	ldr	r1, [pc, #148]	; (800478c <_malloc_r+0xb4>)
 80046f6:	680a      	ldr	r2, [r1, #0]
 80046f8:	0014      	movs	r4, r2
 80046fa:	2c00      	cmp	r4, #0
 80046fc:	d11a      	bne.n	8004734 <_malloc_r+0x5c>
 80046fe:	4f24      	ldr	r7, [pc, #144]	; (8004790 <_malloc_r+0xb8>)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d104      	bne.n	8004710 <_malloc_r+0x38>
 8004706:	0021      	movs	r1, r4
 8004708:	0030      	movs	r0, r6
 800470a:	f000 f869 	bl	80047e0 <_sbrk_r>
 800470e:	6038      	str	r0, [r7, #0]
 8004710:	0029      	movs	r1, r5
 8004712:	0030      	movs	r0, r6
 8004714:	f000 f864 	bl	80047e0 <_sbrk_r>
 8004718:	1c43      	adds	r3, r0, #1
 800471a:	d12b      	bne.n	8004774 <_malloc_r+0x9c>
 800471c:	230c      	movs	r3, #12
 800471e:	0030      	movs	r0, r6
 8004720:	6033      	str	r3, [r6, #0]
 8004722:	f000 f877 	bl	8004814 <__malloc_unlock>
 8004726:	e003      	b.n	8004730 <_malloc_r+0x58>
 8004728:	2d00      	cmp	r5, #0
 800472a:	dade      	bge.n	80046ea <_malloc_r+0x12>
 800472c:	230c      	movs	r3, #12
 800472e:	6033      	str	r3, [r6, #0]
 8004730:	2000      	movs	r0, #0
 8004732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004734:	6823      	ldr	r3, [r4, #0]
 8004736:	1b5b      	subs	r3, r3, r5
 8004738:	d419      	bmi.n	800476e <_malloc_r+0x96>
 800473a:	2b0b      	cmp	r3, #11
 800473c:	d903      	bls.n	8004746 <_malloc_r+0x6e>
 800473e:	6023      	str	r3, [r4, #0]
 8004740:	18e4      	adds	r4, r4, r3
 8004742:	6025      	str	r5, [r4, #0]
 8004744:	e003      	b.n	800474e <_malloc_r+0x76>
 8004746:	6863      	ldr	r3, [r4, #4]
 8004748:	42a2      	cmp	r2, r4
 800474a:	d10e      	bne.n	800476a <_malloc_r+0x92>
 800474c:	600b      	str	r3, [r1, #0]
 800474e:	0030      	movs	r0, r6
 8004750:	f000 f860 	bl	8004814 <__malloc_unlock>
 8004754:	0020      	movs	r0, r4
 8004756:	2207      	movs	r2, #7
 8004758:	300b      	adds	r0, #11
 800475a:	1d23      	adds	r3, r4, #4
 800475c:	4390      	bics	r0, r2
 800475e:	1ac2      	subs	r2, r0, r3
 8004760:	4298      	cmp	r0, r3
 8004762:	d0e6      	beq.n	8004732 <_malloc_r+0x5a>
 8004764:	1a1b      	subs	r3, r3, r0
 8004766:	50a3      	str	r3, [r4, r2]
 8004768:	e7e3      	b.n	8004732 <_malloc_r+0x5a>
 800476a:	6053      	str	r3, [r2, #4]
 800476c:	e7ef      	b.n	800474e <_malloc_r+0x76>
 800476e:	0022      	movs	r2, r4
 8004770:	6864      	ldr	r4, [r4, #4]
 8004772:	e7c2      	b.n	80046fa <_malloc_r+0x22>
 8004774:	2303      	movs	r3, #3
 8004776:	1cc4      	adds	r4, r0, #3
 8004778:	439c      	bics	r4, r3
 800477a:	42a0      	cmp	r0, r4
 800477c:	d0e1      	beq.n	8004742 <_malloc_r+0x6a>
 800477e:	1a21      	subs	r1, r4, r0
 8004780:	0030      	movs	r0, r6
 8004782:	f000 f82d 	bl	80047e0 <_sbrk_r>
 8004786:	1c43      	adds	r3, r0, #1
 8004788:	d1db      	bne.n	8004742 <_malloc_r+0x6a>
 800478a:	e7c7      	b.n	800471c <_malloc_r+0x44>
 800478c:	200001dc 	.word	0x200001dc
 8004790:	200001e0 	.word	0x200001e0

08004794 <_realloc_r>:
 8004794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004796:	0007      	movs	r7, r0
 8004798:	000d      	movs	r5, r1
 800479a:	0016      	movs	r6, r2
 800479c:	2900      	cmp	r1, #0
 800479e:	d105      	bne.n	80047ac <_realloc_r+0x18>
 80047a0:	0011      	movs	r1, r2
 80047a2:	f7ff ff99 	bl	80046d8 <_malloc_r>
 80047a6:	0004      	movs	r4, r0
 80047a8:	0020      	movs	r0, r4
 80047aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047ac:	2a00      	cmp	r2, #0
 80047ae:	d103      	bne.n	80047b8 <_realloc_r+0x24>
 80047b0:	f7ff ff48 	bl	8004644 <_free_r>
 80047b4:	0034      	movs	r4, r6
 80047b6:	e7f7      	b.n	80047a8 <_realloc_r+0x14>
 80047b8:	f000 f834 	bl	8004824 <_malloc_usable_size_r>
 80047bc:	002c      	movs	r4, r5
 80047be:	42b0      	cmp	r0, r6
 80047c0:	d2f2      	bcs.n	80047a8 <_realloc_r+0x14>
 80047c2:	0031      	movs	r1, r6
 80047c4:	0038      	movs	r0, r7
 80047c6:	f7ff ff87 	bl	80046d8 <_malloc_r>
 80047ca:	1e04      	subs	r4, r0, #0
 80047cc:	d0ec      	beq.n	80047a8 <_realloc_r+0x14>
 80047ce:	0029      	movs	r1, r5
 80047d0:	0032      	movs	r2, r6
 80047d2:	f7ff fc03 	bl	8003fdc <memcpy>
 80047d6:	0029      	movs	r1, r5
 80047d8:	0038      	movs	r0, r7
 80047da:	f7ff ff33 	bl	8004644 <_free_r>
 80047de:	e7e3      	b.n	80047a8 <_realloc_r+0x14>

080047e0 <_sbrk_r>:
 80047e0:	2300      	movs	r3, #0
 80047e2:	b570      	push	{r4, r5, r6, lr}
 80047e4:	4d06      	ldr	r5, [pc, #24]	; (8004800 <_sbrk_r+0x20>)
 80047e6:	0004      	movs	r4, r0
 80047e8:	0008      	movs	r0, r1
 80047ea:	602b      	str	r3, [r5, #0]
 80047ec:	f7fc fb4c 	bl	8000e88 <_sbrk>
 80047f0:	1c43      	adds	r3, r0, #1
 80047f2:	d103      	bne.n	80047fc <_sbrk_r+0x1c>
 80047f4:	682b      	ldr	r3, [r5, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d000      	beq.n	80047fc <_sbrk_r+0x1c>
 80047fa:	6023      	str	r3, [r4, #0]
 80047fc:	bd70      	pop	{r4, r5, r6, pc}
 80047fe:	46c0      	nop			; (mov r8, r8)
 8004800:	200002c4 	.word	0x200002c4

08004804 <__malloc_lock>:
 8004804:	b510      	push	{r4, lr}
 8004806:	4802      	ldr	r0, [pc, #8]	; (8004810 <__malloc_lock+0xc>)
 8004808:	f000 f814 	bl	8004834 <__retarget_lock_acquire_recursive>
 800480c:	bd10      	pop	{r4, pc}
 800480e:	46c0      	nop			; (mov r8, r8)
 8004810:	200002cc 	.word	0x200002cc

08004814 <__malloc_unlock>:
 8004814:	b510      	push	{r4, lr}
 8004816:	4802      	ldr	r0, [pc, #8]	; (8004820 <__malloc_unlock+0xc>)
 8004818:	f000 f80d 	bl	8004836 <__retarget_lock_release_recursive>
 800481c:	bd10      	pop	{r4, pc}
 800481e:	46c0      	nop			; (mov r8, r8)
 8004820:	200002cc 	.word	0x200002cc

08004824 <_malloc_usable_size_r>:
 8004824:	1f0b      	subs	r3, r1, #4
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	1f18      	subs	r0, r3, #4
 800482a:	2b00      	cmp	r3, #0
 800482c:	da01      	bge.n	8004832 <_malloc_usable_size_r+0xe>
 800482e:	580b      	ldr	r3, [r1, r0]
 8004830:	18c0      	adds	r0, r0, r3
 8004832:	4770      	bx	lr

08004834 <__retarget_lock_acquire_recursive>:
 8004834:	4770      	bx	lr

08004836 <__retarget_lock_release_recursive>:
 8004836:	4770      	bx	lr

08004838 <_init>:
 8004838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800483a:	46c0      	nop			; (mov r8, r8)
 800483c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800483e:	bc08      	pop	{r3}
 8004840:	469e      	mov	lr, r3
 8004842:	4770      	bx	lr

08004844 <_fini>:
 8004844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004846:	46c0      	nop			; (mov r8, r8)
 8004848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800484a:	bc08      	pop	{r3}
 800484c:	469e      	mov	lr, r3
 800484e:	4770      	bx	lr
