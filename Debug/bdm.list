
bdm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006018  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  080060d8  080060d8  000160d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006354  08006354  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006354  08006354  00016354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800635c  0800635c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800635c  0800635c  0001635c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006360  08006360  00016360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  20000074  080063d8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  080063d8  00020360  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e42  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022ea  00000000  00000000  00032ede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  000351c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d20  00000000  00000000  00035fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000159d1  00000000  00000000  00036cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dba8  00000000  00000000  0004c6a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081abf  00000000  00000000  0005a249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dbd08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bdc  00000000  00000000  000dbd5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080060c0 	.word	0x080060c0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	080060c0 	.word	0x080060c0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	1c08      	adds	r0, r1, #0
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	; (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f82e 	bl	80004a8 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_lmul>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	0415      	lsls	r5, r2, #16
 800045c:	0c2d      	lsrs	r5, r5, #16
 800045e:	000f      	movs	r7, r1
 8000460:	0001      	movs	r1, r0
 8000462:	002e      	movs	r6, r5
 8000464:	46c6      	mov	lr, r8
 8000466:	4684      	mov	ip, r0
 8000468:	0400      	lsls	r0, r0, #16
 800046a:	0c14      	lsrs	r4, r2, #16
 800046c:	0c00      	lsrs	r0, r0, #16
 800046e:	0c09      	lsrs	r1, r1, #16
 8000470:	4346      	muls	r6, r0
 8000472:	434d      	muls	r5, r1
 8000474:	4360      	muls	r0, r4
 8000476:	4361      	muls	r1, r4
 8000478:	1940      	adds	r0, r0, r5
 800047a:	0c34      	lsrs	r4, r6, #16
 800047c:	1824      	adds	r4, r4, r0
 800047e:	b500      	push	{lr}
 8000480:	42a5      	cmp	r5, r4
 8000482:	d903      	bls.n	800048c <__aeabi_lmul+0x34>
 8000484:	2080      	movs	r0, #128	; 0x80
 8000486:	0240      	lsls	r0, r0, #9
 8000488:	4680      	mov	r8, r0
 800048a:	4441      	add	r1, r8
 800048c:	0c25      	lsrs	r5, r4, #16
 800048e:	186d      	adds	r5, r5, r1
 8000490:	4661      	mov	r1, ip
 8000492:	4359      	muls	r1, r3
 8000494:	437a      	muls	r2, r7
 8000496:	0430      	lsls	r0, r6, #16
 8000498:	1949      	adds	r1, r1, r5
 800049a:	0424      	lsls	r4, r4, #16
 800049c:	0c00      	lsrs	r0, r0, #16
 800049e:	1820      	adds	r0, r4, r0
 80004a0:	1889      	adds	r1, r1, r2
 80004a2:	bc80      	pop	{r7}
 80004a4:	46b8      	mov	r8, r7
 80004a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080004a8 <__udivmoddi4>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	4657      	mov	r7, sl
 80004ac:	464e      	mov	r6, r9
 80004ae:	4645      	mov	r5, r8
 80004b0:	46de      	mov	lr, fp
 80004b2:	b5e0      	push	{r5, r6, r7, lr}
 80004b4:	0004      	movs	r4, r0
 80004b6:	000d      	movs	r5, r1
 80004b8:	4692      	mov	sl, r2
 80004ba:	4699      	mov	r9, r3
 80004bc:	b083      	sub	sp, #12
 80004be:	428b      	cmp	r3, r1
 80004c0:	d830      	bhi.n	8000524 <__udivmoddi4+0x7c>
 80004c2:	d02d      	beq.n	8000520 <__udivmoddi4+0x78>
 80004c4:	4649      	mov	r1, r9
 80004c6:	4650      	mov	r0, sl
 80004c8:	f000 f8d8 	bl	800067c <__clzdi2>
 80004cc:	0029      	movs	r1, r5
 80004ce:	0006      	movs	r6, r0
 80004d0:	0020      	movs	r0, r4
 80004d2:	f000 f8d3 	bl	800067c <__clzdi2>
 80004d6:	1a33      	subs	r3, r6, r0
 80004d8:	4698      	mov	r8, r3
 80004da:	3b20      	subs	r3, #32
 80004dc:	469b      	mov	fp, r3
 80004de:	d433      	bmi.n	8000548 <__udivmoddi4+0xa0>
 80004e0:	465a      	mov	r2, fp
 80004e2:	4653      	mov	r3, sl
 80004e4:	4093      	lsls	r3, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	001f      	movs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d83a      	bhi.n	800056a <__udivmoddi4+0xc2>
 80004f4:	42af      	cmp	r7, r5
 80004f6:	d100      	bne.n	80004fa <__udivmoddi4+0x52>
 80004f8:	e078      	b.n	80005ec <__udivmoddi4+0x144>
 80004fa:	465b      	mov	r3, fp
 80004fc:	1ba4      	subs	r4, r4, r6
 80004fe:	41bd      	sbcs	r5, r7
 8000500:	2b00      	cmp	r3, #0
 8000502:	da00      	bge.n	8000506 <__udivmoddi4+0x5e>
 8000504:	e075      	b.n	80005f2 <__udivmoddi4+0x14a>
 8000506:	2200      	movs	r2, #0
 8000508:	2300      	movs	r3, #0
 800050a:	9200      	str	r2, [sp, #0]
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	2301      	movs	r3, #1
 8000510:	465a      	mov	r2, fp
 8000512:	4093      	lsls	r3, r2
 8000514:	9301      	str	r3, [sp, #4]
 8000516:	2301      	movs	r3, #1
 8000518:	4642      	mov	r2, r8
 800051a:	4093      	lsls	r3, r2
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	e028      	b.n	8000572 <__udivmoddi4+0xca>
 8000520:	4282      	cmp	r2, r0
 8000522:	d9cf      	bls.n	80004c4 <__udivmoddi4+0x1c>
 8000524:	2200      	movs	r2, #0
 8000526:	2300      	movs	r3, #0
 8000528:	9200      	str	r2, [sp, #0]
 800052a:	9301      	str	r3, [sp, #4]
 800052c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <__udivmoddi4+0x8e>
 8000532:	601c      	str	r4, [r3, #0]
 8000534:	605d      	str	r5, [r3, #4]
 8000536:	9800      	ldr	r0, [sp, #0]
 8000538:	9901      	ldr	r1, [sp, #4]
 800053a:	b003      	add	sp, #12
 800053c:	bcf0      	pop	{r4, r5, r6, r7}
 800053e:	46bb      	mov	fp, r7
 8000540:	46b2      	mov	sl, r6
 8000542:	46a9      	mov	r9, r5
 8000544:	46a0      	mov	r8, r4
 8000546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000548:	4642      	mov	r2, r8
 800054a:	2320      	movs	r3, #32
 800054c:	1a9b      	subs	r3, r3, r2
 800054e:	4652      	mov	r2, sl
 8000550:	40da      	lsrs	r2, r3
 8000552:	4641      	mov	r1, r8
 8000554:	0013      	movs	r3, r2
 8000556:	464a      	mov	r2, r9
 8000558:	408a      	lsls	r2, r1
 800055a:	0017      	movs	r7, r2
 800055c:	4642      	mov	r2, r8
 800055e:	431f      	orrs	r7, r3
 8000560:	4653      	mov	r3, sl
 8000562:	4093      	lsls	r3, r2
 8000564:	001e      	movs	r6, r3
 8000566:	42af      	cmp	r7, r5
 8000568:	d9c4      	bls.n	80004f4 <__udivmoddi4+0x4c>
 800056a:	2200      	movs	r2, #0
 800056c:	2300      	movs	r3, #0
 800056e:	9200      	str	r2, [sp, #0]
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	4643      	mov	r3, r8
 8000574:	2b00      	cmp	r3, #0
 8000576:	d0d9      	beq.n	800052c <__udivmoddi4+0x84>
 8000578:	07fb      	lsls	r3, r7, #31
 800057a:	0872      	lsrs	r2, r6, #1
 800057c:	431a      	orrs	r2, r3
 800057e:	4646      	mov	r6, r8
 8000580:	087b      	lsrs	r3, r7, #1
 8000582:	e00e      	b.n	80005a2 <__udivmoddi4+0xfa>
 8000584:	42ab      	cmp	r3, r5
 8000586:	d101      	bne.n	800058c <__udivmoddi4+0xe4>
 8000588:	42a2      	cmp	r2, r4
 800058a:	d80c      	bhi.n	80005a6 <__udivmoddi4+0xfe>
 800058c:	1aa4      	subs	r4, r4, r2
 800058e:	419d      	sbcs	r5, r3
 8000590:	2001      	movs	r0, #1
 8000592:	1924      	adds	r4, r4, r4
 8000594:	416d      	adcs	r5, r5
 8000596:	2100      	movs	r1, #0
 8000598:	3e01      	subs	r6, #1
 800059a:	1824      	adds	r4, r4, r0
 800059c:	414d      	adcs	r5, r1
 800059e:	2e00      	cmp	r6, #0
 80005a0:	d006      	beq.n	80005b0 <__udivmoddi4+0x108>
 80005a2:	42ab      	cmp	r3, r5
 80005a4:	d9ee      	bls.n	8000584 <__udivmoddi4+0xdc>
 80005a6:	3e01      	subs	r6, #1
 80005a8:	1924      	adds	r4, r4, r4
 80005aa:	416d      	adcs	r5, r5
 80005ac:	2e00      	cmp	r6, #0
 80005ae:	d1f8      	bne.n	80005a2 <__udivmoddi4+0xfa>
 80005b0:	9800      	ldr	r0, [sp, #0]
 80005b2:	9901      	ldr	r1, [sp, #4]
 80005b4:	465b      	mov	r3, fp
 80005b6:	1900      	adds	r0, r0, r4
 80005b8:	4169      	adcs	r1, r5
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	db24      	blt.n	8000608 <__udivmoddi4+0x160>
 80005be:	002b      	movs	r3, r5
 80005c0:	465a      	mov	r2, fp
 80005c2:	4644      	mov	r4, r8
 80005c4:	40d3      	lsrs	r3, r2
 80005c6:	002a      	movs	r2, r5
 80005c8:	40e2      	lsrs	r2, r4
 80005ca:	001c      	movs	r4, r3
 80005cc:	465b      	mov	r3, fp
 80005ce:	0015      	movs	r5, r2
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	db2a      	blt.n	800062a <__udivmoddi4+0x182>
 80005d4:	0026      	movs	r6, r4
 80005d6:	409e      	lsls	r6, r3
 80005d8:	0033      	movs	r3, r6
 80005da:	0026      	movs	r6, r4
 80005dc:	4647      	mov	r7, r8
 80005de:	40be      	lsls	r6, r7
 80005e0:	0032      	movs	r2, r6
 80005e2:	1a80      	subs	r0, r0, r2
 80005e4:	4199      	sbcs	r1, r3
 80005e6:	9000      	str	r0, [sp, #0]
 80005e8:	9101      	str	r1, [sp, #4]
 80005ea:	e79f      	b.n	800052c <__udivmoddi4+0x84>
 80005ec:	42a3      	cmp	r3, r4
 80005ee:	d8bc      	bhi.n	800056a <__udivmoddi4+0xc2>
 80005f0:	e783      	b.n	80004fa <__udivmoddi4+0x52>
 80005f2:	4642      	mov	r2, r8
 80005f4:	2320      	movs	r3, #32
 80005f6:	2100      	movs	r1, #0
 80005f8:	1a9b      	subs	r3, r3, r2
 80005fa:	2200      	movs	r2, #0
 80005fc:	9100      	str	r1, [sp, #0]
 80005fe:	9201      	str	r2, [sp, #4]
 8000600:	2201      	movs	r2, #1
 8000602:	40da      	lsrs	r2, r3
 8000604:	9201      	str	r2, [sp, #4]
 8000606:	e786      	b.n	8000516 <__udivmoddi4+0x6e>
 8000608:	4642      	mov	r2, r8
 800060a:	2320      	movs	r3, #32
 800060c:	1a9b      	subs	r3, r3, r2
 800060e:	002a      	movs	r2, r5
 8000610:	4646      	mov	r6, r8
 8000612:	409a      	lsls	r2, r3
 8000614:	0023      	movs	r3, r4
 8000616:	40f3      	lsrs	r3, r6
 8000618:	4644      	mov	r4, r8
 800061a:	4313      	orrs	r3, r2
 800061c:	002a      	movs	r2, r5
 800061e:	40e2      	lsrs	r2, r4
 8000620:	001c      	movs	r4, r3
 8000622:	465b      	mov	r3, fp
 8000624:	0015      	movs	r5, r2
 8000626:	2b00      	cmp	r3, #0
 8000628:	dad4      	bge.n	80005d4 <__udivmoddi4+0x12c>
 800062a:	4642      	mov	r2, r8
 800062c:	002f      	movs	r7, r5
 800062e:	2320      	movs	r3, #32
 8000630:	0026      	movs	r6, r4
 8000632:	4097      	lsls	r7, r2
 8000634:	1a9b      	subs	r3, r3, r2
 8000636:	40de      	lsrs	r6, r3
 8000638:	003b      	movs	r3, r7
 800063a:	4333      	orrs	r3, r6
 800063c:	e7cd      	b.n	80005da <__udivmoddi4+0x132>
 800063e:	46c0      	nop			; (mov r8, r8)

08000640 <__clzsi2>:
 8000640:	211c      	movs	r1, #28
 8000642:	2301      	movs	r3, #1
 8000644:	041b      	lsls	r3, r3, #16
 8000646:	4298      	cmp	r0, r3
 8000648:	d301      	bcc.n	800064e <__clzsi2+0xe>
 800064a:	0c00      	lsrs	r0, r0, #16
 800064c:	3910      	subs	r1, #16
 800064e:	0a1b      	lsrs	r3, r3, #8
 8000650:	4298      	cmp	r0, r3
 8000652:	d301      	bcc.n	8000658 <__clzsi2+0x18>
 8000654:	0a00      	lsrs	r0, r0, #8
 8000656:	3908      	subs	r1, #8
 8000658:	091b      	lsrs	r3, r3, #4
 800065a:	4298      	cmp	r0, r3
 800065c:	d301      	bcc.n	8000662 <__clzsi2+0x22>
 800065e:	0900      	lsrs	r0, r0, #4
 8000660:	3904      	subs	r1, #4
 8000662:	a202      	add	r2, pc, #8	; (adr r2, 800066c <__clzsi2+0x2c>)
 8000664:	5c10      	ldrb	r0, [r2, r0]
 8000666:	1840      	adds	r0, r0, r1
 8000668:	4770      	bx	lr
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	02020304 	.word	0x02020304
 8000670:	01010101 	.word	0x01010101
	...

0800067c <__clzdi2>:
 800067c:	b510      	push	{r4, lr}
 800067e:	2900      	cmp	r1, #0
 8000680:	d103      	bne.n	800068a <__clzdi2+0xe>
 8000682:	f7ff ffdd 	bl	8000640 <__clzsi2>
 8000686:	3020      	adds	r0, #32
 8000688:	e002      	b.n	8000690 <__clzdi2+0x14>
 800068a:	1c08      	adds	r0, r1, #0
 800068c:	f7ff ffd8 	bl	8000640 <__clzsi2>
 8000690:	bd10      	pop	{r4, pc}
 8000692:	46c0      	nop			; (mov r8, r8)

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000698:	f001 fa8a 	bl	8001bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069c:	f000 f826 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a0:	f000 f910 	bl	80008c4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80006a4:	f000 f876 	bl	8000794 <MX_SPI1_Init>
  MX_USART5_UART_Init();
 80006a8:	f000 f8dc 	bl	8000864 <MX_USART5_UART_Init>
  MX_USART4_UART_Init();
 80006ac:	f000 f8aa 	bl	8000804 <MX_USART4_UART_Init>
  /* USER CODE BEGIN 2 */

	/* IIS2DLPC configuration */
	iis2dlpc_ctx.write_reg = platform_write ;
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <main+0x48>)
 80006b2:	4a0b      	ldr	r2, [pc, #44]	; (80006e0 <main+0x4c>)
 80006b4:	601a      	str	r2, [r3, #0]
	iis2dlpc_ctx.read_reg = platform_read ;
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <main+0x48>)
 80006b8:	4a0a      	ldr	r2, [pc, #40]	; (80006e4 <main+0x50>)
 80006ba:	605a      	str	r2, [r3, #4]
	iis2dlpc_ctx.handle = &IIS2DLPC_BUS ;
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <main+0x48>)
 80006be:	4a0a      	ldr	r2, [pc, #40]	; (80006e8 <main+0x54>)
 80006c0:	609a      	str	r2, [r3, #8]
	iis2dlpc_conf_set () ;
 80006c2:	f000 fa71 	bl	8000ba8 <iis2dlpc_conf_set>
	iis2dlpc_int_notification_set ( &iis2dlpc_ctx , IIS2DLPC_LIR ) ;
 80006c6:	4b05      	ldr	r3, [pc, #20]	; (80006dc <main+0x48>)
 80006c8:	2101      	movs	r1, #1
 80006ca:	0018      	movs	r0, r3
 80006cc:	f001 f93d 	bl	800194a <iis2dlpc_int_notification_set>
	iis2dlpc_conf_print () ;
 80006d0:	f000 fad6 	bl	8000c80 <iis2dlpc_conf_print>

	/* BG96 configuration */
	bg96_ps_on () ;
 80006d4:	f000 fc24 	bl	8000f20 <bg96_ps_on>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80006d8:	e7fe      	b.n	80006d8 <main+0x44>
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	200001c4 	.word	0x200001c4
 80006e0:	080009dd 	.word	0x080009dd
 80006e4:	08000a4d 	.word	0x08000a4d
 80006e8:	200002f4 	.word	0x200002f4

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b590      	push	{r4, r7, lr}
 80006ee:	b095      	sub	sp, #84	; 0x54
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	2418      	movs	r4, #24
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	0018      	movs	r0, r3
 80006f8:	2338      	movs	r3, #56	; 0x38
 80006fa:	001a      	movs	r2, r3
 80006fc:	2100      	movs	r1, #0
 80006fe:	f004 fb6d 	bl	8004ddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	0018      	movs	r0, r3
 8000706:	2314      	movs	r3, #20
 8000708:	001a      	movs	r2, r3
 800070a:	2100      	movs	r1, #0
 800070c:	f004 fb66 	bl	8004ddc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000710:	4b1e      	ldr	r3, [pc, #120]	; (800078c <SystemClock_Config+0xa0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a1e      	ldr	r2, [pc, #120]	; (8000790 <SystemClock_Config+0xa4>)
 8000716:	401a      	ands	r2, r3
 8000718:	4b1c      	ldr	r3, [pc, #112]	; (800078c <SystemClock_Config+0xa0>)
 800071a:	2180      	movs	r1, #128	; 0x80
 800071c:	0109      	lsls	r1, r1, #4
 800071e:	430a      	orrs	r2, r1
 8000720:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000722:	0021      	movs	r1, r4
 8000724:	187b      	adds	r3, r7, r1
 8000726:	2210      	movs	r2, #16
 8000728:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2201      	movs	r2, #1
 800072e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000730:	187b      	adds	r3, r7, r1
 8000732:	2200      	movs	r2, #0
 8000734:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000736:	187b      	adds	r3, r7, r1
 8000738:	22a0      	movs	r2, #160	; 0xa0
 800073a:	0212      	lsls	r2, r2, #8
 800073c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2200      	movs	r2, #0
 8000742:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000744:	187b      	adds	r3, r7, r1
 8000746:	0018      	movs	r0, r3
 8000748:	f001 fe00 	bl	800234c <HAL_RCC_OscConfig>
 800074c:	1e03      	subs	r3, r0, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000750:	f000 fcf8 	bl	8001144 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	220f      	movs	r2, #15
 8000758:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	2200      	movs	r2, #0
 800075e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	2200      	movs	r2, #0
 800076a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2100      	movs	r1, #0
 8000776:	0018      	movs	r0, r3
 8000778:	f002 f9bc 	bl	8002af4 <HAL_RCC_ClockConfig>
 800077c:	1e03      	subs	r3, r0, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000780:	f000 fce0 	bl	8001144 <Error_Handler>
  }
}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	b015      	add	sp, #84	; 0x54
 800078a:	bd90      	pop	{r4, r7, pc}
 800078c:	40007000 	.word	0x40007000
 8000790:	ffffe7ff 	.word	0xffffe7ff

08000794 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000798:	4b18      	ldr	r3, [pc, #96]	; (80007fc <MX_SPI1_Init+0x68>)
 800079a:	4a19      	ldr	r2, [pc, #100]	; (8000800 <MX_SPI1_Init+0x6c>)
 800079c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800079e:	4b17      	ldr	r3, [pc, #92]	; (80007fc <MX_SPI1_Init+0x68>)
 80007a0:	2282      	movs	r2, #130	; 0x82
 80007a2:	0052      	lsls	r2, r2, #1
 80007a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007a6:	4b15      	ldr	r3, [pc, #84]	; (80007fc <MX_SPI1_Init+0x68>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007ac:	4b13      	ldr	r3, [pc, #76]	; (80007fc <MX_SPI1_Init+0x68>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007b2:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_SPI1_Init+0x68>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007b8:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_SPI1_Init+0x68>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_SPI1_Init+0x68>)
 80007c0:	2280      	movs	r2, #128	; 0x80
 80007c2:	0092      	lsls	r2, r2, #2
 80007c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007c6:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <MX_SPI1_Init+0x68>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_SPI1_Init+0x68>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <MX_SPI1_Init+0x68>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007d8:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_SPI1_Init+0x68>)
 80007da:	2200      	movs	r2, #0
 80007dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007de:	4b07      	ldr	r3, [pc, #28]	; (80007fc <MX_SPI1_Init+0x68>)
 80007e0:	2207      	movs	r2, #7
 80007e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <MX_SPI1_Init+0x68>)
 80007e6:	0018      	movs	r0, r3
 80007e8:	f002 fba8 	bl	8002f3c <HAL_SPI_Init>
 80007ec:	1e03      	subs	r3, r0, #0
 80007ee:	d001      	beq.n	80007f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007f0:	f000 fca8 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007f4:	46c0      	nop			; (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	200002f4 	.word	0x200002f4
 8000800:	40013000 	.word	0x40013000

08000804 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8000808:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_USART4_UART_Init+0x58>)
 800080a:	4a15      	ldr	r2, [pc, #84]	; (8000860 <MX_USART4_UART_Init+0x5c>)
 800080c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800080e:	4b13      	ldr	r3, [pc, #76]	; (800085c <MX_USART4_UART_Init+0x58>)
 8000810:	22e1      	movs	r2, #225	; 0xe1
 8000812:	0252      	lsls	r2, r2, #9
 8000814:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_USART4_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_USART4_UART_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_USART4_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_USART4_UART_Init+0x58>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <MX_USART4_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_USART4_UART_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <MX_USART4_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_USART4_UART_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000846:	4b05      	ldr	r3, [pc, #20]	; (800085c <MX_USART4_UART_Init+0x58>)
 8000848:	0018      	movs	r0, r3
 800084a:	f003 f981 	bl	8003b50 <HAL_UART_Init>
 800084e:	1e03      	subs	r3, r0, #0
 8000850:	d001      	beq.n	8000856 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 8000852:	f000 fc77 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000270 	.word	0x20000270
 8000860:	40004c00 	.word	0x40004c00

08000864 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8000868:	4b14      	ldr	r3, [pc, #80]	; (80008bc <MX_USART5_UART_Init+0x58>)
 800086a:	4a15      	ldr	r2, [pc, #84]	; (80008c0 <MX_USART5_UART_Init+0x5c>)
 800086c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800086e:	4b13      	ldr	r3, [pc, #76]	; (80008bc <MX_USART5_UART_Init+0x58>)
 8000870:	2296      	movs	r2, #150	; 0x96
 8000872:	0192      	lsls	r2, r2, #6
 8000874:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_USART5_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_USART5_UART_Init+0x58>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <MX_USART5_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000888:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <MX_USART5_UART_Init+0x58>)
 800088a:	220c      	movs	r2, #12
 800088c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <MX_USART5_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000894:	4b09      	ldr	r3, [pc, #36]	; (80008bc <MX_USART5_UART_Init+0x58>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800089a:	4b08      	ldr	r3, [pc, #32]	; (80008bc <MX_USART5_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <MX_USART5_UART_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80008a6:	4b05      	ldr	r3, [pc, #20]	; (80008bc <MX_USART5_UART_Init+0x58>)
 80008a8:	0018      	movs	r0, r3
 80008aa:	f003 f951 	bl	8003b50 <HAL_UART_Init>
 80008ae:	1e03      	subs	r3, r0, #0
 80008b0:	d001      	beq.n	80008b6 <MX_USART5_UART_Init+0x52>
  {
    Error_Handler();
 80008b2:	f000 fc47 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	200001ec 	.word	0x200001ec
 80008c0:	40005000 	.word	0x40005000

080008c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b089      	sub	sp, #36	; 0x24
 80008c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ca:	240c      	movs	r4, #12
 80008cc:	193b      	adds	r3, r7, r4
 80008ce:	0018      	movs	r0, r3
 80008d0:	2314      	movs	r3, #20
 80008d2:	001a      	movs	r2, r3
 80008d4:	2100      	movs	r1, #0
 80008d6:	f004 fa81 	bl	8004ddc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	4b3d      	ldr	r3, [pc, #244]	; (80009d0 <MX_GPIO_Init+0x10c>)
 80008dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008de:	4b3c      	ldr	r3, [pc, #240]	; (80009d0 <MX_GPIO_Init+0x10c>)
 80008e0:	2101      	movs	r1, #1
 80008e2:	430a      	orrs	r2, r1
 80008e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80008e6:	4b3a      	ldr	r3, [pc, #232]	; (80009d0 <MX_GPIO_Init+0x10c>)
 80008e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ea:	2201      	movs	r2, #1
 80008ec:	4013      	ands	r3, r2
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f2:	4b37      	ldr	r3, [pc, #220]	; (80009d0 <MX_GPIO_Init+0x10c>)
 80008f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008f6:	4b36      	ldr	r3, [pc, #216]	; (80009d0 <MX_GPIO_Init+0x10c>)
 80008f8:	2102      	movs	r1, #2
 80008fa:	430a      	orrs	r2, r1
 80008fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80008fe:	4b34      	ldr	r3, [pc, #208]	; (80009d0 <MX_GPIO_Init+0x10c>)
 8000900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000902:	2202      	movs	r2, #2
 8000904:	4013      	ands	r3, r2
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BG96_PWRKEY_Pin|BG96_RESET_N_Pin|IIS2DLPC_CS_Pin|BG96_PS_Pin, GPIO_PIN_RESET);
 800090a:	4932      	ldr	r1, [pc, #200]	; (80009d4 <MX_GPIO_Init+0x110>)
 800090c:	4b32      	ldr	r3, [pc, #200]	; (80009d8 <MX_GPIO_Init+0x114>)
 800090e:	2200      	movs	r2, #0
 8000910:	0018      	movs	r0, r3
 8000912:	f001 fce2 	bl	80022da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IIS2DLPC_SHDN_GPIO_Port, IIS2DLPC_SHDN_Pin, GPIO_PIN_RESET);
 8000916:	2380      	movs	r3, #128	; 0x80
 8000918:	0059      	lsls	r1, r3, #1
 800091a:	23a0      	movs	r3, #160	; 0xa0
 800091c:	05db      	lsls	r3, r3, #23
 800091e:	2200      	movs	r2, #0
 8000920:	0018      	movs	r0, r3
 8000922:	f001 fcda 	bl	80022da <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BG96_PWRKEY_Pin BG96_RESET_N_Pin IIS2DLPC_CS_Pin BG96_PS_Pin */
  GPIO_InitStruct.Pin = BG96_PWRKEY_Pin|BG96_RESET_N_Pin|IIS2DLPC_CS_Pin|BG96_PS_Pin;
 8000926:	193b      	adds	r3, r7, r4
 8000928:	4a2a      	ldr	r2, [pc, #168]	; (80009d4 <MX_GPIO_Init+0x110>)
 800092a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	193b      	adds	r3, r7, r4
 800092e:	2201      	movs	r2, #1
 8000930:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	193b      	adds	r3, r7, r4
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	193b      	adds	r3, r7, r4
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093e:	193b      	adds	r3, r7, r4
 8000940:	4a25      	ldr	r2, [pc, #148]	; (80009d8 <MX_GPIO_Init+0x114>)
 8000942:	0019      	movs	r1, r3
 8000944:	0010      	movs	r0, r2
 8000946:	f001 fb2d 	bl	8001fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BG96_STATUS_Pin */
  GPIO_InitStruct.Pin = BG96_STATUS_Pin;
 800094a:	193b      	adds	r3, r7, r4
 800094c:	2204      	movs	r2, #4
 800094e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000950:	193b      	adds	r3, r7, r4
 8000952:	2200      	movs	r2, #0
 8000954:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000956:	193b      	adds	r3, r7, r4
 8000958:	2201      	movs	r2, #1
 800095a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BG96_STATUS_GPIO_Port, &GPIO_InitStruct);
 800095c:	193b      	adds	r3, r7, r4
 800095e:	4a1e      	ldr	r2, [pc, #120]	; (80009d8 <MX_GPIO_Init+0x114>)
 8000960:	0019      	movs	r1, r3
 8000962:	0010      	movs	r0, r2
 8000964:	f001 fb1e 	bl	8001fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IIS2DLPC_SHDN_Pin */
  GPIO_InitStruct.Pin = IIS2DLPC_SHDN_Pin;
 8000968:	0021      	movs	r1, r4
 800096a:	187b      	adds	r3, r7, r1
 800096c:	2280      	movs	r2, #128	; 0x80
 800096e:	0052      	lsls	r2, r2, #1
 8000970:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	000c      	movs	r4, r1
 8000974:	193b      	adds	r3, r7, r4
 8000976:	2201      	movs	r2, #1
 8000978:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	193b      	adds	r3, r7, r4
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	193b      	adds	r3, r7, r4
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(IIS2DLPC_SHDN_GPIO_Port, &GPIO_InitStruct);
 8000986:	193a      	adds	r2, r7, r4
 8000988:	23a0      	movs	r3, #160	; 0xa0
 800098a:	05db      	lsls	r3, r3, #23
 800098c:	0011      	movs	r1, r2
 800098e:	0018      	movs	r0, r3
 8000990:	f001 fb08 	bl	8001fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IIS2DLPC_INT1_Pin */
  GPIO_InitStruct.Pin = IIS2DLPC_INT1_Pin;
 8000994:	0021      	movs	r1, r4
 8000996:	187b      	adds	r3, r7, r1
 8000998:	2280      	movs	r2, #128	; 0x80
 800099a:	0052      	lsls	r2, r2, #1
 800099c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	2288      	movs	r2, #136	; 0x88
 80009a2:	0352      	lsls	r2, r2, #13
 80009a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IIS2DLPC_INT1_GPIO_Port, &GPIO_InitStruct);
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	4a0a      	ldr	r2, [pc, #40]	; (80009d8 <MX_GPIO_Init+0x114>)
 80009b0:	0019      	movs	r1, r3
 80009b2:	0010      	movs	r0, r2
 80009b4:	f001 faf6 	bl	8001fa4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 0);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2102      	movs	r1, #2
 80009bc:	2007      	movs	r0, #7
 80009be:	f001 fa37 	bl	8001e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80009c2:	2007      	movs	r0, #7
 80009c4:	f001 fa49 	bl	8001e5a <HAL_NVIC_EnableIRQ>

}
 80009c8:	46c0      	nop			; (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	b009      	add	sp, #36	; 0x24
 80009ce:	bd90      	pop	{r4, r7, pc}
 80009d0:	40021000 	.word	0x40021000
 80009d4:	00008803 	.word	0x00008803
 80009d8:	50000400 	.word	0x50000400

080009dc <platform_write>:
 * @param  bufp      pointer to data to write in register reg
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write ( void *handle , uint8_t reg , const uint8_t *bufp , uint16_t len )
{
 80009dc:	b5b0      	push	{r4, r5, r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	0008      	movs	r0, r1
 80009e6:	607a      	str	r2, [r7, #4]
 80009e8:	0019      	movs	r1, r3
 80009ea:	240b      	movs	r4, #11
 80009ec:	193b      	adds	r3, r7, r4
 80009ee:	1c02      	adds	r2, r0, #0
 80009f0:	701a      	strb	r2, [r3, #0]
 80009f2:	2508      	movs	r5, #8
 80009f4:	197b      	adds	r3, r7, r5
 80009f6:	1c0a      	adds	r2, r1, #0
 80009f8:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin	( IIS2DLPC_CS_GPIO_Port , IIS2DLPC_CS_Pin , GPIO_PIN_RESET ) ;
 80009fa:	2380      	movs	r3, #128	; 0x80
 80009fc:	011b      	lsls	r3, r3, #4
 80009fe:	4812      	ldr	r0, [pc, #72]	; (8000a48 <platform_write+0x6c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	0019      	movs	r1, r3
 8000a04:	f001 fc69 	bl	80022da <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 8000a08:	2014      	movs	r0, #20
 8000a0a:	f001 f941 	bl	8001c90 <HAL_Delay>
	HAL_SPI_Transmit	( handle , &reg , 1 , 1000 ) ;
 8000a0e:	23fa      	movs	r3, #250	; 0xfa
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	1939      	adds	r1, r7, r4
 8000a14:	68f8      	ldr	r0, [r7, #12]
 8000a16:	2201      	movs	r2, #1
 8000a18:	f002 fb24 	bl	8003064 <HAL_SPI_Transmit>
	HAL_SPI_Transmit	( handle , (uint8_t*) bufp , len , 1000 ) ;
 8000a1c:	23fa      	movs	r3, #250	; 0xfa
 8000a1e:	009c      	lsls	r4, r3, #2
 8000a20:	197b      	adds	r3, r7, r5
 8000a22:	881a      	ldrh	r2, [r3, #0]
 8000a24:	6879      	ldr	r1, [r7, #4]
 8000a26:	68f8      	ldr	r0, [r7, #12]
 8000a28:	0023      	movs	r3, r4
 8000a2a:	f002 fb1b 	bl	8003064 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin	( IIS2DLPC_CS_GPIO_Port , IIS2DLPC_CS_Pin , GPIO_PIN_SET) ;
 8000a2e:	2380      	movs	r3, #128	; 0x80
 8000a30:	011b      	lsls	r3, r3, #4
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <platform_write+0x6c>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	0019      	movs	r1, r3
 8000a38:	f001 fc4f 	bl	80022da <HAL_GPIO_WritePin>

	return 0;
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	0018      	movs	r0, r3
 8000a40:	46bd      	mov	sp, r7
 8000a42:	b004      	add	sp, #16
 8000a44:	bdb0      	pop	{r4, r5, r7, pc}
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	50000400 	.word	0x50000400

08000a4c <platform_read>:
 * @param  bufp      pointer to buffer that store the data read
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read ( void *handle , uint8_t reg , uint8_t *bufp , uint16_t len )
{
 8000a4c:	b5b0      	push	{r4, r5, r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	0008      	movs	r0, r1
 8000a56:	607a      	str	r2, [r7, #4]
 8000a58:	0019      	movs	r1, r3
 8000a5a:	240b      	movs	r4, #11
 8000a5c:	193b      	adds	r3, r7, r4
 8000a5e:	1c02      	adds	r2, r0, #0
 8000a60:	701a      	strb	r2, [r3, #0]
 8000a62:	2508      	movs	r5, #8
 8000a64:	197b      	adds	r3, r7, r5
 8000a66:	1c0a      	adds	r2, r1, #0
 8000a68:	801a      	strh	r2, [r3, #0]
	reg |= 0x80;
 8000a6a:	193b      	adds	r3, r7, r4
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2280      	movs	r2, #128	; 0x80
 8000a70:	4252      	negs	r2, r2
 8000a72:	4313      	orrs	r3, r2
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	193b      	adds	r3, r7, r4
 8000a78:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin ( IIS2DLPC_CS_GPIO_Port , IIS2DLPC_CS_Pin , GPIO_PIN_RESET) ;
 8000a7a:	2380      	movs	r3, #128	; 0x80
 8000a7c:	011b      	lsls	r3, r3, #4
 8000a7e:	4812      	ldr	r0, [pc, #72]	; (8000ac8 <platform_read+0x7c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	0019      	movs	r1, r3
 8000a84:	f001 fc29 	bl	80022da <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 8000a88:	2014      	movs	r0, #20
 8000a8a:	f001 f901 	bl	8001c90 <HAL_Delay>
	HAL_SPI_Transmit ( handle , &reg , 1 , 1000 ) ;
 8000a8e:	23fa      	movs	r3, #250	; 0xfa
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	1939      	adds	r1, r7, r4
 8000a94:	68f8      	ldr	r0, [r7, #12]
 8000a96:	2201      	movs	r2, #1
 8000a98:	f002 fae4 	bl	8003064 <HAL_SPI_Transmit>
	HAL_SPI_Receive ( handle , bufp , len , 1000 ) ;
 8000a9c:	23fa      	movs	r3, #250	; 0xfa
 8000a9e:	009c      	lsls	r4, r3, #2
 8000aa0:	197b      	adds	r3, r7, r5
 8000aa2:	881a      	ldrh	r2, [r3, #0]
 8000aa4:	6879      	ldr	r1, [r7, #4]
 8000aa6:	68f8      	ldr	r0, [r7, #12]
 8000aa8:	0023      	movs	r3, r4
 8000aaa:	f002 fc31 	bl	8003310 <HAL_SPI_Receive>
	HAL_GPIO_WritePin ( IIS2DLPC_CS_GPIO_Port , IIS2DLPC_CS_Pin , GPIO_PIN_SET) ;
 8000aae:	2380      	movs	r3, #128	; 0x80
 8000ab0:	011b      	lsls	r3, r3, #4
 8000ab2:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <platform_read+0x7c>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	0019      	movs	r1, r3
 8000ab8:	f001 fc0f 	bl	80022da <HAL_GPIO_WritePin>

	return 0;
 8000abc:	2300      	movs	r3, #0
}
 8000abe:	0018      	movs	r0, r3
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b004      	add	sp, #16
 8000ac4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	50000400 	.word	0x50000400

08000acc <iis2dlpc_int1_print>:

static uint8_t iis2dlpc_int1_print ( void )
{
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
	uint8_t r = (uint8_t)HAL_GPIO_ReadPin ( IIS2DLPC_INT1_GPIO_Port , IIS2DLPC_INT1_Pin ) ;
 8000ad2:	1dfc      	adds	r4, r7, #7
 8000ad4:	2380      	movs	r3, #128	; 0x80
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	4a0f      	ldr	r2, [pc, #60]	; (8000b18 <iis2dlpc_int1_print+0x4c>)
 8000ada:	0019      	movs	r1, r3
 8000adc:	0010      	movs	r0, r2
 8000ade:	f001 fbdf 	bl	80022a0 <HAL_GPIO_ReadPin>
 8000ae2:	0003      	movs	r3, r0
 8000ae4:	7023      	strb	r3, [r4, #0]
	sprintf ( (char *)uart_tx_buff , "IIS2DLPC_INT1_Pin: %d\r\n" , r ) ;
 8000ae6:	1dfb      	adds	r3, r7, #7
 8000ae8:	781a      	ldrb	r2, [r3, #0]
 8000aea:	490c      	ldr	r1, [pc, #48]	; (8000b1c <iis2dlpc_int1_print+0x50>)
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <iis2dlpc_int1_print+0x54>)
 8000aee:	0018      	movs	r0, r3
 8000af0:	f004 f996 	bl	8004e20 <siprintf>
	dbg_tx ( uart_tx_buff , strlen ( (char const*)uart_tx_buff ) ) ;
 8000af4:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <iis2dlpc_int1_print+0x54>)
 8000af6:	0018      	movs	r0, r3
 8000af8:	f7ff fb06 	bl	8000108 <strlen>
 8000afc:	0003      	movs	r3, r0
 8000afe:	b29a      	uxth	r2, r3
 8000b00:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <iis2dlpc_int1_print+0x54>)
 8000b02:	0011      	movs	r1, r2
 8000b04:	0018      	movs	r0, r3
 8000b06:	f000 f9bb 	bl	8000e80 <dbg_tx>
	return r ;
 8000b0a:	1dfb      	adds	r3, r7, #7
 8000b0c:	781b      	ldrb	r3, [r3, #0]
}
 8000b0e:	0018      	movs	r0, r3
 8000b10:	46bd      	mov	sp, r7
 8000b12:	b003      	add	sp, #12
 8000b14:	bd90      	pop	{r4, r7, pc}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	50000400 	.word	0x50000400
 8000b1c:	080060d8 	.word	0x080060d8
 8000b20:	20000094 	.word	0x20000094

08000b24 <iis2dlpc_temp_print>:

/* get and print to dbg IIS2DLPC raw temp */
static void iis2dlpc_temp_print ( void )
{
 8000b24:	b590      	push	{r4, r7, lr}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
	iis2dlpc_temperature_raw_get ( &iis2dlpc_ctx , &iis2dlpc_temp_reg ) ;
 8000b2a:	4a1b      	ldr	r2, [pc, #108]	; (8000b98 <iis2dlpc_temp_print+0x74>)
 8000b2c:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <iis2dlpc_temp_print+0x78>)
 8000b2e:	0011      	movs	r1, r2
 8000b30:	0018      	movs	r0, r3
 8000b32:	f000 fe2c 	bl	800178e <iis2dlpc_temperature_raw_get>

	int8_t temp_integer = iis2dlpc_temp_reg >> 8 ;
 8000b36:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <iis2dlpc_temp_print+0x74>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	5e9b      	ldrsh	r3, [r3, r2]
 8000b3c:	121b      	asrs	r3, r3, #8
 8000b3e:	b21a      	sxth	r2, r3
 8000b40:	1dfb      	adds	r3, r7, #7
 8000b42:	701a      	strb	r2, [r3, #0]
	uint8_t temp_fraction = (uint8_t)iis2dlpc_temp_reg ;
 8000b44:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <iis2dlpc_temp_print+0x74>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	5e9a      	ldrsh	r2, [r3, r2]
 8000b4a:	1dbb      	adds	r3, r7, #6
 8000b4c:	701a      	strb	r2, [r3, #0]

	sprintf ( (char *)uart_tx_buff , "IIS2DLPC temp is %d.%d\r\n" , 25 + temp_integer , temp_fraction * 10 / 255 ) ;
 8000b4e:	1dfb      	adds	r3, r7, #7
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	b25b      	sxtb	r3, r3
 8000b54:	3319      	adds	r3, #25
 8000b56:	001c      	movs	r4, r3
 8000b58:	1dbb      	adds	r3, r7, #6
 8000b5a:	781a      	ldrb	r2, [r3, #0]
 8000b5c:	0013      	movs	r3, r2
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	189b      	adds	r3, r3, r2
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	21ff      	movs	r1, #255	; 0xff
 8000b66:	0018      	movs	r0, r3
 8000b68:	f7ff fb6a 	bl	8000240 <__divsi3>
 8000b6c:	0003      	movs	r3, r0
 8000b6e:	490c      	ldr	r1, [pc, #48]	; (8000ba0 <iis2dlpc_temp_print+0x7c>)
 8000b70:	480c      	ldr	r0, [pc, #48]	; (8000ba4 <iis2dlpc_temp_print+0x80>)
 8000b72:	0022      	movs	r2, r4
 8000b74:	f004 f954 	bl	8004e20 <siprintf>
	dbg_tx ( uart_tx_buff , strlen ( (char const*)uart_tx_buff ) ) ;
 8000b78:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <iis2dlpc_temp_print+0x80>)
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f7ff fac4 	bl	8000108 <strlen>
 8000b80:	0003      	movs	r3, r0
 8000b82:	b29a      	uxth	r2, r3
 8000b84:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <iis2dlpc_temp_print+0x80>)
 8000b86:	0011      	movs	r1, r2
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f000 f979 	bl	8000e80 <dbg_tx>
}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	46bd      	mov	sp, r7
 8000b92:	b003      	add	sp, #12
 8000b94:	bd90      	pop	{r4, r7, pc}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	200001c2 	.word	0x200001c2
 8000b9c:	200001c4 	.word	0x200001c4
 8000ba0:	080060f0 	.word	0x080060f0
 8000ba4:	20000094 	.word	0x20000094

08000ba8 <iis2dlpc_conf_set>:

static void	iis2dlpc_conf_set ( void )
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
	iis2dlpc_device_id_get ( &iis2dlpc_ctx , &iis2dlpc_whoami_reg ) ;
 8000bac:	4a2e      	ldr	r2, [pc, #184]	; (8000c68 <iis2dlpc_conf_set+0xc0>)
 8000bae:	4b2f      	ldr	r3, [pc, #188]	; (8000c6c <iis2dlpc_conf_set+0xc4>)
 8000bb0:	0011      	movs	r1, r2
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f000 fe12 	bl	80017dc <iis2dlpc_device_id_get>
	if ( iis2dlpc_whoami_reg == IIS2DLPC_ID )
 8000bb8:	4b2b      	ldr	r3, [pc, #172]	; (8000c68 <iis2dlpc_conf_set+0xc0>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b44      	cmp	r3, #68	; 0x44
 8000bbe:	d112      	bne.n	8000be6 <iis2dlpc_conf_set+0x3e>
	{
		sprintf ( (char*)uart_tx_buff , "Hello! My name is %d\n", iis2dlpc_whoami_reg ) ;
 8000bc0:	4b29      	ldr	r3, [pc, #164]	; (8000c68 <iis2dlpc_conf_set+0xc0>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	001a      	movs	r2, r3
 8000bc6:	492a      	ldr	r1, [pc, #168]	; (8000c70 <iis2dlpc_conf_set+0xc8>)
 8000bc8:	4b2a      	ldr	r3, [pc, #168]	; (8000c74 <iis2dlpc_conf_set+0xcc>)
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f004 f928 	bl	8004e20 <siprintf>
		dbg_tx ( uart_tx_buff, strlen ( (char const*)uart_tx_buff) ) ;
 8000bd0:	4b28      	ldr	r3, [pc, #160]	; (8000c74 <iis2dlpc_conf_set+0xcc>)
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f7ff fa98 	bl	8000108 <strlen>
 8000bd8:	0003      	movs	r3, r0
 8000bda:	b29a      	uxth	r2, r3
 8000bdc:	4b25      	ldr	r3, [pc, #148]	; (8000c74 <iis2dlpc_conf_set+0xcc>)
 8000bde:	0011      	movs	r1, r2
 8000be0:	0018      	movs	r0, r3
 8000be2:	f000 f94d 	bl	8000e80 <dbg_tx>
	else
	{
		/* manage here device not found */
	}
	/*Restore default configuration */
	iis2dlpc_reset_set ( &iis2dlpc_ctx , PROPERTY_ENABLE ) ;
 8000be6:	4b21      	ldr	r3, [pc, #132]	; (8000c6c <iis2dlpc_conf_set+0xc4>)
 8000be8:	2101      	movs	r1, #1
 8000bea:	0018      	movs	r0, r3
 8000bec:	f000 fe08 	bl	8001800 <iis2dlpc_reset_set>
	do {
		iis2dlpc_reset_get ( &iis2dlpc_ctx, &rst ) ;
 8000bf0:	4a21      	ldr	r2, [pc, #132]	; (8000c78 <iis2dlpc_conf_set+0xd0>)
 8000bf2:	4b1e      	ldr	r3, [pc, #120]	; (8000c6c <iis2dlpc_conf_set+0xc4>)
 8000bf4:	0011      	movs	r1, r2
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f000 fe32 	bl	8001860 <iis2dlpc_reset_get>
	} while ( rst ) ;
 8000bfc:	4b1e      	ldr	r3, [pc, #120]	; (8000c78 <iis2dlpc_conf_set+0xd0>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d1f5      	bne.n	8000bf0 <iis2dlpc_conf_set+0x48>
	/*Set full scale */
	iis2dlpc_full_scale_set ( &iis2dlpc_ctx , IIS2DLPC_2g ) ;
 8000c04:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <iis2dlpc_conf_set+0xc4>)
 8000c06:	2100      	movs	r1, #0
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f000 fd7e 	bl	800170a <iis2dlpc_full_scale_set>
	/*Configure power mode */
	iis2dlpc_power_mode_set ( &iis2dlpc_ctx , IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit ) ;
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <iis2dlpc_conf_set+0xc4>)
 8000c10:	2110      	movs	r1, #16
 8000c12:	0018      	movs	r0, r3
 8000c14:	f000 fcb5 	bl	8001582 <iis2dlpc_power_mode_set>
	/*Set Output Data Rate */
	iis2dlpc_data_rate_set ( &iis2dlpc_ctx , IIS2DLPC_XL_ODR_200Hz );
 8000c18:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <iis2dlpc_conf_set+0xc4>)
 8000c1a:	2106      	movs	r1, #6
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f000 fd1c 	bl	800165a <iis2dlpc_data_rate_set>
	/*Apply high-pass digital filter on Wake-Up function */
	iis2dlpc_filter_path_set ( &iis2dlpc_ctx , IIS2DLPC_HIGH_PASS_ON_OUT ) ;
 8000c22:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <iis2dlpc_conf_set+0xc4>)
 8000c24:	2110      	movs	r1, #16
 8000c26:	0018      	movs	r0, r3
 8000c28:	f000 fe35 	bl	8001896 <iis2dlpc_filter_path_set>
	 * is generated for each X,Y,Z filtered data exceeding the
	 * configured threshold
	*/
	// default iis2dlpc_wkup_dur_set(&dev_ctx, 0);
	// range is 0-3
	iis2dlpc_wkup_dur_set ( &iis2dlpc_ctx , IIS2DLPC_WAKEUP_DUR ) ;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <iis2dlpc_conf_set+0xc4>)
 8000c2e:	2102      	movs	r1, #2
 8000c30:	0018      	movs	r0, r3
 8000c32:	f000 ff8c 	bl	8001b4e <iis2dlpc_wkup_dur_set>
	/* Set wake-up threshold
	 * Set Wake-Up threshold: 1 LSb corresponds to FS_XL/2^6
	 */
	// default iis2dlpc_wkup_threshold_set ( &iis2dlpc_ctx , 2 ) ;
	// range is 0-63
	iis2dlpc_wkup_threshold_set ( &iis2dlpc_ctx , IIS2DLPC_WAKEUP_THS ) ;
 8000c36:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <iis2dlpc_conf_set+0xc4>)
 8000c38:	2104      	movs	r1, #4
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f000 ff3c 	bl	8001ab8 <iis2dlpc_wkup_threshold_set>
	/*Enable interrupt generation on Wake-Up INT1 pin */
	iis2dlpc_pin_int1_route_get ( &iis2dlpc_ctx , &iis2dlpc_int_route.ctrl4_int1_pad_ctrl ) ;
 8000c40:	4a0e      	ldr	r2, [pc, #56]	; (8000c7c <iis2dlpc_conf_set+0xd4>)
 8000c42:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <iis2dlpc_conf_set+0xc4>)
 8000c44:	0011      	movs	r1, r2
 8000c46:	0018      	movs	r0, r3
 8000c48:	f000 ff24 	bl	8001a94 <iis2dlpc_pin_int1_route_get>
	iis2dlpc_int_route.ctrl4_int1_pad_ctrl.int1_wu = PROPERTY_ENABLE ;
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <iis2dlpc_conf_set+0xd4>)
 8000c4e:	781a      	ldrb	r2, [r3, #0]
 8000c50:	2120      	movs	r1, #32
 8000c52:	430a      	orrs	r2, r1
 8000c54:	701a      	strb	r2, [r3, #0]
	iis2dlpc_pin_int1_route_set ( &iis2dlpc_ctx , &iis2dlpc_int_route.ctrl4_int1_pad_ctrl ) ;
 8000c56:	4a09      	ldr	r2, [pc, #36]	; (8000c7c <iis2dlpc_conf_set+0xd4>)
 8000c58:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <iis2dlpc_conf_set+0xc4>)
 8000c5a:	0011      	movs	r1, r2
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f000 fea4 	bl	80019aa <iis2dlpc_pin_int1_route_set>
}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	200001c0 	.word	0x200001c0
 8000c6c:	200001c4 	.word	0x200001c4
 8000c70:	0800610c 	.word	0x0800610c
 8000c74:	20000094 	.word	0x20000094
 8000c78:	200001c1 	.word	0x200001c1
 8000c7c:	200001d0 	.word	0x200001d0

08000c80 <iis2dlpc_conf_print>:

static void	iis2dlpc_conf_print	( void )
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	iis2dlpc_wkup_threshold_get ( &iis2dlpc_ctx , &reg8bit ) ;
 8000c84:	4a65      	ldr	r2, [pc, #404]	; (8000e1c <iis2dlpc_conf_print+0x19c>)
 8000c86:	4b66      	ldr	r3, [pc, #408]	; (8000e20 <iis2dlpc_conf_print+0x1a0>)
 8000c88:	0011      	movs	r1, r2
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f000 ff44 	bl	8001b18 <iis2dlpc_wkup_threshold_get>
	sprintf ( (char *)uart_tx_buff , "WAKE_UP_THS: %d\r\n" , reg8bit ) ;
 8000c90:	4b62      	ldr	r3, [pc, #392]	; (8000e1c <iis2dlpc_conf_print+0x19c>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	001a      	movs	r2, r3
 8000c96:	4963      	ldr	r1, [pc, #396]	; (8000e24 <iis2dlpc_conf_print+0x1a4>)
 8000c98:	4b63      	ldr	r3, [pc, #396]	; (8000e28 <iis2dlpc_conf_print+0x1a8>)
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f004 f8c0 	bl	8004e20 <siprintf>
	dbg_tx ( uart_tx_buff , strlen ( (char const*)uart_tx_buff ) ) ;
 8000ca0:	4b61      	ldr	r3, [pc, #388]	; (8000e28 <iis2dlpc_conf_print+0x1a8>)
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f7ff fa30 	bl	8000108 <strlen>
 8000ca8:	0003      	movs	r3, r0
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	4b5e      	ldr	r3, [pc, #376]	; (8000e28 <iis2dlpc_conf_print+0x1a8>)
 8000cae:	0011      	movs	r1, r2
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f000 f8e5 	bl	8000e80 <dbg_tx>

	iis2dlpc_read_reg ( &iis2dlpc_ctx , IIS2DLPC_CTRL1 , &reg8bit , 1 ) ;
 8000cb6:	4a59      	ldr	r2, [pc, #356]	; (8000e1c <iis2dlpc_conf_print+0x19c>)
 8000cb8:	4859      	ldr	r0, [pc, #356]	; (8000e20 <iis2dlpc_conf_print+0x1a0>)
 8000cba:	2301      	movs	r3, #1
 8000cbc:	2120      	movs	r1, #32
 8000cbe:	f000 fc1e 	bl	80014fe <iis2dlpc_read_reg>
	sprintf ( (char *)uart_tx_buff , "CTRL1: %d\r\n" , reg8bit ) ;
 8000cc2:	4b56      	ldr	r3, [pc, #344]	; (8000e1c <iis2dlpc_conf_print+0x19c>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	001a      	movs	r2, r3
 8000cc8:	4958      	ldr	r1, [pc, #352]	; (8000e2c <iis2dlpc_conf_print+0x1ac>)
 8000cca:	4b57      	ldr	r3, [pc, #348]	; (8000e28 <iis2dlpc_conf_print+0x1a8>)
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f004 f8a7 	bl	8004e20 <siprintf>
	dbg_tx ( uart_tx_buff , strlen ( (char const*)uart_tx_buff ) ) ;
 8000cd2:	4b55      	ldr	r3, [pc, #340]	; (8000e28 <iis2dlpc_conf_print+0x1a8>)
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f7ff fa17 	bl	8000108 <strlen>
 8000cda:	0003      	movs	r3, r0
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	4b52      	ldr	r3, [pc, #328]	; (8000e28 <iis2dlpc_conf_print+0x1a8>)
 8000ce0:	0011      	movs	r1, r2
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f000 f8cc 	bl	8000e80 <dbg_tx>

	iis2dlpc_read_reg ( &iis2dlpc_ctx , IIS2DLPC_CTRL3 , &reg8bit , 1 ) ;
 8000ce8:	4a4c      	ldr	r2, [pc, #304]	; (8000e1c <iis2dlpc_conf_print+0x19c>)
 8000cea:	484d      	ldr	r0, [pc, #308]	; (8000e20 <iis2dlpc_conf_print+0x1a0>)
 8000cec:	2301      	movs	r3, #1
 8000cee:	2122      	movs	r1, #34	; 0x22
 8000cf0:	f000 fc05 	bl	80014fe <iis2dlpc_read_reg>
	sprintf ( (char *)uart_tx_buff , "CTRL3: %d\r\n" , reg8bit ) ;
 8000cf4:	4b49      	ldr	r3, [pc, #292]	; (8000e1c <iis2dlpc_conf_print+0x19c>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	001a      	movs	r2, r3
 8000cfa:	494d      	ldr	r1, [pc, #308]	; (8000e30 <iis2dlpc_conf_print+0x1b0>)
 8000cfc:	4b4a      	ldr	r3, [pc, #296]	; (8000e28 <iis2dlpc_conf_print+0x1a8>)
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f004 f88e 	bl	8004e20 <siprintf>
	dbg_tx ( uart_tx_buff , strlen ( (char const*)uart_tx_buff ) ) ;
 8000d04:	4b48      	ldr	r3, [pc, #288]	; (8000e28 <iis2dlpc_conf_print+0x1a8>)
 8000d06:	0018      	movs	r0, r3
 8000d08:	f7ff f9fe 	bl	8000108 <strlen>
 8000d0c:	0003      	movs	r3, r0
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	4b45      	ldr	r3, [pc, #276]	; (8000e28 <iis2dlpc_conf_print+0x1a8>)
 8000d12:	0011      	movs	r1, r2
 8000d14:	0018      	movs	r0, r3
 8000d16:	f000 f8b3 	bl	8000e80 <dbg_tx>

	iis2dlpc_read_reg ( &iis2dlpc_ctx , IIS2DLPC_CTRL4_INT1_PAD_CTRL , &reg8bit , 1 ) ;
 8000d1a:	4a40      	ldr	r2, [pc, #256]	; (8000e1c <iis2dlpc_conf_print+0x19c>)
 8000d1c:	4840      	ldr	r0, [pc, #256]	; (8000e20 <iis2dlpc_conf_print+0x1a0>)
 8000d1e:	2301      	movs	r3, #1
 8000d20:	2123      	movs	r1, #35	; 0x23
 8000d22:	f000 fbec 	bl	80014fe <iis2dlpc_read_reg>
	sprintf ( (char *)uart_tx_buff , "CTRL4: %d\r\n" , reg8bit ) ;
 8000d26:	4b3d      	ldr	r3, [pc, #244]	; (8000e1c <iis2dlpc_conf_print+0x19c>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	001a      	movs	r2, r3
 8000d2c:	4941      	ldr	r1, [pc, #260]	; (8000e34 <iis2dlpc_conf_print+0x1b4>)
 8000d2e:	4b3e      	ldr	r3, [pc, #248]	; (8000e28 <iis2dlpc_conf_print+0x1a8>)
 8000d30:	0018      	movs	r0, r3
 8000d32:	f004 f875 	bl	8004e20 <siprintf>
	dbg_tx ( uart_tx_buff , strlen ( (char const*)uart_tx_buff ) ) ;
 8000d36:	4b3c      	ldr	r3, [pc, #240]	; (8000e28 <iis2dlpc_conf_print+0x1a8>)
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f7ff f9e5 	bl	8000108 <strlen>
 8000d3e:	0003      	movs	r3, r0
 8000d40:	b29a      	uxth	r2, r3
 8000d42:	4b39      	ldr	r3, [pc, #228]	; (8000e28 <iis2dlpc_conf_print+0x1a8>)
 8000d44:	0011      	movs	r1, r2
 8000d46:	0018      	movs	r0, r3
 8000d48:	f000 f89a 	bl	8000e80 <dbg_tx>

	iis2dlpc_read_reg ( &iis2dlpc_ctx , IIS2DLPC_CTRL5_INT2_PAD_CTRL , &reg8bit , 1 ) ;
 8000d4c:	4a33      	ldr	r2, [pc, #204]	; (8000e1c <iis2dlpc_conf_print+0x19c>)
 8000d4e:	4834      	ldr	r0, [pc, #208]	; (8000e20 <iis2dlpc_conf_print+0x1a0>)
 8000d50:	2301      	movs	r3, #1
 8000d52:	2124      	movs	r1, #36	; 0x24
 8000d54:	f000 fbd3 	bl	80014fe <iis2dlpc_read_reg>
	sprintf ( (char *)uart_tx_buff , "CTRL5: %d\r\n" , reg8bit ) ;
 8000d58:	4b30      	ldr	r3, [pc, #192]	; (8000e1c <iis2dlpc_conf_print+0x19c>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	001a      	movs	r2, r3
 8000d5e:	4936      	ldr	r1, [pc, #216]	; (8000e38 <iis2dlpc_conf_print+0x1b8>)
 8000d60:	4b31      	ldr	r3, [pc, #196]	; (8000e28 <iis2dlpc_conf_print+0x1a8>)
 8000d62:	0018      	movs	r0, r3
 8000d64:	f004 f85c 	bl	8004e20 <siprintf>
	dbg_tx ( uart_tx_buff , strlen ( (char const*)uart_tx_buff ) ) ;
 8000d68:	4b2f      	ldr	r3, [pc, #188]	; (8000e28 <iis2dlpc_conf_print+0x1a8>)
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f7ff f9cc 	bl	8000108 <strlen>
 8000d70:	0003      	movs	r3, r0
 8000d72:	b29a      	uxth	r2, r3
 8000d74:	4b2c      	ldr	r3, [pc, #176]	; (8000e28 <iis2dlpc_conf_print+0x1a8>)
 8000d76:	0011      	movs	r1, r2
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f000 f881 	bl	8000e80 <dbg_tx>

	iis2dlpc_read_reg ( &iis2dlpc_ctx , IIS2DLPC_CTRL6 , &reg8bit , 1 ) ;
 8000d7e:	4a27      	ldr	r2, [pc, #156]	; (8000e1c <iis2dlpc_conf_print+0x19c>)
 8000d80:	4827      	ldr	r0, [pc, #156]	; (8000e20 <iis2dlpc_conf_print+0x1a0>)
 8000d82:	2301      	movs	r3, #1
 8000d84:	2125      	movs	r1, #37	; 0x25
 8000d86:	f000 fbba 	bl	80014fe <iis2dlpc_read_reg>
	sprintf ( (char *)uart_tx_buff , "CTRL6: %d\r\n" , reg8bit ) ;
 8000d8a:	4b24      	ldr	r3, [pc, #144]	; (8000e1c <iis2dlpc_conf_print+0x19c>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	001a      	movs	r2, r3
 8000d90:	492a      	ldr	r1, [pc, #168]	; (8000e3c <iis2dlpc_conf_print+0x1bc>)
 8000d92:	4b25      	ldr	r3, [pc, #148]	; (8000e28 <iis2dlpc_conf_print+0x1a8>)
 8000d94:	0018      	movs	r0, r3
 8000d96:	f004 f843 	bl	8004e20 <siprintf>
	dbg_tx ( uart_tx_buff , strlen ( (char const*)uart_tx_buff ) ) ;
 8000d9a:	4b23      	ldr	r3, [pc, #140]	; (8000e28 <iis2dlpc_conf_print+0x1a8>)
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f7ff f9b3 	bl	8000108 <strlen>
 8000da2:	0003      	movs	r3, r0
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	4b20      	ldr	r3, [pc, #128]	; (8000e28 <iis2dlpc_conf_print+0x1a8>)
 8000da8:	0011      	movs	r1, r2
 8000daa:	0018      	movs	r0, r3
 8000dac:	f000 f868 	bl	8000e80 <dbg_tx>

	iis2dlpc_read_reg ( &iis2dlpc_ctx , IIS2DLPC_STATUS , &reg8bit , 1 ) ;
 8000db0:	4a1a      	ldr	r2, [pc, #104]	; (8000e1c <iis2dlpc_conf_print+0x19c>)
 8000db2:	481b      	ldr	r0, [pc, #108]	; (8000e20 <iis2dlpc_conf_print+0x1a0>)
 8000db4:	2301      	movs	r3, #1
 8000db6:	2127      	movs	r1, #39	; 0x27
 8000db8:	f000 fba1 	bl	80014fe <iis2dlpc_read_reg>
	sprintf ( (char *)uart_tx_buff , "STATUS: %d\r\n" , reg8bit ) ;
 8000dbc:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <iis2dlpc_conf_print+0x19c>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	001a      	movs	r2, r3
 8000dc2:	491f      	ldr	r1, [pc, #124]	; (8000e40 <iis2dlpc_conf_print+0x1c0>)
 8000dc4:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <iis2dlpc_conf_print+0x1a8>)
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f004 f82a 	bl	8004e20 <siprintf>
	dbg_tx ( uart_tx_buff , strlen ( (char const*)uart_tx_buff ) ) ;
 8000dcc:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <iis2dlpc_conf_print+0x1a8>)
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f7ff f99a 	bl	8000108 <strlen>
 8000dd4:	0003      	movs	r3, r0
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <iis2dlpc_conf_print+0x1a8>)
 8000dda:	0011      	movs	r1, r2
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f000 f84f 	bl	8000e80 <dbg_tx>

	iis2dlpc_read_reg ( &iis2dlpc_ctx , IIS2DLPC_WAKE_UP_SRC , &reg8bit , 1 ) ;
 8000de2:	4a0e      	ldr	r2, [pc, #56]	; (8000e1c <iis2dlpc_conf_print+0x19c>)
 8000de4:	480e      	ldr	r0, [pc, #56]	; (8000e20 <iis2dlpc_conf_print+0x1a0>)
 8000de6:	2301      	movs	r3, #1
 8000de8:	2138      	movs	r1, #56	; 0x38
 8000dea:	f000 fb88 	bl	80014fe <iis2dlpc_read_reg>
	sprintf ( (char *)uart_tx_buff , "WAKE_UP_SRC: %d\r\n" , reg8bit ) ;
 8000dee:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <iis2dlpc_conf_print+0x19c>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	001a      	movs	r2, r3
 8000df4:	4913      	ldr	r1, [pc, #76]	; (8000e44 <iis2dlpc_conf_print+0x1c4>)
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <iis2dlpc_conf_print+0x1a8>)
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f004 f811 	bl	8004e20 <siprintf>
	dbg_tx ( uart_tx_buff , strlen ( (char const*)uart_tx_buff ) ) ;
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <iis2dlpc_conf_print+0x1a8>)
 8000e00:	0018      	movs	r0, r3
 8000e02:	f7ff f981 	bl	8000108 <strlen>
 8000e06:	0003      	movs	r3, r0
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <iis2dlpc_conf_print+0x1a8>)
 8000e0c:	0011      	movs	r1, r2
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f000 f836 	bl	8000e80 <dbg_tx>
}
 8000e14:	46c0      	nop			; (mov r8, r8)
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	20000090 	.word	0x20000090
 8000e20:	200001c4 	.word	0x200001c4
 8000e24:	08006124 	.word	0x08006124
 8000e28:	20000094 	.word	0x20000094
 8000e2c:	08006138 	.word	0x08006138
 8000e30:	08006144 	.word	0x08006144
 8000e34:	08006150 	.word	0x08006150
 8000e38:	0800615c 	.word	0x0800615c
 8000e3c:	08006168 	.word	0x08006168
 8000e40:	08006174 	.word	0x08006174
 8000e44:	08006184 	.word	0x08006184

08000e48 <_write>:
 *
 */

/* DBG functions */
int _write ( int file , char* ptr , int len )
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
	hs = HAL_UART_Transmit ( &DBG , (uint8_t*)ptr , (uint16_t)len , 1000 ) ;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	23fa      	movs	r3, #250	; 0xfa
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	68b9      	ldr	r1, [r7, #8]
 8000e5e:	4806      	ldr	r0, [pc, #24]	; (8000e78 <_write+0x30>)
 8000e60:	f002 feca 	bl	8003bf8 <HAL_UART_Transmit>
 8000e64:	0003      	movs	r3, r0
 8000e66:	001a      	movs	r2, r3
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <_write+0x34>)
 8000e6a:	701a      	strb	r2, [r3, #0]
	return hs ;
 8000e6c:	4b03      	ldr	r3, [pc, #12]	; (8000e7c <_write+0x34>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
}
 8000e70:	0018      	movs	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	b004      	add	sp, #16
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	200001ec 	.word	0x200001ec
 8000e7c:	200001e8 	.word	0x200001e8

08000e80 <dbg_tx>:
static void dbg_tx ( uint8_t* tx_buff , uint16_t len )
{
 8000e80:	b590      	push	{r4, r7, lr}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	000a      	movs	r2, r1
 8000e8a:	1cbb      	adds	r3, r7, #2
 8000e8c:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit ( &DBG , tx_buff , len , 1000 ) ;
 8000e8e:	23fa      	movs	r3, #250	; 0xfa
 8000e90:	009c      	lsls	r4, r3, #2
 8000e92:	1cbb      	adds	r3, r7, #2
 8000e94:	881a      	ldrh	r2, [r3, #0]
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	4803      	ldr	r0, [pc, #12]	; (8000ea8 <dbg_tx+0x28>)
 8000e9a:	0023      	movs	r3, r4
 8000e9c:	f002 feac 	bl	8003bf8 <HAL_UART_Transmit>
}
 8000ea0:	46c0      	nop			; (mov r8, r8)
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	b003      	add	sp, #12
 8000ea6:	bd90      	pop	{r4, r7, pc}
 8000ea8:	200001ec 	.word	0x200001ec

08000eac <uart_rx_buff_print>:
	sprintf ( (char*)uart_tx_buff , message ) ;
	dbg_tx ( uart_tx_buff , strlen ( (char const*)uart_tx_buff ) ) ;
}
*/
static void uart_rx_buff_print ( void )
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	/*sprintf ( (char *)uart_tx_buff , "UART Rx: %s\r\n" , (const char*)uart_rx_buff ) ;
	dbg_tx ( uart_tx_buff , (uint16_t)strlen ( (const char*)uart_tx_buff ) ) ;*/
	printf ( "UART Rx: %s\r\n" , (char*)uart_rx_buff ) ;
 8000eb0:	4a04      	ldr	r2, [pc, #16]	; (8000ec4 <uart_rx_buff_print+0x18>)
 8000eb2:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <uart_rx_buff_print+0x1c>)
 8000eb4:	0011      	movs	r1, r2
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f003 ff98 	bl	8004dec <iprintf>
}
 8000ebc:	46c0      	nop			; (mov r8, r8)
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	20000000 	.word	0x20000000
 8000ec8:	08006198 	.word	0x08006198

08000ecc <bg96_status_print>:

/* BG96 function */
static uint8_t bg96_status_print ( void )
{
 8000ecc:	b590      	push	{r4, r7, lr}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
	uint8_t r = (uint8_t)HAL_GPIO_ReadPin ( BG96_STATUS_GPIO_Port , BG96_STATUS_Pin ) ;
 8000ed2:	1dfc      	adds	r4, r7, #7
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <bg96_status_print+0x48>)
 8000ed6:	2104      	movs	r1, #4
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f001 f9e1 	bl	80022a0 <HAL_GPIO_ReadPin>
 8000ede:	0003      	movs	r3, r0
 8000ee0:	7023      	strb	r3, [r4, #0]
	sprintf ( (char *)uart_tx_buff , "BG96_STATUS_Pin: %d\r\n" , r ) ;
 8000ee2:	1dfb      	adds	r3, r7, #7
 8000ee4:	781a      	ldrb	r2, [r3, #0]
 8000ee6:	490c      	ldr	r1, [pc, #48]	; (8000f18 <bg96_status_print+0x4c>)
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <bg96_status_print+0x50>)
 8000eea:	0018      	movs	r0, r3
 8000eec:	f003 ff98 	bl	8004e20 <siprintf>
	dbg_tx ( uart_tx_buff , strlen ( (char const*)uart_tx_buff ) ) ;
 8000ef0:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <bg96_status_print+0x50>)
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f7ff f908 	bl	8000108 <strlen>
 8000ef8:	0003      	movs	r3, r0
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <bg96_status_print+0x50>)
 8000efe:	0011      	movs	r1, r2
 8000f00:	0018      	movs	r0, r3
 8000f02:	f7ff ffbd 	bl	8000e80 <dbg_tx>
	return r ;
 8000f06:	1dfb      	adds	r3, r7, #7
 8000f08:	781b      	ldrb	r3, [r3, #0]
}
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b003      	add	sp, #12
 8000f10:	bd90      	pop	{r4, r7, pc}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	50000400 	.word	0x50000400
 8000f18:	080061a8 	.word	0x080061a8
 8000f1c:	20000094 	.word	0x20000094

08000f20 <bg96_ps_on>:
static uint8_t bg96_ps_on ( void )
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
	bg96_status_print () ;
 8000f24:	f7ff ffd2 	bl	8000ecc <bg96_status_print>
	HAL_GPIO_WritePin ( BG96_PS_GPIO_Port , BG96_PS_Pin , GPIO_PIN_SET ) ;
 8000f28:	2380      	movs	r3, #128	; 0x80
 8000f2a:	021b      	lsls	r3, r3, #8
 8000f2c:	4816      	ldr	r0, [pc, #88]	; (8000f88 <bg96_ps_on+0x68>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	0019      	movs	r1, r3
 8000f32:	f001 f9d2 	bl	80022da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( BG96_RESET_N_GPIO_Port , BG96_RESET_N_Pin , GPIO_PIN_SET ) ;
 8000f36:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <bg96_ps_on+0x68>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2102      	movs	r1, #2
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f001 f9cc 	bl	80022da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( BG96_PWRKEY_GPIO_Port , BG96_PWRKEY_Pin , GPIO_PIN_SET ) ;
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <bg96_ps_on+0x68>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	2101      	movs	r1, #1
 8000f48:	0018      	movs	r0, r3
 8000f4a:	f001 f9c6 	bl	80022da <HAL_GPIO_WritePin>
	HAL_Delay ( 35 ) ;
 8000f4e:	2023      	movs	r0, #35	; 0x23
 8000f50:	f000 fe9e 	bl	8001c90 <HAL_Delay>
	HAL_GPIO_WritePin ( BG96_PWRKEY_GPIO_Port , BG96_PWRKEY_Pin , GPIO_PIN_RESET ) ;
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <bg96_ps_on+0x68>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	2101      	movs	r1, #1
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f001 f9bd 	bl	80022da <HAL_GPIO_WritePin>
	HAL_Delay ( 550 ) ;
 8000f60:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <bg96_ps_on+0x6c>)
 8000f62:	0018      	movs	r0, r3
 8000f64:	f000 fe94 	bl	8001c90 <HAL_Delay>
	HAL_GPIO_WritePin ( BG96_PWRKEY_GPIO_Port , BG96_PWRKEY_Pin , GPIO_PIN_SET ) ;
 8000f68:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <bg96_ps_on+0x68>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	0018      	movs	r0, r3
 8000f70:	f001 f9b3 	bl	80022da <HAL_GPIO_WritePin>
	HAL_Delay ( 4500 ) ;
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <bg96_ps_on+0x70>)
 8000f76:	0018      	movs	r0, r3
 8000f78:	f000 fe8a 	bl	8001c90 <HAL_Delay>
	return bg96_status_print () ;
 8000f7c:	f7ff ffa6 	bl	8000ecc <bg96_status_print>
 8000f80:	0003      	movs	r3, r0

}
 8000f82:	0018      	movs	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	50000400 	.word	0x50000400
 8000f8c:	00000226 	.word	0x00000226
 8000f90:	00001194 	.word	0x00001194

08000f94 <bg96_uart1_tx>:
static void bg96_uart1_tx ( uint8_t* tx_buff , uint16_t len )
//docelowo połączyć z dbg_tx
{
 8000f94:	b590      	push	{r4, r7, lr}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	000a      	movs	r2, r1
 8000f9e:	1cbb      	adds	r3, r7, #2
 8000fa0:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit ( &BG96_UART1 , tx_buff , len , 1000 ) ;
 8000fa2:	23fa      	movs	r3, #250	; 0xfa
 8000fa4:	009c      	lsls	r4, r3, #2
 8000fa6:	1cbb      	adds	r3, r7, #2
 8000fa8:	881a      	ldrh	r2, [r3, #0]
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	4803      	ldr	r0, [pc, #12]	; (8000fbc <bg96_uart1_tx+0x28>)
 8000fae:	0023      	movs	r3, r4
 8000fb0:	f002 fe22 	bl	8003bf8 <HAL_UART_Transmit>
}
 8000fb4:	46c0      	nop			; (mov r8, r8)
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	b003      	add	sp, #12
 8000fba:	bd90      	pop	{r4, r7, pc}
 8000fbc:	20000270 	.word	0x20000270

08000fc0 <bg96_uart1_tx_ati>:
static void bg96_uart1_tx_ati ( void )
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	sprintf ( (char *)uart_tx_buff , "ATI\r" ) ;
 8000fc4:	4a09      	ldr	r2, [pc, #36]	; (8000fec <bg96_uart1_tx_ati+0x2c>)
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <bg96_uart1_tx_ati+0x30>)
 8000fc8:	0011      	movs	r1, r2
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f003 ff28 	bl	8004e20 <siprintf>
	bg96_uart1_tx ( uart_tx_buff , strlen ( (const char *)uart_tx_buff ) ) ;
 8000fd0:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <bg96_uart1_tx_ati+0x30>)
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f7ff f898 	bl	8000108 <strlen>
 8000fd8:	0003      	movs	r3, r0
 8000fda:	b29a      	uxth	r2, r3
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <bg96_uart1_tx_ati+0x30>)
 8000fde:	0011      	movs	r1, r2
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f7ff ffd7 	bl	8000f94 <bg96_uart1_tx>
}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	080061c0 	.word	0x080061c0
 8000ff0:	20000094 	.word	0x20000094

08000ff4 <HAL_GPIO_EXTI_Callback>:

/* Callback functions */
void HAL_GPIO_EXTI_Callback ( uint16_t GPIO_Pin )
{
 8000ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ff6:	b087      	sub	sp, #28
 8000ff8:	af04      	add	r7, sp, #16
 8000ffa:	0002      	movs	r2, r0
 8000ffc:	1dbb      	adds	r3, r7, #6
 8000ffe:	801a      	strh	r2, [r3, #0]
	sprintf ( (char*)uart_tx_buff , "INT on GPIO_Pin %d detected!\n" , GPIO_Pin ) ;
 8001000:	1dbb      	adds	r3, r7, #6
 8001002:	881a      	ldrh	r2, [r3, #0]
 8001004:	4949      	ldr	r1, [pc, #292]	; (800112c <HAL_GPIO_EXTI_Callback+0x138>)
 8001006:	4b4a      	ldr	r3, [pc, #296]	; (8001130 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001008:	0018      	movs	r0, r3
 800100a:	f003 ff09 	bl	8004e20 <siprintf>
	dbg_tx ( uart_tx_buff, strlen ( (char const*)uart_tx_buff) ) ;
 800100e:	4b48      	ldr	r3, [pc, #288]	; (8001130 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001010:	0018      	movs	r0, r3
 8001012:	f7ff f879 	bl	8000108 <strlen>
 8001016:	0003      	movs	r3, r0
 8001018:	b29a      	uxth	r2, r3
 800101a:	4b45      	ldr	r3, [pc, #276]	; (8001130 <HAL_GPIO_EXTI_Callback+0x13c>)
 800101c:	0011      	movs	r1, r2
 800101e:	0018      	movs	r0, r3
 8001020:	f7ff ff2e 	bl	8000e80 <dbg_tx>

	iis2dlpc_all_sources_get ( &iis2dlpc_ctx , &all_source ) ;
 8001024:	4a43      	ldr	r2, [pc, #268]	; (8001134 <HAL_GPIO_EXTI_Callback+0x140>)
 8001026:	4b44      	ldr	r3, [pc, #272]	; (8001138 <HAL_GPIO_EXTI_Callback+0x144>)
 8001028:	0011      	movs	r1, r2
 800102a:	0018      	movs	r0, r3
 800102c:	f000 fb9d 	bl	800176a <iis2dlpc_all_sources_get>

	sprintf ( (char*)uart_tx_buff , "Wake up SRC[FF_IA,SS_IA,WU_IA,X_WU,Y_WU,Z_WU]: %d%d%d%d%d%d\n" , all_source.wake_up_src.ff_ia , all_source.wake_up_src.sleep_state_ia , all_source.wake_up_src.wu_ia , all_source.wake_up_src.x_wu , all_source.wake_up_src.y_wu , all_source.wake_up_src.z_wu ) ;
 8001030:	4b40      	ldr	r3, [pc, #256]	; (8001134 <HAL_GPIO_EXTI_Callback+0x140>)
 8001032:	785b      	ldrb	r3, [r3, #1]
 8001034:	069b      	lsls	r3, r3, #26
 8001036:	0fdb      	lsrs	r3, r3, #31
 8001038:	b2db      	uxtb	r3, r3
 800103a:	001e      	movs	r6, r3
 800103c:	4b3d      	ldr	r3, [pc, #244]	; (8001134 <HAL_GPIO_EXTI_Callback+0x140>)
 800103e:	785b      	ldrb	r3, [r3, #1]
 8001040:	06db      	lsls	r3, r3, #27
 8001042:	0fdb      	lsrs	r3, r3, #31
 8001044:	b2db      	uxtb	r3, r3
 8001046:	469c      	mov	ip, r3
 8001048:	4b3a      	ldr	r3, [pc, #232]	; (8001134 <HAL_GPIO_EXTI_Callback+0x140>)
 800104a:	785b      	ldrb	r3, [r3, #1]
 800104c:	071b      	lsls	r3, r3, #28
 800104e:	0fdb      	lsrs	r3, r3, #31
 8001050:	b2db      	uxtb	r3, r3
 8001052:	001a      	movs	r2, r3
 8001054:	4b37      	ldr	r3, [pc, #220]	; (8001134 <HAL_GPIO_EXTI_Callback+0x140>)
 8001056:	785b      	ldrb	r3, [r3, #1]
 8001058:	075b      	lsls	r3, r3, #29
 800105a:	0fdb      	lsrs	r3, r3, #31
 800105c:	b2db      	uxtb	r3, r3
 800105e:	001c      	movs	r4, r3
 8001060:	4b34      	ldr	r3, [pc, #208]	; (8001134 <HAL_GPIO_EXTI_Callback+0x140>)
 8001062:	785b      	ldrb	r3, [r3, #1]
 8001064:	079b      	lsls	r3, r3, #30
 8001066:	0fdb      	lsrs	r3, r3, #31
 8001068:	b2db      	uxtb	r3, r3
 800106a:	001d      	movs	r5, r3
 800106c:	4b31      	ldr	r3, [pc, #196]	; (8001134 <HAL_GPIO_EXTI_Callback+0x140>)
 800106e:	785b      	ldrb	r3, [r3, #1]
 8001070:	07db      	lsls	r3, r3, #31
 8001072:	0fdb      	lsrs	r3, r3, #31
 8001074:	b2db      	uxtb	r3, r3
 8001076:	4931      	ldr	r1, [pc, #196]	; (800113c <HAL_GPIO_EXTI_Callback+0x148>)
 8001078:	482d      	ldr	r0, [pc, #180]	; (8001130 <HAL_GPIO_EXTI_Callback+0x13c>)
 800107a:	9303      	str	r3, [sp, #12]
 800107c:	9502      	str	r5, [sp, #8]
 800107e:	9401      	str	r4, [sp, #4]
 8001080:	9200      	str	r2, [sp, #0]
 8001082:	4663      	mov	r3, ip
 8001084:	0032      	movs	r2, r6
 8001086:	f003 fecb 	bl	8004e20 <siprintf>
	dbg_tx ( uart_tx_buff, strlen ( (char const*)uart_tx_buff) ) ;
 800108a:	4b29      	ldr	r3, [pc, #164]	; (8001130 <HAL_GPIO_EXTI_Callback+0x13c>)
 800108c:	0018      	movs	r0, r3
 800108e:	f7ff f83b 	bl	8000108 <strlen>
 8001092:	0003      	movs	r3, r0
 8001094:	b29a      	uxth	r2, r3
 8001096:	4b26      	ldr	r3, [pc, #152]	; (8001130 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001098:	0011      	movs	r1, r2
 800109a:	0018      	movs	r0, r3
 800109c:	f7ff fef0 	bl	8000e80 <dbg_tx>

	sprintf ( (char*)uart_tx_buff , "6D[XL,HX,YL,YH,ZL,ZH]: %d%d%d%d%d%d\n" , all_source.sixd_src.xl , all_source.sixd_src.xh , all_source.sixd_src.yl , all_source.sixd_src.yh , all_source.sixd_src.zl , all_source.sixd_src.zh ) ;
 80010a0:	4b24      	ldr	r3, [pc, #144]	; (8001134 <HAL_GPIO_EXTI_Callback+0x140>)
 80010a2:	78db      	ldrb	r3, [r3, #3]
 80010a4:	07db      	lsls	r3, r3, #31
 80010a6:	0fdb      	lsrs	r3, r3, #31
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	001e      	movs	r6, r3
 80010ac:	4b21      	ldr	r3, [pc, #132]	; (8001134 <HAL_GPIO_EXTI_Callback+0x140>)
 80010ae:	78db      	ldrb	r3, [r3, #3]
 80010b0:	079b      	lsls	r3, r3, #30
 80010b2:	0fdb      	lsrs	r3, r3, #31
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	469c      	mov	ip, r3
 80010b8:	4b1e      	ldr	r3, [pc, #120]	; (8001134 <HAL_GPIO_EXTI_Callback+0x140>)
 80010ba:	78db      	ldrb	r3, [r3, #3]
 80010bc:	075b      	lsls	r3, r3, #29
 80010be:	0fdb      	lsrs	r3, r3, #31
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	001a      	movs	r2, r3
 80010c4:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <HAL_GPIO_EXTI_Callback+0x140>)
 80010c6:	78db      	ldrb	r3, [r3, #3]
 80010c8:	071b      	lsls	r3, r3, #28
 80010ca:	0fdb      	lsrs	r3, r3, #31
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	001c      	movs	r4, r3
 80010d0:	4b18      	ldr	r3, [pc, #96]	; (8001134 <HAL_GPIO_EXTI_Callback+0x140>)
 80010d2:	78db      	ldrb	r3, [r3, #3]
 80010d4:	06db      	lsls	r3, r3, #27
 80010d6:	0fdb      	lsrs	r3, r3, #31
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	001d      	movs	r5, r3
 80010dc:	4b15      	ldr	r3, [pc, #84]	; (8001134 <HAL_GPIO_EXTI_Callback+0x140>)
 80010de:	78db      	ldrb	r3, [r3, #3]
 80010e0:	069b      	lsls	r3, r3, #26
 80010e2:	0fdb      	lsrs	r3, r3, #31
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	4916      	ldr	r1, [pc, #88]	; (8001140 <HAL_GPIO_EXTI_Callback+0x14c>)
 80010e8:	4811      	ldr	r0, [pc, #68]	; (8001130 <HAL_GPIO_EXTI_Callback+0x13c>)
 80010ea:	9303      	str	r3, [sp, #12]
 80010ec:	9502      	str	r5, [sp, #8]
 80010ee:	9401      	str	r4, [sp, #4]
 80010f0:	9200      	str	r2, [sp, #0]
 80010f2:	4663      	mov	r3, ip
 80010f4:	0032      	movs	r2, r6
 80010f6:	f003 fe93 	bl	8004e20 <siprintf>
	dbg_tx ( uart_tx_buff, strlen ( (char const*)uart_tx_buff) ) ;
 80010fa:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <HAL_GPIO_EXTI_Callback+0x13c>)
 80010fc:	0018      	movs	r0, r3
 80010fe:	f7ff f803 	bl	8000108 <strlen>
 8001102:	0003      	movs	r3, r0
 8001104:	b29a      	uxth	r2, r3
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001108:	0011      	movs	r1, r2
 800110a:	0018      	movs	r0, r3
 800110c:	f7ff feb8 	bl	8000e80 <dbg_tx>

	iis2dlpc_temp_print();
 8001110:	f7ff fd08 	bl	8000b24 <iis2dlpc_temp_print>
	iis2dlpc_int1_print();
 8001114:	f7ff fcda 	bl	8000acc <iis2dlpc_int1_print>
	bg96_status_print () ;
 8001118:	f7ff fed8 	bl	8000ecc <bg96_status_print>
	bg96_uart1_tx_ati () ;
 800111c:	f7ff ff50 	bl	8000fc0 <bg96_uart1_tx_ati>
	uart_rx_buff_print () ;
 8001120:	f7ff fec4 	bl	8000eac <uart_rx_buff_print>
}
 8001124:	46c0      	nop			; (mov r8, r8)
 8001126:	46bd      	mov	sp, r7
 8001128:	b003      	add	sp, #12
 800112a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800112c:	080061c8 	.word	0x080061c8
 8001130:	20000094 	.word	0x20000094
 8001134:	200001d4 	.word	0x200001d4
 8001138:	200001c4 	.word	0x200001c4
 800113c:	080061e8 	.word	0x080061e8
 8001140:	08006228 	.word	0x08006228

08001144 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001148:	b672      	cpsid	i
}
 800114a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800114c:	e7fe      	b.n	800114c <Error_Handler+0x8>
	...

08001150 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001154:	4b07      	ldr	r3, [pc, #28]	; (8001174 <HAL_MspInit+0x24>)
 8001156:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_MspInit+0x24>)
 800115a:	2101      	movs	r1, #1
 800115c:	430a      	orrs	r2, r1
 800115e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001160:	4b04      	ldr	r3, [pc, #16]	; (8001174 <HAL_MspInit+0x24>)
 8001162:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001164:	4b03      	ldr	r3, [pc, #12]	; (8001174 <HAL_MspInit+0x24>)
 8001166:	2180      	movs	r1, #128	; 0x80
 8001168:	0549      	lsls	r1, r1, #21
 800116a:	430a      	orrs	r2, r1
 800116c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40021000 	.word	0x40021000

08001178 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b089      	sub	sp, #36	; 0x24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	240c      	movs	r4, #12
 8001182:	193b      	adds	r3, r7, r4
 8001184:	0018      	movs	r0, r3
 8001186:	2314      	movs	r3, #20
 8001188:	001a      	movs	r2, r3
 800118a:	2100      	movs	r1, #0
 800118c:	f003 fe26 	bl	8004ddc <memset>
  if(hspi->Instance==SPI1)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a18      	ldr	r2, [pc, #96]	; (80011f8 <HAL_SPI_MspInit+0x80>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d129      	bne.n	80011ee <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <HAL_SPI_MspInit+0x84>)
 800119c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800119e:	4b17      	ldr	r3, [pc, #92]	; (80011fc <HAL_SPI_MspInit+0x84>)
 80011a0:	2180      	movs	r1, #128	; 0x80
 80011a2:	0149      	lsls	r1, r1, #5
 80011a4:	430a      	orrs	r2, r1
 80011a6:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a8:	4b14      	ldr	r3, [pc, #80]	; (80011fc <HAL_SPI_MspInit+0x84>)
 80011aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <HAL_SPI_MspInit+0x84>)
 80011ae:	2101      	movs	r1, #1
 80011b0:	430a      	orrs	r2, r1
 80011b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <HAL_SPI_MspInit+0x84>)
 80011b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b8:	2201      	movs	r2, #1
 80011ba:	4013      	ands	r3, r2
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011c0:	0021      	movs	r1, r4
 80011c2:	187b      	adds	r3, r7, r1
 80011c4:	22e0      	movs	r2, #224	; 0xe0
 80011c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c8:	187b      	adds	r3, r7, r1
 80011ca:	2202      	movs	r2, #2
 80011cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	187b      	adds	r3, r7, r1
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d4:	187b      	adds	r3, r7, r1
 80011d6:	2203      	movs	r2, #3
 80011d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80011da:	187b      	adds	r3, r7, r1
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e0:	187a      	adds	r2, r7, r1
 80011e2:	23a0      	movs	r3, #160	; 0xa0
 80011e4:	05db      	lsls	r3, r3, #23
 80011e6:	0011      	movs	r1, r2
 80011e8:	0018      	movs	r0, r3
 80011ea:	f000 fedb 	bl	8001fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	46bd      	mov	sp, r7
 80011f2:	b009      	add	sp, #36	; 0x24
 80011f4:	bd90      	pop	{r4, r7, pc}
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	40013000 	.word	0x40013000
 80011fc:	40021000 	.word	0x40021000

08001200 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b08b      	sub	sp, #44	; 0x2c
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	2414      	movs	r4, #20
 800120a:	193b      	adds	r3, r7, r4
 800120c:	0018      	movs	r0, r3
 800120e:	2314      	movs	r3, #20
 8001210:	001a      	movs	r2, r3
 8001212:	2100      	movs	r1, #0
 8001214:	f003 fde2 	bl	8004ddc <memset>
  if(huart->Instance==USART4)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a42      	ldr	r2, [pc, #264]	; (8001328 <HAL_UART_MspInit+0x128>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d148      	bne.n	80012b4 <HAL_UART_MspInit+0xb4>
  {
  /* USER CODE BEGIN USART4_MspInit 0 */

  /* USER CODE END USART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART4_CLK_ENABLE();
 8001222:	4b42      	ldr	r3, [pc, #264]	; (800132c <HAL_UART_MspInit+0x12c>)
 8001224:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001226:	4b41      	ldr	r3, [pc, #260]	; (800132c <HAL_UART_MspInit+0x12c>)
 8001228:	2180      	movs	r1, #128	; 0x80
 800122a:	0309      	lsls	r1, r1, #12
 800122c:	430a      	orrs	r2, r1
 800122e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001230:	4b3e      	ldr	r3, [pc, #248]	; (800132c <HAL_UART_MspInit+0x12c>)
 8001232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001234:	4b3d      	ldr	r3, [pc, #244]	; (800132c <HAL_UART_MspInit+0x12c>)
 8001236:	2101      	movs	r1, #1
 8001238:	430a      	orrs	r2, r1
 800123a:	62da      	str	r2, [r3, #44]	; 0x2c
 800123c:	4b3b      	ldr	r3, [pc, #236]	; (800132c <HAL_UART_MspInit+0x12c>)
 800123e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001240:	2201      	movs	r2, #1
 8001242:	4013      	ands	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	693b      	ldr	r3, [r7, #16]
    /**USART4 GPIO Configuration
    PA0     ------> USART4_TX
    PA1     ------> USART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001248:	193b      	adds	r3, r7, r4
 800124a:	2201      	movs	r2, #1
 800124c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124e:	193b      	adds	r3, r7, r4
 8001250:	2202      	movs	r2, #2
 8001252:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	193b      	adds	r3, r7, r4
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125a:	193b      	adds	r3, r7, r4
 800125c:	2203      	movs	r2, #3
 800125e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8001260:	193b      	adds	r3, r7, r4
 8001262:	2206      	movs	r2, #6
 8001264:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001266:	193a      	adds	r2, r7, r4
 8001268:	23a0      	movs	r3, #160	; 0xa0
 800126a:	05db      	lsls	r3, r3, #23
 800126c:	0011      	movs	r1, r2
 800126e:	0018      	movs	r0, r3
 8001270:	f000 fe98 	bl	8001fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001274:	0021      	movs	r1, r4
 8001276:	187b      	adds	r3, r7, r1
 8001278:	2202      	movs	r2, #2
 800127a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	187b      	adds	r3, r7, r1
 800127e:	2202      	movs	r2, #2
 8001280:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001282:	187b      	adds	r3, r7, r1
 8001284:	2201      	movs	r2, #1
 8001286:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001288:	187b      	adds	r3, r7, r1
 800128a:	2203      	movs	r2, #3
 800128c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800128e:	187b      	adds	r3, r7, r1
 8001290:	2206      	movs	r2, #6
 8001292:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001294:	187a      	adds	r2, r7, r1
 8001296:	23a0      	movs	r3, #160	; 0xa0
 8001298:	05db      	lsls	r3, r3, #23
 800129a:	0011      	movs	r1, r2
 800129c:	0018      	movs	r0, r3
 800129e:	f000 fe81 	bl	8001fa4 <HAL_GPIO_Init>

    /* USART4 interrupt Init */
    HAL_NVIC_SetPriority(USART4_5_IRQn, 2, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2102      	movs	r1, #2
 80012a6:	200e      	movs	r0, #14
 80012a8:	f000 fdc2 	bl	8001e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 80012ac:	200e      	movs	r0, #14
 80012ae:	f000 fdd4 	bl	8001e5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 80012b2:	e035      	b.n	8001320 <HAL_UART_MspInit+0x120>
  else if(huart->Instance==USART5)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a1d      	ldr	r2, [pc, #116]	; (8001330 <HAL_UART_MspInit+0x130>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d130      	bne.n	8001320 <HAL_UART_MspInit+0x120>
    __HAL_RCC_USART5_CLK_ENABLE();
 80012be:	4b1b      	ldr	r3, [pc, #108]	; (800132c <HAL_UART_MspInit+0x12c>)
 80012c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012c2:	4b1a      	ldr	r3, [pc, #104]	; (800132c <HAL_UART_MspInit+0x12c>)
 80012c4:	2180      	movs	r1, #128	; 0x80
 80012c6:	0349      	lsls	r1, r1, #13
 80012c8:	430a      	orrs	r2, r1
 80012ca:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012cc:	4b17      	ldr	r3, [pc, #92]	; (800132c <HAL_UART_MspInit+0x12c>)
 80012ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012d0:	4b16      	ldr	r3, [pc, #88]	; (800132c <HAL_UART_MspInit+0x12c>)
 80012d2:	2102      	movs	r1, #2
 80012d4:	430a      	orrs	r2, r1
 80012d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80012d8:	4b14      	ldr	r3, [pc, #80]	; (800132c <HAL_UART_MspInit+0x12c>)
 80012da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012dc:	2202      	movs	r2, #2
 80012de:	4013      	ands	r3, r2
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80012e4:	2114      	movs	r1, #20
 80012e6:	187b      	adds	r3, r7, r1
 80012e8:	2218      	movs	r2, #24
 80012ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ec:	187b      	adds	r3, r7, r1
 80012ee:	2202      	movs	r2, #2
 80012f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	187b      	adds	r3, r7, r1
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f8:	187b      	adds	r3, r7, r1
 80012fa:	2203      	movs	r2, #3
 80012fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 80012fe:	187b      	adds	r3, r7, r1
 8001300:	2206      	movs	r2, #6
 8001302:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001304:	187b      	adds	r3, r7, r1
 8001306:	4a0b      	ldr	r2, [pc, #44]	; (8001334 <HAL_UART_MspInit+0x134>)
 8001308:	0019      	movs	r1, r3
 800130a:	0010      	movs	r0, r2
 800130c:	f000 fe4a 	bl	8001fa4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART4_5_IRQn, 2, 0);
 8001310:	2200      	movs	r2, #0
 8001312:	2102      	movs	r1, #2
 8001314:	200e      	movs	r0, #14
 8001316:	f000 fd8b 	bl	8001e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800131a:	200e      	movs	r0, #14
 800131c:	f000 fd9d 	bl	8001e5a <HAL_NVIC_EnableIRQ>
}
 8001320:	46c0      	nop			; (mov r8, r8)
 8001322:	46bd      	mov	sp, r7
 8001324:	b00b      	add	sp, #44	; 0x2c
 8001326:	bd90      	pop	{r4, r7, pc}
 8001328:	40004c00 	.word	0x40004c00
 800132c:	40021000 	.word	0x40021000
 8001330:	40005000 	.word	0x40005000
 8001334:	50000400 	.word	0x50000400

08001338 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800133c:	e7fe      	b.n	800133c <NMI_Handler+0x4>

0800133e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001342:	e7fe      	b.n	8001342 <HardFault_Handler+0x4>

08001344 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001348:	46c0      	nop			; (mov r8, r8)
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800135c:	f000 fc7c 	bl	8001c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001360:	46c0      	nop			; (mov r8, r8)
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800136a:	2380      	movs	r3, #128	; 0x80
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	0018      	movs	r0, r3
 8001370:	f000 ffd0 	bl	8002314 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001374:	46c0      	nop			; (mov r8, r8)
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <USART4_5_IRQHandler+0x1c>)
 8001382:	0018      	movs	r0, r3
 8001384:	f002 fce0 	bl	8003d48 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart5);
 8001388:	4b04      	ldr	r3, [pc, #16]	; (800139c <USART4_5_IRQHandler+0x20>)
 800138a:	0018      	movs	r0, r3
 800138c:	f002 fcdc 	bl	8003d48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8001390:	46c0      	nop			; (mov r8, r8)
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	20000270 	.word	0x20000270
 800139c:	200001ec 	.word	0x200001ec

080013a0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	e00a      	b.n	80013c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013b2:	e000      	b.n	80013b6 <_read+0x16>
 80013b4:	bf00      	nop
 80013b6:	0001      	movs	r1, r0
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	1c5a      	adds	r2, r3, #1
 80013bc:	60ba      	str	r2, [r7, #8]
 80013be:	b2ca      	uxtb	r2, r1
 80013c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	3301      	adds	r3, #1
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	697a      	ldr	r2, [r7, #20]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	dbf0      	blt.n	80013b2 <_read+0x12>
	}

return len;
 80013d0:	687b      	ldr	r3, [r7, #4]
}
 80013d2:	0018      	movs	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	b006      	add	sp, #24
 80013d8:	bd80      	pop	{r7, pc}

080013da <_close>:
	}
	return len;
}

int _close(int file)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
	return -1;
 80013e2:	2301      	movs	r3, #1
 80013e4:	425b      	negs	r3, r3
}
 80013e6:	0018      	movs	r0, r3
 80013e8:	46bd      	mov	sp, r7
 80013ea:	b002      	add	sp, #8
 80013ec:	bd80      	pop	{r7, pc}

080013ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
 80013f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	2280      	movs	r2, #128	; 0x80
 80013fc:	0192      	lsls	r2, r2, #6
 80013fe:	605a      	str	r2, [r3, #4]
	return 0;
 8001400:	2300      	movs	r3, #0
}
 8001402:	0018      	movs	r0, r3
 8001404:	46bd      	mov	sp, r7
 8001406:	b002      	add	sp, #8
 8001408:	bd80      	pop	{r7, pc}

0800140a <_isatty>:

int _isatty(int file)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
	return 1;
 8001412:	2301      	movs	r3, #1
}
 8001414:	0018      	movs	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	b002      	add	sp, #8
 800141a:	bd80      	pop	{r7, pc}

0800141c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
	return 0;
 8001428:	2300      	movs	r3, #0
}
 800142a:	0018      	movs	r0, r3
 800142c:	46bd      	mov	sp, r7
 800142e:	b004      	add	sp, #16
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800143c:	4a14      	ldr	r2, [pc, #80]	; (8001490 <_sbrk+0x5c>)
 800143e:	4b15      	ldr	r3, [pc, #84]	; (8001494 <_sbrk+0x60>)
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001448:	4b13      	ldr	r3, [pc, #76]	; (8001498 <_sbrk+0x64>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d102      	bne.n	8001456 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <_sbrk+0x64>)
 8001452:	4a12      	ldr	r2, [pc, #72]	; (800149c <_sbrk+0x68>)
 8001454:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <_sbrk+0x64>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	18d3      	adds	r3, r2, r3
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	429a      	cmp	r2, r3
 8001462:	d207      	bcs.n	8001474 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001464:	f003 fc90 	bl	8004d88 <__errno>
 8001468:	0003      	movs	r3, r0
 800146a:	220c      	movs	r2, #12
 800146c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800146e:	2301      	movs	r3, #1
 8001470:	425b      	negs	r3, r3
 8001472:	e009      	b.n	8001488 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001474:	4b08      	ldr	r3, [pc, #32]	; (8001498 <_sbrk+0x64>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800147a:	4b07      	ldr	r3, [pc, #28]	; (8001498 <_sbrk+0x64>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	18d2      	adds	r2, r2, r3
 8001482:	4b05      	ldr	r3, [pc, #20]	; (8001498 <_sbrk+0x64>)
 8001484:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001486:	68fb      	ldr	r3, [r7, #12]
}
 8001488:	0018      	movs	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	b006      	add	sp, #24
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20005000 	.word	0x20005000
 8001494:	00000400 	.word	0x00000400
 8001498:	200001dc 	.word	0x200001dc
 800149c:	20000360 	.word	0x20000360

080014a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a4:	46c0      	nop			; (mov r8, r8)
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80014ac:	480d      	ldr	r0, [pc, #52]	; (80014e4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80014ae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014b0:	480d      	ldr	r0, [pc, #52]	; (80014e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80014b2:	490e      	ldr	r1, [pc, #56]	; (80014ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80014b4:	4a0e      	ldr	r2, [pc, #56]	; (80014f0 <LoopForever+0xe>)
  movs r3, #0
 80014b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b8:	e002      	b.n	80014c0 <LoopCopyDataInit>

080014ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014be:	3304      	adds	r3, #4

080014c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c4:	d3f9      	bcc.n	80014ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014c6:	4a0b      	ldr	r2, [pc, #44]	; (80014f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014c8:	4c0b      	ldr	r4, [pc, #44]	; (80014f8 <LoopForever+0x16>)
  movs r3, #0
 80014ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014cc:	e001      	b.n	80014d2 <LoopFillZerobss>

080014ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d0:	3204      	adds	r2, #4

080014d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d4:	d3fb      	bcc.n	80014ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80014d6:	f7ff ffe3 	bl	80014a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014da:	f003 fc5b 	bl	8004d94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014de:	f7ff f8d9 	bl	8000694 <main>

080014e2 <LoopForever>:

LoopForever:
    b LoopForever
 80014e2:	e7fe      	b.n	80014e2 <LoopForever>
   ldr   r0, =_estack
 80014e4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80014e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014ec:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80014f0:	08006364 	.word	0x08006364
  ldr r2, =_sbss
 80014f4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80014f8:	20000360 	.word	0x20000360

080014fc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014fc:	e7fe      	b.n	80014fc <ADC1_COMP_IRQHandler>

080014fe <iis2dlpc_read_reg>:
  *
  */
int32_t iis2dlpc_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80014fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001500:	b087      	sub	sp, #28
 8001502:	af00      	add	r7, sp, #0
 8001504:	60f8      	str	r0, [r7, #12]
 8001506:	0008      	movs	r0, r1
 8001508:	607a      	str	r2, [r7, #4]
 800150a:	0019      	movs	r1, r3
 800150c:	260b      	movs	r6, #11
 800150e:	19bb      	adds	r3, r7, r6
 8001510:	1c02      	adds	r2, r0, #0
 8001512:	701a      	strb	r2, [r3, #0]
 8001514:	2508      	movs	r5, #8
 8001516:	197b      	adds	r3, r7, r5
 8001518:	1c0a      	adds	r2, r1, #0
 800151a:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	685c      	ldr	r4, [r3, #4]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6898      	ldr	r0, [r3, #8]
 8001524:	197b      	adds	r3, r7, r5
 8001526:	881d      	ldrh	r5, [r3, #0]
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	19bb      	adds	r3, r7, r6
 800152c:	7819      	ldrb	r1, [r3, #0]
 800152e:	002b      	movs	r3, r5
 8001530:	47a0      	blx	r4
 8001532:	0003      	movs	r3, r0
 8001534:	617b      	str	r3, [r7, #20]

  return ret;
 8001536:	697b      	ldr	r3, [r7, #20]
}
 8001538:	0018      	movs	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	b007      	add	sp, #28
 800153e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001540 <iis2dlpc_write_reg>:
  *
  */
int32_t iis2dlpc_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8001540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001542:	b087      	sub	sp, #28
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	0008      	movs	r0, r1
 800154a:	607a      	str	r2, [r7, #4]
 800154c:	0019      	movs	r1, r3
 800154e:	260b      	movs	r6, #11
 8001550:	19bb      	adds	r3, r7, r6
 8001552:	1c02      	adds	r2, r0, #0
 8001554:	701a      	strb	r2, [r3, #0]
 8001556:	2508      	movs	r5, #8
 8001558:	197b      	adds	r3, r7, r5
 800155a:	1c0a      	adds	r2, r1, #0
 800155c:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681c      	ldr	r4, [r3, #0]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6898      	ldr	r0, [r3, #8]
 8001566:	197b      	adds	r3, r7, r5
 8001568:	881d      	ldrh	r5, [r3, #0]
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	19bb      	adds	r3, r7, r6
 800156e:	7819      	ldrb	r1, [r3, #0]
 8001570:	002b      	movs	r3, r5
 8001572:	47a0      	blx	r4
 8001574:	0003      	movs	r3, r0
 8001576:	617b      	str	r3, [r7, #20]

  return ret;
 8001578:	697b      	ldr	r3, [r7, #20]
}
 800157a:	0018      	movs	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	b007      	add	sp, #28
 8001580:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001582 <iis2dlpc_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_power_mode_set(stmdev_ctx_t *ctx,
                                iis2dlpc_mode_t val)
{
 8001582:	b590      	push	{r4, r7, lr}
 8001584:	b087      	sub	sp, #28
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
 800158a:	000a      	movs	r2, r1
 800158c:	1cfb      	adds	r3, r7, #3
 800158e:	701a      	strb	r2, [r3, #0]
  iis2dlpc_ctrl1_t ctrl1;
  iis2dlpc_ctrl6_t ctrl6;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 8001590:	2410      	movs	r4, #16
 8001592:	193a      	adds	r2, r7, r4
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	2301      	movs	r3, #1
 8001598:	2120      	movs	r1, #32
 800159a:	f7ff ffb0 	bl	80014fe <iis2dlpc_read_reg>
 800159e:	0003      	movs	r3, r0
 80015a0:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d129      	bne.n	80015fc <iis2dlpc_power_mode_set+0x7a>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 80015a8:	1cfb      	adds	r3, r7, #3
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	089b      	lsrs	r3, r3, #2
 80015ae:	1c1a      	adds	r2, r3, #0
 80015b0:	2303      	movs	r3, #3
 80015b2:	4013      	ands	r3, r2
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	193b      	adds	r3, r7, r4
 80015b8:	2103      	movs	r1, #3
 80015ba:	400a      	ands	r2, r1
 80015bc:	0090      	lsls	r0, r2, #2
 80015be:	781a      	ldrb	r2, [r3, #0]
 80015c0:	210c      	movs	r1, #12
 80015c2:	438a      	bics	r2, r1
 80015c4:	1c11      	adds	r1, r2, #0
 80015c6:	1c02      	adds	r2, r0, #0
 80015c8:	430a      	orrs	r2, r1
 80015ca:	701a      	strb	r2, [r3, #0]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 80015cc:	1cfb      	adds	r3, r7, #3
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2203      	movs	r2, #3
 80015d2:	4013      	ands	r3, r2
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	193b      	adds	r3, r7, r4
 80015d8:	2103      	movs	r1, #3
 80015da:	400a      	ands	r2, r1
 80015dc:	0010      	movs	r0, r2
 80015de:	781a      	ldrb	r2, [r3, #0]
 80015e0:	2103      	movs	r1, #3
 80015e2:	438a      	bics	r2, r1
 80015e4:	1c11      	adds	r1, r2, #0
 80015e6:	1c02      	adds	r2, r0, #0
 80015e8:	430a      	orrs	r2, r1
 80015ea:	701a      	strb	r2, [r3, #0]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 80015ec:	193a      	adds	r2, r7, r4
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	2301      	movs	r3, #1
 80015f2:	2120      	movs	r1, #32
 80015f4:	f7ff ffa4 	bl	8001540 <iis2dlpc_write_reg>
 80015f8:	0003      	movs	r3, r0
 80015fa:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d108      	bne.n	8001614 <iis2dlpc_power_mode_set+0x92>
  {
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &ctrl6, 1);
 8001602:	230c      	movs	r3, #12
 8001604:	18fa      	adds	r2, r7, r3
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	2301      	movs	r3, #1
 800160a:	2125      	movs	r1, #37	; 0x25
 800160c:	f7ff ff77 	bl	80014fe <iis2dlpc_read_reg>
 8001610:	0003      	movs	r3, r0
 8001612:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d11a      	bne.n	8001650 <iis2dlpc_power_mode_set+0xce>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 800161a:	1cfb      	adds	r3, r7, #3
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	091b      	lsrs	r3, r3, #4
 8001620:	1c1a      	adds	r2, r3, #0
 8001622:	2301      	movs	r3, #1
 8001624:	4013      	ands	r3, r2
 8001626:	b2da      	uxtb	r2, r3
 8001628:	240c      	movs	r4, #12
 800162a:	193b      	adds	r3, r7, r4
 800162c:	2101      	movs	r1, #1
 800162e:	400a      	ands	r2, r1
 8001630:	0090      	lsls	r0, r2, #2
 8001632:	781a      	ldrb	r2, [r3, #0]
 8001634:	2104      	movs	r1, #4
 8001636:	438a      	bics	r2, r1
 8001638:	1c11      	adds	r1, r2, #0
 800163a:	1c02      	adds	r2, r0, #0
 800163c:	430a      	orrs	r2, r1
 800163e:	701a      	strb	r2, [r3, #0]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &ctrl6, 1);
 8001640:	193a      	adds	r2, r7, r4
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	2301      	movs	r3, #1
 8001646:	2125      	movs	r1, #37	; 0x25
 8001648:	f7ff ff7a 	bl	8001540 <iis2dlpc_write_reg>
 800164c:	0003      	movs	r3, r0
 800164e:	617b      	str	r3, [r7, #20]
  else
  {
    ret = ret;
  }

  return ret;
 8001650:	697b      	ldr	r3, [r7, #20]
}
 8001652:	0018      	movs	r0, r3
 8001654:	46bd      	mov	sp, r7
 8001656:	b007      	add	sp, #28
 8001658:	bd90      	pop	{r4, r7, pc}

0800165a <iis2dlpc_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_data_rate_set(stmdev_ctx_t *ctx, iis2dlpc_odr_t val)
{
 800165a:	b590      	push	{r4, r7, lr}
 800165c:	b087      	sub	sp, #28
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
 8001662:	000a      	movs	r2, r1
 8001664:	1cfb      	adds	r3, r7, #3
 8001666:	701a      	strb	r2, [r3, #0]
  iis2dlpc_ctrl1_t ctrl1;
  iis2dlpc_ctrl3_t ctrl3;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 8001668:	2410      	movs	r4, #16
 800166a:	193a      	adds	r2, r7, r4
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	2301      	movs	r3, #1
 8001670:	2120      	movs	r1, #32
 8001672:	f7ff ff44 	bl	80014fe <iis2dlpc_read_reg>
 8001676:	0003      	movs	r3, r0
 8001678:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d115      	bne.n	80016ac <iis2dlpc_data_rate_set+0x52>
  {
    ctrl1.odr = (uint8_t) val;
 8001680:	1cfb      	adds	r3, r7, #3
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	220f      	movs	r2, #15
 8001686:	4013      	ands	r3, r2
 8001688:	b2da      	uxtb	r2, r3
 800168a:	193b      	adds	r3, r7, r4
 800168c:	0110      	lsls	r0, r2, #4
 800168e:	781a      	ldrb	r2, [r3, #0]
 8001690:	210f      	movs	r1, #15
 8001692:	400a      	ands	r2, r1
 8001694:	1c11      	adds	r1, r2, #0
 8001696:	1c02      	adds	r2, r0, #0
 8001698:	430a      	orrs	r2, r1
 800169a:	701a      	strb	r2, [r3, #0]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 800169c:	193a      	adds	r2, r7, r4
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	2301      	movs	r3, #1
 80016a2:	2120      	movs	r1, #32
 80016a4:	f7ff ff4c 	bl	8001540 <iis2dlpc_write_reg>
 80016a8:	0003      	movs	r3, r0
 80016aa:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d108      	bne.n	80016c4 <iis2dlpc_data_rate_set+0x6a>
  {
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL3, (uint8_t *) &ctrl3, 1);
 80016b2:	230c      	movs	r3, #12
 80016b4:	18fa      	adds	r2, r7, r3
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	2301      	movs	r3, #1
 80016ba:	2122      	movs	r1, #34	; 0x22
 80016bc:	f7ff ff1f 	bl	80014fe <iis2dlpc_read_reg>
 80016c0:	0003      	movs	r3, r0
 80016c2:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d11a      	bne.n	8001700 <iis2dlpc_data_rate_set+0xa6>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 80016ca:	1cfb      	adds	r3, r7, #3
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	091b      	lsrs	r3, r3, #4
 80016d0:	1c1a      	adds	r2, r3, #0
 80016d2:	2303      	movs	r3, #3
 80016d4:	4013      	ands	r3, r2
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	240c      	movs	r4, #12
 80016da:	193b      	adds	r3, r7, r4
 80016dc:	2103      	movs	r1, #3
 80016de:	400a      	ands	r2, r1
 80016e0:	0010      	movs	r0, r2
 80016e2:	781a      	ldrb	r2, [r3, #0]
 80016e4:	2103      	movs	r1, #3
 80016e6:	438a      	bics	r2, r1
 80016e8:	1c11      	adds	r1, r2, #0
 80016ea:	1c02      	adds	r2, r0, #0
 80016ec:	430a      	orrs	r2, r1
 80016ee:	701a      	strb	r2, [r3, #0]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL3, (uint8_t *) &ctrl3, 1);
 80016f0:	193a      	adds	r2, r7, r4
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	2301      	movs	r3, #1
 80016f6:	2122      	movs	r1, #34	; 0x22
 80016f8:	f7ff ff22 	bl	8001540 <iis2dlpc_write_reg>
 80016fc:	0003      	movs	r3, r0
 80016fe:	617b      	str	r3, [r7, #20]
  else
  {
    ret = ret;
  }

  return ret;
 8001700:	697b      	ldr	r3, [r7, #20]
}
 8001702:	0018      	movs	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	b007      	add	sp, #28
 8001708:	bd90      	pop	{r4, r7, pc}

0800170a <iis2dlpc_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_full_scale_set(stmdev_ctx_t *ctx, iis2dlpc_fs_t val)
{
 800170a:	b590      	push	{r4, r7, lr}
 800170c:	b085      	sub	sp, #20
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
 8001712:	000a      	movs	r2, r1
 8001714:	1cfb      	adds	r3, r7, #3
 8001716:	701a      	strb	r2, [r3, #0]
  iis2dlpc_ctrl6_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &reg, 1);
 8001718:	2408      	movs	r4, #8
 800171a:	193a      	adds	r2, r7, r4
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	2301      	movs	r3, #1
 8001720:	2125      	movs	r1, #37	; 0x25
 8001722:	f7ff feec 	bl	80014fe <iis2dlpc_read_reg>
 8001726:	0003      	movs	r3, r0
 8001728:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d117      	bne.n	8001760 <iis2dlpc_full_scale_set+0x56>
  {
    reg.fs = (uint8_t) val;
 8001730:	1cfb      	adds	r3, r7, #3
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2203      	movs	r2, #3
 8001736:	4013      	ands	r3, r2
 8001738:	b2da      	uxtb	r2, r3
 800173a:	193b      	adds	r3, r7, r4
 800173c:	2103      	movs	r1, #3
 800173e:	400a      	ands	r2, r1
 8001740:	0110      	lsls	r0, r2, #4
 8001742:	781a      	ldrb	r2, [r3, #0]
 8001744:	2130      	movs	r1, #48	; 0x30
 8001746:	438a      	bics	r2, r1
 8001748:	1c11      	adds	r1, r2, #0
 800174a:	1c02      	adds	r2, r0, #0
 800174c:	430a      	orrs	r2, r1
 800174e:	701a      	strb	r2, [r3, #0]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &reg, 1);
 8001750:	193a      	adds	r2, r7, r4
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	2301      	movs	r3, #1
 8001756:	2125      	movs	r1, #37	; 0x25
 8001758:	f7ff fef2 	bl	8001540 <iis2dlpc_write_reg>
 800175c:	0003      	movs	r3, r0
 800175e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001760:	68fb      	ldr	r3, [r7, #12]
}
 8001762:	0018      	movs	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	b005      	add	sp, #20
 8001768:	bd90      	pop	{r4, r7, pc}

0800176a <iis2dlpc_all_sources_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_all_sources_get(stmdev_ctx_t *ctx,
                                 iis2dlpc_all_sources_t *val)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b084      	sub	sp, #16
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
 8001772:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_STATUS_DUP, (uint8_t *) val, 5);
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	2305      	movs	r3, #5
 800177a:	2137      	movs	r1, #55	; 0x37
 800177c:	f7ff febf 	bl	80014fe <iis2dlpc_read_reg>
 8001780:	0003      	movs	r3, r0
 8001782:	60fb      	str	r3, [r7, #12]

  return ret;
 8001784:	68fb      	ldr	r3, [r7, #12]
}
 8001786:	0018      	movs	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	b004      	add	sp, #16
 800178c:	bd80      	pop	{r7, pc}

0800178e <iis2dlpc_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800178e:	b590      	push	{r4, r7, lr}
 8001790:	b085      	sub	sp, #20
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
 8001796:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_OUT_T_L, buff, 2);
 8001798:	2408      	movs	r4, #8
 800179a:	193a      	adds	r2, r7, r4
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	2302      	movs	r3, #2
 80017a0:	210d      	movs	r1, #13
 80017a2:	f7ff feac 	bl	80014fe <iis2dlpc_read_reg>
 80017a6:	0003      	movs	r3, r0
 80017a8:	60fb      	str	r3, [r7, #12]
  *val = (int16_t)buff[1];
 80017aa:	0021      	movs	r1, r4
 80017ac:	187b      	adds	r3, r7, r1
 80017ae:	785b      	ldrb	r3, [r3, #1]
 80017b0:	b21a      	sxth	r2, r3
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	2200      	movs	r2, #0
 80017ba:	5e9b      	ldrsh	r3, [r3, r2]
 80017bc:	b29b      	uxth	r3, r3
 80017be:	021b      	lsls	r3, r3, #8
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	187b      	adds	r3, r7, r1
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	18d3      	adds	r3, r2, r3
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	b21a      	sxth	r2, r3
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	801a      	strh	r2, [r3, #0]

  return ret;
 80017d2:	68fb      	ldr	r3, [r7, #12]
}
 80017d4:	0018      	movs	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	b005      	add	sp, #20
 80017da:	bd90      	pop	{r4, r7, pc}

080017dc <iis2dlpc_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_WHO_AM_I, buff, 1);
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	2301      	movs	r3, #1
 80017ec:	210f      	movs	r1, #15
 80017ee:	f7ff fe86 	bl	80014fe <iis2dlpc_read_reg>
 80017f2:	0003      	movs	r3, r0
 80017f4:	60fb      	str	r3, [r7, #12]

  return ret;
 80017f6:	68fb      	ldr	r3, [r7, #12]
}
 80017f8:	0018      	movs	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	b004      	add	sp, #16
 80017fe:	bd80      	pop	{r7, pc}

08001800 <iis2dlpc_reset_set>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001800:	b590      	push	{r4, r7, lr}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	000a      	movs	r2, r1
 800180a:	1cfb      	adds	r3, r7, #3
 800180c:	701a      	strb	r2, [r3, #0]
  iis2dlpc_ctrl2_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 800180e:	2408      	movs	r4, #8
 8001810:	193a      	adds	r2, r7, r4
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	2301      	movs	r3, #1
 8001816:	2121      	movs	r1, #33	; 0x21
 8001818:	f7ff fe71 	bl	80014fe <iis2dlpc_read_reg>
 800181c:	0003      	movs	r3, r0
 800181e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d117      	bne.n	8001856 <iis2dlpc_reset_set+0x56>
  {
    reg.soft_reset = val;
 8001826:	1cfb      	adds	r3, r7, #3
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2201      	movs	r2, #1
 800182c:	4013      	ands	r3, r2
 800182e:	b2da      	uxtb	r2, r3
 8001830:	193b      	adds	r3, r7, r4
 8001832:	2101      	movs	r1, #1
 8001834:	400a      	ands	r2, r1
 8001836:	0190      	lsls	r0, r2, #6
 8001838:	781a      	ldrb	r2, [r3, #0]
 800183a:	2140      	movs	r1, #64	; 0x40
 800183c:	438a      	bics	r2, r1
 800183e:	1c11      	adds	r1, r2, #0
 8001840:	1c02      	adds	r2, r0, #0
 8001842:	430a      	orrs	r2, r1
 8001844:	701a      	strb	r2, [r3, #0]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 8001846:	193a      	adds	r2, r7, r4
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	2301      	movs	r3, #1
 800184c:	2121      	movs	r1, #33	; 0x21
 800184e:	f7ff fe77 	bl	8001540 <iis2dlpc_write_reg>
 8001852:	0003      	movs	r3, r0
 8001854:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001856:	68fb      	ldr	r3, [r7, #12]
}
 8001858:	0018      	movs	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	b005      	add	sp, #20
 800185e:	bd90      	pop	{r4, r7, pc}

08001860 <iis2dlpc_reset_get>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8001860:	b590      	push	{r4, r7, lr}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  iis2dlpc_ctrl2_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 800186a:	2408      	movs	r4, #8
 800186c:	193a      	adds	r2, r7, r4
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	2301      	movs	r3, #1
 8001872:	2121      	movs	r1, #33	; 0x21
 8001874:	f7ff fe43 	bl	80014fe <iis2dlpc_read_reg>
 8001878:	0003      	movs	r3, r0
 800187a:	60fb      	str	r3, [r7, #12]
  *val = reg.soft_reset;
 800187c:	193b      	adds	r3, r7, r4
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	065b      	lsls	r3, r3, #25
 8001882:	0fdb      	lsrs	r3, r3, #31
 8001884:	b2db      	uxtb	r3, r3
 8001886:	001a      	movs	r2, r3
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	701a      	strb	r2, [r3, #0]

  return ret;
 800188c:	68fb      	ldr	r3, [r7, #12]
}
 800188e:	0018      	movs	r0, r3
 8001890:	46bd      	mov	sp, r7
 8001892:	b005      	add	sp, #20
 8001894:	bd90      	pop	{r4, r7, pc}

08001896 <iis2dlpc_filter_path_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_filter_path_set(stmdev_ctx_t *ctx,
                                 iis2dlpc_fds_t val)
{
 8001896:	b590      	push	{r4, r7, lr}
 8001898:	b087      	sub	sp, #28
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
 800189e:	000a      	movs	r2, r1
 80018a0:	1cfb      	adds	r3, r7, #3
 80018a2:	701a      	strb	r2, [r3, #0]
  iis2dlpc_ctrl6_t ctrl6;
  iis2dlpc_ctrl7_t ctrl_reg7;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &ctrl6, 1);
 80018a4:	2410      	movs	r4, #16
 80018a6:	193a      	adds	r2, r7, r4
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	2301      	movs	r3, #1
 80018ac:	2125      	movs	r1, #37	; 0x25
 80018ae:	f7ff fe26 	bl	80014fe <iis2dlpc_read_reg>
 80018b2:	0003      	movs	r3, r0
 80018b4:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d119      	bne.n	80018f0 <iis2dlpc_filter_path_set+0x5a>
  {
    ctrl6.fds = ((uint8_t) val & 0x10U) >> 4;
 80018bc:	1cfb      	adds	r3, r7, #3
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	091b      	lsrs	r3, r3, #4
 80018c2:	1c1a      	adds	r2, r3, #0
 80018c4:	2301      	movs	r3, #1
 80018c6:	4013      	ands	r3, r2
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	193b      	adds	r3, r7, r4
 80018cc:	2101      	movs	r1, #1
 80018ce:	400a      	ands	r2, r1
 80018d0:	00d0      	lsls	r0, r2, #3
 80018d2:	781a      	ldrb	r2, [r3, #0]
 80018d4:	2108      	movs	r1, #8
 80018d6:	438a      	bics	r2, r1
 80018d8:	1c11      	adds	r1, r2, #0
 80018da:	1c02      	adds	r2, r0, #0
 80018dc:	430a      	orrs	r2, r1
 80018de:	701a      	strb	r2, [r3, #0]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &ctrl6, 1);
 80018e0:	193a      	adds	r2, r7, r4
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	2301      	movs	r3, #1
 80018e6:	2125      	movs	r1, #37	; 0x25
 80018e8:	f7ff fe2a 	bl	8001540 <iis2dlpc_write_reg>
 80018ec:	0003      	movs	r3, r0
 80018ee:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d108      	bne.n	8001908 <iis2dlpc_filter_path_set+0x72>
  {
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL7, (uint8_t *) &ctrl_reg7, 1);
 80018f6:	230c      	movs	r3, #12
 80018f8:	18fa      	adds	r2, r7, r3
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	2301      	movs	r3, #1
 80018fe:	213f      	movs	r1, #63	; 0x3f
 8001900:	f7ff fdfd 	bl	80014fe <iis2dlpc_read_reg>
 8001904:	0003      	movs	r3, r0
 8001906:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d118      	bne.n	8001940 <iis2dlpc_filter_path_set+0xaa>
  {
    ctrl_reg7.usr_off_on_out = (uint8_t) val & 0x01U;
 800190e:	1cfb      	adds	r3, r7, #3
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2201      	movs	r2, #1
 8001914:	4013      	ands	r3, r2
 8001916:	b2da      	uxtb	r2, r3
 8001918:	240c      	movs	r4, #12
 800191a:	193b      	adds	r3, r7, r4
 800191c:	2101      	movs	r1, #1
 800191e:	400a      	ands	r2, r1
 8001920:	0110      	lsls	r0, r2, #4
 8001922:	781a      	ldrb	r2, [r3, #0]
 8001924:	2110      	movs	r1, #16
 8001926:	438a      	bics	r2, r1
 8001928:	1c11      	adds	r1, r2, #0
 800192a:	1c02      	adds	r2, r0, #0
 800192c:	430a      	orrs	r2, r1
 800192e:	701a      	strb	r2, [r3, #0]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL7, (uint8_t *) &ctrl_reg7, 1);
 8001930:	193a      	adds	r2, r7, r4
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	2301      	movs	r3, #1
 8001936:	213f      	movs	r1, #63	; 0x3f
 8001938:	f7ff fe02 	bl	8001540 <iis2dlpc_write_reg>
 800193c:	0003      	movs	r3, r0
 800193e:	617b      	str	r3, [r7, #20]
  else
  {
    ret = ret;
  }

  return ret;
 8001940:	697b      	ldr	r3, [r7, #20]
}
 8001942:	0018      	movs	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	b007      	add	sp, #28
 8001948:	bd90      	pop	{r4, r7, pc}

0800194a <iis2dlpc_int_notification_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_int_notification_set(stmdev_ctx_t *ctx,
                                      iis2dlpc_lir_t val)
{
 800194a:	b590      	push	{r4, r7, lr}
 800194c:	b085      	sub	sp, #20
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	000a      	movs	r2, r1
 8001954:	1cfb      	adds	r3, r7, #3
 8001956:	701a      	strb	r2, [r3, #0]
  iis2dlpc_ctrl3_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL3, (uint8_t *) &reg, 1);
 8001958:	2408      	movs	r4, #8
 800195a:	193a      	adds	r2, r7, r4
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	2301      	movs	r3, #1
 8001960:	2122      	movs	r1, #34	; 0x22
 8001962:	f7ff fdcc 	bl	80014fe <iis2dlpc_read_reg>
 8001966:	0003      	movs	r3, r0
 8001968:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d117      	bne.n	80019a0 <iis2dlpc_int_notification_set+0x56>
  {
    reg.lir = (uint8_t) val;
 8001970:	1cfb      	adds	r3, r7, #3
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2201      	movs	r2, #1
 8001976:	4013      	ands	r3, r2
 8001978:	b2da      	uxtb	r2, r3
 800197a:	193b      	adds	r3, r7, r4
 800197c:	2101      	movs	r1, #1
 800197e:	400a      	ands	r2, r1
 8001980:	0110      	lsls	r0, r2, #4
 8001982:	781a      	ldrb	r2, [r3, #0]
 8001984:	2110      	movs	r1, #16
 8001986:	438a      	bics	r2, r1
 8001988:	1c11      	adds	r1, r2, #0
 800198a:	1c02      	adds	r2, r0, #0
 800198c:	430a      	orrs	r2, r1
 800198e:	701a      	strb	r2, [r3, #0]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL3, (uint8_t *) &reg, 1);
 8001990:	193a      	adds	r2, r7, r4
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	2301      	movs	r3, #1
 8001996:	2122      	movs	r1, #34	; 0x22
 8001998:	f7ff fdd2 	bl	8001540 <iis2dlpc_write_reg>
 800199c:	0003      	movs	r3, r0
 800199e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80019a0:	68fb      	ldr	r3, [r7, #12]
}
 80019a2:	0018      	movs	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	b005      	add	sp, #20
 80019a8:	bd90      	pop	{r4, r7, pc}

080019aa <iis2dlpc_pin_int1_route_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_pin_int1_route_set(stmdev_ctx_t *ctx,
                                    iis2dlpc_ctrl4_int1_pad_ctrl_t *val)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b086      	sub	sp, #24
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
 80019b2:	6039      	str	r1, [r7, #0]
  iis2dlpc_ctrl5_int2_pad_ctrl_t ctrl5_int2_pad_ctrl;
  iis2dlpc_ctrl7_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL5_INT2_PAD_CTRL,
 80019b4:	2310      	movs	r3, #16
 80019b6:	18fa      	adds	r2, r7, r3
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	2301      	movs	r3, #1
 80019bc:	2124      	movs	r1, #36	; 0x24
 80019be:	f7ff fd9e 	bl	80014fe <iis2dlpc_read_reg>
 80019c2:	0003      	movs	r3, r0
 80019c4:	617b      	str	r3, [r7, #20]
                          (uint8_t *) &ctrl5_int2_pad_ctrl, 1);

  if (ret == 0)
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d108      	bne.n	80019de <iis2dlpc_pin_int1_route_set+0x34>
  {
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL7, (uint8_t *) &reg, 1);
 80019cc:	230c      	movs	r3, #12
 80019ce:	18fa      	adds	r2, r7, r3
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	2301      	movs	r3, #1
 80019d4:	213f      	movs	r1, #63	; 0x3f
 80019d6:	f7ff fd92 	bl	80014fe <iis2dlpc_read_reg>
 80019da:	0003      	movs	r3, r0
 80019dc:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d146      	bne.n	8001a72 <iis2dlpc_pin_int1_route_set+0xc8>
  {
    if ((ctrl5_int2_pad_ctrl.int2_sleep_state
 80019e4:	2110      	movs	r1, #16
 80019e6:	187b      	adds	r3, r7, r1
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	061b      	lsls	r3, r3, #24
 80019ec:	0fdb      	lsrs	r3, r3, #31
 80019ee:	b2da      	uxtb	r2, r3
         | ctrl5_int2_pad_ctrl.int2_sleep_chg
 80019f0:	187b      	adds	r3, r7, r1
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	065b      	lsls	r3, r3, #25
 80019f6:	0fdb      	lsrs	r3, r3, #31
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	4313      	orrs	r3, r2
 80019fc:	b2da      	uxtb	r2, r3
         | val->int1_tap
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	071b      	lsls	r3, r3, #28
 8001a04:	0fdb      	lsrs	r3, r3, #31
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	b2da      	uxtb	r2, r3
         | val->int1_ff
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	06db      	lsls	r3, r3, #27
 8001a12:	0fdb      	lsrs	r3, r3, #31
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	4313      	orrs	r3, r2
 8001a18:	b2da      	uxtb	r2, r3
         | val->int1_wu
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	069b      	lsls	r3, r3, #26
 8001a20:	0fdb      	lsrs	r3, r3, #31
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	4313      	orrs	r3, r2
 8001a26:	b2da      	uxtb	r2, r3
         | val->int1_single_tap
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	065b      	lsls	r3, r3, #25
 8001a2e:	0fdb      	lsrs	r3, r3, #31
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	4313      	orrs	r3, r2
 8001a34:	b2da      	uxtb	r2, r3
         | val->int1_6d) != PROPERTY_DISABLE)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	061b      	lsls	r3, r3, #24
 8001a3c:	0fdb      	lsrs	r3, r3, #31
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	4313      	orrs	r3, r2
 8001a42:	b2db      	uxtb	r3, r3
    if ((ctrl5_int2_pad_ctrl.int2_sleep_state
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d006      	beq.n	8001a56 <iis2dlpc_pin_int1_route_set+0xac>
    {
      reg.interrupts_enable = PROPERTY_ENABLE;
 8001a48:	230c      	movs	r3, #12
 8001a4a:	18fb      	adds	r3, r7, r3
 8001a4c:	781a      	ldrb	r2, [r3, #0]
 8001a4e:	2120      	movs	r1, #32
 8001a50:	430a      	orrs	r2, r1
 8001a52:	701a      	strb	r2, [r3, #0]
 8001a54:	e005      	b.n	8001a62 <iis2dlpc_pin_int1_route_set+0xb8>
    }

    else
    {
      reg.interrupts_enable = PROPERTY_DISABLE;
 8001a56:	230c      	movs	r3, #12
 8001a58:	18fb      	adds	r3, r7, r3
 8001a5a:	781a      	ldrb	r2, [r3, #0]
 8001a5c:	2120      	movs	r1, #32
 8001a5e:	438a      	bics	r2, r1
 8001a60:	701a      	strb	r2, [r3, #0]
    }

    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL4_INT1_PAD_CTRL,
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	2301      	movs	r3, #1
 8001a68:	2123      	movs	r1, #35	; 0x23
 8001a6a:	f7ff fd69 	bl	8001540 <iis2dlpc_write_reg>
 8001a6e:	0003      	movs	r3, r0
 8001a70:	617b      	str	r3, [r7, #20]
                             (uint8_t *) val, 1);
  }

  if (ret == 0)
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d108      	bne.n	8001a8a <iis2dlpc_pin_int1_route_set+0xe0>
  {
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL7, (uint8_t *) &reg, 1);
 8001a78:	230c      	movs	r3, #12
 8001a7a:	18fa      	adds	r2, r7, r3
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	2301      	movs	r3, #1
 8001a80:	213f      	movs	r1, #63	; 0x3f
 8001a82:	f7ff fd5d 	bl	8001540 <iis2dlpc_write_reg>
 8001a86:	0003      	movs	r3, r0
 8001a88:	617b      	str	r3, [r7, #20]
  else
  {
    ret = ret;
  }

  return ret;
 8001a8a:	697b      	ldr	r3, [r7, #20]
}
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	b006      	add	sp, #24
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <iis2dlpc_pin_int1_route_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_pin_int1_route_get(stmdev_ctx_t *ctx,
                                    iis2dlpc_ctrl4_int1_pad_ctrl_t *val)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL4_INT1_PAD_CTRL,
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	2123      	movs	r1, #35	; 0x23
 8001aa6:	f7ff fd2a 	bl	80014fe <iis2dlpc_read_reg>
 8001aaa:	0003      	movs	r3, r0
 8001aac:	60fb      	str	r3, [r7, #12]
                          (uint8_t *) val, 1);

  return ret;
 8001aae:	68fb      	ldr	r3, [r7, #12]
}
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	b004      	add	sp, #16
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <iis2dlpc_wkup_threshold_set>:
  * @param  val      change the values of wk_ths in reg WAKE_UP_THS
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_wkup_threshold_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001ab8:	b590      	push	{r4, r7, lr}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	000a      	movs	r2, r1
 8001ac2:	1cfb      	adds	r3, r7, #3
 8001ac4:	701a      	strb	r2, [r3, #0]
  iis2dlpc_wake_up_ths_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_WAKE_UP_THS, (uint8_t *) &reg, 1);
 8001ac6:	2408      	movs	r4, #8
 8001ac8:	193a      	adds	r2, r7, r4
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	2301      	movs	r3, #1
 8001ace:	2134      	movs	r1, #52	; 0x34
 8001ad0:	f7ff fd15 	bl	80014fe <iis2dlpc_read_reg>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d117      	bne.n	8001b0e <iis2dlpc_wkup_threshold_set+0x56>
  {
    reg.wk_ths = val;
 8001ade:	1cfb      	adds	r3, r7, #3
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	223f      	movs	r2, #63	; 0x3f
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	193b      	adds	r3, r7, r4
 8001aea:	213f      	movs	r1, #63	; 0x3f
 8001aec:	400a      	ands	r2, r1
 8001aee:	0010      	movs	r0, r2
 8001af0:	781a      	ldrb	r2, [r3, #0]
 8001af2:	213f      	movs	r1, #63	; 0x3f
 8001af4:	438a      	bics	r2, r1
 8001af6:	1c11      	adds	r1, r2, #0
 8001af8:	1c02      	adds	r2, r0, #0
 8001afa:	430a      	orrs	r2, r1
 8001afc:	701a      	strb	r2, [r3, #0]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_WAKE_UP_THS, (uint8_t *) &reg, 1);
 8001afe:	193a      	adds	r2, r7, r4
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	2301      	movs	r3, #1
 8001b04:	2134      	movs	r1, #52	; 0x34
 8001b06:	f7ff fd1b 	bl	8001540 <iis2dlpc_write_reg>
 8001b0a:	0003      	movs	r3, r0
 8001b0c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
}
 8001b10:	0018      	movs	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	b005      	add	sp, #20
 8001b16:	bd90      	pop	{r4, r7, pc}

08001b18 <iis2dlpc_wkup_threshold_get>:
  * @param  val      change the values of wk_ths in reg WAKE_UP_THS
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_wkup_threshold_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8001b18:	b590      	push	{r4, r7, lr}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  iis2dlpc_wake_up_ths_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_WAKE_UP_THS, (uint8_t *) &reg, 1);
 8001b22:	2408      	movs	r4, #8
 8001b24:	193a      	adds	r2, r7, r4
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	2301      	movs	r3, #1
 8001b2a:	2134      	movs	r1, #52	; 0x34
 8001b2c:	f7ff fce7 	bl	80014fe <iis2dlpc_read_reg>
 8001b30:	0003      	movs	r3, r0
 8001b32:	60fb      	str	r3, [r7, #12]
  *val = reg.wk_ths;
 8001b34:	193b      	adds	r3, r7, r4
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	069b      	lsls	r3, r3, #26
 8001b3a:	0e9b      	lsrs	r3, r3, #26
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	001a      	movs	r2, r3
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	701a      	strb	r2, [r3, #0]

  return ret;
 8001b44:	68fb      	ldr	r3, [r7, #12]
}
 8001b46:	0018      	movs	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	b005      	add	sp, #20
 8001b4c:	bd90      	pop	{r4, r7, pc}

08001b4e <iis2dlpc_wkup_dur_set>:
  * @param  val      change the values of wake_dur in reg WAKE_UP_DUR
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_wkup_dur_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001b4e:	b590      	push	{r4, r7, lr}
 8001b50:	b085      	sub	sp, #20
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	000a      	movs	r2, r1
 8001b58:	1cfb      	adds	r3, r7, #3
 8001b5a:	701a      	strb	r2, [r3, #0]
  iis2dlpc_wake_up_dur_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_WAKE_UP_DUR, (uint8_t *) &reg, 1);
 8001b5c:	2408      	movs	r4, #8
 8001b5e:	193a      	adds	r2, r7, r4
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	2301      	movs	r3, #1
 8001b64:	2135      	movs	r1, #53	; 0x35
 8001b66:	f7ff fcca 	bl	80014fe <iis2dlpc_read_reg>
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d117      	bne.n	8001ba4 <iis2dlpc_wkup_dur_set+0x56>
  {
    reg.wake_dur = val;
 8001b74:	1cfb      	adds	r3, r7, #3
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2203      	movs	r2, #3
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	193b      	adds	r3, r7, r4
 8001b80:	2103      	movs	r1, #3
 8001b82:	400a      	ands	r2, r1
 8001b84:	0150      	lsls	r0, r2, #5
 8001b86:	781a      	ldrb	r2, [r3, #0]
 8001b88:	2160      	movs	r1, #96	; 0x60
 8001b8a:	438a      	bics	r2, r1
 8001b8c:	1c11      	adds	r1, r2, #0
 8001b8e:	1c02      	adds	r2, r0, #0
 8001b90:	430a      	orrs	r2, r1
 8001b92:	701a      	strb	r2, [r3, #0]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_WAKE_UP_DUR, (uint8_t *) &reg, 1);
 8001b94:	193a      	adds	r2, r7, r4
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	2301      	movs	r3, #1
 8001b9a:	2135      	movs	r1, #53	; 0x35
 8001b9c:	f7ff fcd0 	bl	8001540 <iis2dlpc_write_reg>
 8001ba0:	0003      	movs	r3, r0
 8001ba2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
}
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	b005      	add	sp, #20
 8001bac:	bd90      	pop	{r4, r7, pc}
	...

08001bb0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bb6:	1dfb      	adds	r3, r7, #7
 8001bb8:	2200      	movs	r2, #0
 8001bba:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <HAL_Init+0x3c>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <HAL_Init+0x3c>)
 8001bc2:	2140      	movs	r1, #64	; 0x40
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bc8:	2001      	movs	r0, #1
 8001bca:	f000 f811 	bl	8001bf0 <HAL_InitTick>
 8001bce:	1e03      	subs	r3, r0, #0
 8001bd0:	d003      	beq.n	8001bda <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001bd2:	1dfb      	adds	r3, r7, #7
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	701a      	strb	r2, [r3, #0]
 8001bd8:	e001      	b.n	8001bde <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bda:	f7ff fab9 	bl	8001150 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bde:	1dfb      	adds	r3, r7, #7
 8001be0:	781b      	ldrb	r3, [r3, #0]
}
 8001be2:	0018      	movs	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	b002      	add	sp, #8
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	46c0      	nop			; (mov r8, r8)
 8001bec:	40022000 	.word	0x40022000

08001bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf0:	b590      	push	{r4, r7, lr}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf8:	4b14      	ldr	r3, [pc, #80]	; (8001c4c <HAL_InitTick+0x5c>)
 8001bfa:	681c      	ldr	r4, [r3, #0]
 8001bfc:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <HAL_InitTick+0x60>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	0019      	movs	r1, r3
 8001c02:	23fa      	movs	r3, #250	; 0xfa
 8001c04:	0098      	lsls	r0, r3, #2
 8001c06:	f7fe fa91 	bl	800012c <__udivsi3>
 8001c0a:	0003      	movs	r3, r0
 8001c0c:	0019      	movs	r1, r3
 8001c0e:	0020      	movs	r0, r4
 8001c10:	f7fe fa8c 	bl	800012c <__udivsi3>
 8001c14:	0003      	movs	r3, r0
 8001c16:	0018      	movs	r0, r3
 8001c18:	f000 f92f 	bl	8001e7a <HAL_SYSTICK_Config>
 8001c1c:	1e03      	subs	r3, r0, #0
 8001c1e:	d001      	beq.n	8001c24 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e00f      	b.n	8001c44 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b03      	cmp	r3, #3
 8001c28:	d80b      	bhi.n	8001c42 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	425b      	negs	r3, r3
 8001c30:	2200      	movs	r2, #0
 8001c32:	0018      	movs	r0, r3
 8001c34:	f000 f8fc 	bl	8001e30 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_InitTick+0x64>)
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	e000      	b.n	8001c44 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
}
 8001c44:	0018      	movs	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	b003      	add	sp, #12
 8001c4a:	bd90      	pop	{r4, r7, pc}
 8001c4c:	20000004 	.word	0x20000004
 8001c50:	2000000c 	.word	0x2000000c
 8001c54:	20000008 	.word	0x20000008

08001c58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c5c:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <HAL_IncTick+0x1c>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	001a      	movs	r2, r3
 8001c62:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <HAL_IncTick+0x20>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	18d2      	adds	r2, r2, r3
 8001c68:	4b03      	ldr	r3, [pc, #12]	; (8001c78 <HAL_IncTick+0x20>)
 8001c6a:	601a      	str	r2, [r3, #0]
}
 8001c6c:	46c0      	nop			; (mov r8, r8)
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	2000000c 	.word	0x2000000c
 8001c78:	2000034c 	.word	0x2000034c

08001c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c80:	4b02      	ldr	r3, [pc, #8]	; (8001c8c <HAL_GetTick+0x10>)
 8001c82:	681b      	ldr	r3, [r3, #0]
}
 8001c84:	0018      	movs	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	2000034c 	.word	0x2000034c

08001c90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c98:	f7ff fff0 	bl	8001c7c <HAL_GetTick>
 8001c9c:	0003      	movs	r3, r0
 8001c9e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	d005      	beq.n	8001cb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001caa:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <HAL_Delay+0x44>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	001a      	movs	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	189b      	adds	r3, r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	f7ff ffe0 	bl	8001c7c <HAL_GetTick>
 8001cbc:	0002      	movs	r2, r0
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d8f7      	bhi.n	8001cb8 <HAL_Delay+0x28>
  {
  }
}
 8001cc8:	46c0      	nop			; (mov r8, r8)
 8001cca:	46c0      	nop			; (mov r8, r8)
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	b004      	add	sp, #16
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	2000000c 	.word	0x2000000c

08001cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	0002      	movs	r2, r0
 8001ce0:	1dfb      	adds	r3, r7, #7
 8001ce2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ce4:	1dfb      	adds	r3, r7, #7
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b7f      	cmp	r3, #127	; 0x7f
 8001cea:	d809      	bhi.n	8001d00 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cec:	1dfb      	adds	r3, r7, #7
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	001a      	movs	r2, r3
 8001cf2:	231f      	movs	r3, #31
 8001cf4:	401a      	ands	r2, r3
 8001cf6:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <__NVIC_EnableIRQ+0x30>)
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	4091      	lsls	r1, r2
 8001cfc:	000a      	movs	r2, r1
 8001cfe:	601a      	str	r2, [r3, #0]
  }
}
 8001d00:	46c0      	nop			; (mov r8, r8)
 8001d02:	46bd      	mov	sp, r7
 8001d04:	b002      	add	sp, #8
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	e000e100 	.word	0xe000e100

08001d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d0c:	b590      	push	{r4, r7, lr}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	0002      	movs	r2, r0
 8001d14:	6039      	str	r1, [r7, #0]
 8001d16:	1dfb      	adds	r3, r7, #7
 8001d18:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d1a:	1dfb      	adds	r3, r7, #7
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b7f      	cmp	r3, #127	; 0x7f
 8001d20:	d828      	bhi.n	8001d74 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d22:	4a2f      	ldr	r2, [pc, #188]	; (8001de0 <__NVIC_SetPriority+0xd4>)
 8001d24:	1dfb      	adds	r3, r7, #7
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	b25b      	sxtb	r3, r3
 8001d2a:	089b      	lsrs	r3, r3, #2
 8001d2c:	33c0      	adds	r3, #192	; 0xc0
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	589b      	ldr	r3, [r3, r2]
 8001d32:	1dfa      	adds	r2, r7, #7
 8001d34:	7812      	ldrb	r2, [r2, #0]
 8001d36:	0011      	movs	r1, r2
 8001d38:	2203      	movs	r2, #3
 8001d3a:	400a      	ands	r2, r1
 8001d3c:	00d2      	lsls	r2, r2, #3
 8001d3e:	21ff      	movs	r1, #255	; 0xff
 8001d40:	4091      	lsls	r1, r2
 8001d42:	000a      	movs	r2, r1
 8001d44:	43d2      	mvns	r2, r2
 8001d46:	401a      	ands	r2, r3
 8001d48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	019b      	lsls	r3, r3, #6
 8001d4e:	22ff      	movs	r2, #255	; 0xff
 8001d50:	401a      	ands	r2, r3
 8001d52:	1dfb      	adds	r3, r7, #7
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	0018      	movs	r0, r3
 8001d58:	2303      	movs	r3, #3
 8001d5a:	4003      	ands	r3, r0
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d60:	481f      	ldr	r0, [pc, #124]	; (8001de0 <__NVIC_SetPriority+0xd4>)
 8001d62:	1dfb      	adds	r3, r7, #7
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	b25b      	sxtb	r3, r3
 8001d68:	089b      	lsrs	r3, r3, #2
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	33c0      	adds	r3, #192	; 0xc0
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001d72:	e031      	b.n	8001dd8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d74:	4a1b      	ldr	r2, [pc, #108]	; (8001de4 <__NVIC_SetPriority+0xd8>)
 8001d76:	1dfb      	adds	r3, r7, #7
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	230f      	movs	r3, #15
 8001d7e:	400b      	ands	r3, r1
 8001d80:	3b08      	subs	r3, #8
 8001d82:	089b      	lsrs	r3, r3, #2
 8001d84:	3306      	adds	r3, #6
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	18d3      	adds	r3, r2, r3
 8001d8a:	3304      	adds	r3, #4
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	1dfa      	adds	r2, r7, #7
 8001d90:	7812      	ldrb	r2, [r2, #0]
 8001d92:	0011      	movs	r1, r2
 8001d94:	2203      	movs	r2, #3
 8001d96:	400a      	ands	r2, r1
 8001d98:	00d2      	lsls	r2, r2, #3
 8001d9a:	21ff      	movs	r1, #255	; 0xff
 8001d9c:	4091      	lsls	r1, r2
 8001d9e:	000a      	movs	r2, r1
 8001da0:	43d2      	mvns	r2, r2
 8001da2:	401a      	ands	r2, r3
 8001da4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	019b      	lsls	r3, r3, #6
 8001daa:	22ff      	movs	r2, #255	; 0xff
 8001dac:	401a      	ands	r2, r3
 8001dae:	1dfb      	adds	r3, r7, #7
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	0018      	movs	r0, r3
 8001db4:	2303      	movs	r3, #3
 8001db6:	4003      	ands	r3, r0
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dbc:	4809      	ldr	r0, [pc, #36]	; (8001de4 <__NVIC_SetPriority+0xd8>)
 8001dbe:	1dfb      	adds	r3, r7, #7
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	001c      	movs	r4, r3
 8001dc4:	230f      	movs	r3, #15
 8001dc6:	4023      	ands	r3, r4
 8001dc8:	3b08      	subs	r3, #8
 8001dca:	089b      	lsrs	r3, r3, #2
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	3306      	adds	r3, #6
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	18c3      	adds	r3, r0, r3
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	601a      	str	r2, [r3, #0]
}
 8001dd8:	46c0      	nop			; (mov r8, r8)
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	b003      	add	sp, #12
 8001dde:	bd90      	pop	{r4, r7, pc}
 8001de0:	e000e100 	.word	0xe000e100
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	1e5a      	subs	r2, r3, #1
 8001df4:	2380      	movs	r3, #128	; 0x80
 8001df6:	045b      	lsls	r3, r3, #17
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d301      	bcc.n	8001e00 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e010      	b.n	8001e22 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e00:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <SysTick_Config+0x44>)
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	3a01      	subs	r2, #1
 8001e06:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e08:	2301      	movs	r3, #1
 8001e0a:	425b      	negs	r3, r3
 8001e0c:	2103      	movs	r1, #3
 8001e0e:	0018      	movs	r0, r3
 8001e10:	f7ff ff7c 	bl	8001d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e14:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <SysTick_Config+0x44>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e1a:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <SysTick_Config+0x44>)
 8001e1c:	2207      	movs	r2, #7
 8001e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	0018      	movs	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	b002      	add	sp, #8
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	e000e010 	.word	0xe000e010

08001e30 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60b9      	str	r1, [r7, #8]
 8001e38:	607a      	str	r2, [r7, #4]
 8001e3a:	210f      	movs	r1, #15
 8001e3c:	187b      	adds	r3, r7, r1
 8001e3e:	1c02      	adds	r2, r0, #0
 8001e40:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	187b      	adds	r3, r7, r1
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	b25b      	sxtb	r3, r3
 8001e4a:	0011      	movs	r1, r2
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	f7ff ff5d 	bl	8001d0c <__NVIC_SetPriority>
}
 8001e52:	46c0      	nop			; (mov r8, r8)
 8001e54:	46bd      	mov	sp, r7
 8001e56:	b004      	add	sp, #16
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	0002      	movs	r2, r0
 8001e62:	1dfb      	adds	r3, r7, #7
 8001e64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e66:	1dfb      	adds	r3, r7, #7
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	b25b      	sxtb	r3, r3
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	f7ff ff33 	bl	8001cd8 <__NVIC_EnableIRQ>
}
 8001e72:	46c0      	nop			; (mov r8, r8)
 8001e74:	46bd      	mov	sp, r7
 8001e76:	b002      	add	sp, #8
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	0018      	movs	r0, r3
 8001e86:	f7ff ffaf 	bl	8001de8 <SysTick_Config>
 8001e8a:	0003      	movs	r3, r0
}
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	b002      	add	sp, #8
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e9c:	230f      	movs	r3, #15
 8001e9e:	18fb      	adds	r3, r7, r3
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2225      	movs	r2, #37	; 0x25
 8001ea8:	5c9b      	ldrb	r3, [r3, r2]
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d008      	beq.n	8001ec2 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2204      	movs	r2, #4
 8001eb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2224      	movs	r2, #36	; 0x24
 8001eba:	2100      	movs	r1, #0
 8001ebc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e024      	b.n	8001f0c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	210e      	movs	r1, #14
 8001ece:	438a      	bics	r2, r1
 8001ed0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2101      	movs	r1, #1
 8001ede:	438a      	bics	r2, r1
 8001ee0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee6:	221c      	movs	r2, #28
 8001ee8:	401a      	ands	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	2101      	movs	r1, #1
 8001ef0:	4091      	lsls	r1, r2
 8001ef2:	000a      	movs	r2, r1
 8001ef4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2225      	movs	r2, #37	; 0x25
 8001efa:	2101      	movs	r1, #1
 8001efc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2224      	movs	r2, #36	; 0x24
 8001f02:	2100      	movs	r1, #0
 8001f04:	5499      	strb	r1, [r3, r2]

    return status;
 8001f06:	230f      	movs	r3, #15
 8001f08:	18fb      	adds	r3, r7, r3
 8001f0a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	b004      	add	sp, #16
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f1c:	210f      	movs	r1, #15
 8001f1e:	187b      	adds	r3, r7, r1
 8001f20:	2200      	movs	r2, #0
 8001f22:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2225      	movs	r2, #37	; 0x25
 8001f28:	5c9b      	ldrb	r3, [r3, r2]
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d006      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2204      	movs	r2, #4
 8001f34:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001f36:	187b      	adds	r3, r7, r1
 8001f38:	2201      	movs	r2, #1
 8001f3a:	701a      	strb	r2, [r3, #0]
 8001f3c:	e02a      	b.n	8001f94 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	210e      	movs	r1, #14
 8001f4a:	438a      	bics	r2, r1
 8001f4c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2101      	movs	r1, #1
 8001f5a:	438a      	bics	r2, r1
 8001f5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	221c      	movs	r2, #28
 8001f64:	401a      	ands	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	4091      	lsls	r1, r2
 8001f6e:	000a      	movs	r2, r1
 8001f70:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2225      	movs	r2, #37	; 0x25
 8001f76:	2101      	movs	r1, #1
 8001f78:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2224      	movs	r2, #36	; 0x24
 8001f7e:	2100      	movs	r1, #0
 8001f80:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d004      	beq.n	8001f94 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	0010      	movs	r0, r2
 8001f92:	4798      	blx	r3
    }
  }
  return status;
 8001f94:	230f      	movs	r3, #15
 8001f96:	18fb      	adds	r3, r7, r3
 8001f98:	781b      	ldrb	r3, [r3, #0]
}
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	b004      	add	sp, #16
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001fba:	e155      	b.n	8002268 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	4091      	lsls	r1, r2
 8001fc6:	000a      	movs	r2, r1
 8001fc8:	4013      	ands	r3, r2
 8001fca:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d100      	bne.n	8001fd4 <HAL_GPIO_Init+0x30>
 8001fd2:	e146      	b.n	8002262 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	2203      	movs	r2, #3
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d005      	beq.n	8001fec <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2203      	movs	r2, #3
 8001fe6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d130      	bne.n	800204e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	409a      	lsls	r2, r3
 8001ffa:	0013      	movs	r3, r2
 8001ffc:	43da      	mvns	r2, r3
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	4013      	ands	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	68da      	ldr	r2, [r3, #12]
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	409a      	lsls	r2, r3
 800200e:	0013      	movs	r3, r2
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	4313      	orrs	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002022:	2201      	movs	r2, #1
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	409a      	lsls	r2, r3
 8002028:	0013      	movs	r3, r2
 800202a:	43da      	mvns	r2, r3
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4013      	ands	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	091b      	lsrs	r3, r3, #4
 8002038:	2201      	movs	r2, #1
 800203a:	401a      	ands	r2, r3
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	409a      	lsls	r2, r3
 8002040:	0013      	movs	r3, r2
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	4313      	orrs	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2203      	movs	r2, #3
 8002054:	4013      	ands	r3, r2
 8002056:	2b03      	cmp	r3, #3
 8002058:	d017      	beq.n	800208a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	2203      	movs	r2, #3
 8002066:	409a      	lsls	r2, r3
 8002068:	0013      	movs	r3, r2
 800206a:	43da      	mvns	r2, r3
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	4013      	ands	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	689a      	ldr	r2, [r3, #8]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	409a      	lsls	r2, r3
 800207c:	0013      	movs	r3, r2
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	4313      	orrs	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2203      	movs	r2, #3
 8002090:	4013      	ands	r3, r2
 8002092:	2b02      	cmp	r3, #2
 8002094:	d123      	bne.n	80020de <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	08da      	lsrs	r2, r3, #3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3208      	adds	r2, #8
 800209e:	0092      	lsls	r2, r2, #2
 80020a0:	58d3      	ldr	r3, [r2, r3]
 80020a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	2207      	movs	r2, #7
 80020a8:	4013      	ands	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	220f      	movs	r2, #15
 80020ae:	409a      	lsls	r2, r3
 80020b0:	0013      	movs	r3, r2
 80020b2:	43da      	mvns	r2, r3
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	4013      	ands	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	691a      	ldr	r2, [r3, #16]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2107      	movs	r1, #7
 80020c2:	400b      	ands	r3, r1
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	409a      	lsls	r2, r3
 80020c8:	0013      	movs	r3, r2
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	08da      	lsrs	r2, r3, #3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3208      	adds	r2, #8
 80020d8:	0092      	lsls	r2, r2, #2
 80020da:	6939      	ldr	r1, [r7, #16]
 80020dc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	2203      	movs	r2, #3
 80020ea:	409a      	lsls	r2, r3
 80020ec:	0013      	movs	r3, r2
 80020ee:	43da      	mvns	r2, r3
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	4013      	ands	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2203      	movs	r2, #3
 80020fc:	401a      	ands	r2, r3
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	409a      	lsls	r2, r3
 8002104:	0013      	movs	r3, r2
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	4313      	orrs	r3, r2
 800210a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	23c0      	movs	r3, #192	; 0xc0
 8002118:	029b      	lsls	r3, r3, #10
 800211a:	4013      	ands	r3, r2
 800211c:	d100      	bne.n	8002120 <HAL_GPIO_Init+0x17c>
 800211e:	e0a0      	b.n	8002262 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002120:	4b57      	ldr	r3, [pc, #348]	; (8002280 <HAL_GPIO_Init+0x2dc>)
 8002122:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002124:	4b56      	ldr	r3, [pc, #344]	; (8002280 <HAL_GPIO_Init+0x2dc>)
 8002126:	2101      	movs	r1, #1
 8002128:	430a      	orrs	r2, r1
 800212a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800212c:	4a55      	ldr	r2, [pc, #340]	; (8002284 <HAL_GPIO_Init+0x2e0>)
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	089b      	lsrs	r3, r3, #2
 8002132:	3302      	adds	r3, #2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	589b      	ldr	r3, [r3, r2]
 8002138:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	2203      	movs	r2, #3
 800213e:	4013      	ands	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	220f      	movs	r2, #15
 8002144:	409a      	lsls	r2, r3
 8002146:	0013      	movs	r3, r2
 8002148:	43da      	mvns	r2, r3
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	4013      	ands	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	23a0      	movs	r3, #160	; 0xa0
 8002154:	05db      	lsls	r3, r3, #23
 8002156:	429a      	cmp	r2, r3
 8002158:	d01f      	beq.n	800219a <HAL_GPIO_Init+0x1f6>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a4a      	ldr	r2, [pc, #296]	; (8002288 <HAL_GPIO_Init+0x2e4>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d019      	beq.n	8002196 <HAL_GPIO_Init+0x1f2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a49      	ldr	r2, [pc, #292]	; (800228c <HAL_GPIO_Init+0x2e8>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d013      	beq.n	8002192 <HAL_GPIO_Init+0x1ee>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a48      	ldr	r2, [pc, #288]	; (8002290 <HAL_GPIO_Init+0x2ec>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d00d      	beq.n	800218e <HAL_GPIO_Init+0x1ea>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a47      	ldr	r2, [pc, #284]	; (8002294 <HAL_GPIO_Init+0x2f0>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d007      	beq.n	800218a <HAL_GPIO_Init+0x1e6>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a46      	ldr	r2, [pc, #280]	; (8002298 <HAL_GPIO_Init+0x2f4>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d101      	bne.n	8002186 <HAL_GPIO_Init+0x1e2>
 8002182:	2305      	movs	r3, #5
 8002184:	e00a      	b.n	800219c <HAL_GPIO_Init+0x1f8>
 8002186:	2306      	movs	r3, #6
 8002188:	e008      	b.n	800219c <HAL_GPIO_Init+0x1f8>
 800218a:	2304      	movs	r3, #4
 800218c:	e006      	b.n	800219c <HAL_GPIO_Init+0x1f8>
 800218e:	2303      	movs	r3, #3
 8002190:	e004      	b.n	800219c <HAL_GPIO_Init+0x1f8>
 8002192:	2302      	movs	r3, #2
 8002194:	e002      	b.n	800219c <HAL_GPIO_Init+0x1f8>
 8002196:	2301      	movs	r3, #1
 8002198:	e000      	b.n	800219c <HAL_GPIO_Init+0x1f8>
 800219a:	2300      	movs	r3, #0
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	2103      	movs	r1, #3
 80021a0:	400a      	ands	r2, r1
 80021a2:	0092      	lsls	r2, r2, #2
 80021a4:	4093      	lsls	r3, r2
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021ac:	4935      	ldr	r1, [pc, #212]	; (8002284 <HAL_GPIO_Init+0x2e0>)
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	089b      	lsrs	r3, r3, #2
 80021b2:	3302      	adds	r3, #2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021ba:	4b38      	ldr	r3, [pc, #224]	; (800229c <HAL_GPIO_Init+0x2f8>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	43da      	mvns	r2, r3
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4013      	ands	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685a      	ldr	r2, [r3, #4]
 80021ce:	2380      	movs	r3, #128	; 0x80
 80021d0:	025b      	lsls	r3, r3, #9
 80021d2:	4013      	ands	r3, r2
 80021d4:	d003      	beq.n	80021de <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4313      	orrs	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80021de:	4b2f      	ldr	r3, [pc, #188]	; (800229c <HAL_GPIO_Init+0x2f8>)
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80021e4:	4b2d      	ldr	r3, [pc, #180]	; (800229c <HAL_GPIO_Init+0x2f8>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	43da      	mvns	r2, r3
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4013      	ands	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	2380      	movs	r3, #128	; 0x80
 80021fa:	029b      	lsls	r3, r3, #10
 80021fc:	4013      	ands	r3, r2
 80021fe:	d003      	beq.n	8002208 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	4313      	orrs	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002208:	4b24      	ldr	r3, [pc, #144]	; (800229c <HAL_GPIO_Init+0x2f8>)
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800220e:	4b23      	ldr	r3, [pc, #140]	; (800229c <HAL_GPIO_Init+0x2f8>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	43da      	mvns	r2, r3
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	4013      	ands	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	2380      	movs	r3, #128	; 0x80
 8002224:	035b      	lsls	r3, r3, #13
 8002226:	4013      	ands	r3, r2
 8002228:	d003      	beq.n	8002232 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4313      	orrs	r3, r2
 8002230:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002232:	4b1a      	ldr	r3, [pc, #104]	; (800229c <HAL_GPIO_Init+0x2f8>)
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002238:	4b18      	ldr	r3, [pc, #96]	; (800229c <HAL_GPIO_Init+0x2f8>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	43da      	mvns	r2, r3
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	4013      	ands	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	2380      	movs	r3, #128	; 0x80
 800224e:	039b      	lsls	r3, r3, #14
 8002250:	4013      	ands	r3, r2
 8002252:	d003      	beq.n	800225c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	4313      	orrs	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800225c:	4b0f      	ldr	r3, [pc, #60]	; (800229c <HAL_GPIO_Init+0x2f8>)
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	3301      	adds	r3, #1
 8002266:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	40da      	lsrs	r2, r3
 8002270:	1e13      	subs	r3, r2, #0
 8002272:	d000      	beq.n	8002276 <HAL_GPIO_Init+0x2d2>
 8002274:	e6a2      	b.n	8001fbc <HAL_GPIO_Init+0x18>
  }
}
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	46c0      	nop			; (mov r8, r8)
 800227a:	46bd      	mov	sp, r7
 800227c:	b006      	add	sp, #24
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40021000 	.word	0x40021000
 8002284:	40010000 	.word	0x40010000
 8002288:	50000400 	.word	0x50000400
 800228c:	50000800 	.word	0x50000800
 8002290:	50000c00 	.word	0x50000c00
 8002294:	50001000 	.word	0x50001000
 8002298:	50001c00 	.word	0x50001c00
 800229c:	40010400 	.word	0x40010400

080022a0 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	000a      	movs	r2, r1
 80022aa:	1cbb      	adds	r3, r7, #2
 80022ac:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	1cba      	adds	r2, r7, #2
 80022b4:	8812      	ldrh	r2, [r2, #0]
 80022b6:	4013      	ands	r3, r2
 80022b8:	d004      	beq.n	80022c4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80022ba:	230f      	movs	r3, #15
 80022bc:	18fb      	adds	r3, r7, r3
 80022be:	2201      	movs	r2, #1
 80022c0:	701a      	strb	r2, [r3, #0]
 80022c2:	e003      	b.n	80022cc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022c4:	230f      	movs	r3, #15
 80022c6:	18fb      	adds	r3, r7, r3
 80022c8:	2200      	movs	r2, #0
 80022ca:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80022cc:	230f      	movs	r3, #15
 80022ce:	18fb      	adds	r3, r7, r3
 80022d0:	781b      	ldrb	r3, [r3, #0]
}
 80022d2:	0018      	movs	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	b004      	add	sp, #16
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
 80022e2:	0008      	movs	r0, r1
 80022e4:	0011      	movs	r1, r2
 80022e6:	1cbb      	adds	r3, r7, #2
 80022e8:	1c02      	adds	r2, r0, #0
 80022ea:	801a      	strh	r2, [r3, #0]
 80022ec:	1c7b      	adds	r3, r7, #1
 80022ee:	1c0a      	adds	r2, r1, #0
 80022f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022f2:	1c7b      	adds	r3, r7, #1
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d004      	beq.n	8002304 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022fa:	1cbb      	adds	r3, r7, #2
 80022fc:	881a      	ldrh	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002302:	e003      	b.n	800230c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002304:	1cbb      	adds	r3, r7, #2
 8002306:	881a      	ldrh	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800230c:	46c0      	nop			; (mov r8, r8)
 800230e:	46bd      	mov	sp, r7
 8002310:	b002      	add	sp, #8
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	0002      	movs	r2, r0
 800231c:	1dbb      	adds	r3, r7, #6
 800231e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002320:	4b09      	ldr	r3, [pc, #36]	; (8002348 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002322:	695b      	ldr	r3, [r3, #20]
 8002324:	1dba      	adds	r2, r7, #6
 8002326:	8812      	ldrh	r2, [r2, #0]
 8002328:	4013      	ands	r3, r2
 800232a:	d008      	beq.n	800233e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800232c:	4b06      	ldr	r3, [pc, #24]	; (8002348 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800232e:	1dba      	adds	r2, r7, #6
 8002330:	8812      	ldrh	r2, [r2, #0]
 8002332:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002334:	1dbb      	adds	r3, r7, #6
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	0018      	movs	r0, r3
 800233a:	f7fe fe5b 	bl	8000ff4 <HAL_GPIO_EXTI_Callback>
  }
}
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	46bd      	mov	sp, r7
 8002342:	b002      	add	sp, #8
 8002344:	bd80      	pop	{r7, pc}
 8002346:	46c0      	nop			; (mov r8, r8)
 8002348:	40010400 	.word	0x40010400

0800234c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800234c:	b5b0      	push	{r4, r5, r7, lr}
 800234e:	b08a      	sub	sp, #40	; 0x28
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d102      	bne.n	8002360 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	f000 fbbf 	bl	8002ade <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002360:	4bc9      	ldr	r3, [pc, #804]	; (8002688 <HAL_RCC_OscConfig+0x33c>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	220c      	movs	r2, #12
 8002366:	4013      	ands	r3, r2
 8002368:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800236a:	4bc7      	ldr	r3, [pc, #796]	; (8002688 <HAL_RCC_OscConfig+0x33c>)
 800236c:	68da      	ldr	r2, [r3, #12]
 800236e:	2380      	movs	r3, #128	; 0x80
 8002370:	025b      	lsls	r3, r3, #9
 8002372:	4013      	ands	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2201      	movs	r2, #1
 800237c:	4013      	ands	r3, r2
 800237e:	d100      	bne.n	8002382 <HAL_RCC_OscConfig+0x36>
 8002380:	e07e      	b.n	8002480 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	2b08      	cmp	r3, #8
 8002386:	d007      	beq.n	8002398 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	2b0c      	cmp	r3, #12
 800238c:	d112      	bne.n	80023b4 <HAL_RCC_OscConfig+0x68>
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	2380      	movs	r3, #128	; 0x80
 8002392:	025b      	lsls	r3, r3, #9
 8002394:	429a      	cmp	r2, r3
 8002396:	d10d      	bne.n	80023b4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002398:	4bbb      	ldr	r3, [pc, #748]	; (8002688 <HAL_RCC_OscConfig+0x33c>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	2380      	movs	r3, #128	; 0x80
 800239e:	029b      	lsls	r3, r3, #10
 80023a0:	4013      	ands	r3, r2
 80023a2:	d100      	bne.n	80023a6 <HAL_RCC_OscConfig+0x5a>
 80023a4:	e06b      	b.n	800247e <HAL_RCC_OscConfig+0x132>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d167      	bne.n	800247e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	f000 fb95 	bl	8002ade <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	2380      	movs	r3, #128	; 0x80
 80023ba:	025b      	lsls	r3, r3, #9
 80023bc:	429a      	cmp	r2, r3
 80023be:	d107      	bne.n	80023d0 <HAL_RCC_OscConfig+0x84>
 80023c0:	4bb1      	ldr	r3, [pc, #708]	; (8002688 <HAL_RCC_OscConfig+0x33c>)
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	4bb0      	ldr	r3, [pc, #704]	; (8002688 <HAL_RCC_OscConfig+0x33c>)
 80023c6:	2180      	movs	r1, #128	; 0x80
 80023c8:	0249      	lsls	r1, r1, #9
 80023ca:	430a      	orrs	r2, r1
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	e027      	b.n	8002420 <HAL_RCC_OscConfig+0xd4>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	23a0      	movs	r3, #160	; 0xa0
 80023d6:	02db      	lsls	r3, r3, #11
 80023d8:	429a      	cmp	r2, r3
 80023da:	d10e      	bne.n	80023fa <HAL_RCC_OscConfig+0xae>
 80023dc:	4baa      	ldr	r3, [pc, #680]	; (8002688 <HAL_RCC_OscConfig+0x33c>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	4ba9      	ldr	r3, [pc, #676]	; (8002688 <HAL_RCC_OscConfig+0x33c>)
 80023e2:	2180      	movs	r1, #128	; 0x80
 80023e4:	02c9      	lsls	r1, r1, #11
 80023e6:	430a      	orrs	r2, r1
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	4ba7      	ldr	r3, [pc, #668]	; (8002688 <HAL_RCC_OscConfig+0x33c>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	4ba6      	ldr	r3, [pc, #664]	; (8002688 <HAL_RCC_OscConfig+0x33c>)
 80023f0:	2180      	movs	r1, #128	; 0x80
 80023f2:	0249      	lsls	r1, r1, #9
 80023f4:	430a      	orrs	r2, r1
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	e012      	b.n	8002420 <HAL_RCC_OscConfig+0xd4>
 80023fa:	4ba3      	ldr	r3, [pc, #652]	; (8002688 <HAL_RCC_OscConfig+0x33c>)
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	4ba2      	ldr	r3, [pc, #648]	; (8002688 <HAL_RCC_OscConfig+0x33c>)
 8002400:	49a2      	ldr	r1, [pc, #648]	; (800268c <HAL_RCC_OscConfig+0x340>)
 8002402:	400a      	ands	r2, r1
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	4ba0      	ldr	r3, [pc, #640]	; (8002688 <HAL_RCC_OscConfig+0x33c>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	2380      	movs	r3, #128	; 0x80
 800240c:	025b      	lsls	r3, r3, #9
 800240e:	4013      	ands	r3, r2
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	4b9c      	ldr	r3, [pc, #624]	; (8002688 <HAL_RCC_OscConfig+0x33c>)
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	4b9b      	ldr	r3, [pc, #620]	; (8002688 <HAL_RCC_OscConfig+0x33c>)
 800241a:	499d      	ldr	r1, [pc, #628]	; (8002690 <HAL_RCC_OscConfig+0x344>)
 800241c:	400a      	ands	r2, r1
 800241e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d015      	beq.n	8002454 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002428:	f7ff fc28 	bl	8001c7c <HAL_GetTick>
 800242c:	0003      	movs	r3, r0
 800242e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002430:	e009      	b.n	8002446 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002432:	f7ff fc23 	bl	8001c7c <HAL_GetTick>
 8002436:	0002      	movs	r2, r0
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b64      	cmp	r3, #100	; 0x64
 800243e:	d902      	bls.n	8002446 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	f000 fb4c 	bl	8002ade <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002446:	4b90      	ldr	r3, [pc, #576]	; (8002688 <HAL_RCC_OscConfig+0x33c>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	2380      	movs	r3, #128	; 0x80
 800244c:	029b      	lsls	r3, r3, #10
 800244e:	4013      	ands	r3, r2
 8002450:	d0ef      	beq.n	8002432 <HAL_RCC_OscConfig+0xe6>
 8002452:	e015      	b.n	8002480 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002454:	f7ff fc12 	bl	8001c7c <HAL_GetTick>
 8002458:	0003      	movs	r3, r0
 800245a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800245c:	e008      	b.n	8002470 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800245e:	f7ff fc0d 	bl	8001c7c <HAL_GetTick>
 8002462:	0002      	movs	r2, r0
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b64      	cmp	r3, #100	; 0x64
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e336      	b.n	8002ade <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002470:	4b85      	ldr	r3, [pc, #532]	; (8002688 <HAL_RCC_OscConfig+0x33c>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	2380      	movs	r3, #128	; 0x80
 8002476:	029b      	lsls	r3, r3, #10
 8002478:	4013      	ands	r3, r2
 800247a:	d1f0      	bne.n	800245e <HAL_RCC_OscConfig+0x112>
 800247c:	e000      	b.n	8002480 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800247e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2202      	movs	r2, #2
 8002486:	4013      	ands	r3, r2
 8002488:	d100      	bne.n	800248c <HAL_RCC_OscConfig+0x140>
 800248a:	e099      	b.n	80025c0 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	2220      	movs	r2, #32
 8002496:	4013      	ands	r3, r2
 8002498:	d009      	beq.n	80024ae <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800249a:	4b7b      	ldr	r3, [pc, #492]	; (8002688 <HAL_RCC_OscConfig+0x33c>)
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	4b7a      	ldr	r3, [pc, #488]	; (8002688 <HAL_RCC_OscConfig+0x33c>)
 80024a0:	2120      	movs	r1, #32
 80024a2:	430a      	orrs	r2, r1
 80024a4:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	2220      	movs	r2, #32
 80024aa:	4393      	bics	r3, r2
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	2b04      	cmp	r3, #4
 80024b2:	d005      	beq.n	80024c0 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	2b0c      	cmp	r3, #12
 80024b8:	d13e      	bne.n	8002538 <HAL_RCC_OscConfig+0x1ec>
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d13b      	bne.n	8002538 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80024c0:	4b71      	ldr	r3, [pc, #452]	; (8002688 <HAL_RCC_OscConfig+0x33c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2204      	movs	r2, #4
 80024c6:	4013      	ands	r3, r2
 80024c8:	d004      	beq.n	80024d4 <HAL_RCC_OscConfig+0x188>
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e304      	b.n	8002ade <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d4:	4b6c      	ldr	r3, [pc, #432]	; (8002688 <HAL_RCC_OscConfig+0x33c>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	4a6e      	ldr	r2, [pc, #440]	; (8002694 <HAL_RCC_OscConfig+0x348>)
 80024da:	4013      	ands	r3, r2
 80024dc:	0019      	movs	r1, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	021a      	lsls	r2, r3, #8
 80024e4:	4b68      	ldr	r3, [pc, #416]	; (8002688 <HAL_RCC_OscConfig+0x33c>)
 80024e6:	430a      	orrs	r2, r1
 80024e8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80024ea:	4b67      	ldr	r3, [pc, #412]	; (8002688 <HAL_RCC_OscConfig+0x33c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2209      	movs	r2, #9
 80024f0:	4393      	bics	r3, r2
 80024f2:	0019      	movs	r1, r3
 80024f4:	4b64      	ldr	r3, [pc, #400]	; (8002688 <HAL_RCC_OscConfig+0x33c>)
 80024f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024f8:	430a      	orrs	r2, r1
 80024fa:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024fc:	f000 fc42 	bl	8002d84 <HAL_RCC_GetSysClockFreq>
 8002500:	0001      	movs	r1, r0
 8002502:	4b61      	ldr	r3, [pc, #388]	; (8002688 <HAL_RCC_OscConfig+0x33c>)
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	091b      	lsrs	r3, r3, #4
 8002508:	220f      	movs	r2, #15
 800250a:	4013      	ands	r3, r2
 800250c:	4a62      	ldr	r2, [pc, #392]	; (8002698 <HAL_RCC_OscConfig+0x34c>)
 800250e:	5cd3      	ldrb	r3, [r2, r3]
 8002510:	000a      	movs	r2, r1
 8002512:	40da      	lsrs	r2, r3
 8002514:	4b61      	ldr	r3, [pc, #388]	; (800269c <HAL_RCC_OscConfig+0x350>)
 8002516:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002518:	4b61      	ldr	r3, [pc, #388]	; (80026a0 <HAL_RCC_OscConfig+0x354>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2513      	movs	r5, #19
 800251e:	197c      	adds	r4, r7, r5
 8002520:	0018      	movs	r0, r3
 8002522:	f7ff fb65 	bl	8001bf0 <HAL_InitTick>
 8002526:	0003      	movs	r3, r0
 8002528:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800252a:	197b      	adds	r3, r7, r5
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d046      	beq.n	80025c0 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8002532:	197b      	adds	r3, r7, r5
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	e2d2      	b.n	8002ade <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	2b00      	cmp	r3, #0
 800253c:	d027      	beq.n	800258e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800253e:	4b52      	ldr	r3, [pc, #328]	; (8002688 <HAL_RCC_OscConfig+0x33c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2209      	movs	r2, #9
 8002544:	4393      	bics	r3, r2
 8002546:	0019      	movs	r1, r3
 8002548:	4b4f      	ldr	r3, [pc, #316]	; (8002688 <HAL_RCC_OscConfig+0x33c>)
 800254a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800254c:	430a      	orrs	r2, r1
 800254e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002550:	f7ff fb94 	bl	8001c7c <HAL_GetTick>
 8002554:	0003      	movs	r3, r0
 8002556:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800255a:	f7ff fb8f 	bl	8001c7c <HAL_GetTick>
 800255e:	0002      	movs	r2, r0
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e2b8      	b.n	8002ade <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800256c:	4b46      	ldr	r3, [pc, #280]	; (8002688 <HAL_RCC_OscConfig+0x33c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2204      	movs	r2, #4
 8002572:	4013      	ands	r3, r2
 8002574:	d0f1      	beq.n	800255a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002576:	4b44      	ldr	r3, [pc, #272]	; (8002688 <HAL_RCC_OscConfig+0x33c>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	4a46      	ldr	r2, [pc, #280]	; (8002694 <HAL_RCC_OscConfig+0x348>)
 800257c:	4013      	ands	r3, r2
 800257e:	0019      	movs	r1, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	021a      	lsls	r2, r3, #8
 8002586:	4b40      	ldr	r3, [pc, #256]	; (8002688 <HAL_RCC_OscConfig+0x33c>)
 8002588:	430a      	orrs	r2, r1
 800258a:	605a      	str	r2, [r3, #4]
 800258c:	e018      	b.n	80025c0 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800258e:	4b3e      	ldr	r3, [pc, #248]	; (8002688 <HAL_RCC_OscConfig+0x33c>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	4b3d      	ldr	r3, [pc, #244]	; (8002688 <HAL_RCC_OscConfig+0x33c>)
 8002594:	2101      	movs	r1, #1
 8002596:	438a      	bics	r2, r1
 8002598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259a:	f7ff fb6f 	bl	8001c7c <HAL_GetTick>
 800259e:	0003      	movs	r3, r0
 80025a0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025a4:	f7ff fb6a 	bl	8001c7c <HAL_GetTick>
 80025a8:	0002      	movs	r2, r0
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e293      	b.n	8002ade <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025b6:	4b34      	ldr	r3, [pc, #208]	; (8002688 <HAL_RCC_OscConfig+0x33c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2204      	movs	r2, #4
 80025bc:	4013      	ands	r3, r2
 80025be:	d1f1      	bne.n	80025a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2210      	movs	r2, #16
 80025c6:	4013      	ands	r3, r2
 80025c8:	d100      	bne.n	80025cc <HAL_RCC_OscConfig+0x280>
 80025ca:	e0a2      	b.n	8002712 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d140      	bne.n	8002654 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025d2:	4b2d      	ldr	r3, [pc, #180]	; (8002688 <HAL_RCC_OscConfig+0x33c>)
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	2380      	movs	r3, #128	; 0x80
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4013      	ands	r3, r2
 80025dc:	d005      	beq.n	80025ea <HAL_RCC_OscConfig+0x29e>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e279      	b.n	8002ade <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025ea:	4b27      	ldr	r3, [pc, #156]	; (8002688 <HAL_RCC_OscConfig+0x33c>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	4a2d      	ldr	r2, [pc, #180]	; (80026a4 <HAL_RCC_OscConfig+0x358>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	0019      	movs	r1, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025f8:	4b23      	ldr	r3, [pc, #140]	; (8002688 <HAL_RCC_OscConfig+0x33c>)
 80025fa:	430a      	orrs	r2, r1
 80025fc:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025fe:	4b22      	ldr	r3, [pc, #136]	; (8002688 <HAL_RCC_OscConfig+0x33c>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	021b      	lsls	r3, r3, #8
 8002604:	0a19      	lsrs	r1, r3, #8
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	061a      	lsls	r2, r3, #24
 800260c:	4b1e      	ldr	r3, [pc, #120]	; (8002688 <HAL_RCC_OscConfig+0x33c>)
 800260e:	430a      	orrs	r2, r1
 8002610:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	0b5b      	lsrs	r3, r3, #13
 8002618:	3301      	adds	r3, #1
 800261a:	2280      	movs	r2, #128	; 0x80
 800261c:	0212      	lsls	r2, r2, #8
 800261e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002620:	4b19      	ldr	r3, [pc, #100]	; (8002688 <HAL_RCC_OscConfig+0x33c>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	091b      	lsrs	r3, r3, #4
 8002626:	210f      	movs	r1, #15
 8002628:	400b      	ands	r3, r1
 800262a:	491b      	ldr	r1, [pc, #108]	; (8002698 <HAL_RCC_OscConfig+0x34c>)
 800262c:	5ccb      	ldrb	r3, [r1, r3]
 800262e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002630:	4b1a      	ldr	r3, [pc, #104]	; (800269c <HAL_RCC_OscConfig+0x350>)
 8002632:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002634:	4b1a      	ldr	r3, [pc, #104]	; (80026a0 <HAL_RCC_OscConfig+0x354>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2513      	movs	r5, #19
 800263a:	197c      	adds	r4, r7, r5
 800263c:	0018      	movs	r0, r3
 800263e:	f7ff fad7 	bl	8001bf0 <HAL_InitTick>
 8002642:	0003      	movs	r3, r0
 8002644:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002646:	197b      	adds	r3, r7, r5
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d061      	beq.n	8002712 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800264e:	197b      	adds	r3, r7, r5
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	e244      	b.n	8002ade <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	69db      	ldr	r3, [r3, #28]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d040      	beq.n	80026de <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800265c:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <HAL_RCC_OscConfig+0x33c>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4b09      	ldr	r3, [pc, #36]	; (8002688 <HAL_RCC_OscConfig+0x33c>)
 8002662:	2180      	movs	r1, #128	; 0x80
 8002664:	0049      	lsls	r1, r1, #1
 8002666:	430a      	orrs	r2, r1
 8002668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266a:	f7ff fb07 	bl	8001c7c <HAL_GetTick>
 800266e:	0003      	movs	r3, r0
 8002670:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002672:	e019      	b.n	80026a8 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002674:	f7ff fb02 	bl	8001c7c <HAL_GetTick>
 8002678:	0002      	movs	r2, r0
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d912      	bls.n	80026a8 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e22b      	b.n	8002ade <HAL_RCC_OscConfig+0x792>
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	40021000 	.word	0x40021000
 800268c:	fffeffff 	.word	0xfffeffff
 8002690:	fffbffff 	.word	0xfffbffff
 8002694:	ffffe0ff 	.word	0xffffe0ff
 8002698:	08006250 	.word	0x08006250
 800269c:	20000004 	.word	0x20000004
 80026a0:	20000008 	.word	0x20000008
 80026a4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80026a8:	4bca      	ldr	r3, [pc, #808]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	2380      	movs	r3, #128	; 0x80
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4013      	ands	r3, r2
 80026b2:	d0df      	beq.n	8002674 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026b4:	4bc7      	ldr	r3, [pc, #796]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	4ac7      	ldr	r2, [pc, #796]	; (80029d8 <HAL_RCC_OscConfig+0x68c>)
 80026ba:	4013      	ands	r3, r2
 80026bc:	0019      	movs	r1, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026c2:	4bc4      	ldr	r3, [pc, #784]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 80026c4:	430a      	orrs	r2, r1
 80026c6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026c8:	4bc2      	ldr	r3, [pc, #776]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	021b      	lsls	r3, r3, #8
 80026ce:	0a19      	lsrs	r1, r3, #8
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	061a      	lsls	r2, r3, #24
 80026d6:	4bbf      	ldr	r3, [pc, #764]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 80026d8:	430a      	orrs	r2, r1
 80026da:	605a      	str	r2, [r3, #4]
 80026dc:	e019      	b.n	8002712 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026de:	4bbd      	ldr	r3, [pc, #756]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	4bbc      	ldr	r3, [pc, #752]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 80026e4:	49bd      	ldr	r1, [pc, #756]	; (80029dc <HAL_RCC_OscConfig+0x690>)
 80026e6:	400a      	ands	r2, r1
 80026e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ea:	f7ff fac7 	bl	8001c7c <HAL_GetTick>
 80026ee:	0003      	movs	r3, r0
 80026f0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026f4:	f7ff fac2 	bl	8001c7c <HAL_GetTick>
 80026f8:	0002      	movs	r2, r0
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e1eb      	b.n	8002ade <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002706:	4bb3      	ldr	r3, [pc, #716]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	2380      	movs	r3, #128	; 0x80
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4013      	ands	r3, r2
 8002710:	d1f0      	bne.n	80026f4 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2208      	movs	r2, #8
 8002718:	4013      	ands	r3, r2
 800271a:	d036      	beq.n	800278a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d019      	beq.n	8002758 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002724:	4bab      	ldr	r3, [pc, #684]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 8002726:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002728:	4baa      	ldr	r3, [pc, #680]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 800272a:	2101      	movs	r1, #1
 800272c:	430a      	orrs	r2, r1
 800272e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002730:	f7ff faa4 	bl	8001c7c <HAL_GetTick>
 8002734:	0003      	movs	r3, r0
 8002736:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800273a:	f7ff fa9f 	bl	8001c7c <HAL_GetTick>
 800273e:	0002      	movs	r2, r0
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e1c8      	b.n	8002ade <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800274c:	4ba1      	ldr	r3, [pc, #644]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 800274e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002750:	2202      	movs	r2, #2
 8002752:	4013      	ands	r3, r2
 8002754:	d0f1      	beq.n	800273a <HAL_RCC_OscConfig+0x3ee>
 8002756:	e018      	b.n	800278a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002758:	4b9e      	ldr	r3, [pc, #632]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 800275a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800275c:	4b9d      	ldr	r3, [pc, #628]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 800275e:	2101      	movs	r1, #1
 8002760:	438a      	bics	r2, r1
 8002762:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002764:	f7ff fa8a 	bl	8001c7c <HAL_GetTick>
 8002768:	0003      	movs	r3, r0
 800276a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800276e:	f7ff fa85 	bl	8001c7c <HAL_GetTick>
 8002772:	0002      	movs	r2, r0
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e1ae      	b.n	8002ade <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002780:	4b94      	ldr	r3, [pc, #592]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 8002782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002784:	2202      	movs	r2, #2
 8002786:	4013      	ands	r3, r2
 8002788:	d1f1      	bne.n	800276e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2204      	movs	r2, #4
 8002790:	4013      	ands	r3, r2
 8002792:	d100      	bne.n	8002796 <HAL_RCC_OscConfig+0x44a>
 8002794:	e0ae      	b.n	80028f4 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002796:	2023      	movs	r0, #35	; 0x23
 8002798:	183b      	adds	r3, r7, r0
 800279a:	2200      	movs	r2, #0
 800279c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800279e:	4b8d      	ldr	r3, [pc, #564]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 80027a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027a2:	2380      	movs	r3, #128	; 0x80
 80027a4:	055b      	lsls	r3, r3, #21
 80027a6:	4013      	ands	r3, r2
 80027a8:	d109      	bne.n	80027be <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027aa:	4b8a      	ldr	r3, [pc, #552]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 80027ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027ae:	4b89      	ldr	r3, [pc, #548]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 80027b0:	2180      	movs	r1, #128	; 0x80
 80027b2:	0549      	lsls	r1, r1, #21
 80027b4:	430a      	orrs	r2, r1
 80027b6:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80027b8:	183b      	adds	r3, r7, r0
 80027ba:	2201      	movs	r2, #1
 80027bc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027be:	4b88      	ldr	r3, [pc, #544]	; (80029e0 <HAL_RCC_OscConfig+0x694>)
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	2380      	movs	r3, #128	; 0x80
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	4013      	ands	r3, r2
 80027c8:	d11a      	bne.n	8002800 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ca:	4b85      	ldr	r3, [pc, #532]	; (80029e0 <HAL_RCC_OscConfig+0x694>)
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	4b84      	ldr	r3, [pc, #528]	; (80029e0 <HAL_RCC_OscConfig+0x694>)
 80027d0:	2180      	movs	r1, #128	; 0x80
 80027d2:	0049      	lsls	r1, r1, #1
 80027d4:	430a      	orrs	r2, r1
 80027d6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027d8:	f7ff fa50 	bl	8001c7c <HAL_GetTick>
 80027dc:	0003      	movs	r3, r0
 80027de:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e0:	e008      	b.n	80027f4 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e2:	f7ff fa4b 	bl	8001c7c <HAL_GetTick>
 80027e6:	0002      	movs	r2, r0
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b64      	cmp	r3, #100	; 0x64
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e174      	b.n	8002ade <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f4:	4b7a      	ldr	r3, [pc, #488]	; (80029e0 <HAL_RCC_OscConfig+0x694>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	2380      	movs	r3, #128	; 0x80
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	4013      	ands	r3, r2
 80027fe:	d0f0      	beq.n	80027e2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	2380      	movs	r3, #128	; 0x80
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	429a      	cmp	r2, r3
 800280a:	d107      	bne.n	800281c <HAL_RCC_OscConfig+0x4d0>
 800280c:	4b71      	ldr	r3, [pc, #452]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 800280e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002810:	4b70      	ldr	r3, [pc, #448]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 8002812:	2180      	movs	r1, #128	; 0x80
 8002814:	0049      	lsls	r1, r1, #1
 8002816:	430a      	orrs	r2, r1
 8002818:	651a      	str	r2, [r3, #80]	; 0x50
 800281a:	e031      	b.n	8002880 <HAL_RCC_OscConfig+0x534>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10c      	bne.n	800283e <HAL_RCC_OscConfig+0x4f2>
 8002824:	4b6b      	ldr	r3, [pc, #428]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 8002826:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002828:	4b6a      	ldr	r3, [pc, #424]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 800282a:	496c      	ldr	r1, [pc, #432]	; (80029dc <HAL_RCC_OscConfig+0x690>)
 800282c:	400a      	ands	r2, r1
 800282e:	651a      	str	r2, [r3, #80]	; 0x50
 8002830:	4b68      	ldr	r3, [pc, #416]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 8002832:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002834:	4b67      	ldr	r3, [pc, #412]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 8002836:	496b      	ldr	r1, [pc, #428]	; (80029e4 <HAL_RCC_OscConfig+0x698>)
 8002838:	400a      	ands	r2, r1
 800283a:	651a      	str	r2, [r3, #80]	; 0x50
 800283c:	e020      	b.n	8002880 <HAL_RCC_OscConfig+0x534>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689a      	ldr	r2, [r3, #8]
 8002842:	23a0      	movs	r3, #160	; 0xa0
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	429a      	cmp	r2, r3
 8002848:	d10e      	bne.n	8002868 <HAL_RCC_OscConfig+0x51c>
 800284a:	4b62      	ldr	r3, [pc, #392]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 800284c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800284e:	4b61      	ldr	r3, [pc, #388]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 8002850:	2180      	movs	r1, #128	; 0x80
 8002852:	00c9      	lsls	r1, r1, #3
 8002854:	430a      	orrs	r2, r1
 8002856:	651a      	str	r2, [r3, #80]	; 0x50
 8002858:	4b5e      	ldr	r3, [pc, #376]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 800285a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800285c:	4b5d      	ldr	r3, [pc, #372]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 800285e:	2180      	movs	r1, #128	; 0x80
 8002860:	0049      	lsls	r1, r1, #1
 8002862:	430a      	orrs	r2, r1
 8002864:	651a      	str	r2, [r3, #80]	; 0x50
 8002866:	e00b      	b.n	8002880 <HAL_RCC_OscConfig+0x534>
 8002868:	4b5a      	ldr	r3, [pc, #360]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 800286a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800286c:	4b59      	ldr	r3, [pc, #356]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 800286e:	495b      	ldr	r1, [pc, #364]	; (80029dc <HAL_RCC_OscConfig+0x690>)
 8002870:	400a      	ands	r2, r1
 8002872:	651a      	str	r2, [r3, #80]	; 0x50
 8002874:	4b57      	ldr	r3, [pc, #348]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 8002876:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002878:	4b56      	ldr	r3, [pc, #344]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 800287a:	495a      	ldr	r1, [pc, #360]	; (80029e4 <HAL_RCC_OscConfig+0x698>)
 800287c:	400a      	ands	r2, r1
 800287e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d015      	beq.n	80028b4 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002888:	f7ff f9f8 	bl	8001c7c <HAL_GetTick>
 800288c:	0003      	movs	r3, r0
 800288e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002890:	e009      	b.n	80028a6 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002892:	f7ff f9f3 	bl	8001c7c <HAL_GetTick>
 8002896:	0002      	movs	r2, r0
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	4a52      	ldr	r2, [pc, #328]	; (80029e8 <HAL_RCC_OscConfig+0x69c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e11b      	b.n	8002ade <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028a6:	4b4b      	ldr	r3, [pc, #300]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 80028a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028aa:	2380      	movs	r3, #128	; 0x80
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4013      	ands	r3, r2
 80028b0:	d0ef      	beq.n	8002892 <HAL_RCC_OscConfig+0x546>
 80028b2:	e014      	b.n	80028de <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b4:	f7ff f9e2 	bl	8001c7c <HAL_GetTick>
 80028b8:	0003      	movs	r3, r0
 80028ba:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028bc:	e009      	b.n	80028d2 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028be:	f7ff f9dd 	bl	8001c7c <HAL_GetTick>
 80028c2:	0002      	movs	r2, r0
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	4a47      	ldr	r2, [pc, #284]	; (80029e8 <HAL_RCC_OscConfig+0x69c>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e105      	b.n	8002ade <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028d2:	4b40      	ldr	r3, [pc, #256]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 80028d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028d6:	2380      	movs	r3, #128	; 0x80
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4013      	ands	r3, r2
 80028dc:	d1ef      	bne.n	80028be <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028de:	2323      	movs	r3, #35	; 0x23
 80028e0:	18fb      	adds	r3, r7, r3
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d105      	bne.n	80028f4 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e8:	4b3a      	ldr	r3, [pc, #232]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 80028ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028ec:	4b39      	ldr	r3, [pc, #228]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 80028ee:	493f      	ldr	r1, [pc, #252]	; (80029ec <HAL_RCC_OscConfig+0x6a0>)
 80028f0:	400a      	ands	r2, r1
 80028f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2220      	movs	r2, #32
 80028fa:	4013      	ands	r3, r2
 80028fc:	d049      	beq.n	8002992 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d026      	beq.n	8002954 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002906:	4b33      	ldr	r3, [pc, #204]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	4b32      	ldr	r3, [pc, #200]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 800290c:	2101      	movs	r1, #1
 800290e:	430a      	orrs	r2, r1
 8002910:	609a      	str	r2, [r3, #8]
 8002912:	4b30      	ldr	r3, [pc, #192]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 8002914:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002916:	4b2f      	ldr	r3, [pc, #188]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 8002918:	2101      	movs	r1, #1
 800291a:	430a      	orrs	r2, r1
 800291c:	635a      	str	r2, [r3, #52]	; 0x34
 800291e:	4b34      	ldr	r3, [pc, #208]	; (80029f0 <HAL_RCC_OscConfig+0x6a4>)
 8002920:	6a1a      	ldr	r2, [r3, #32]
 8002922:	4b33      	ldr	r3, [pc, #204]	; (80029f0 <HAL_RCC_OscConfig+0x6a4>)
 8002924:	2180      	movs	r1, #128	; 0x80
 8002926:	0189      	lsls	r1, r1, #6
 8002928:	430a      	orrs	r2, r1
 800292a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292c:	f7ff f9a6 	bl	8001c7c <HAL_GetTick>
 8002930:	0003      	movs	r3, r0
 8002932:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002936:	f7ff f9a1 	bl	8001c7c <HAL_GetTick>
 800293a:	0002      	movs	r2, r0
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e0ca      	b.n	8002ade <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002948:	4b22      	ldr	r3, [pc, #136]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	2202      	movs	r2, #2
 800294e:	4013      	ands	r3, r2
 8002950:	d0f1      	beq.n	8002936 <HAL_RCC_OscConfig+0x5ea>
 8002952:	e01e      	b.n	8002992 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002954:	4b1f      	ldr	r3, [pc, #124]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	4b1e      	ldr	r3, [pc, #120]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 800295a:	2101      	movs	r1, #1
 800295c:	438a      	bics	r2, r1
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	4b23      	ldr	r3, [pc, #140]	; (80029f0 <HAL_RCC_OscConfig+0x6a4>)
 8002962:	6a1a      	ldr	r2, [r3, #32]
 8002964:	4b22      	ldr	r3, [pc, #136]	; (80029f0 <HAL_RCC_OscConfig+0x6a4>)
 8002966:	4923      	ldr	r1, [pc, #140]	; (80029f4 <HAL_RCC_OscConfig+0x6a8>)
 8002968:	400a      	ands	r2, r1
 800296a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296c:	f7ff f986 	bl	8001c7c <HAL_GetTick>
 8002970:	0003      	movs	r3, r0
 8002972:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002976:	f7ff f981 	bl	8001c7c <HAL_GetTick>
 800297a:	0002      	movs	r2, r0
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e0aa      	b.n	8002ade <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002988:	4b12      	ldr	r3, [pc, #72]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	2202      	movs	r2, #2
 800298e:	4013      	ands	r3, r2
 8002990:	d1f1      	bne.n	8002976 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002996:	2b00      	cmp	r3, #0
 8002998:	d100      	bne.n	800299c <HAL_RCC_OscConfig+0x650>
 800299a:	e09f      	b.n	8002adc <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	2b0c      	cmp	r3, #12
 80029a0:	d100      	bne.n	80029a4 <HAL_RCC_OscConfig+0x658>
 80029a2:	e078      	b.n	8002a96 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d159      	bne.n	8002a60 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ac:	4b09      	ldr	r3, [pc, #36]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <HAL_RCC_OscConfig+0x688>)
 80029b2:	4911      	ldr	r1, [pc, #68]	; (80029f8 <HAL_RCC_OscConfig+0x6ac>)
 80029b4:	400a      	ands	r2, r1
 80029b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b8:	f7ff f960 	bl	8001c7c <HAL_GetTick>
 80029bc:	0003      	movs	r3, r0
 80029be:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80029c0:	e01c      	b.n	80029fc <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029c2:	f7ff f95b 	bl	8001c7c <HAL_GetTick>
 80029c6:	0002      	movs	r2, r0
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d915      	bls.n	80029fc <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e084      	b.n	8002ade <HAL_RCC_OscConfig+0x792>
 80029d4:	40021000 	.word	0x40021000
 80029d8:	ffff1fff 	.word	0xffff1fff
 80029dc:	fffffeff 	.word	0xfffffeff
 80029e0:	40007000 	.word	0x40007000
 80029e4:	fffffbff 	.word	0xfffffbff
 80029e8:	00001388 	.word	0x00001388
 80029ec:	efffffff 	.word	0xefffffff
 80029f0:	40010000 	.word	0x40010000
 80029f4:	ffffdfff 	.word	0xffffdfff
 80029f8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80029fc:	4b3a      	ldr	r3, [pc, #232]	; (8002ae8 <HAL_RCC_OscConfig+0x79c>)
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	2380      	movs	r3, #128	; 0x80
 8002a02:	049b      	lsls	r3, r3, #18
 8002a04:	4013      	ands	r3, r2
 8002a06:	d1dc      	bne.n	80029c2 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a08:	4b37      	ldr	r3, [pc, #220]	; (8002ae8 <HAL_RCC_OscConfig+0x79c>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	4a37      	ldr	r2, [pc, #220]	; (8002aec <HAL_RCC_OscConfig+0x7a0>)
 8002a0e:	4013      	ands	r3, r2
 8002a10:	0019      	movs	r1, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a20:	431a      	orrs	r2, r3
 8002a22:	4b31      	ldr	r3, [pc, #196]	; (8002ae8 <HAL_RCC_OscConfig+0x79c>)
 8002a24:	430a      	orrs	r2, r1
 8002a26:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a28:	4b2f      	ldr	r3, [pc, #188]	; (8002ae8 <HAL_RCC_OscConfig+0x79c>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	4b2e      	ldr	r3, [pc, #184]	; (8002ae8 <HAL_RCC_OscConfig+0x79c>)
 8002a2e:	2180      	movs	r1, #128	; 0x80
 8002a30:	0449      	lsls	r1, r1, #17
 8002a32:	430a      	orrs	r2, r1
 8002a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a36:	f7ff f921 	bl	8001c7c <HAL_GetTick>
 8002a3a:	0003      	movs	r3, r0
 8002a3c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a40:	f7ff f91c 	bl	8001c7c <HAL_GetTick>
 8002a44:	0002      	movs	r2, r0
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e045      	b.n	8002ade <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002a52:	4b25      	ldr	r3, [pc, #148]	; (8002ae8 <HAL_RCC_OscConfig+0x79c>)
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	2380      	movs	r3, #128	; 0x80
 8002a58:	049b      	lsls	r3, r3, #18
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d0f0      	beq.n	8002a40 <HAL_RCC_OscConfig+0x6f4>
 8002a5e:	e03d      	b.n	8002adc <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a60:	4b21      	ldr	r3, [pc, #132]	; (8002ae8 <HAL_RCC_OscConfig+0x79c>)
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	4b20      	ldr	r3, [pc, #128]	; (8002ae8 <HAL_RCC_OscConfig+0x79c>)
 8002a66:	4922      	ldr	r1, [pc, #136]	; (8002af0 <HAL_RCC_OscConfig+0x7a4>)
 8002a68:	400a      	ands	r2, r1
 8002a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6c:	f7ff f906 	bl	8001c7c <HAL_GetTick>
 8002a70:	0003      	movs	r3, r0
 8002a72:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a76:	f7ff f901 	bl	8001c7c <HAL_GetTick>
 8002a7a:	0002      	movs	r2, r0
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e02a      	b.n	8002ade <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002a88:	4b17      	ldr	r3, [pc, #92]	; (8002ae8 <HAL_RCC_OscConfig+0x79c>)
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	2380      	movs	r3, #128	; 0x80
 8002a8e:	049b      	lsls	r3, r3, #18
 8002a90:	4013      	ands	r3, r2
 8002a92:	d1f0      	bne.n	8002a76 <HAL_RCC_OscConfig+0x72a>
 8002a94:	e022      	b.n	8002adc <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d101      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e01d      	b.n	8002ade <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002aa2:	4b11      	ldr	r3, [pc, #68]	; (8002ae8 <HAL_RCC_OscConfig+0x79c>)
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	2380      	movs	r3, #128	; 0x80
 8002aac:	025b      	lsls	r3, r3, #9
 8002aae:	401a      	ands	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d10f      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	23f0      	movs	r3, #240	; 0xf0
 8002abc:	039b      	lsls	r3, r3, #14
 8002abe:	401a      	ands	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d107      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	23c0      	movs	r3, #192	; 0xc0
 8002acc:	041b      	lsls	r3, r3, #16
 8002ace:	401a      	ands	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d001      	beq.n	8002adc <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e000      	b.n	8002ade <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	0018      	movs	r0, r3
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	b00a      	add	sp, #40	; 0x28
 8002ae4:	bdb0      	pop	{r4, r5, r7, pc}
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	ff02ffff 	.word	0xff02ffff
 8002af0:	feffffff 	.word	0xfeffffff

08002af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002af4:	b5b0      	push	{r4, r5, r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e128      	b.n	8002d5a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b08:	4b96      	ldr	r3, [pc, #600]	; (8002d64 <HAL_RCC_ClockConfig+0x270>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	4013      	ands	r3, r2
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d91e      	bls.n	8002b54 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b16:	4b93      	ldr	r3, [pc, #588]	; (8002d64 <HAL_RCC_ClockConfig+0x270>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	4393      	bics	r3, r2
 8002b1e:	0019      	movs	r1, r3
 8002b20:	4b90      	ldr	r3, [pc, #576]	; (8002d64 <HAL_RCC_ClockConfig+0x270>)
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b28:	f7ff f8a8 	bl	8001c7c <HAL_GetTick>
 8002b2c:	0003      	movs	r3, r0
 8002b2e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b30:	e009      	b.n	8002b46 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b32:	f7ff f8a3 	bl	8001c7c <HAL_GetTick>
 8002b36:	0002      	movs	r2, r0
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	4a8a      	ldr	r2, [pc, #552]	; (8002d68 <HAL_RCC_ClockConfig+0x274>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e109      	b.n	8002d5a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b46:	4b87      	ldr	r3, [pc, #540]	; (8002d64 <HAL_RCC_ClockConfig+0x270>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d1ee      	bne.n	8002b32 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2202      	movs	r2, #2
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d009      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b5e:	4b83      	ldr	r3, [pc, #524]	; (8002d6c <HAL_RCC_ClockConfig+0x278>)
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	22f0      	movs	r2, #240	; 0xf0
 8002b64:	4393      	bics	r3, r2
 8002b66:	0019      	movs	r1, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	4b7f      	ldr	r3, [pc, #508]	; (8002d6c <HAL_RCC_ClockConfig+0x278>)
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2201      	movs	r2, #1
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d100      	bne.n	8002b7e <HAL_RCC_ClockConfig+0x8a>
 8002b7c:	e089      	b.n	8002c92 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d107      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b86:	4b79      	ldr	r3, [pc, #484]	; (8002d6c <HAL_RCC_ClockConfig+0x278>)
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	2380      	movs	r3, #128	; 0x80
 8002b8c:	029b      	lsls	r3, r3, #10
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d120      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e0e1      	b.n	8002d5a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b03      	cmp	r3, #3
 8002b9c:	d107      	bne.n	8002bae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b9e:	4b73      	ldr	r3, [pc, #460]	; (8002d6c <HAL_RCC_ClockConfig+0x278>)
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	2380      	movs	r3, #128	; 0x80
 8002ba4:	049b      	lsls	r3, r3, #18
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	d114      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e0d5      	b.n	8002d5a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d106      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bb6:	4b6d      	ldr	r3, [pc, #436]	; (8002d6c <HAL_RCC_ClockConfig+0x278>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2204      	movs	r2, #4
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d109      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e0ca      	b.n	8002d5a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002bc4:	4b69      	ldr	r3, [pc, #420]	; (8002d6c <HAL_RCC_ClockConfig+0x278>)
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	2380      	movs	r3, #128	; 0x80
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4013      	ands	r3, r2
 8002bce:	d101      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e0c2      	b.n	8002d5a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bd4:	4b65      	ldr	r3, [pc, #404]	; (8002d6c <HAL_RCC_ClockConfig+0x278>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	2203      	movs	r2, #3
 8002bda:	4393      	bics	r3, r2
 8002bdc:	0019      	movs	r1, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	4b62      	ldr	r3, [pc, #392]	; (8002d6c <HAL_RCC_ClockConfig+0x278>)
 8002be4:	430a      	orrs	r2, r1
 8002be6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002be8:	f7ff f848 	bl	8001c7c <HAL_GetTick>
 8002bec:	0003      	movs	r3, r0
 8002bee:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d111      	bne.n	8002c1c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bf8:	e009      	b.n	8002c0e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bfa:	f7ff f83f 	bl	8001c7c <HAL_GetTick>
 8002bfe:	0002      	movs	r2, r0
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	4a58      	ldr	r2, [pc, #352]	; (8002d68 <HAL_RCC_ClockConfig+0x274>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e0a5      	b.n	8002d5a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c0e:	4b57      	ldr	r3, [pc, #348]	; (8002d6c <HAL_RCC_ClockConfig+0x278>)
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	220c      	movs	r2, #12
 8002c14:	4013      	ands	r3, r2
 8002c16:	2b08      	cmp	r3, #8
 8002c18:	d1ef      	bne.n	8002bfa <HAL_RCC_ClockConfig+0x106>
 8002c1a:	e03a      	b.n	8002c92 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2b03      	cmp	r3, #3
 8002c22:	d111      	bne.n	8002c48 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c24:	e009      	b.n	8002c3a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c26:	f7ff f829 	bl	8001c7c <HAL_GetTick>
 8002c2a:	0002      	movs	r2, r0
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	4a4d      	ldr	r2, [pc, #308]	; (8002d68 <HAL_RCC_ClockConfig+0x274>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e08f      	b.n	8002d5a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c3a:	4b4c      	ldr	r3, [pc, #304]	; (8002d6c <HAL_RCC_ClockConfig+0x278>)
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	220c      	movs	r2, #12
 8002c40:	4013      	ands	r3, r2
 8002c42:	2b0c      	cmp	r3, #12
 8002c44:	d1ef      	bne.n	8002c26 <HAL_RCC_ClockConfig+0x132>
 8002c46:	e024      	b.n	8002c92 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d11b      	bne.n	8002c88 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c50:	e009      	b.n	8002c66 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c52:	f7ff f813 	bl	8001c7c <HAL_GetTick>
 8002c56:	0002      	movs	r2, r0
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	4a42      	ldr	r2, [pc, #264]	; (8002d68 <HAL_RCC_ClockConfig+0x274>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e079      	b.n	8002d5a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c66:	4b41      	ldr	r3, [pc, #260]	; (8002d6c <HAL_RCC_ClockConfig+0x278>)
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	220c      	movs	r2, #12
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d1ef      	bne.n	8002c52 <HAL_RCC_ClockConfig+0x15e>
 8002c72:	e00e      	b.n	8002c92 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c74:	f7ff f802 	bl	8001c7c <HAL_GetTick>
 8002c78:	0002      	movs	r2, r0
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	4a3a      	ldr	r2, [pc, #232]	; (8002d68 <HAL_RCC_ClockConfig+0x274>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e068      	b.n	8002d5a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c88:	4b38      	ldr	r3, [pc, #224]	; (8002d6c <HAL_RCC_ClockConfig+0x278>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	220c      	movs	r2, #12
 8002c8e:	4013      	ands	r3, r2
 8002c90:	d1f0      	bne.n	8002c74 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c92:	4b34      	ldr	r3, [pc, #208]	; (8002d64 <HAL_RCC_ClockConfig+0x270>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2201      	movs	r2, #1
 8002c98:	4013      	ands	r3, r2
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d21e      	bcs.n	8002cde <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca0:	4b30      	ldr	r3, [pc, #192]	; (8002d64 <HAL_RCC_ClockConfig+0x270>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	4393      	bics	r3, r2
 8002ca8:	0019      	movs	r1, r3
 8002caa:	4b2e      	ldr	r3, [pc, #184]	; (8002d64 <HAL_RCC_ClockConfig+0x270>)
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002cb2:	f7fe ffe3 	bl	8001c7c <HAL_GetTick>
 8002cb6:	0003      	movs	r3, r0
 8002cb8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cba:	e009      	b.n	8002cd0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cbc:	f7fe ffde 	bl	8001c7c <HAL_GetTick>
 8002cc0:	0002      	movs	r2, r0
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	4a28      	ldr	r2, [pc, #160]	; (8002d68 <HAL_RCC_ClockConfig+0x274>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e044      	b.n	8002d5a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd0:	4b24      	ldr	r3, [pc, #144]	; (8002d64 <HAL_RCC_ClockConfig+0x270>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d1ee      	bne.n	8002cbc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2204      	movs	r2, #4
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	d009      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ce8:	4b20      	ldr	r3, [pc, #128]	; (8002d6c <HAL_RCC_ClockConfig+0x278>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	4a20      	ldr	r2, [pc, #128]	; (8002d70 <HAL_RCC_ClockConfig+0x27c>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	0019      	movs	r1, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68da      	ldr	r2, [r3, #12]
 8002cf6:	4b1d      	ldr	r3, [pc, #116]	; (8002d6c <HAL_RCC_ClockConfig+0x278>)
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2208      	movs	r2, #8
 8002d02:	4013      	ands	r3, r2
 8002d04:	d00a      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d06:	4b19      	ldr	r3, [pc, #100]	; (8002d6c <HAL_RCC_ClockConfig+0x278>)
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	4a1a      	ldr	r2, [pc, #104]	; (8002d74 <HAL_RCC_ClockConfig+0x280>)
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	0019      	movs	r1, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	00da      	lsls	r2, r3, #3
 8002d16:	4b15      	ldr	r3, [pc, #84]	; (8002d6c <HAL_RCC_ClockConfig+0x278>)
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d1c:	f000 f832 	bl	8002d84 <HAL_RCC_GetSysClockFreq>
 8002d20:	0001      	movs	r1, r0
 8002d22:	4b12      	ldr	r3, [pc, #72]	; (8002d6c <HAL_RCC_ClockConfig+0x278>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	091b      	lsrs	r3, r3, #4
 8002d28:	220f      	movs	r2, #15
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	4a12      	ldr	r2, [pc, #72]	; (8002d78 <HAL_RCC_ClockConfig+0x284>)
 8002d2e:	5cd3      	ldrb	r3, [r2, r3]
 8002d30:	000a      	movs	r2, r1
 8002d32:	40da      	lsrs	r2, r3
 8002d34:	4b11      	ldr	r3, [pc, #68]	; (8002d7c <HAL_RCC_ClockConfig+0x288>)
 8002d36:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d38:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <HAL_RCC_ClockConfig+0x28c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	250b      	movs	r5, #11
 8002d3e:	197c      	adds	r4, r7, r5
 8002d40:	0018      	movs	r0, r3
 8002d42:	f7fe ff55 	bl	8001bf0 <HAL_InitTick>
 8002d46:	0003      	movs	r3, r0
 8002d48:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002d4a:	197b      	adds	r3, r7, r5
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d002      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002d52:	197b      	adds	r3, r7, r5
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	e000      	b.n	8002d5a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	b004      	add	sp, #16
 8002d60:	bdb0      	pop	{r4, r5, r7, pc}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	40022000 	.word	0x40022000
 8002d68:	00001388 	.word	0x00001388
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	fffff8ff 	.word	0xfffff8ff
 8002d74:	ffffc7ff 	.word	0xffffc7ff
 8002d78:	08006250 	.word	0x08006250
 8002d7c:	20000004 	.word	0x20000004
 8002d80:	20000008 	.word	0x20000008

08002d84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d84:	b5b0      	push	{r4, r5, r7, lr}
 8002d86:	b08e      	sub	sp, #56	; 0x38
 8002d88:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002d8a:	4b4c      	ldr	r3, [pc, #304]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x138>)
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d92:	230c      	movs	r3, #12
 8002d94:	4013      	ands	r3, r2
 8002d96:	2b0c      	cmp	r3, #12
 8002d98:	d014      	beq.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x40>
 8002d9a:	d900      	bls.n	8002d9e <HAL_RCC_GetSysClockFreq+0x1a>
 8002d9c:	e07b      	b.n	8002e96 <HAL_RCC_GetSysClockFreq+0x112>
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d002      	beq.n	8002da8 <HAL_RCC_GetSysClockFreq+0x24>
 8002da2:	2b08      	cmp	r3, #8
 8002da4:	d00b      	beq.n	8002dbe <HAL_RCC_GetSysClockFreq+0x3a>
 8002da6:	e076      	b.n	8002e96 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002da8:	4b44      	ldr	r3, [pc, #272]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x138>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2210      	movs	r2, #16
 8002dae:	4013      	ands	r3, r2
 8002db0:	d002      	beq.n	8002db8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002db2:	4b43      	ldr	r3, [pc, #268]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002db4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002db6:	e07c      	b.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002db8:	4b42      	ldr	r3, [pc, #264]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x140>)
 8002dba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002dbc:	e079      	b.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002dbe:	4b42      	ldr	r3, [pc, #264]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x144>)
 8002dc0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002dc2:	e076      	b.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc6:	0c9a      	lsrs	r2, r3, #18
 8002dc8:	230f      	movs	r3, #15
 8002dca:	401a      	ands	r2, r3
 8002dcc:	4b3f      	ldr	r3, [pc, #252]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x148>)
 8002dce:	5c9b      	ldrb	r3, [r3, r2]
 8002dd0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd4:	0d9a      	lsrs	r2, r3, #22
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	4013      	ands	r3, r2
 8002dda:	3301      	adds	r3, #1
 8002ddc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dde:	4b37      	ldr	r3, [pc, #220]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x138>)
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	2380      	movs	r3, #128	; 0x80
 8002de4:	025b      	lsls	r3, r3, #9
 8002de6:	4013      	ands	r3, r2
 8002de8:	d01a      	beq.n	8002e20 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dec:	61bb      	str	r3, [r7, #24]
 8002dee:	2300      	movs	r3, #0
 8002df0:	61fb      	str	r3, [r7, #28]
 8002df2:	4a35      	ldr	r2, [pc, #212]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x144>)
 8002df4:	2300      	movs	r3, #0
 8002df6:	69b8      	ldr	r0, [r7, #24]
 8002df8:	69f9      	ldr	r1, [r7, #28]
 8002dfa:	f7fd fb2d 	bl	8000458 <__aeabi_lmul>
 8002dfe:	0002      	movs	r2, r0
 8002e00:	000b      	movs	r3, r1
 8002e02:	0010      	movs	r0, r2
 8002e04:	0019      	movs	r1, r3
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	613b      	str	r3, [r7, #16]
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	f7fd fb01 	bl	8000418 <__aeabi_uldivmod>
 8002e16:	0002      	movs	r2, r0
 8002e18:	000b      	movs	r3, r1
 8002e1a:	0013      	movs	r3, r2
 8002e1c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e1e:	e037      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002e20:	4b26      	ldr	r3, [pc, #152]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x138>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2210      	movs	r2, #16
 8002e26:	4013      	ands	r3, r2
 8002e28:	d01a      	beq.n	8002e60 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2c:	60bb      	str	r3, [r7, #8]
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60fb      	str	r3, [r7, #12]
 8002e32:	4a23      	ldr	r2, [pc, #140]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002e34:	2300      	movs	r3, #0
 8002e36:	68b8      	ldr	r0, [r7, #8]
 8002e38:	68f9      	ldr	r1, [r7, #12]
 8002e3a:	f7fd fb0d 	bl	8000458 <__aeabi_lmul>
 8002e3e:	0002      	movs	r2, r0
 8002e40:	000b      	movs	r3, r1
 8002e42:	0010      	movs	r0, r2
 8002e44:	0019      	movs	r1, r3
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	603b      	str	r3, [r7, #0]
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	607b      	str	r3, [r7, #4]
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f7fd fae1 	bl	8000418 <__aeabi_uldivmod>
 8002e56:	0002      	movs	r2, r0
 8002e58:	000b      	movs	r3, r1
 8002e5a:	0013      	movs	r3, r2
 8002e5c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e5e:	e017      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e62:	0018      	movs	r0, r3
 8002e64:	2300      	movs	r3, #0
 8002e66:	0019      	movs	r1, r3
 8002e68:	4a16      	ldr	r2, [pc, #88]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x140>)
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	f7fd faf4 	bl	8000458 <__aeabi_lmul>
 8002e70:	0002      	movs	r2, r0
 8002e72:	000b      	movs	r3, r1
 8002e74:	0010      	movs	r0, r2
 8002e76:	0019      	movs	r1, r3
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	001c      	movs	r4, r3
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	001d      	movs	r5, r3
 8002e80:	0022      	movs	r2, r4
 8002e82:	002b      	movs	r3, r5
 8002e84:	f7fd fac8 	bl	8000418 <__aeabi_uldivmod>
 8002e88:	0002      	movs	r2, r0
 8002e8a:	000b      	movs	r3, r1
 8002e8c:	0013      	movs	r3, r2
 8002e8e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e92:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e94:	e00d      	b.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002e96:	4b09      	ldr	r3, [pc, #36]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x138>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	0b5b      	lsrs	r3, r3, #13
 8002e9c:	2207      	movs	r2, #7
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	2280      	movs	r2, #128	; 0x80
 8002ea8:	0212      	lsls	r2, r2, #8
 8002eaa:	409a      	lsls	r2, r3
 8002eac:	0013      	movs	r3, r2
 8002eae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002eb0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	b00e      	add	sp, #56	; 0x38
 8002eba:	bdb0      	pop	{r4, r5, r7, pc}
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	003d0900 	.word	0x003d0900
 8002ec4:	00f42400 	.word	0x00f42400
 8002ec8:	007a1200 	.word	0x007a1200
 8002ecc:	08006268 	.word	0x08006268

08002ed0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ed4:	4b02      	ldr	r3, [pc, #8]	; (8002ee0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
}
 8002ed8:	0018      	movs	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	20000004 	.word	0x20000004

08002ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ee8:	f7ff fff2 	bl	8002ed0 <HAL_RCC_GetHCLKFreq>
 8002eec:	0001      	movs	r1, r0
 8002eee:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	0a1b      	lsrs	r3, r3, #8
 8002ef4:	2207      	movs	r2, #7
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	4a04      	ldr	r2, [pc, #16]	; (8002f0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002efa:	5cd3      	ldrb	r3, [r2, r3]
 8002efc:	40d9      	lsrs	r1, r3
 8002efe:	000b      	movs	r3, r1
}
 8002f00:	0018      	movs	r0, r3
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	46c0      	nop			; (mov r8, r8)
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	08006260 	.word	0x08006260

08002f10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f14:	f7ff ffdc 	bl	8002ed0 <HAL_RCC_GetHCLKFreq>
 8002f18:	0001      	movs	r1, r0
 8002f1a:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	0adb      	lsrs	r3, r3, #11
 8002f20:	2207      	movs	r2, #7
 8002f22:	4013      	ands	r3, r2
 8002f24:	4a04      	ldr	r2, [pc, #16]	; (8002f38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f26:	5cd3      	ldrb	r3, [r2, r3]
 8002f28:	40d9      	lsrs	r1, r3
 8002f2a:	000b      	movs	r3, r1
}
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	40021000 	.word	0x40021000
 8002f38:	08006260 	.word	0x08006260

08002f3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e083      	b.n	8003056 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d109      	bne.n	8002f6a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	2382      	movs	r3, #130	; 0x82
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d009      	beq.n	8002f76 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	61da      	str	r2, [r3, #28]
 8002f68:	e005      	b.n	8002f76 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2251      	movs	r2, #81	; 0x51
 8002f80:	5c9b      	ldrb	r3, [r3, r2]
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d107      	bne.n	8002f98 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2250      	movs	r2, #80	; 0x50
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	0018      	movs	r0, r3
 8002f94:	f7fe f8f0 	bl	8001178 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2251      	movs	r2, #81	; 0x51
 8002f9c:	2102      	movs	r1, #2
 8002f9e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2140      	movs	r1, #64	; 0x40
 8002fac:	438a      	bics	r2, r1
 8002fae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	2382      	movs	r3, #130	; 0x82
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	401a      	ands	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6899      	ldr	r1, [r3, #8]
 8002fbe:	2384      	movs	r3, #132	; 0x84
 8002fc0:	021b      	lsls	r3, r3, #8
 8002fc2:	400b      	ands	r3, r1
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68d9      	ldr	r1, [r3, #12]
 8002fca:	2380      	movs	r3, #128	; 0x80
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	400b      	ands	r3, r1
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	2102      	movs	r1, #2
 8002fd8:	400b      	ands	r3, r1
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	400b      	ands	r3, r1
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6999      	ldr	r1, [r3, #24]
 8002fea:	2380      	movs	r3, #128	; 0x80
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	400b      	ands	r3, r1
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	2138      	movs	r1, #56	; 0x38
 8002ff8:	400b      	ands	r3, r1
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	2180      	movs	r1, #128	; 0x80
 8003002:	400b      	ands	r3, r1
 8003004:	431a      	orrs	r2, r3
 8003006:	0011      	movs	r1, r2
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800300c:	2380      	movs	r3, #128	; 0x80
 800300e:	019b      	lsls	r3, r3, #6
 8003010:	401a      	ands	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	0c1b      	lsrs	r3, r3, #16
 8003020:	2204      	movs	r2, #4
 8003022:	4013      	ands	r3, r2
 8003024:	0019      	movs	r1, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	2210      	movs	r2, #16
 800302c:	401a      	ands	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	69da      	ldr	r2, [r3, #28]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4907      	ldr	r1, [pc, #28]	; (8003060 <HAL_SPI_Init+0x124>)
 8003042:	400a      	ands	r2, r1
 8003044:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2251      	movs	r2, #81	; 0x51
 8003050:	2101      	movs	r1, #1
 8003052:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	0018      	movs	r0, r3
 8003058:	46bd      	mov	sp, r7
 800305a:	b002      	add	sp, #8
 800305c:	bd80      	pop	{r7, pc}
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	fffff7ff 	.word	0xfffff7ff

08003064 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b088      	sub	sp, #32
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	603b      	str	r3, [r7, #0]
 8003070:	1dbb      	adds	r3, r7, #6
 8003072:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003074:	231f      	movs	r3, #31
 8003076:	18fb      	adds	r3, r7, r3
 8003078:	2200      	movs	r2, #0
 800307a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2250      	movs	r2, #80	; 0x50
 8003080:	5c9b      	ldrb	r3, [r3, r2]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d101      	bne.n	800308a <HAL_SPI_Transmit+0x26>
 8003086:	2302      	movs	r3, #2
 8003088:	e13e      	b.n	8003308 <HAL_SPI_Transmit+0x2a4>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2250      	movs	r2, #80	; 0x50
 800308e:	2101      	movs	r1, #1
 8003090:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003092:	f7fe fdf3 	bl	8001c7c <HAL_GetTick>
 8003096:	0003      	movs	r3, r0
 8003098:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800309a:	2316      	movs	r3, #22
 800309c:	18fb      	adds	r3, r7, r3
 800309e:	1dba      	adds	r2, r7, #6
 80030a0:	8812      	ldrh	r2, [r2, #0]
 80030a2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2251      	movs	r2, #81	; 0x51
 80030a8:	5c9b      	ldrb	r3, [r3, r2]
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d004      	beq.n	80030ba <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80030b0:	231f      	movs	r3, #31
 80030b2:	18fb      	adds	r3, r7, r3
 80030b4:	2202      	movs	r2, #2
 80030b6:	701a      	strb	r2, [r3, #0]
    goto error;
 80030b8:	e11b      	b.n	80032f2 <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d003      	beq.n	80030c8 <HAL_SPI_Transmit+0x64>
 80030c0:	1dbb      	adds	r3, r7, #6
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d104      	bne.n	80030d2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80030c8:	231f      	movs	r3, #31
 80030ca:	18fb      	adds	r3, r7, r3
 80030cc:	2201      	movs	r2, #1
 80030ce:	701a      	strb	r2, [r3, #0]
    goto error;
 80030d0:	e10f      	b.n	80032f2 <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2251      	movs	r2, #81	; 0x51
 80030d6:	2103      	movs	r1, #3
 80030d8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	1dba      	adds	r2, r7, #6
 80030ea:	8812      	ldrh	r2, [r2, #0]
 80030ec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	1dba      	adds	r2, r7, #6
 80030f2:	8812      	ldrh	r2, [r2, #0]
 80030f4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	2380      	movs	r3, #128	; 0x80
 800311a:	021b      	lsls	r3, r3, #8
 800311c:	429a      	cmp	r2, r3
 800311e:	d110      	bne.n	8003142 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2140      	movs	r1, #64	; 0x40
 800312c:	438a      	bics	r2, r1
 800312e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2180      	movs	r1, #128	; 0x80
 800313c:	01c9      	lsls	r1, r1, #7
 800313e:	430a      	orrs	r2, r1
 8003140:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2240      	movs	r2, #64	; 0x40
 800314a:	4013      	ands	r3, r2
 800314c:	2b40      	cmp	r3, #64	; 0x40
 800314e:	d007      	beq.n	8003160 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2140      	movs	r1, #64	; 0x40
 800315c:	430a      	orrs	r2, r1
 800315e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	68da      	ldr	r2, [r3, #12]
 8003164:	2380      	movs	r3, #128	; 0x80
 8003166:	011b      	lsls	r3, r3, #4
 8003168:	429a      	cmp	r2, r3
 800316a:	d14e      	bne.n	800320a <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d004      	beq.n	800317e <HAL_SPI_Transmit+0x11a>
 8003174:	2316      	movs	r3, #22
 8003176:	18fb      	adds	r3, r7, r3
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d13f      	bne.n	80031fe <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	881a      	ldrh	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	1c9a      	adds	r2, r3, #2
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003198:	b29b      	uxth	r3, r3
 800319a:	3b01      	subs	r3, #1
 800319c:	b29a      	uxth	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80031a2:	e02c      	b.n	80031fe <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	2202      	movs	r2, #2
 80031ac:	4013      	ands	r3, r2
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d112      	bne.n	80031d8 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	881a      	ldrh	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	1c9a      	adds	r2, r3, #2
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	3b01      	subs	r3, #1
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	86da      	strh	r2, [r3, #54]	; 0x36
 80031d6:	e012      	b.n	80031fe <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031d8:	f7fe fd50 	bl	8001c7c <HAL_GetTick>
 80031dc:	0002      	movs	r2, r0
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d802      	bhi.n	80031ee <HAL_SPI_Transmit+0x18a>
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	3301      	adds	r3, #1
 80031ec:	d102      	bne.n	80031f4 <HAL_SPI_Transmit+0x190>
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d104      	bne.n	80031fe <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 80031f4:	231f      	movs	r3, #31
 80031f6:	18fb      	adds	r3, r7, r3
 80031f8:	2203      	movs	r2, #3
 80031fa:	701a      	strb	r2, [r3, #0]
          goto error;
 80031fc:	e079      	b.n	80032f2 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003202:	b29b      	uxth	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1cd      	bne.n	80031a4 <HAL_SPI_Transmit+0x140>
 8003208:	e04f      	b.n	80032aa <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d004      	beq.n	800321c <HAL_SPI_Transmit+0x1b8>
 8003212:	2316      	movs	r3, #22
 8003214:	18fb      	adds	r3, r7, r3
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d141      	bne.n	80032a0 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	330c      	adds	r3, #12
 8003226:	7812      	ldrb	r2, [r2, #0]
 8003228:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	1c5a      	adds	r2, r3, #1
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003238:	b29b      	uxth	r3, r3
 800323a:	3b01      	subs	r3, #1
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003242:	e02d      	b.n	80032a0 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	2202      	movs	r2, #2
 800324c:	4013      	ands	r3, r2
 800324e:	2b02      	cmp	r3, #2
 8003250:	d113      	bne.n	800327a <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	330c      	adds	r3, #12
 800325c:	7812      	ldrb	r2, [r2, #0]
 800325e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003264:	1c5a      	adds	r2, r3, #1
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800326e:	b29b      	uxth	r3, r3
 8003270:	3b01      	subs	r3, #1
 8003272:	b29a      	uxth	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	86da      	strh	r2, [r3, #54]	; 0x36
 8003278:	e012      	b.n	80032a0 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800327a:	f7fe fcff 	bl	8001c7c <HAL_GetTick>
 800327e:	0002      	movs	r2, r0
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	429a      	cmp	r2, r3
 8003288:	d802      	bhi.n	8003290 <HAL_SPI_Transmit+0x22c>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	3301      	adds	r3, #1
 800328e:	d102      	bne.n	8003296 <HAL_SPI_Transmit+0x232>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d104      	bne.n	80032a0 <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 8003296:	231f      	movs	r3, #31
 8003298:	18fb      	adds	r3, r7, r3
 800329a:	2203      	movs	r2, #3
 800329c:	701a      	strb	r2, [r3, #0]
          goto error;
 800329e:	e028      	b.n	80032f2 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1cc      	bne.n	8003244 <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	6839      	ldr	r1, [r7, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	0018      	movs	r0, r3
 80032b2:	f000 fc07 	bl	8003ac4 <SPI_EndRxTxTransaction>
 80032b6:	1e03      	subs	r3, r0, #0
 80032b8:	d002      	beq.n	80032c0 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2220      	movs	r2, #32
 80032be:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10a      	bne.n	80032de <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032c8:	2300      	movs	r3, #0
 80032ca:	613b      	str	r3, [r7, #16]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	613b      	str	r3, [r7, #16]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	613b      	str	r3, [r7, #16]
 80032dc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d004      	beq.n	80032f0 <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 80032e6:	231f      	movs	r3, #31
 80032e8:	18fb      	adds	r3, r7, r3
 80032ea:	2201      	movs	r2, #1
 80032ec:	701a      	strb	r2, [r3, #0]
 80032ee:	e000      	b.n	80032f2 <HAL_SPI_Transmit+0x28e>
  }

error:
 80032f0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2251      	movs	r2, #81	; 0x51
 80032f6:	2101      	movs	r1, #1
 80032f8:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2250      	movs	r2, #80	; 0x50
 80032fe:	2100      	movs	r1, #0
 8003300:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003302:	231f      	movs	r3, #31
 8003304:	18fb      	adds	r3, r7, r3
 8003306:	781b      	ldrb	r3, [r3, #0]
}
 8003308:	0018      	movs	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	b008      	add	sp, #32
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003310:	b590      	push	{r4, r7, lr}
 8003312:	b089      	sub	sp, #36	; 0x24
 8003314:	af02      	add	r7, sp, #8
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	603b      	str	r3, [r7, #0]
 800331c:	1dbb      	adds	r3, r7, #6
 800331e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003320:	2317      	movs	r3, #23
 8003322:	18fb      	adds	r3, r7, r3
 8003324:	2200      	movs	r2, #0
 8003326:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	2382      	movs	r3, #130	; 0x82
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	429a      	cmp	r2, r3
 8003332:	d113      	bne.n	800335c <HAL_SPI_Receive+0x4c>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10f      	bne.n	800335c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2251      	movs	r2, #81	; 0x51
 8003340:	2104      	movs	r1, #4
 8003342:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003344:	1dbb      	adds	r3, r7, #6
 8003346:	881c      	ldrh	r4, [r3, #0]
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	68b9      	ldr	r1, [r7, #8]
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	0023      	movs	r3, r4
 8003354:	f000 f902 	bl	800355c <HAL_SPI_TransmitReceive>
 8003358:	0003      	movs	r3, r0
 800335a:	e0f9      	b.n	8003550 <HAL_SPI_Receive+0x240>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2250      	movs	r2, #80	; 0x50
 8003360:	5c9b      	ldrb	r3, [r3, r2]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d101      	bne.n	800336a <HAL_SPI_Receive+0x5a>
 8003366:	2302      	movs	r3, #2
 8003368:	e0f2      	b.n	8003550 <HAL_SPI_Receive+0x240>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2250      	movs	r2, #80	; 0x50
 800336e:	2101      	movs	r1, #1
 8003370:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003372:	f7fe fc83 	bl	8001c7c <HAL_GetTick>
 8003376:	0003      	movs	r3, r0
 8003378:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2251      	movs	r2, #81	; 0x51
 800337e:	5c9b      	ldrb	r3, [r3, r2]
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b01      	cmp	r3, #1
 8003384:	d004      	beq.n	8003390 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8003386:	2317      	movs	r3, #23
 8003388:	18fb      	adds	r3, r7, r3
 800338a:	2202      	movs	r2, #2
 800338c:	701a      	strb	r2, [r3, #0]
    goto error;
 800338e:	e0d4      	b.n	800353a <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_SPI_Receive+0x8e>
 8003396:	1dbb      	adds	r3, r7, #6
 8003398:	881b      	ldrh	r3, [r3, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d104      	bne.n	80033a8 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800339e:	2317      	movs	r3, #23
 80033a0:	18fb      	adds	r3, r7, r3
 80033a2:	2201      	movs	r2, #1
 80033a4:	701a      	strb	r2, [r3, #0]
    goto error;
 80033a6:	e0c8      	b.n	800353a <HAL_SPI_Receive+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2251      	movs	r2, #81	; 0x51
 80033ac:	2104      	movs	r1, #4
 80033ae:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	1dba      	adds	r2, r7, #6
 80033c0:	8812      	ldrh	r2, [r2, #0]
 80033c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	1dba      	adds	r2, r7, #6
 80033c8:	8812      	ldrh	r2, [r2, #0]
 80033ca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	689a      	ldr	r2, [r3, #8]
 80033ee:	2380      	movs	r3, #128	; 0x80
 80033f0:	021b      	lsls	r3, r3, #8
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d10f      	bne.n	8003416 <HAL_SPI_Receive+0x106>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2140      	movs	r1, #64	; 0x40
 8003402:	438a      	bics	r2, r1
 8003404:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4951      	ldr	r1, [pc, #324]	; (8003558 <HAL_SPI_Receive+0x248>)
 8003412:	400a      	ands	r2, r1
 8003414:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2240      	movs	r2, #64	; 0x40
 800341e:	4013      	ands	r3, r2
 8003420:	2b40      	cmp	r3, #64	; 0x40
 8003422:	d007      	beq.n	8003434 <HAL_SPI_Receive+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2140      	movs	r1, #64	; 0x40
 8003430:	430a      	orrs	r2, r1
 8003432:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d164      	bne.n	8003506 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800343c:	e02f      	b.n	800349e <HAL_SPI_Receive+0x18e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	2201      	movs	r2, #1
 8003446:	4013      	ands	r3, r2
 8003448:	2b01      	cmp	r3, #1
 800344a:	d115      	bne.n	8003478 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	330c      	adds	r3, #12
 8003452:	001a      	movs	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003458:	7812      	ldrb	r2, [r2, #0]
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003462:	1c5a      	adds	r2, r3, #1
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800346c:	b29b      	uxth	r3, r3
 800346e:	3b01      	subs	r3, #1
 8003470:	b29a      	uxth	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003476:	e012      	b.n	800349e <HAL_SPI_Receive+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003478:	f7fe fc00 	bl	8001c7c <HAL_GetTick>
 800347c:	0002      	movs	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	429a      	cmp	r2, r3
 8003486:	d802      	bhi.n	800348e <HAL_SPI_Receive+0x17e>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	3301      	adds	r3, #1
 800348c:	d102      	bne.n	8003494 <HAL_SPI_Receive+0x184>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d104      	bne.n	800349e <HAL_SPI_Receive+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8003494:	2317      	movs	r3, #23
 8003496:	18fb      	adds	r3, r7, r3
 8003498:	2203      	movs	r2, #3
 800349a:	701a      	strb	r2, [r3, #0]
          goto error;
 800349c:	e04d      	b.n	800353a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1ca      	bne.n	800343e <HAL_SPI_Receive+0x12e>
 80034a8:	e032      	b.n	8003510 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	2201      	movs	r2, #1
 80034b2:	4013      	ands	r3, r2
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d113      	bne.n	80034e0 <HAL_SPI_Receive+0x1d0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68da      	ldr	r2, [r3, #12]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c2:	b292      	uxth	r2, r2
 80034c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ca:	1c9a      	adds	r2, r3, #2
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	3b01      	subs	r3, #1
 80034d8:	b29a      	uxth	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034de:	e012      	b.n	8003506 <HAL_SPI_Receive+0x1f6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034e0:	f7fe fbcc 	bl	8001c7c <HAL_GetTick>
 80034e4:	0002      	movs	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d802      	bhi.n	80034f6 <HAL_SPI_Receive+0x1e6>
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	3301      	adds	r3, #1
 80034f4:	d102      	bne.n	80034fc <HAL_SPI_Receive+0x1ec>
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d104      	bne.n	8003506 <HAL_SPI_Receive+0x1f6>
        {
          errorcode = HAL_TIMEOUT;
 80034fc:	2317      	movs	r3, #23
 80034fe:	18fb      	adds	r3, r7, r3
 8003500:	2203      	movs	r2, #3
 8003502:	701a      	strb	r2, [r3, #0]
          goto error;
 8003504:	e019      	b.n	800353a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800350a:	b29b      	uxth	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1cc      	bne.n	80034aa <HAL_SPI_Receive+0x19a>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	6839      	ldr	r1, [r7, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	0018      	movs	r0, r3
 8003518:	f000 fa6a 	bl	80039f0 <SPI_EndRxTransaction>
 800351c:	1e03      	subs	r3, r0, #0
 800351e:	d002      	beq.n	8003526 <HAL_SPI_Receive+0x216>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2220      	movs	r2, #32
 8003524:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800352a:	2b00      	cmp	r3, #0
 800352c:	d004      	beq.n	8003538 <HAL_SPI_Receive+0x228>
  {
    errorcode = HAL_ERROR;
 800352e:	2317      	movs	r3, #23
 8003530:	18fb      	adds	r3, r7, r3
 8003532:	2201      	movs	r2, #1
 8003534:	701a      	strb	r2, [r3, #0]
 8003536:	e000      	b.n	800353a <HAL_SPI_Receive+0x22a>
  }

error :
 8003538:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2251      	movs	r2, #81	; 0x51
 800353e:	2101      	movs	r1, #1
 8003540:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2250      	movs	r2, #80	; 0x50
 8003546:	2100      	movs	r1, #0
 8003548:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800354a:	2317      	movs	r3, #23
 800354c:	18fb      	adds	r3, r7, r3
 800354e:	781b      	ldrb	r3, [r3, #0]
}
 8003550:	0018      	movs	r0, r3
 8003552:	46bd      	mov	sp, r7
 8003554:	b007      	add	sp, #28
 8003556:	bd90      	pop	{r4, r7, pc}
 8003558:	ffffbfff 	.word	0xffffbfff

0800355c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b08c      	sub	sp, #48	; 0x30
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
 8003568:	001a      	movs	r2, r3
 800356a:	1cbb      	adds	r3, r7, #2
 800356c:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800356e:	2301      	movs	r3, #1
 8003570:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003572:	232b      	movs	r3, #43	; 0x2b
 8003574:	18fb      	adds	r3, r7, r3
 8003576:	2200      	movs	r2, #0
 8003578:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2250      	movs	r2, #80	; 0x50
 800357e:	5c9b      	ldrb	r3, [r3, r2]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d101      	bne.n	8003588 <HAL_SPI_TransmitReceive+0x2c>
 8003584:	2302      	movs	r3, #2
 8003586:	e1a0      	b.n	80038ca <HAL_SPI_TransmitReceive+0x36e>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2250      	movs	r2, #80	; 0x50
 800358c:	2101      	movs	r1, #1
 800358e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003590:	f7fe fb74 	bl	8001c7c <HAL_GetTick>
 8003594:	0003      	movs	r3, r0
 8003596:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003598:	2023      	movs	r0, #35	; 0x23
 800359a:	183b      	adds	r3, r7, r0
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	2151      	movs	r1, #81	; 0x51
 80035a0:	5c52      	ldrb	r2, [r2, r1]
 80035a2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80035aa:	231a      	movs	r3, #26
 80035ac:	18fb      	adds	r3, r7, r3
 80035ae:	1cba      	adds	r2, r7, #2
 80035b0:	8812      	ldrh	r2, [r2, #0]
 80035b2:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80035b4:	183b      	adds	r3, r7, r0
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d011      	beq.n	80035e0 <HAL_SPI_TransmitReceive+0x84>
 80035bc:	69fa      	ldr	r2, [r7, #28]
 80035be:	2382      	movs	r3, #130	; 0x82
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d107      	bne.n	80035d6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d103      	bne.n	80035d6 <HAL_SPI_TransmitReceive+0x7a>
 80035ce:	183b      	adds	r3, r7, r0
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	d004      	beq.n	80035e0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80035d6:	232b      	movs	r3, #43	; 0x2b
 80035d8:	18fb      	adds	r3, r7, r3
 80035da:	2202      	movs	r2, #2
 80035dc:	701a      	strb	r2, [r3, #0]
    goto error;
 80035de:	e169      	b.n	80038b4 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d006      	beq.n	80035f4 <HAL_SPI_TransmitReceive+0x98>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <HAL_SPI_TransmitReceive+0x98>
 80035ec:	1cbb      	adds	r3, r7, #2
 80035ee:	881b      	ldrh	r3, [r3, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d104      	bne.n	80035fe <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80035f4:	232b      	movs	r3, #43	; 0x2b
 80035f6:	18fb      	adds	r3, r7, r3
 80035f8:	2201      	movs	r2, #1
 80035fa:	701a      	strb	r2, [r3, #0]
    goto error;
 80035fc:	e15a      	b.n	80038b4 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2251      	movs	r2, #81	; 0x51
 8003602:	5c9b      	ldrb	r3, [r3, r2]
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b04      	cmp	r3, #4
 8003608:	d003      	beq.n	8003612 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2251      	movs	r2, #81	; 0x51
 800360e:	2105      	movs	r1, #5
 8003610:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	1cba      	adds	r2, r7, #2
 8003622:	8812      	ldrh	r2, [r2, #0]
 8003624:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	1cba      	adds	r2, r7, #2
 800362a:	8812      	ldrh	r2, [r2, #0]
 800362c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	1cba      	adds	r2, r7, #2
 8003638:	8812      	ldrh	r2, [r2, #0]
 800363a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	1cba      	adds	r2, r7, #2
 8003640:	8812      	ldrh	r2, [r2, #0]
 8003642:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2240      	movs	r2, #64	; 0x40
 8003658:	4013      	ands	r3, r2
 800365a:	2b40      	cmp	r3, #64	; 0x40
 800365c:	d007      	beq.n	800366e <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2140      	movs	r1, #64	; 0x40
 800366a:	430a      	orrs	r2, r1
 800366c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	2380      	movs	r3, #128	; 0x80
 8003674:	011b      	lsls	r3, r3, #4
 8003676:	429a      	cmp	r2, r3
 8003678:	d000      	beq.n	800367c <HAL_SPI_TransmitReceive+0x120>
 800367a:	e07a      	b.n	8003772 <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d004      	beq.n	800368e <HAL_SPI_TransmitReceive+0x132>
 8003684:	231a      	movs	r3, #26
 8003686:	18fb      	adds	r3, r7, r3
 8003688:	881b      	ldrh	r3, [r3, #0]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d166      	bne.n	800375c <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	881a      	ldrh	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	1c9a      	adds	r2, r3, #2
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	3b01      	subs	r3, #1
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036b2:	e053      	b.n	800375c <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	2202      	movs	r2, #2
 80036bc:	4013      	ands	r3, r2
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d11b      	bne.n	80036fa <HAL_SPI_TransmitReceive+0x19e>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d016      	beq.n	80036fa <HAL_SPI_TransmitReceive+0x19e>
 80036cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d113      	bne.n	80036fa <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	881a      	ldrh	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	1c9a      	adds	r2, r3, #2
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	3b01      	subs	r3, #1
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036f6:	2300      	movs	r3, #0
 80036f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	2201      	movs	r2, #1
 8003702:	4013      	ands	r3, r2
 8003704:	2b01      	cmp	r3, #1
 8003706:	d119      	bne.n	800373c <HAL_SPI_TransmitReceive+0x1e0>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800370c:	b29b      	uxth	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d014      	beq.n	800373c <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68da      	ldr	r2, [r3, #12]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371c:	b292      	uxth	r2, r2
 800371e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003724:	1c9a      	adds	r2, r3, #2
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800372e:	b29b      	uxth	r3, r3
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003738:	2301      	movs	r3, #1
 800373a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800373c:	f7fe fa9e 	bl	8001c7c <HAL_GetTick>
 8003740:	0002      	movs	r2, r0
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003748:	429a      	cmp	r2, r3
 800374a:	d807      	bhi.n	800375c <HAL_SPI_TransmitReceive+0x200>
 800374c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374e:	3301      	adds	r3, #1
 8003750:	d004      	beq.n	800375c <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 8003752:	232b      	movs	r3, #43	; 0x2b
 8003754:	18fb      	adds	r3, r7, r3
 8003756:	2203      	movs	r2, #3
 8003758:	701a      	strb	r2, [r3, #0]
        goto error;
 800375a:	e0ab      	b.n	80038b4 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003760:	b29b      	uxth	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1a6      	bne.n	80036b4 <HAL_SPI_TransmitReceive+0x158>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800376a:	b29b      	uxth	r3, r3
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1a1      	bne.n	80036b4 <HAL_SPI_TransmitReceive+0x158>
 8003770:	e07f      	b.n	8003872 <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d005      	beq.n	8003786 <HAL_SPI_TransmitReceive+0x22a>
 800377a:	231a      	movs	r3, #26
 800377c:	18fb      	adds	r3, r7, r3
 800377e:	881b      	ldrh	r3, [r3, #0]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d000      	beq.n	8003786 <HAL_SPI_TransmitReceive+0x22a>
 8003784:	e06b      	b.n	800385e <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	330c      	adds	r3, #12
 8003790:	7812      	ldrb	r2, [r2, #0]
 8003792:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003798:	1c5a      	adds	r2, r3, #1
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037ac:	e057      	b.n	800385e <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	2202      	movs	r2, #2
 80037b6:	4013      	ands	r3, r2
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d11c      	bne.n	80037f6 <HAL_SPI_TransmitReceive+0x29a>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d017      	beq.n	80037f6 <HAL_SPI_TransmitReceive+0x29a>
 80037c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d114      	bne.n	80037f6 <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	330c      	adds	r3, #12
 80037d6:	7812      	ldrb	r2, [r2, #0]
 80037d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037de:	1c5a      	adds	r2, r3, #1
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	3b01      	subs	r3, #1
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037f2:	2300      	movs	r3, #0
 80037f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	2201      	movs	r2, #1
 80037fe:	4013      	ands	r3, r2
 8003800:	2b01      	cmp	r3, #1
 8003802:	d119      	bne.n	8003838 <HAL_SPI_TransmitReceive+0x2dc>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003808:	b29b      	uxth	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d014      	beq.n	8003838 <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68da      	ldr	r2, [r3, #12]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003818:	b2d2      	uxtb	r2, r2
 800381a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003820:	1c5a      	adds	r2, r3, #1
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800382a:	b29b      	uxth	r3, r3
 800382c:	3b01      	subs	r3, #1
 800382e:	b29a      	uxth	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003834:	2301      	movs	r3, #1
 8003836:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003838:	f7fe fa20 	bl	8001c7c <HAL_GetTick>
 800383c:	0002      	movs	r2, r0
 800383e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003844:	429a      	cmp	r2, r3
 8003846:	d802      	bhi.n	800384e <HAL_SPI_TransmitReceive+0x2f2>
 8003848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384a:	3301      	adds	r3, #1
 800384c:	d102      	bne.n	8003854 <HAL_SPI_TransmitReceive+0x2f8>
 800384e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003850:	2b00      	cmp	r3, #0
 8003852:	d104      	bne.n	800385e <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 8003854:	232b      	movs	r3, #43	; 0x2b
 8003856:	18fb      	adds	r3, r7, r3
 8003858:	2203      	movs	r2, #3
 800385a:	701a      	strb	r2, [r3, #0]
        goto error;
 800385c:	e02a      	b.n	80038b4 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003862:	b29b      	uxth	r3, r3
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1a2      	bne.n	80037ae <HAL_SPI_TransmitReceive+0x252>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800386c:	b29b      	uxth	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d19d      	bne.n	80037ae <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003874:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	0018      	movs	r0, r3
 800387a:	f000 f923 	bl	8003ac4 <SPI_EndRxTxTransaction>
 800387e:	1e03      	subs	r3, r0, #0
 8003880:	d007      	beq.n	8003892 <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 8003882:	232b      	movs	r3, #43	; 0x2b
 8003884:	18fb      	adds	r3, r7, r3
 8003886:	2201      	movs	r2, #1
 8003888:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2220      	movs	r2, #32
 800388e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003890:	e010      	b.n	80038b4 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10b      	bne.n	80038b2 <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800389a:	2300      	movs	r3, #0
 800389c:	617b      	str	r3, [r7, #20]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	617b      	str	r3, [r7, #20]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	617b      	str	r3, [r7, #20]
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	e000      	b.n	80038b4 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 80038b2:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2251      	movs	r2, #81	; 0x51
 80038b8:	2101      	movs	r1, #1
 80038ba:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2250      	movs	r2, #80	; 0x50
 80038c0:	2100      	movs	r1, #0
 80038c2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80038c4:	232b      	movs	r3, #43	; 0x2b
 80038c6:	18fb      	adds	r3, r7, r3
 80038c8:	781b      	ldrb	r3, [r3, #0]
}
 80038ca:	0018      	movs	r0, r3
 80038cc:	46bd      	mov	sp, r7
 80038ce:	b00c      	add	sp, #48	; 0x30
 80038d0:	bd80      	pop	{r7, pc}
	...

080038d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b088      	sub	sp, #32
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	603b      	str	r3, [r7, #0]
 80038e0:	1dfb      	adds	r3, r7, #7
 80038e2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80038e4:	f7fe f9ca 	bl	8001c7c <HAL_GetTick>
 80038e8:	0002      	movs	r2, r0
 80038ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ec:	1a9b      	subs	r3, r3, r2
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	18d3      	adds	r3, r2, r3
 80038f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80038f4:	f7fe f9c2 	bl	8001c7c <HAL_GetTick>
 80038f8:	0003      	movs	r3, r0
 80038fa:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80038fc:	4b3a      	ldr	r3, [pc, #232]	; (80039e8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	015b      	lsls	r3, r3, #5
 8003902:	0d1b      	lsrs	r3, r3, #20
 8003904:	69fa      	ldr	r2, [r7, #28]
 8003906:	4353      	muls	r3, r2
 8003908:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800390a:	e058      	b.n	80039be <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	3301      	adds	r3, #1
 8003910:	d055      	beq.n	80039be <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003912:	f7fe f9b3 	bl	8001c7c <HAL_GetTick>
 8003916:	0002      	movs	r2, r0
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	69fa      	ldr	r2, [r7, #28]
 800391e:	429a      	cmp	r2, r3
 8003920:	d902      	bls.n	8003928 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d142      	bne.n	80039ae <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	21e0      	movs	r1, #224	; 0xe0
 8003934:	438a      	bics	r2, r1
 8003936:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	2382      	movs	r3, #130	; 0x82
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	429a      	cmp	r2, r3
 8003942:	d113      	bne.n	800396c <SPI_WaitFlagStateUntilTimeout+0x98>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	2380      	movs	r3, #128	; 0x80
 800394a:	021b      	lsls	r3, r3, #8
 800394c:	429a      	cmp	r2, r3
 800394e:	d005      	beq.n	800395c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	689a      	ldr	r2, [r3, #8]
 8003954:	2380      	movs	r3, #128	; 0x80
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	429a      	cmp	r2, r3
 800395a:	d107      	bne.n	800396c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2140      	movs	r1, #64	; 0x40
 8003968:	438a      	bics	r2, r1
 800396a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003970:	2380      	movs	r3, #128	; 0x80
 8003972:	019b      	lsls	r3, r3, #6
 8003974:	429a      	cmp	r2, r3
 8003976:	d110      	bne.n	800399a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	491a      	ldr	r1, [pc, #104]	; (80039ec <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003984:	400a      	ands	r2, r1
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2180      	movs	r1, #128	; 0x80
 8003994:	0189      	lsls	r1, r1, #6
 8003996:	430a      	orrs	r2, r1
 8003998:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2251      	movs	r2, #81	; 0x51
 800399e:	2101      	movs	r1, #1
 80039a0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2250      	movs	r2, #80	; 0x50
 80039a6:	2100      	movs	r1, #0
 80039a8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e017      	b.n	80039de <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d101      	bne.n	80039b8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	3b01      	subs	r3, #1
 80039bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	4013      	ands	r3, r2
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	425a      	negs	r2, r3
 80039ce:	4153      	adcs	r3, r2
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	001a      	movs	r2, r3
 80039d4:	1dfb      	adds	r3, r7, #7
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d197      	bne.n	800390c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	0018      	movs	r0, r3
 80039e0:	46bd      	mov	sp, r7
 80039e2:	b008      	add	sp, #32
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	46c0      	nop			; (mov r8, r8)
 80039e8:	20000004 	.word	0x20000004
 80039ec:	ffffdfff 	.word	0xffffdfff

080039f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af02      	add	r7, sp, #8
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	2382      	movs	r3, #130	; 0x82
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d113      	bne.n	8003a30 <SPI_EndRxTransaction+0x40>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	2380      	movs	r3, #128	; 0x80
 8003a0e:	021b      	lsls	r3, r3, #8
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d005      	beq.n	8003a20 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	2380      	movs	r3, #128	; 0x80
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d107      	bne.n	8003a30 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2140      	movs	r1, #64	; 0x40
 8003a2c:	438a      	bics	r2, r1
 8003a2e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	2382      	movs	r3, #130	; 0x82
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d12b      	bne.n	8003a94 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	2380      	movs	r3, #128	; 0x80
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d012      	beq.n	8003a6e <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a48:	68ba      	ldr	r2, [r7, #8]
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	0013      	movs	r3, r2
 8003a52:	2200      	movs	r2, #0
 8003a54:	2180      	movs	r1, #128	; 0x80
 8003a56:	f7ff ff3d 	bl	80038d4 <SPI_WaitFlagStateUntilTimeout>
 8003a5a:	1e03      	subs	r3, r0, #0
 8003a5c:	d02d      	beq.n	8003aba <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a62:	2220      	movs	r2, #32
 8003a64:	431a      	orrs	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e026      	b.n	8003abc <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	0013      	movs	r3, r2
 8003a78:	2200      	movs	r2, #0
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	f7ff ff2a 	bl	80038d4 <SPI_WaitFlagStateUntilTimeout>
 8003a80:	1e03      	subs	r3, r0, #0
 8003a82:	d01a      	beq.n	8003aba <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a88:	2220      	movs	r2, #32
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e013      	b.n	8003abc <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003a94:	68ba      	ldr	r2, [r7, #8]
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	0013      	movs	r3, r2
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	f7ff ff17 	bl	80038d4 <SPI_WaitFlagStateUntilTimeout>
 8003aa6:	1e03      	subs	r3, r0, #0
 8003aa8:	d007      	beq.n	8003aba <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aae:	2220      	movs	r2, #32
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e000      	b.n	8003abc <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	0018      	movs	r0, r3
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	b004      	add	sp, #16
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b088      	sub	sp, #32
 8003ac8:	af02      	add	r7, sp, #8
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003ad0:	4b1d      	ldr	r3, [pc, #116]	; (8003b48 <SPI_EndRxTxTransaction+0x84>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	491d      	ldr	r1, [pc, #116]	; (8003b4c <SPI_EndRxTxTransaction+0x88>)
 8003ad6:	0018      	movs	r0, r3
 8003ad8:	f7fc fb28 	bl	800012c <__udivsi3>
 8003adc:	0003      	movs	r3, r0
 8003ade:	001a      	movs	r2, r3
 8003ae0:	0013      	movs	r3, r2
 8003ae2:	015b      	lsls	r3, r3, #5
 8003ae4:	1a9b      	subs	r3, r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	189b      	adds	r3, r3, r2
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	2382      	movs	r3, #130	; 0x82
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d112      	bne.n	8003b20 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	0013      	movs	r3, r2
 8003b04:	2200      	movs	r2, #0
 8003b06:	2180      	movs	r1, #128	; 0x80
 8003b08:	f7ff fee4 	bl	80038d4 <SPI_WaitFlagStateUntilTimeout>
 8003b0c:	1e03      	subs	r3, r0, #0
 8003b0e:	d016      	beq.n	8003b3e <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b14:	2220      	movs	r2, #32
 8003b16:	431a      	orrs	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e00f      	b.n	8003b40 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00a      	beq.n	8003b3c <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	2280      	movs	r2, #128	; 0x80
 8003b34:	4013      	ands	r3, r2
 8003b36:	2b80      	cmp	r3, #128	; 0x80
 8003b38:	d0f2      	beq.n	8003b20 <SPI_EndRxTxTransaction+0x5c>
 8003b3a:	e000      	b.n	8003b3e <SPI_EndRxTxTransaction+0x7a>
        break;
 8003b3c:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	0018      	movs	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	b006      	add	sp, #24
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	20000004 	.word	0x20000004
 8003b4c:	016e3600 	.word	0x016e3600

08003b50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e044      	b.n	8003bec <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d107      	bne.n	8003b7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2274      	movs	r2, #116	; 0x74
 8003b6e:	2100      	movs	r1, #0
 8003b70:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	0018      	movs	r0, r3
 8003b76:	f7fd fb43 	bl	8001200 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2224      	movs	r2, #36	; 0x24
 8003b7e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	438a      	bics	r2, r1
 8003b8e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	0018      	movs	r0, r3
 8003b94:	f000 fbce 	bl	8004334 <UART_SetConfig>
 8003b98:	0003      	movs	r3, r0
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d101      	bne.n	8003ba2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e024      	b.n	8003bec <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	0018      	movs	r0, r3
 8003bae:	f000 fe7f 	bl	80048b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	490d      	ldr	r1, [pc, #52]	; (8003bf4 <HAL_UART_Init+0xa4>)
 8003bbe:	400a      	ands	r2, r1
 8003bc0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	212a      	movs	r1, #42	; 0x2a
 8003bce:	438a      	bics	r2, r1
 8003bd0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2101      	movs	r1, #1
 8003bde:	430a      	orrs	r2, r1
 8003be0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	0018      	movs	r0, r3
 8003be6:	f000 ff17 	bl	8004a18 <UART_CheckIdleState>
 8003bea:	0003      	movs	r3, r0
}
 8003bec:	0018      	movs	r0, r3
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	b002      	add	sp, #8
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	ffffb7ff 	.word	0xffffb7ff

08003bf8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b08a      	sub	sp, #40	; 0x28
 8003bfc:	af02      	add	r7, sp, #8
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	603b      	str	r3, [r7, #0]
 8003c04:	1dbb      	adds	r3, r7, #6
 8003c06:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c0c:	2b20      	cmp	r3, #32
 8003c0e:	d000      	beq.n	8003c12 <HAL_UART_Transmit+0x1a>
 8003c10:	e095      	b.n	8003d3e <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <HAL_UART_Transmit+0x28>
 8003c18:	1dbb      	adds	r3, r7, #6
 8003c1a:	881b      	ldrh	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e08d      	b.n	8003d40 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	2380      	movs	r3, #128	; 0x80
 8003c2a:	015b      	lsls	r3, r3, #5
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d109      	bne.n	8003c44 <HAL_UART_Transmit+0x4c>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d105      	bne.n	8003c44 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	d001      	beq.n	8003c44 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e07d      	b.n	8003d40 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2274      	movs	r2, #116	; 0x74
 8003c48:	5c9b      	ldrb	r3, [r3, r2]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d101      	bne.n	8003c52 <HAL_UART_Transmit+0x5a>
 8003c4e:	2302      	movs	r3, #2
 8003c50:	e076      	b.n	8003d40 <HAL_UART_Transmit+0x148>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2274      	movs	r2, #116	; 0x74
 8003c56:	2101      	movs	r1, #1
 8003c58:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2280      	movs	r2, #128	; 0x80
 8003c5e:	2100      	movs	r1, #0
 8003c60:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2221      	movs	r2, #33	; 0x21
 8003c66:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c68:	f7fe f808 	bl	8001c7c <HAL_GetTick>
 8003c6c:	0003      	movs	r3, r0
 8003c6e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	1dba      	adds	r2, r7, #6
 8003c74:	2150      	movs	r1, #80	; 0x50
 8003c76:	8812      	ldrh	r2, [r2, #0]
 8003c78:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	1dba      	adds	r2, r7, #6
 8003c7e:	2152      	movs	r1, #82	; 0x52
 8003c80:	8812      	ldrh	r2, [r2, #0]
 8003c82:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	2380      	movs	r3, #128	; 0x80
 8003c8a:	015b      	lsls	r3, r3, #5
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d108      	bne.n	8003ca2 <HAL_UART_Transmit+0xaa>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d104      	bne.n	8003ca2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	61bb      	str	r3, [r7, #24]
 8003ca0:	e003      	b.n	8003caa <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2274      	movs	r2, #116	; 0x74
 8003cae:	2100      	movs	r1, #0
 8003cb0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003cb2:	e02c      	b.n	8003d0e <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	0013      	movs	r3, r2
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	2180      	movs	r1, #128	; 0x80
 8003cc2:	f000 fef1 	bl	8004aa8 <UART_WaitOnFlagUntilTimeout>
 8003cc6:	1e03      	subs	r3, r0, #0
 8003cc8:	d001      	beq.n	8003cce <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e038      	b.n	8003d40 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10b      	bne.n	8003cec <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	881b      	ldrh	r3, [r3, #0]
 8003cd8:	001a      	movs	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	05d2      	lsls	r2, r2, #23
 8003ce0:	0dd2      	lsrs	r2, r2, #23
 8003ce2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	3302      	adds	r3, #2
 8003ce8:	61bb      	str	r3, [r7, #24]
 8003cea:	e007      	b.n	8003cfc <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	781a      	ldrb	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2252      	movs	r2, #82	; 0x52
 8003d00:	5a9b      	ldrh	r3, [r3, r2]
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	3b01      	subs	r3, #1
 8003d06:	b299      	uxth	r1, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2252      	movs	r2, #82	; 0x52
 8003d0c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2252      	movs	r2, #82	; 0x52
 8003d12:	5a9b      	ldrh	r3, [r3, r2]
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1cc      	bne.n	8003cb4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	0013      	movs	r3, r2
 8003d24:	2200      	movs	r2, #0
 8003d26:	2140      	movs	r1, #64	; 0x40
 8003d28:	f000 febe 	bl	8004aa8 <UART_WaitOnFlagUntilTimeout>
 8003d2c:	1e03      	subs	r3, r0, #0
 8003d2e:	d001      	beq.n	8003d34 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e005      	b.n	8003d40 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2220      	movs	r2, #32
 8003d38:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	e000      	b.n	8003d40 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8003d3e:	2302      	movs	r3, #2
  }
}
 8003d40:	0018      	movs	r0, r3
 8003d42:	46bd      	mov	sp, r7
 8003d44:	b008      	add	sp, #32
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d48:	b590      	push	{r4, r7, lr}
 8003d4a:	b0ab      	sub	sp, #172	; 0xac
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	22a4      	movs	r2, #164	; 0xa4
 8003d58:	18b9      	adds	r1, r7, r2
 8003d5a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	20a0      	movs	r0, #160	; 0xa0
 8003d64:	1839      	adds	r1, r7, r0
 8003d66:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	219c      	movs	r1, #156	; 0x9c
 8003d70:	1879      	adds	r1, r7, r1
 8003d72:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003d74:	0011      	movs	r1, r2
 8003d76:	18bb      	adds	r3, r7, r2
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a99      	ldr	r2, [pc, #612]	; (8003fe0 <HAL_UART_IRQHandler+0x298>)
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	2298      	movs	r2, #152	; 0x98
 8003d80:	18bc      	adds	r4, r7, r2
 8003d82:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003d84:	18bb      	adds	r3, r7, r2
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d114      	bne.n	8003db6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d8c:	187b      	adds	r3, r7, r1
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2220      	movs	r2, #32
 8003d92:	4013      	ands	r3, r2
 8003d94:	d00f      	beq.n	8003db6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d96:	183b      	adds	r3, r7, r0
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	d00a      	beq.n	8003db6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d100      	bne.n	8003daa <HAL_UART_IRQHandler+0x62>
 8003da8:	e298      	b.n	80042dc <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	0010      	movs	r0, r2
 8003db2:	4798      	blx	r3
      }
      return;
 8003db4:	e292      	b.n	80042dc <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003db6:	2398      	movs	r3, #152	; 0x98
 8003db8:	18fb      	adds	r3, r7, r3
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d100      	bne.n	8003dc2 <HAL_UART_IRQHandler+0x7a>
 8003dc0:	e114      	b.n	8003fec <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003dc2:	239c      	movs	r3, #156	; 0x9c
 8003dc4:	18fb      	adds	r3, r7, r3
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	4013      	ands	r3, r2
 8003dcc:	d106      	bne.n	8003ddc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003dce:	23a0      	movs	r3, #160	; 0xa0
 8003dd0:	18fb      	adds	r3, r7, r3
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a83      	ldr	r2, [pc, #524]	; (8003fe4 <HAL_UART_IRQHandler+0x29c>)
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	d100      	bne.n	8003ddc <HAL_UART_IRQHandler+0x94>
 8003dda:	e107      	b.n	8003fec <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ddc:	23a4      	movs	r3, #164	; 0xa4
 8003dde:	18fb      	adds	r3, r7, r3
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2201      	movs	r2, #1
 8003de4:	4013      	ands	r3, r2
 8003de6:	d012      	beq.n	8003e0e <HAL_UART_IRQHandler+0xc6>
 8003de8:	23a0      	movs	r3, #160	; 0xa0
 8003dea:	18fb      	adds	r3, r7, r3
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	2380      	movs	r3, #128	; 0x80
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	4013      	ands	r3, r2
 8003df4:	d00b      	beq.n	8003e0e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2280      	movs	r2, #128	; 0x80
 8003e02:	589b      	ldr	r3, [r3, r2]
 8003e04:	2201      	movs	r2, #1
 8003e06:	431a      	orrs	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2180      	movs	r1, #128	; 0x80
 8003e0c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e0e:	23a4      	movs	r3, #164	; 0xa4
 8003e10:	18fb      	adds	r3, r7, r3
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2202      	movs	r2, #2
 8003e16:	4013      	ands	r3, r2
 8003e18:	d011      	beq.n	8003e3e <HAL_UART_IRQHandler+0xf6>
 8003e1a:	239c      	movs	r3, #156	; 0x9c
 8003e1c:	18fb      	adds	r3, r7, r3
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2201      	movs	r2, #1
 8003e22:	4013      	ands	r3, r2
 8003e24:	d00b      	beq.n	8003e3e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2280      	movs	r2, #128	; 0x80
 8003e32:	589b      	ldr	r3, [r3, r2]
 8003e34:	2204      	movs	r2, #4
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2180      	movs	r1, #128	; 0x80
 8003e3c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e3e:	23a4      	movs	r3, #164	; 0xa4
 8003e40:	18fb      	adds	r3, r7, r3
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2204      	movs	r2, #4
 8003e46:	4013      	ands	r3, r2
 8003e48:	d011      	beq.n	8003e6e <HAL_UART_IRQHandler+0x126>
 8003e4a:	239c      	movs	r3, #156	; 0x9c
 8003e4c:	18fb      	adds	r3, r7, r3
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2201      	movs	r2, #1
 8003e52:	4013      	ands	r3, r2
 8003e54:	d00b      	beq.n	8003e6e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2204      	movs	r2, #4
 8003e5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2280      	movs	r2, #128	; 0x80
 8003e62:	589b      	ldr	r3, [r3, r2]
 8003e64:	2202      	movs	r2, #2
 8003e66:	431a      	orrs	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2180      	movs	r1, #128	; 0x80
 8003e6c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003e6e:	23a4      	movs	r3, #164	; 0xa4
 8003e70:	18fb      	adds	r3, r7, r3
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2208      	movs	r2, #8
 8003e76:	4013      	ands	r3, r2
 8003e78:	d017      	beq.n	8003eaa <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e7a:	23a0      	movs	r3, #160	; 0xa0
 8003e7c:	18fb      	adds	r3, r7, r3
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2220      	movs	r2, #32
 8003e82:	4013      	ands	r3, r2
 8003e84:	d105      	bne.n	8003e92 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003e86:	239c      	movs	r3, #156	; 0x9c
 8003e88:	18fb      	adds	r3, r7, r3
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e90:	d00b      	beq.n	8003eaa <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2208      	movs	r2, #8
 8003e98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2280      	movs	r2, #128	; 0x80
 8003e9e:	589b      	ldr	r3, [r3, r2]
 8003ea0:	2208      	movs	r2, #8
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2180      	movs	r1, #128	; 0x80
 8003ea8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003eaa:	23a4      	movs	r3, #164	; 0xa4
 8003eac:	18fb      	adds	r3, r7, r3
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	2380      	movs	r3, #128	; 0x80
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	d013      	beq.n	8003ee0 <HAL_UART_IRQHandler+0x198>
 8003eb8:	23a0      	movs	r3, #160	; 0xa0
 8003eba:	18fb      	adds	r3, r7, r3
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	2380      	movs	r3, #128	; 0x80
 8003ec0:	04db      	lsls	r3, r3, #19
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	d00c      	beq.n	8003ee0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2280      	movs	r2, #128	; 0x80
 8003ecc:	0112      	lsls	r2, r2, #4
 8003ece:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2280      	movs	r2, #128	; 0x80
 8003ed4:	589b      	ldr	r3, [r3, r2]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2180      	movs	r1, #128	; 0x80
 8003ede:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2280      	movs	r2, #128	; 0x80
 8003ee4:	589b      	ldr	r3, [r3, r2]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d100      	bne.n	8003eec <HAL_UART_IRQHandler+0x1a4>
 8003eea:	e1f9      	b.n	80042e0 <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003eec:	23a4      	movs	r3, #164	; 0xa4
 8003eee:	18fb      	adds	r3, r7, r3
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	d00e      	beq.n	8003f16 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ef8:	23a0      	movs	r3, #160	; 0xa0
 8003efa:	18fb      	adds	r3, r7, r3
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2220      	movs	r2, #32
 8003f00:	4013      	ands	r3, r2
 8003f02:	d008      	beq.n	8003f16 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d004      	beq.n	8003f16 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	0010      	movs	r0, r2
 8003f14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2280      	movs	r2, #128	; 0x80
 8003f1a:	589b      	ldr	r3, [r3, r2]
 8003f1c:	2194      	movs	r1, #148	; 0x94
 8003f1e:	187a      	adds	r2, r7, r1
 8003f20:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	2240      	movs	r2, #64	; 0x40
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	2b40      	cmp	r3, #64	; 0x40
 8003f2e:	d004      	beq.n	8003f3a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003f30:	187b      	adds	r3, r7, r1
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2228      	movs	r2, #40	; 0x28
 8003f36:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f38:	d047      	beq.n	8003fca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	f000 fe77 	bl	8004c30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	2240      	movs	r2, #64	; 0x40
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	2b40      	cmp	r3, #64	; 0x40
 8003f4e:	d137      	bne.n	8003fc0 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f50:	f3ef 8310 	mrs	r3, PRIMASK
 8003f54:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003f56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f58:	2090      	movs	r0, #144	; 0x90
 8003f5a:	183a      	adds	r2, r7, r0
 8003f5c:	6013      	str	r3, [r2, #0]
 8003f5e:	2301      	movs	r3, #1
 8003f60:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f64:	f383 8810 	msr	PRIMASK, r3
}
 8003f68:	46c0      	nop			; (mov r8, r8)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2140      	movs	r1, #64	; 0x40
 8003f76:	438a      	bics	r2, r1
 8003f78:	609a      	str	r2, [r3, #8]
 8003f7a:	183b      	adds	r3, r7, r0
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f82:	f383 8810 	msr	PRIMASK, r3
}
 8003f86:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d012      	beq.n	8003fb6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f94:	4a14      	ldr	r2, [pc, #80]	; (8003fe8 <HAL_UART_IRQHandler+0x2a0>)
 8003f96:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	f7fd ffb9 	bl	8001f14 <HAL_DMA_Abort_IT>
 8003fa2:	1e03      	subs	r3, r0, #0
 8003fa4:	d01a      	beq.n	8003fdc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003faa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb4:	e012      	b.n	8003fdc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	0018      	movs	r0, r3
 8003fba:	f000 f9a7 	bl	800430c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fbe:	e00d      	b.n	8003fdc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	f000 f9a2 	bl	800430c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc8:	e008      	b.n	8003fdc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	0018      	movs	r0, r3
 8003fce:	f000 f99d 	bl	800430c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2280      	movs	r2, #128	; 0x80
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003fda:	e181      	b.n	80042e0 <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fdc:	46c0      	nop			; (mov r8, r8)
    return;
 8003fde:	e17f      	b.n	80042e0 <HAL_UART_IRQHandler+0x598>
 8003fe0:	0000080f 	.word	0x0000080f
 8003fe4:	04000120 	.word	0x04000120
 8003fe8:	08004cf5 	.word	0x08004cf5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d000      	beq.n	8003ff6 <HAL_UART_IRQHandler+0x2ae>
 8003ff4:	e133      	b.n	800425e <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003ff6:	23a4      	movs	r3, #164	; 0xa4
 8003ff8:	18fb      	adds	r3, r7, r3
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2210      	movs	r2, #16
 8003ffe:	4013      	ands	r3, r2
 8004000:	d100      	bne.n	8004004 <HAL_UART_IRQHandler+0x2bc>
 8004002:	e12c      	b.n	800425e <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004004:	23a0      	movs	r3, #160	; 0xa0
 8004006:	18fb      	adds	r3, r7, r3
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2210      	movs	r2, #16
 800400c:	4013      	ands	r3, r2
 800400e:	d100      	bne.n	8004012 <HAL_UART_IRQHandler+0x2ca>
 8004010:	e125      	b.n	800425e <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2210      	movs	r2, #16
 8004018:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	2240      	movs	r2, #64	; 0x40
 8004022:	4013      	ands	r3, r2
 8004024:	2b40      	cmp	r3, #64	; 0x40
 8004026:	d000      	beq.n	800402a <HAL_UART_IRQHandler+0x2e2>
 8004028:	e09d      	b.n	8004166 <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	217e      	movs	r1, #126	; 0x7e
 8004034:	187b      	adds	r3, r7, r1
 8004036:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004038:	187b      	adds	r3, r7, r1
 800403a:	881b      	ldrh	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d100      	bne.n	8004042 <HAL_UART_IRQHandler+0x2fa>
 8004040:	e150      	b.n	80042e4 <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2258      	movs	r2, #88	; 0x58
 8004046:	5a9b      	ldrh	r3, [r3, r2]
 8004048:	187a      	adds	r2, r7, r1
 800404a:	8812      	ldrh	r2, [r2, #0]
 800404c:	429a      	cmp	r2, r3
 800404e:	d300      	bcc.n	8004052 <HAL_UART_IRQHandler+0x30a>
 8004050:	e148      	b.n	80042e4 <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	187a      	adds	r2, r7, r1
 8004056:	215a      	movs	r1, #90	; 0x5a
 8004058:	8812      	ldrh	r2, [r2, #0]
 800405a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2220      	movs	r2, #32
 8004066:	4013      	ands	r3, r2
 8004068:	d16e      	bne.n	8004148 <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800406a:	f3ef 8310 	mrs	r3, PRIMASK
 800406e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004072:	67bb      	str	r3, [r7, #120]	; 0x78
 8004074:	2301      	movs	r3, #1
 8004076:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800407a:	f383 8810 	msr	PRIMASK, r3
}
 800407e:	46c0      	nop			; (mov r8, r8)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	499a      	ldr	r1, [pc, #616]	; (80042f4 <HAL_UART_IRQHandler+0x5ac>)
 800408c:	400a      	ands	r2, r1
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004092:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004096:	f383 8810 	msr	PRIMASK, r3
}
 800409a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800409c:	f3ef 8310 	mrs	r3, PRIMASK
 80040a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80040a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a4:	677b      	str	r3, [r7, #116]	; 0x74
 80040a6:	2301      	movs	r3, #1
 80040a8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040ac:	f383 8810 	msr	PRIMASK, r3
}
 80040b0:	46c0      	nop			; (mov r8, r8)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2101      	movs	r1, #1
 80040be:	438a      	bics	r2, r1
 80040c0:	609a      	str	r2, [r3, #8]
 80040c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040c4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040c8:	f383 8810 	msr	PRIMASK, r3
}
 80040cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ce:	f3ef 8310 	mrs	r3, PRIMASK
 80040d2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80040d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040d6:	673b      	str	r3, [r7, #112]	; 0x70
 80040d8:	2301      	movs	r3, #1
 80040da:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040de:	f383 8810 	msr	PRIMASK, r3
}
 80040e2:	46c0      	nop			; (mov r8, r8)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2140      	movs	r1, #64	; 0x40
 80040f0:	438a      	bics	r2, r1
 80040f2:	609a      	str	r2, [r3, #8]
 80040f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040f6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040fa:	f383 8810 	msr	PRIMASK, r3
}
 80040fe:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2220      	movs	r2, #32
 8004104:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800410c:	f3ef 8310 	mrs	r3, PRIMASK
 8004110:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004112:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004114:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004116:	2301      	movs	r3, #1
 8004118:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800411a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800411c:	f383 8810 	msr	PRIMASK, r3
}
 8004120:	46c0      	nop			; (mov r8, r8)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2110      	movs	r1, #16
 800412e:	438a      	bics	r2, r1
 8004130:	601a      	str	r2, [r3, #0]
 8004132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004134:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004138:	f383 8810 	msr	PRIMASK, r3
}
 800413c:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004142:	0018      	movs	r0, r3
 8004144:	f7fd fea6 	bl	8001e94 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2258      	movs	r2, #88	; 0x58
 800414c:	5a9a      	ldrh	r2, [r3, r2]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	215a      	movs	r1, #90	; 0x5a
 8004152:	5a5b      	ldrh	r3, [r3, r1]
 8004154:	b29b      	uxth	r3, r3
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	b29a      	uxth	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	0011      	movs	r1, r2
 800415e:	0018      	movs	r0, r3
 8004160:	f000 f8dc 	bl	800431c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004164:	e0be      	b.n	80042e4 <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2258      	movs	r2, #88	; 0x58
 800416a:	5a99      	ldrh	r1, [r3, r2]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	225a      	movs	r2, #90	; 0x5a
 8004170:	5a9b      	ldrh	r3, [r3, r2]
 8004172:	b29a      	uxth	r2, r3
 8004174:	208e      	movs	r0, #142	; 0x8e
 8004176:	183b      	adds	r3, r7, r0
 8004178:	1a8a      	subs	r2, r1, r2
 800417a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	225a      	movs	r2, #90	; 0x5a
 8004180:	5a9b      	ldrh	r3, [r3, r2]
 8004182:	b29b      	uxth	r3, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	d100      	bne.n	800418a <HAL_UART_IRQHandler+0x442>
 8004188:	e0ae      	b.n	80042e8 <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 800418a:	183b      	adds	r3, r7, r0
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d100      	bne.n	8004194 <HAL_UART_IRQHandler+0x44c>
 8004192:	e0a9      	b.n	80042e8 <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004194:	f3ef 8310 	mrs	r3, PRIMASK
 8004198:	60fb      	str	r3, [r7, #12]
  return(result);
 800419a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800419c:	2488      	movs	r4, #136	; 0x88
 800419e:	193a      	adds	r2, r7, r4
 80041a0:	6013      	str	r3, [r2, #0]
 80041a2:	2301      	movs	r3, #1
 80041a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	f383 8810 	msr	PRIMASK, r3
}
 80041ac:	46c0      	nop			; (mov r8, r8)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	494f      	ldr	r1, [pc, #316]	; (80042f8 <HAL_UART_IRQHandler+0x5b0>)
 80041ba:	400a      	ands	r2, r1
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	193b      	adds	r3, r7, r4
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f383 8810 	msr	PRIMASK, r3
}
 80041ca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041cc:	f3ef 8310 	mrs	r3, PRIMASK
 80041d0:	61bb      	str	r3, [r7, #24]
  return(result);
 80041d2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d4:	2484      	movs	r4, #132	; 0x84
 80041d6:	193a      	adds	r2, r7, r4
 80041d8:	6013      	str	r3, [r2, #0]
 80041da:	2301      	movs	r3, #1
 80041dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	f383 8810 	msr	PRIMASK, r3
}
 80041e4:	46c0      	nop			; (mov r8, r8)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2101      	movs	r1, #1
 80041f2:	438a      	bics	r2, r1
 80041f4:	609a      	str	r2, [r3, #8]
 80041f6:	193b      	adds	r3, r7, r4
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041fc:	6a3b      	ldr	r3, [r7, #32]
 80041fe:	f383 8810 	msr	PRIMASK, r3
}
 8004202:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2220      	movs	r2, #32
 8004208:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004216:	f3ef 8310 	mrs	r3, PRIMASK
 800421a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800421e:	2480      	movs	r4, #128	; 0x80
 8004220:	193a      	adds	r2, r7, r4
 8004222:	6013      	str	r3, [r2, #0]
 8004224:	2301      	movs	r3, #1
 8004226:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422a:	f383 8810 	msr	PRIMASK, r3
}
 800422e:	46c0      	nop			; (mov r8, r8)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2110      	movs	r1, #16
 800423c:	438a      	bics	r2, r1
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	193b      	adds	r3, r7, r4
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004248:	f383 8810 	msr	PRIMASK, r3
}
 800424c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800424e:	183b      	adds	r3, r7, r0
 8004250:	881a      	ldrh	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	0011      	movs	r1, r2
 8004256:	0018      	movs	r0, r3
 8004258:	f000 f860 	bl	800431c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800425c:	e044      	b.n	80042e8 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800425e:	23a4      	movs	r3, #164	; 0xa4
 8004260:	18fb      	adds	r3, r7, r3
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	2380      	movs	r3, #128	; 0x80
 8004266:	035b      	lsls	r3, r3, #13
 8004268:	4013      	ands	r3, r2
 800426a:	d010      	beq.n	800428e <HAL_UART_IRQHandler+0x546>
 800426c:	239c      	movs	r3, #156	; 0x9c
 800426e:	18fb      	adds	r3, r7, r3
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	2380      	movs	r3, #128	; 0x80
 8004274:	03db      	lsls	r3, r3, #15
 8004276:	4013      	ands	r3, r2
 8004278:	d009      	beq.n	800428e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2280      	movs	r2, #128	; 0x80
 8004280:	0352      	lsls	r2, r2, #13
 8004282:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	0018      	movs	r0, r3
 8004288:	f000 fd76 	bl	8004d78 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800428c:	e02f      	b.n	80042ee <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800428e:	23a4      	movs	r3, #164	; 0xa4
 8004290:	18fb      	adds	r3, r7, r3
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2280      	movs	r2, #128	; 0x80
 8004296:	4013      	ands	r3, r2
 8004298:	d00f      	beq.n	80042ba <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800429a:	23a0      	movs	r3, #160	; 0xa0
 800429c:	18fb      	adds	r3, r7, r3
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2280      	movs	r2, #128	; 0x80
 80042a2:	4013      	ands	r3, r2
 80042a4:	d009      	beq.n	80042ba <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d01e      	beq.n	80042ec <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	0010      	movs	r0, r2
 80042b6:	4798      	blx	r3
    }
    return;
 80042b8:	e018      	b.n	80042ec <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80042ba:	23a4      	movs	r3, #164	; 0xa4
 80042bc:	18fb      	adds	r3, r7, r3
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2240      	movs	r2, #64	; 0x40
 80042c2:	4013      	ands	r3, r2
 80042c4:	d013      	beq.n	80042ee <HAL_UART_IRQHandler+0x5a6>
 80042c6:	23a0      	movs	r3, #160	; 0xa0
 80042c8:	18fb      	adds	r3, r7, r3
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2240      	movs	r2, #64	; 0x40
 80042ce:	4013      	ands	r3, r2
 80042d0:	d00d      	beq.n	80042ee <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	0018      	movs	r0, r3
 80042d6:	f000 fd24 	bl	8004d22 <UART_EndTransmit_IT>
    return;
 80042da:	e008      	b.n	80042ee <HAL_UART_IRQHandler+0x5a6>
      return;
 80042dc:	46c0      	nop			; (mov r8, r8)
 80042de:	e006      	b.n	80042ee <HAL_UART_IRQHandler+0x5a6>
    return;
 80042e0:	46c0      	nop			; (mov r8, r8)
 80042e2:	e004      	b.n	80042ee <HAL_UART_IRQHandler+0x5a6>
      return;
 80042e4:	46c0      	nop			; (mov r8, r8)
 80042e6:	e002      	b.n	80042ee <HAL_UART_IRQHandler+0x5a6>
      return;
 80042e8:	46c0      	nop			; (mov r8, r8)
 80042ea:	e000      	b.n	80042ee <HAL_UART_IRQHandler+0x5a6>
    return;
 80042ec:	46c0      	nop			; (mov r8, r8)
  }

}
 80042ee:	46bd      	mov	sp, r7
 80042f0:	b02b      	add	sp, #172	; 0xac
 80042f2:	bd90      	pop	{r4, r7, pc}
 80042f4:	fffffeff 	.word	0xfffffeff
 80042f8:	fffffedf 	.word	0xfffffedf

080042fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004304:	46c0      	nop			; (mov r8, r8)
 8004306:	46bd      	mov	sp, r7
 8004308:	b002      	add	sp, #8
 800430a:	bd80      	pop	{r7, pc}

0800430c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004314:	46c0      	nop			; (mov r8, r8)
 8004316:	46bd      	mov	sp, r7
 8004318:	b002      	add	sp, #8
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	000a      	movs	r2, r1
 8004326:	1cbb      	adds	r3, r7, #2
 8004328:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800432a:	46c0      	nop			; (mov r8, r8)
 800432c:	46bd      	mov	sp, r7
 800432e:	b002      	add	sp, #8
 8004330:	bd80      	pop	{r7, pc}
	...

08004334 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004334:	b5b0      	push	{r4, r5, r7, lr}
 8004336:	b08e      	sub	sp, #56	; 0x38
 8004338:	af00      	add	r7, sp, #0
 800433a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800433c:	231a      	movs	r3, #26
 800433e:	2218      	movs	r2, #24
 8004340:	4694      	mov	ip, r2
 8004342:	44bc      	add	ip, r7
 8004344:	4463      	add	r3, ip
 8004346:	2200      	movs	r2, #0
 8004348:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	431a      	orrs	r2, r3
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	431a      	orrs	r2, r3
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	4313      	orrs	r3, r2
 8004360:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4ab0      	ldr	r2, [pc, #704]	; (800462c <UART_SetConfig+0x2f8>)
 800436a:	4013      	ands	r3, r2
 800436c:	0019      	movs	r1, r3
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004374:	430a      	orrs	r2, r1
 8004376:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	4aac      	ldr	r2, [pc, #688]	; (8004630 <UART_SetConfig+0x2fc>)
 8004380:	4013      	ands	r3, r2
 8004382:	0019      	movs	r1, r3
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	68da      	ldr	r2, [r3, #12]
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	430a      	orrs	r2, r1
 800438e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4aa6      	ldr	r2, [pc, #664]	; (8004634 <UART_SetConfig+0x300>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d004      	beq.n	80043aa <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043a6:	4313      	orrs	r3, r2
 80043a8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	4aa1      	ldr	r2, [pc, #644]	; (8004638 <UART_SetConfig+0x304>)
 80043b2:	4013      	ands	r3, r2
 80043b4:	0019      	movs	r1, r3
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043bc:	430a      	orrs	r2, r1
 80043be:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a9d      	ldr	r2, [pc, #628]	; (800463c <UART_SetConfig+0x308>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d136      	bne.n	8004438 <UART_SetConfig+0x104>
 80043ca:	4b9d      	ldr	r3, [pc, #628]	; (8004640 <UART_SetConfig+0x30c>)
 80043cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ce:	2203      	movs	r2, #3
 80043d0:	4013      	ands	r3, r2
 80043d2:	2b03      	cmp	r3, #3
 80043d4:	d020      	beq.n	8004418 <UART_SetConfig+0xe4>
 80043d6:	d827      	bhi.n	8004428 <UART_SetConfig+0xf4>
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d00d      	beq.n	80043f8 <UART_SetConfig+0xc4>
 80043dc:	d824      	bhi.n	8004428 <UART_SetConfig+0xf4>
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d002      	beq.n	80043e8 <UART_SetConfig+0xb4>
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d010      	beq.n	8004408 <UART_SetConfig+0xd4>
 80043e6:	e01f      	b.n	8004428 <UART_SetConfig+0xf4>
 80043e8:	231b      	movs	r3, #27
 80043ea:	2218      	movs	r2, #24
 80043ec:	4694      	mov	ip, r2
 80043ee:	44bc      	add	ip, r7
 80043f0:	4463      	add	r3, ip
 80043f2:	2201      	movs	r2, #1
 80043f4:	701a      	strb	r2, [r3, #0]
 80043f6:	e0c5      	b.n	8004584 <UART_SetConfig+0x250>
 80043f8:	231b      	movs	r3, #27
 80043fa:	2218      	movs	r2, #24
 80043fc:	4694      	mov	ip, r2
 80043fe:	44bc      	add	ip, r7
 8004400:	4463      	add	r3, ip
 8004402:	2202      	movs	r2, #2
 8004404:	701a      	strb	r2, [r3, #0]
 8004406:	e0bd      	b.n	8004584 <UART_SetConfig+0x250>
 8004408:	231b      	movs	r3, #27
 800440a:	2218      	movs	r2, #24
 800440c:	4694      	mov	ip, r2
 800440e:	44bc      	add	ip, r7
 8004410:	4463      	add	r3, ip
 8004412:	2204      	movs	r2, #4
 8004414:	701a      	strb	r2, [r3, #0]
 8004416:	e0b5      	b.n	8004584 <UART_SetConfig+0x250>
 8004418:	231b      	movs	r3, #27
 800441a:	2218      	movs	r2, #24
 800441c:	4694      	mov	ip, r2
 800441e:	44bc      	add	ip, r7
 8004420:	4463      	add	r3, ip
 8004422:	2208      	movs	r2, #8
 8004424:	701a      	strb	r2, [r3, #0]
 8004426:	e0ad      	b.n	8004584 <UART_SetConfig+0x250>
 8004428:	231b      	movs	r3, #27
 800442a:	2218      	movs	r2, #24
 800442c:	4694      	mov	ip, r2
 800442e:	44bc      	add	ip, r7
 8004430:	4463      	add	r3, ip
 8004432:	2210      	movs	r2, #16
 8004434:	701a      	strb	r2, [r3, #0]
 8004436:	e0a5      	b.n	8004584 <UART_SetConfig+0x250>
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a81      	ldr	r2, [pc, #516]	; (8004644 <UART_SetConfig+0x310>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d136      	bne.n	80044b0 <UART_SetConfig+0x17c>
 8004442:	4b7f      	ldr	r3, [pc, #508]	; (8004640 <UART_SetConfig+0x30c>)
 8004444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004446:	220c      	movs	r2, #12
 8004448:	4013      	ands	r3, r2
 800444a:	2b0c      	cmp	r3, #12
 800444c:	d020      	beq.n	8004490 <UART_SetConfig+0x15c>
 800444e:	d827      	bhi.n	80044a0 <UART_SetConfig+0x16c>
 8004450:	2b08      	cmp	r3, #8
 8004452:	d00d      	beq.n	8004470 <UART_SetConfig+0x13c>
 8004454:	d824      	bhi.n	80044a0 <UART_SetConfig+0x16c>
 8004456:	2b00      	cmp	r3, #0
 8004458:	d002      	beq.n	8004460 <UART_SetConfig+0x12c>
 800445a:	2b04      	cmp	r3, #4
 800445c:	d010      	beq.n	8004480 <UART_SetConfig+0x14c>
 800445e:	e01f      	b.n	80044a0 <UART_SetConfig+0x16c>
 8004460:	231b      	movs	r3, #27
 8004462:	2218      	movs	r2, #24
 8004464:	4694      	mov	ip, r2
 8004466:	44bc      	add	ip, r7
 8004468:	4463      	add	r3, ip
 800446a:	2200      	movs	r2, #0
 800446c:	701a      	strb	r2, [r3, #0]
 800446e:	e089      	b.n	8004584 <UART_SetConfig+0x250>
 8004470:	231b      	movs	r3, #27
 8004472:	2218      	movs	r2, #24
 8004474:	4694      	mov	ip, r2
 8004476:	44bc      	add	ip, r7
 8004478:	4463      	add	r3, ip
 800447a:	2202      	movs	r2, #2
 800447c:	701a      	strb	r2, [r3, #0]
 800447e:	e081      	b.n	8004584 <UART_SetConfig+0x250>
 8004480:	231b      	movs	r3, #27
 8004482:	2218      	movs	r2, #24
 8004484:	4694      	mov	ip, r2
 8004486:	44bc      	add	ip, r7
 8004488:	4463      	add	r3, ip
 800448a:	2204      	movs	r2, #4
 800448c:	701a      	strb	r2, [r3, #0]
 800448e:	e079      	b.n	8004584 <UART_SetConfig+0x250>
 8004490:	231b      	movs	r3, #27
 8004492:	2218      	movs	r2, #24
 8004494:	4694      	mov	ip, r2
 8004496:	44bc      	add	ip, r7
 8004498:	4463      	add	r3, ip
 800449a:	2208      	movs	r2, #8
 800449c:	701a      	strb	r2, [r3, #0]
 800449e:	e071      	b.n	8004584 <UART_SetConfig+0x250>
 80044a0:	231b      	movs	r3, #27
 80044a2:	2218      	movs	r2, #24
 80044a4:	4694      	mov	ip, r2
 80044a6:	44bc      	add	ip, r7
 80044a8:	4463      	add	r3, ip
 80044aa:	2210      	movs	r2, #16
 80044ac:	701a      	strb	r2, [r3, #0]
 80044ae:	e069      	b.n	8004584 <UART_SetConfig+0x250>
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a64      	ldr	r2, [pc, #400]	; (8004648 <UART_SetConfig+0x314>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d107      	bne.n	80044ca <UART_SetConfig+0x196>
 80044ba:	231b      	movs	r3, #27
 80044bc:	2218      	movs	r2, #24
 80044be:	4694      	mov	ip, r2
 80044c0:	44bc      	add	ip, r7
 80044c2:	4463      	add	r3, ip
 80044c4:	2200      	movs	r2, #0
 80044c6:	701a      	strb	r2, [r3, #0]
 80044c8:	e05c      	b.n	8004584 <UART_SetConfig+0x250>
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a5f      	ldr	r2, [pc, #380]	; (800464c <UART_SetConfig+0x318>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d107      	bne.n	80044e4 <UART_SetConfig+0x1b0>
 80044d4:	231b      	movs	r3, #27
 80044d6:	2218      	movs	r2, #24
 80044d8:	4694      	mov	ip, r2
 80044da:	44bc      	add	ip, r7
 80044dc:	4463      	add	r3, ip
 80044de:	2200      	movs	r2, #0
 80044e0:	701a      	strb	r2, [r3, #0]
 80044e2:	e04f      	b.n	8004584 <UART_SetConfig+0x250>
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a52      	ldr	r2, [pc, #328]	; (8004634 <UART_SetConfig+0x300>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d143      	bne.n	8004576 <UART_SetConfig+0x242>
 80044ee:	4b54      	ldr	r3, [pc, #336]	; (8004640 <UART_SetConfig+0x30c>)
 80044f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044f2:	23c0      	movs	r3, #192	; 0xc0
 80044f4:	011b      	lsls	r3, r3, #4
 80044f6:	4013      	ands	r3, r2
 80044f8:	22c0      	movs	r2, #192	; 0xc0
 80044fa:	0112      	lsls	r2, r2, #4
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d02a      	beq.n	8004556 <UART_SetConfig+0x222>
 8004500:	22c0      	movs	r2, #192	; 0xc0
 8004502:	0112      	lsls	r2, r2, #4
 8004504:	4293      	cmp	r3, r2
 8004506:	d82e      	bhi.n	8004566 <UART_SetConfig+0x232>
 8004508:	2280      	movs	r2, #128	; 0x80
 800450a:	0112      	lsls	r2, r2, #4
 800450c:	4293      	cmp	r3, r2
 800450e:	d012      	beq.n	8004536 <UART_SetConfig+0x202>
 8004510:	2280      	movs	r2, #128	; 0x80
 8004512:	0112      	lsls	r2, r2, #4
 8004514:	4293      	cmp	r3, r2
 8004516:	d826      	bhi.n	8004566 <UART_SetConfig+0x232>
 8004518:	2b00      	cmp	r3, #0
 800451a:	d004      	beq.n	8004526 <UART_SetConfig+0x1f2>
 800451c:	2280      	movs	r2, #128	; 0x80
 800451e:	00d2      	lsls	r2, r2, #3
 8004520:	4293      	cmp	r3, r2
 8004522:	d010      	beq.n	8004546 <UART_SetConfig+0x212>
 8004524:	e01f      	b.n	8004566 <UART_SetConfig+0x232>
 8004526:	231b      	movs	r3, #27
 8004528:	2218      	movs	r2, #24
 800452a:	4694      	mov	ip, r2
 800452c:	44bc      	add	ip, r7
 800452e:	4463      	add	r3, ip
 8004530:	2200      	movs	r2, #0
 8004532:	701a      	strb	r2, [r3, #0]
 8004534:	e026      	b.n	8004584 <UART_SetConfig+0x250>
 8004536:	231b      	movs	r3, #27
 8004538:	2218      	movs	r2, #24
 800453a:	4694      	mov	ip, r2
 800453c:	44bc      	add	ip, r7
 800453e:	4463      	add	r3, ip
 8004540:	2202      	movs	r2, #2
 8004542:	701a      	strb	r2, [r3, #0]
 8004544:	e01e      	b.n	8004584 <UART_SetConfig+0x250>
 8004546:	231b      	movs	r3, #27
 8004548:	2218      	movs	r2, #24
 800454a:	4694      	mov	ip, r2
 800454c:	44bc      	add	ip, r7
 800454e:	4463      	add	r3, ip
 8004550:	2204      	movs	r2, #4
 8004552:	701a      	strb	r2, [r3, #0]
 8004554:	e016      	b.n	8004584 <UART_SetConfig+0x250>
 8004556:	231b      	movs	r3, #27
 8004558:	2218      	movs	r2, #24
 800455a:	4694      	mov	ip, r2
 800455c:	44bc      	add	ip, r7
 800455e:	4463      	add	r3, ip
 8004560:	2208      	movs	r2, #8
 8004562:	701a      	strb	r2, [r3, #0]
 8004564:	e00e      	b.n	8004584 <UART_SetConfig+0x250>
 8004566:	231b      	movs	r3, #27
 8004568:	2218      	movs	r2, #24
 800456a:	4694      	mov	ip, r2
 800456c:	44bc      	add	ip, r7
 800456e:	4463      	add	r3, ip
 8004570:	2210      	movs	r2, #16
 8004572:	701a      	strb	r2, [r3, #0]
 8004574:	e006      	b.n	8004584 <UART_SetConfig+0x250>
 8004576:	231b      	movs	r3, #27
 8004578:	2218      	movs	r2, #24
 800457a:	4694      	mov	ip, r2
 800457c:	44bc      	add	ip, r7
 800457e:	4463      	add	r3, ip
 8004580:	2210      	movs	r2, #16
 8004582:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a2a      	ldr	r2, [pc, #168]	; (8004634 <UART_SetConfig+0x300>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d000      	beq.n	8004590 <UART_SetConfig+0x25c>
 800458e:	e09e      	b.n	80046ce <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004590:	231b      	movs	r3, #27
 8004592:	2218      	movs	r2, #24
 8004594:	4694      	mov	ip, r2
 8004596:	44bc      	add	ip, r7
 8004598:	4463      	add	r3, ip
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	2b08      	cmp	r3, #8
 800459e:	d01d      	beq.n	80045dc <UART_SetConfig+0x2a8>
 80045a0:	dc20      	bgt.n	80045e4 <UART_SetConfig+0x2b0>
 80045a2:	2b04      	cmp	r3, #4
 80045a4:	d015      	beq.n	80045d2 <UART_SetConfig+0x29e>
 80045a6:	dc1d      	bgt.n	80045e4 <UART_SetConfig+0x2b0>
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d002      	beq.n	80045b2 <UART_SetConfig+0x27e>
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d005      	beq.n	80045bc <UART_SetConfig+0x288>
 80045b0:	e018      	b.n	80045e4 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045b2:	f7fe fc97 	bl	8002ee4 <HAL_RCC_GetPCLK1Freq>
 80045b6:	0003      	movs	r3, r0
 80045b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80045ba:	e01d      	b.n	80045f8 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045bc:	4b20      	ldr	r3, [pc, #128]	; (8004640 <UART_SetConfig+0x30c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2210      	movs	r2, #16
 80045c2:	4013      	ands	r3, r2
 80045c4:	d002      	beq.n	80045cc <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80045c6:	4b22      	ldr	r3, [pc, #136]	; (8004650 <UART_SetConfig+0x31c>)
 80045c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80045ca:	e015      	b.n	80045f8 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 80045cc:	4b21      	ldr	r3, [pc, #132]	; (8004654 <UART_SetConfig+0x320>)
 80045ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80045d0:	e012      	b.n	80045f8 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045d2:	f7fe fbd7 	bl	8002d84 <HAL_RCC_GetSysClockFreq>
 80045d6:	0003      	movs	r3, r0
 80045d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80045da:	e00d      	b.n	80045f8 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045dc:	2380      	movs	r3, #128	; 0x80
 80045de:	021b      	lsls	r3, r3, #8
 80045e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80045e2:	e009      	b.n	80045f8 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80045e8:	231a      	movs	r3, #26
 80045ea:	2218      	movs	r2, #24
 80045ec:	4694      	mov	ip, r2
 80045ee:	44bc      	add	ip, r7
 80045f0:	4463      	add	r3, ip
 80045f2:	2201      	movs	r2, #1
 80045f4:	701a      	strb	r2, [r3, #0]
        break;
 80045f6:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80045f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d100      	bne.n	8004600 <UART_SetConfig+0x2cc>
 80045fe:	e13c      	b.n	800487a <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	0013      	movs	r3, r2
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	189b      	adds	r3, r3, r2
 800460a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800460c:	429a      	cmp	r2, r3
 800460e:	d305      	bcc.n	800461c <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004616:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004618:	429a      	cmp	r2, r3
 800461a:	d91d      	bls.n	8004658 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 800461c:	231a      	movs	r3, #26
 800461e:	2218      	movs	r2, #24
 8004620:	4694      	mov	ip, r2
 8004622:	44bc      	add	ip, r7
 8004624:	4463      	add	r3, ip
 8004626:	2201      	movs	r2, #1
 8004628:	701a      	strb	r2, [r3, #0]
 800462a:	e126      	b.n	800487a <UART_SetConfig+0x546>
 800462c:	efff69f3 	.word	0xefff69f3
 8004630:	ffffcfff 	.word	0xffffcfff
 8004634:	40004800 	.word	0x40004800
 8004638:	fffff4ff 	.word	0xfffff4ff
 800463c:	40013800 	.word	0x40013800
 8004640:	40021000 	.word	0x40021000
 8004644:	40004400 	.word	0x40004400
 8004648:	40004c00 	.word	0x40004c00
 800464c:	40005000 	.word	0x40005000
 8004650:	003d0900 	.word	0x003d0900
 8004654:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800465a:	613b      	str	r3, [r7, #16]
 800465c:	2300      	movs	r3, #0
 800465e:	617b      	str	r3, [r7, #20]
 8004660:	6939      	ldr	r1, [r7, #16]
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	000b      	movs	r3, r1
 8004666:	0e1b      	lsrs	r3, r3, #24
 8004668:	0010      	movs	r0, r2
 800466a:	0205      	lsls	r5, r0, #8
 800466c:	431d      	orrs	r5, r3
 800466e:	000b      	movs	r3, r1
 8004670:	021c      	lsls	r4, r3, #8
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	085b      	lsrs	r3, r3, #1
 8004678:	60bb      	str	r3, [r7, #8]
 800467a:	2300      	movs	r3, #0
 800467c:	60fb      	str	r3, [r7, #12]
 800467e:	68b8      	ldr	r0, [r7, #8]
 8004680:	68f9      	ldr	r1, [r7, #12]
 8004682:	1900      	adds	r0, r0, r4
 8004684:	4169      	adcs	r1, r5
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	603b      	str	r3, [r7, #0]
 800468c:	2300      	movs	r3, #0
 800468e:	607b      	str	r3, [r7, #4]
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f7fb fec0 	bl	8000418 <__aeabi_uldivmod>
 8004698:	0002      	movs	r2, r0
 800469a:	000b      	movs	r3, r1
 800469c:	0013      	movs	r3, r2
 800469e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046a2:	23c0      	movs	r3, #192	; 0xc0
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d309      	bcc.n	80046be <UART_SetConfig+0x38a>
 80046aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046ac:	2380      	movs	r3, #128	; 0x80
 80046ae:	035b      	lsls	r3, r3, #13
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d204      	bcs.n	80046be <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046ba:	60da      	str	r2, [r3, #12]
 80046bc:	e0dd      	b.n	800487a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80046be:	231a      	movs	r3, #26
 80046c0:	2218      	movs	r2, #24
 80046c2:	4694      	mov	ip, r2
 80046c4:	44bc      	add	ip, r7
 80046c6:	4463      	add	r3, ip
 80046c8:	2201      	movs	r2, #1
 80046ca:	701a      	strb	r2, [r3, #0]
 80046cc:	e0d5      	b.n	800487a <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	69da      	ldr	r2, [r3, #28]
 80046d2:	2380      	movs	r3, #128	; 0x80
 80046d4:	021b      	lsls	r3, r3, #8
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d000      	beq.n	80046dc <UART_SetConfig+0x3a8>
 80046da:	e074      	b.n	80047c6 <UART_SetConfig+0x492>
  {
    switch (clocksource)
 80046dc:	231b      	movs	r3, #27
 80046de:	2218      	movs	r2, #24
 80046e0:	4694      	mov	ip, r2
 80046e2:	44bc      	add	ip, r7
 80046e4:	4463      	add	r3, ip
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d822      	bhi.n	8004732 <UART_SetConfig+0x3fe>
 80046ec:	009a      	lsls	r2, r3, #2
 80046ee:	4b6b      	ldr	r3, [pc, #428]	; (800489c <UART_SetConfig+0x568>)
 80046f0:	18d3      	adds	r3, r2, r3
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046f6:	f7fe fbf5 	bl	8002ee4 <HAL_RCC_GetPCLK1Freq>
 80046fa:	0003      	movs	r3, r0
 80046fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046fe:	e022      	b.n	8004746 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004700:	f7fe fc06 	bl	8002f10 <HAL_RCC_GetPCLK2Freq>
 8004704:	0003      	movs	r3, r0
 8004706:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004708:	e01d      	b.n	8004746 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800470a:	4b65      	ldr	r3, [pc, #404]	; (80048a0 <UART_SetConfig+0x56c>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2210      	movs	r2, #16
 8004710:	4013      	ands	r3, r2
 8004712:	d002      	beq.n	800471a <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004714:	4b63      	ldr	r3, [pc, #396]	; (80048a4 <UART_SetConfig+0x570>)
 8004716:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004718:	e015      	b.n	8004746 <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 800471a:	4b63      	ldr	r3, [pc, #396]	; (80048a8 <UART_SetConfig+0x574>)
 800471c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800471e:	e012      	b.n	8004746 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004720:	f7fe fb30 	bl	8002d84 <HAL_RCC_GetSysClockFreq>
 8004724:	0003      	movs	r3, r0
 8004726:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004728:	e00d      	b.n	8004746 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800472a:	2380      	movs	r3, #128	; 0x80
 800472c:	021b      	lsls	r3, r3, #8
 800472e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004730:	e009      	b.n	8004746 <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 8004732:	2300      	movs	r3, #0
 8004734:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004736:	231a      	movs	r3, #26
 8004738:	2218      	movs	r2, #24
 800473a:	4694      	mov	ip, r2
 800473c:	44bc      	add	ip, r7
 800473e:	4463      	add	r3, ip
 8004740:	2201      	movs	r2, #1
 8004742:	701a      	strb	r2, [r3, #0]
        break;
 8004744:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004748:	2b00      	cmp	r3, #0
 800474a:	d100      	bne.n	800474e <UART_SetConfig+0x41a>
 800474c:	e095      	b.n	800487a <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800474e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004750:	005a      	lsls	r2, r3, #1
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	085b      	lsrs	r3, r3, #1
 8004758:	18d2      	adds	r2, r2, r3
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	0019      	movs	r1, r3
 8004760:	0010      	movs	r0, r2
 8004762:	f7fb fce3 	bl	800012c <__udivsi3>
 8004766:	0003      	movs	r3, r0
 8004768:	b29b      	uxth	r3, r3
 800476a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800476c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476e:	2b0f      	cmp	r3, #15
 8004770:	d921      	bls.n	80047b6 <UART_SetConfig+0x482>
 8004772:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004774:	2380      	movs	r3, #128	; 0x80
 8004776:	025b      	lsls	r3, r3, #9
 8004778:	429a      	cmp	r2, r3
 800477a:	d21c      	bcs.n	80047b6 <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800477c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477e:	b29a      	uxth	r2, r3
 8004780:	200e      	movs	r0, #14
 8004782:	2418      	movs	r4, #24
 8004784:	193b      	adds	r3, r7, r4
 8004786:	181b      	adds	r3, r3, r0
 8004788:	210f      	movs	r1, #15
 800478a:	438a      	bics	r2, r1
 800478c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800478e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004790:	085b      	lsrs	r3, r3, #1
 8004792:	b29b      	uxth	r3, r3
 8004794:	2207      	movs	r2, #7
 8004796:	4013      	ands	r3, r2
 8004798:	b299      	uxth	r1, r3
 800479a:	193b      	adds	r3, r7, r4
 800479c:	181b      	adds	r3, r3, r0
 800479e:	193a      	adds	r2, r7, r4
 80047a0:	1812      	adds	r2, r2, r0
 80047a2:	8812      	ldrh	r2, [r2, #0]
 80047a4:	430a      	orrs	r2, r1
 80047a6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	193a      	adds	r2, r7, r4
 80047ae:	1812      	adds	r2, r2, r0
 80047b0:	8812      	ldrh	r2, [r2, #0]
 80047b2:	60da      	str	r2, [r3, #12]
 80047b4:	e061      	b.n	800487a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80047b6:	231a      	movs	r3, #26
 80047b8:	2218      	movs	r2, #24
 80047ba:	4694      	mov	ip, r2
 80047bc:	44bc      	add	ip, r7
 80047be:	4463      	add	r3, ip
 80047c0:	2201      	movs	r2, #1
 80047c2:	701a      	strb	r2, [r3, #0]
 80047c4:	e059      	b.n	800487a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047c6:	231b      	movs	r3, #27
 80047c8:	2218      	movs	r2, #24
 80047ca:	4694      	mov	ip, r2
 80047cc:	44bc      	add	ip, r7
 80047ce:	4463      	add	r3, ip
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	2b08      	cmp	r3, #8
 80047d4:	d822      	bhi.n	800481c <UART_SetConfig+0x4e8>
 80047d6:	009a      	lsls	r2, r3, #2
 80047d8:	4b34      	ldr	r3, [pc, #208]	; (80048ac <UART_SetConfig+0x578>)
 80047da:	18d3      	adds	r3, r2, r3
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047e0:	f7fe fb80 	bl	8002ee4 <HAL_RCC_GetPCLK1Freq>
 80047e4:	0003      	movs	r3, r0
 80047e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047e8:	e022      	b.n	8004830 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047ea:	f7fe fb91 	bl	8002f10 <HAL_RCC_GetPCLK2Freq>
 80047ee:	0003      	movs	r3, r0
 80047f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047f2:	e01d      	b.n	8004830 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047f4:	4b2a      	ldr	r3, [pc, #168]	; (80048a0 <UART_SetConfig+0x56c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2210      	movs	r2, #16
 80047fa:	4013      	ands	r3, r2
 80047fc:	d002      	beq.n	8004804 <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80047fe:	4b29      	ldr	r3, [pc, #164]	; (80048a4 <UART_SetConfig+0x570>)
 8004800:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004802:	e015      	b.n	8004830 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 8004804:	4b28      	ldr	r3, [pc, #160]	; (80048a8 <UART_SetConfig+0x574>)
 8004806:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004808:	e012      	b.n	8004830 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800480a:	f7fe fabb 	bl	8002d84 <HAL_RCC_GetSysClockFreq>
 800480e:	0003      	movs	r3, r0
 8004810:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004812:	e00d      	b.n	8004830 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004814:	2380      	movs	r3, #128	; 0x80
 8004816:	021b      	lsls	r3, r3, #8
 8004818:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800481a:	e009      	b.n	8004830 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 800481c:	2300      	movs	r3, #0
 800481e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004820:	231a      	movs	r3, #26
 8004822:	2218      	movs	r2, #24
 8004824:	4694      	mov	ip, r2
 8004826:	44bc      	add	ip, r7
 8004828:	4463      	add	r3, ip
 800482a:	2201      	movs	r2, #1
 800482c:	701a      	strb	r2, [r3, #0]
        break;
 800482e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004832:	2b00      	cmp	r3, #0
 8004834:	d021      	beq.n	800487a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	085a      	lsrs	r2, r3, #1
 800483c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483e:	18d2      	adds	r2, r2, r3
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	0019      	movs	r1, r3
 8004846:	0010      	movs	r0, r2
 8004848:	f7fb fc70 	bl	800012c <__udivsi3>
 800484c:	0003      	movs	r3, r0
 800484e:	b29b      	uxth	r3, r3
 8004850:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004854:	2b0f      	cmp	r3, #15
 8004856:	d909      	bls.n	800486c <UART_SetConfig+0x538>
 8004858:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800485a:	2380      	movs	r3, #128	; 0x80
 800485c:	025b      	lsls	r3, r3, #9
 800485e:	429a      	cmp	r2, r3
 8004860:	d204      	bcs.n	800486c <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004868:	60da      	str	r2, [r3, #12]
 800486a:	e006      	b.n	800487a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800486c:	231a      	movs	r3, #26
 800486e:	2218      	movs	r2, #24
 8004870:	4694      	mov	ip, r2
 8004872:	44bc      	add	ip, r7
 8004874:	4463      	add	r3, ip
 8004876:	2201      	movs	r2, #1
 8004878:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	2200      	movs	r2, #0
 800487e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	2200      	movs	r2, #0
 8004884:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004886:	231a      	movs	r3, #26
 8004888:	2218      	movs	r2, #24
 800488a:	4694      	mov	ip, r2
 800488c:	44bc      	add	ip, r7
 800488e:	4463      	add	r3, ip
 8004890:	781b      	ldrb	r3, [r3, #0]
}
 8004892:	0018      	movs	r0, r3
 8004894:	46bd      	mov	sp, r7
 8004896:	b00e      	add	sp, #56	; 0x38
 8004898:	bdb0      	pop	{r4, r5, r7, pc}
 800489a:	46c0      	nop			; (mov r8, r8)
 800489c:	08006274 	.word	0x08006274
 80048a0:	40021000 	.word	0x40021000
 80048a4:	003d0900 	.word	0x003d0900
 80048a8:	00f42400 	.word	0x00f42400
 80048ac:	08006298 	.word	0x08006298

080048b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	2201      	movs	r2, #1
 80048be:	4013      	ands	r3, r2
 80048c0:	d00b      	beq.n	80048da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	4a4a      	ldr	r2, [pc, #296]	; (80049f4 <UART_AdvFeatureConfig+0x144>)
 80048ca:	4013      	ands	r3, r2
 80048cc:	0019      	movs	r1, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048de:	2202      	movs	r2, #2
 80048e0:	4013      	ands	r3, r2
 80048e2:	d00b      	beq.n	80048fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	4a43      	ldr	r2, [pc, #268]	; (80049f8 <UART_AdvFeatureConfig+0x148>)
 80048ec:	4013      	ands	r3, r2
 80048ee:	0019      	movs	r1, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	430a      	orrs	r2, r1
 80048fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	2204      	movs	r2, #4
 8004902:	4013      	ands	r3, r2
 8004904:	d00b      	beq.n	800491e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	4a3b      	ldr	r2, [pc, #236]	; (80049fc <UART_AdvFeatureConfig+0x14c>)
 800490e:	4013      	ands	r3, r2
 8004910:	0019      	movs	r1, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	430a      	orrs	r2, r1
 800491c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004922:	2208      	movs	r2, #8
 8004924:	4013      	ands	r3, r2
 8004926:	d00b      	beq.n	8004940 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	4a34      	ldr	r2, [pc, #208]	; (8004a00 <UART_AdvFeatureConfig+0x150>)
 8004930:	4013      	ands	r3, r2
 8004932:	0019      	movs	r1, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	430a      	orrs	r2, r1
 800493e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	2210      	movs	r2, #16
 8004946:	4013      	ands	r3, r2
 8004948:	d00b      	beq.n	8004962 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	4a2c      	ldr	r2, [pc, #176]	; (8004a04 <UART_AdvFeatureConfig+0x154>)
 8004952:	4013      	ands	r3, r2
 8004954:	0019      	movs	r1, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	430a      	orrs	r2, r1
 8004960:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	2220      	movs	r2, #32
 8004968:	4013      	ands	r3, r2
 800496a:	d00b      	beq.n	8004984 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	4a25      	ldr	r2, [pc, #148]	; (8004a08 <UART_AdvFeatureConfig+0x158>)
 8004974:	4013      	ands	r3, r2
 8004976:	0019      	movs	r1, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	430a      	orrs	r2, r1
 8004982:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004988:	2240      	movs	r2, #64	; 0x40
 800498a:	4013      	ands	r3, r2
 800498c:	d01d      	beq.n	80049ca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	4a1d      	ldr	r2, [pc, #116]	; (8004a0c <UART_AdvFeatureConfig+0x15c>)
 8004996:	4013      	ands	r3, r2
 8004998:	0019      	movs	r1, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	430a      	orrs	r2, r1
 80049a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049aa:	2380      	movs	r3, #128	; 0x80
 80049ac:	035b      	lsls	r3, r3, #13
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d10b      	bne.n	80049ca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	4a15      	ldr	r2, [pc, #84]	; (8004a10 <UART_AdvFeatureConfig+0x160>)
 80049ba:	4013      	ands	r3, r2
 80049bc:	0019      	movs	r1, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ce:	2280      	movs	r2, #128	; 0x80
 80049d0:	4013      	ands	r3, r2
 80049d2:	d00b      	beq.n	80049ec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	4a0e      	ldr	r2, [pc, #56]	; (8004a14 <UART_AdvFeatureConfig+0x164>)
 80049dc:	4013      	ands	r3, r2
 80049de:	0019      	movs	r1, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	605a      	str	r2, [r3, #4]
  }
}
 80049ec:	46c0      	nop			; (mov r8, r8)
 80049ee:	46bd      	mov	sp, r7
 80049f0:	b002      	add	sp, #8
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	fffdffff 	.word	0xfffdffff
 80049f8:	fffeffff 	.word	0xfffeffff
 80049fc:	fffbffff 	.word	0xfffbffff
 8004a00:	ffff7fff 	.word	0xffff7fff
 8004a04:	ffffefff 	.word	0xffffefff
 8004a08:	ffffdfff 	.word	0xffffdfff
 8004a0c:	ffefffff 	.word	0xffefffff
 8004a10:	ff9fffff 	.word	0xff9fffff
 8004a14:	fff7ffff 	.word	0xfff7ffff

08004a18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af02      	add	r7, sp, #8
 8004a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2280      	movs	r2, #128	; 0x80
 8004a24:	2100      	movs	r1, #0
 8004a26:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a28:	f7fd f928 	bl	8001c7c <HAL_GetTick>
 8004a2c:	0003      	movs	r3, r0
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2208      	movs	r2, #8
 8004a38:	4013      	ands	r3, r2
 8004a3a:	2b08      	cmp	r3, #8
 8004a3c:	d10c      	bne.n	8004a58 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2280      	movs	r2, #128	; 0x80
 8004a42:	0391      	lsls	r1, r2, #14
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	4a17      	ldr	r2, [pc, #92]	; (8004aa4 <UART_CheckIdleState+0x8c>)
 8004a48:	9200      	str	r2, [sp, #0]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f000 f82c 	bl	8004aa8 <UART_WaitOnFlagUntilTimeout>
 8004a50:	1e03      	subs	r3, r0, #0
 8004a52:	d001      	beq.n	8004a58 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e021      	b.n	8004a9c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2204      	movs	r2, #4
 8004a60:	4013      	ands	r3, r2
 8004a62:	2b04      	cmp	r3, #4
 8004a64:	d10c      	bne.n	8004a80 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2280      	movs	r2, #128	; 0x80
 8004a6a:	03d1      	lsls	r1, r2, #15
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	4a0d      	ldr	r2, [pc, #52]	; (8004aa4 <UART_CheckIdleState+0x8c>)
 8004a70:	9200      	str	r2, [sp, #0]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f000 f818 	bl	8004aa8 <UART_WaitOnFlagUntilTimeout>
 8004a78:	1e03      	subs	r3, r0, #0
 8004a7a:	d001      	beq.n	8004a80 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e00d      	b.n	8004a9c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2220      	movs	r2, #32
 8004a84:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2220      	movs	r2, #32
 8004a8a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2274      	movs	r2, #116	; 0x74
 8004a96:	2100      	movs	r1, #0
 8004a98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	0018      	movs	r0, r3
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	b004      	add	sp, #16
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	01ffffff 	.word	0x01ffffff

08004aa8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b094      	sub	sp, #80	; 0x50
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	603b      	str	r3, [r7, #0]
 8004ab4:	1dfb      	adds	r3, r7, #7
 8004ab6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ab8:	e0a3      	b.n	8004c02 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004abc:	3301      	adds	r3, #1
 8004abe:	d100      	bne.n	8004ac2 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004ac0:	e09f      	b.n	8004c02 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ac2:	f7fd f8db 	bl	8001c7c <HAL_GetTick>
 8004ac6:	0002      	movs	r2, r0
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d302      	bcc.n	8004ad8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ad2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d13d      	bne.n	8004b54 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ad8:	f3ef 8310 	mrs	r3, PRIMASK
 8004adc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ae0:	647b      	str	r3, [r7, #68]	; 0x44
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae8:	f383 8810 	msr	PRIMASK, r3
}
 8004aec:	46c0      	nop			; (mov r8, r8)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	494c      	ldr	r1, [pc, #304]	; (8004c2c <UART_WaitOnFlagUntilTimeout+0x184>)
 8004afa:	400a      	ands	r2, r1
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b00:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b04:	f383 8810 	msr	PRIMASK, r3
}
 8004b08:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b0a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b0e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b12:	643b      	str	r3, [r7, #64]	; 0x40
 8004b14:	2301      	movs	r3, #1
 8004b16:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1a:	f383 8810 	msr	PRIMASK, r3
}
 8004b1e:	46c0      	nop			; (mov r8, r8)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689a      	ldr	r2, [r3, #8]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2101      	movs	r1, #1
 8004b2c:	438a      	bics	r2, r1
 8004b2e:	609a      	str	r2, [r3, #8]
 8004b30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b32:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b36:	f383 8810 	msr	PRIMASK, r3
}
 8004b3a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2220      	movs	r2, #32
 8004b46:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2274      	movs	r2, #116	; 0x74
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e067      	b.n	8004c24 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2204      	movs	r2, #4
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	d050      	beq.n	8004c02 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	69da      	ldr	r2, [r3, #28]
 8004b66:	2380      	movs	r3, #128	; 0x80
 8004b68:	011b      	lsls	r3, r3, #4
 8004b6a:	401a      	ands	r2, r3
 8004b6c:	2380      	movs	r3, #128	; 0x80
 8004b6e:	011b      	lsls	r3, r3, #4
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d146      	bne.n	8004c02 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2280      	movs	r2, #128	; 0x80
 8004b7a:	0112      	lsls	r2, r2, #4
 8004b7c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b7e:	f3ef 8310 	mrs	r3, PRIMASK
 8004b82:	613b      	str	r3, [r7, #16]
  return(result);
 8004b84:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b88:	2301      	movs	r3, #1
 8004b8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	f383 8810 	msr	PRIMASK, r3
}
 8004b92:	46c0      	nop			; (mov r8, r8)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4923      	ldr	r1, [pc, #140]	; (8004c2c <UART_WaitOnFlagUntilTimeout+0x184>)
 8004ba0:	400a      	ands	r2, r1
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ba6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	f383 8810 	msr	PRIMASK, r3
}
 8004bae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bb0:	f3ef 8310 	mrs	r3, PRIMASK
 8004bb4:	61fb      	str	r3, [r7, #28]
  return(result);
 8004bb6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bba:	2301      	movs	r3, #1
 8004bbc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bbe:	6a3b      	ldr	r3, [r7, #32]
 8004bc0:	f383 8810 	msr	PRIMASK, r3
}
 8004bc4:	46c0      	nop			; (mov r8, r8)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	689a      	ldr	r2, [r3, #8]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2101      	movs	r1, #1
 8004bd2:	438a      	bics	r2, r1
 8004bd4:	609a      	str	r2, [r3, #8]
 8004bd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bd8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bdc:	f383 8810 	msr	PRIMASK, r3
}
 8004be0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2220      	movs	r2, #32
 8004be6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2220      	movs	r2, #32
 8004bec:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2280      	movs	r2, #128	; 0x80
 8004bf2:	2120      	movs	r1, #32
 8004bf4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2274      	movs	r2, #116	; 0x74
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e010      	b.n	8004c24 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	69db      	ldr	r3, [r3, #28]
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	425a      	negs	r2, r3
 8004c12:	4153      	adcs	r3, r2
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	001a      	movs	r2, r3
 8004c18:	1dfb      	adds	r3, r7, #7
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d100      	bne.n	8004c22 <UART_WaitOnFlagUntilTimeout+0x17a>
 8004c20:	e74b      	b.n	8004aba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	0018      	movs	r0, r3
 8004c26:	46bd      	mov	sp, r7
 8004c28:	b014      	add	sp, #80	; 0x50
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	fffffe5f 	.word	0xfffffe5f

08004c30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b08e      	sub	sp, #56	; 0x38
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c38:	f3ef 8310 	mrs	r3, PRIMASK
 8004c3c:	617b      	str	r3, [r7, #20]
  return(result);
 8004c3e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c40:	637b      	str	r3, [r7, #52]	; 0x34
 8004c42:	2301      	movs	r3, #1
 8004c44:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	f383 8810 	msr	PRIMASK, r3
}
 8004c4c:	46c0      	nop			; (mov r8, r8)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4925      	ldr	r1, [pc, #148]	; (8004cf0 <UART_EndRxTransfer+0xc0>)
 8004c5a:	400a      	ands	r2, r1
 8004c5c:	601a      	str	r2, [r3, #0]
 8004c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	f383 8810 	msr	PRIMASK, r3
}
 8004c68:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c6a:	f3ef 8310 	mrs	r3, PRIMASK
 8004c6e:	623b      	str	r3, [r7, #32]
  return(result);
 8004c70:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c72:	633b      	str	r3, [r7, #48]	; 0x30
 8004c74:	2301      	movs	r3, #1
 8004c76:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7a:	f383 8810 	msr	PRIMASK, r3
}
 8004c7e:	46c0      	nop			; (mov r8, r8)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	689a      	ldr	r2, [r3, #8]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2101      	movs	r1, #1
 8004c8c:	438a      	bics	r2, r1
 8004c8e:	609a      	str	r2, [r3, #8]
 8004c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c92:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c96:	f383 8810 	msr	PRIMASK, r3
}
 8004c9a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d118      	bne.n	8004cd6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ca4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ca8:	60bb      	str	r3, [r7, #8]
  return(result);
 8004caa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cae:	2301      	movs	r3, #1
 8004cb0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f383 8810 	msr	PRIMASK, r3
}
 8004cb8:	46c0      	nop			; (mov r8, r8)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2110      	movs	r1, #16
 8004cc6:	438a      	bics	r2, r1
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ccc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	f383 8810 	msr	PRIMASK, r3
}
 8004cd4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2220      	movs	r2, #32
 8004cda:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004ce8:	46c0      	nop			; (mov r8, r8)
 8004cea:	46bd      	mov	sp, r7
 8004cec:	b00e      	add	sp, #56	; 0x38
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	fffffedf 	.word	0xfffffedf

08004cf4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	225a      	movs	r2, #90	; 0x5a
 8004d06:	2100      	movs	r1, #0
 8004d08:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2252      	movs	r2, #82	; 0x52
 8004d0e:	2100      	movs	r1, #0
 8004d10:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	0018      	movs	r0, r3
 8004d16:	f7ff faf9 	bl	800430c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d1a:	46c0      	nop			; (mov r8, r8)
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	b004      	add	sp, #16
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b086      	sub	sp, #24
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d2a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d2e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d30:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d32:	617b      	str	r3, [r7, #20]
 8004d34:	2301      	movs	r3, #1
 8004d36:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f383 8810 	msr	PRIMASK, r3
}
 8004d3e:	46c0      	nop			; (mov r8, r8)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2140      	movs	r1, #64	; 0x40
 8004d4c:	438a      	bics	r2, r1
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	f383 8810 	msr	PRIMASK, r3
}
 8004d5a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2220      	movs	r2, #32
 8004d60:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	0018      	movs	r0, r3
 8004d6c:	f7ff fac6 	bl	80042fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d70:	46c0      	nop			; (mov r8, r8)
 8004d72:	46bd      	mov	sp, r7
 8004d74:	b006      	add	sp, #24
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004d80:	46c0      	nop			; (mov r8, r8)
 8004d82:	46bd      	mov	sp, r7
 8004d84:	b002      	add	sp, #8
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <__errno>:
 8004d88:	4b01      	ldr	r3, [pc, #4]	; (8004d90 <__errno+0x8>)
 8004d8a:	6818      	ldr	r0, [r3, #0]
 8004d8c:	4770      	bx	lr
 8004d8e:	46c0      	nop			; (mov r8, r8)
 8004d90:	20000010 	.word	0x20000010

08004d94 <__libc_init_array>:
 8004d94:	b570      	push	{r4, r5, r6, lr}
 8004d96:	2600      	movs	r6, #0
 8004d98:	4d0c      	ldr	r5, [pc, #48]	; (8004dcc <__libc_init_array+0x38>)
 8004d9a:	4c0d      	ldr	r4, [pc, #52]	; (8004dd0 <__libc_init_array+0x3c>)
 8004d9c:	1b64      	subs	r4, r4, r5
 8004d9e:	10a4      	asrs	r4, r4, #2
 8004da0:	42a6      	cmp	r6, r4
 8004da2:	d109      	bne.n	8004db8 <__libc_init_array+0x24>
 8004da4:	2600      	movs	r6, #0
 8004da6:	f001 f98b 	bl	80060c0 <_init>
 8004daa:	4d0a      	ldr	r5, [pc, #40]	; (8004dd4 <__libc_init_array+0x40>)
 8004dac:	4c0a      	ldr	r4, [pc, #40]	; (8004dd8 <__libc_init_array+0x44>)
 8004dae:	1b64      	subs	r4, r4, r5
 8004db0:	10a4      	asrs	r4, r4, #2
 8004db2:	42a6      	cmp	r6, r4
 8004db4:	d105      	bne.n	8004dc2 <__libc_init_array+0x2e>
 8004db6:	bd70      	pop	{r4, r5, r6, pc}
 8004db8:	00b3      	lsls	r3, r6, #2
 8004dba:	58eb      	ldr	r3, [r5, r3]
 8004dbc:	4798      	blx	r3
 8004dbe:	3601      	adds	r6, #1
 8004dc0:	e7ee      	b.n	8004da0 <__libc_init_array+0xc>
 8004dc2:	00b3      	lsls	r3, r6, #2
 8004dc4:	58eb      	ldr	r3, [r5, r3]
 8004dc6:	4798      	blx	r3
 8004dc8:	3601      	adds	r6, #1
 8004dca:	e7f2      	b.n	8004db2 <__libc_init_array+0x1e>
 8004dcc:	0800635c 	.word	0x0800635c
 8004dd0:	0800635c 	.word	0x0800635c
 8004dd4:	0800635c 	.word	0x0800635c
 8004dd8:	08006360 	.word	0x08006360

08004ddc <memset>:
 8004ddc:	0003      	movs	r3, r0
 8004dde:	1882      	adds	r2, r0, r2
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d100      	bne.n	8004de6 <memset+0xa>
 8004de4:	4770      	bx	lr
 8004de6:	7019      	strb	r1, [r3, #0]
 8004de8:	3301      	adds	r3, #1
 8004dea:	e7f9      	b.n	8004de0 <memset+0x4>

08004dec <iprintf>:
 8004dec:	b40f      	push	{r0, r1, r2, r3}
 8004dee:	4b0b      	ldr	r3, [pc, #44]	; (8004e1c <iprintf+0x30>)
 8004df0:	b513      	push	{r0, r1, r4, lr}
 8004df2:	681c      	ldr	r4, [r3, #0]
 8004df4:	2c00      	cmp	r4, #0
 8004df6:	d005      	beq.n	8004e04 <iprintf+0x18>
 8004df8:	69a3      	ldr	r3, [r4, #24]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d102      	bne.n	8004e04 <iprintf+0x18>
 8004dfe:	0020      	movs	r0, r4
 8004e00:	f000 f890 	bl	8004f24 <__sinit>
 8004e04:	ab05      	add	r3, sp, #20
 8004e06:	0020      	movs	r0, r4
 8004e08:	9a04      	ldr	r2, [sp, #16]
 8004e0a:	68a1      	ldr	r1, [r4, #8]
 8004e0c:	9301      	str	r3, [sp, #4]
 8004e0e:	f000 fb15 	bl	800543c <_vfiprintf_r>
 8004e12:	bc16      	pop	{r1, r2, r4}
 8004e14:	bc08      	pop	{r3}
 8004e16:	b004      	add	sp, #16
 8004e18:	4718      	bx	r3
 8004e1a:	46c0      	nop			; (mov r8, r8)
 8004e1c:	20000010 	.word	0x20000010

08004e20 <siprintf>:
 8004e20:	b40e      	push	{r1, r2, r3}
 8004e22:	b500      	push	{lr}
 8004e24:	490b      	ldr	r1, [pc, #44]	; (8004e54 <siprintf+0x34>)
 8004e26:	b09c      	sub	sp, #112	; 0x70
 8004e28:	ab1d      	add	r3, sp, #116	; 0x74
 8004e2a:	9002      	str	r0, [sp, #8]
 8004e2c:	9006      	str	r0, [sp, #24]
 8004e2e:	9107      	str	r1, [sp, #28]
 8004e30:	9104      	str	r1, [sp, #16]
 8004e32:	4809      	ldr	r0, [pc, #36]	; (8004e58 <siprintf+0x38>)
 8004e34:	4909      	ldr	r1, [pc, #36]	; (8004e5c <siprintf+0x3c>)
 8004e36:	cb04      	ldmia	r3!, {r2}
 8004e38:	9105      	str	r1, [sp, #20]
 8004e3a:	6800      	ldr	r0, [r0, #0]
 8004e3c:	a902      	add	r1, sp, #8
 8004e3e:	9301      	str	r3, [sp, #4]
 8004e40:	f000 f9d4 	bl	80051ec <_svfiprintf_r>
 8004e44:	2300      	movs	r3, #0
 8004e46:	9a02      	ldr	r2, [sp, #8]
 8004e48:	7013      	strb	r3, [r2, #0]
 8004e4a:	b01c      	add	sp, #112	; 0x70
 8004e4c:	bc08      	pop	{r3}
 8004e4e:	b003      	add	sp, #12
 8004e50:	4718      	bx	r3
 8004e52:	46c0      	nop			; (mov r8, r8)
 8004e54:	7fffffff 	.word	0x7fffffff
 8004e58:	20000010 	.word	0x20000010
 8004e5c:	ffff0208 	.word	0xffff0208

08004e60 <std>:
 8004e60:	2300      	movs	r3, #0
 8004e62:	b510      	push	{r4, lr}
 8004e64:	0004      	movs	r4, r0
 8004e66:	6003      	str	r3, [r0, #0]
 8004e68:	6043      	str	r3, [r0, #4]
 8004e6a:	6083      	str	r3, [r0, #8]
 8004e6c:	8181      	strh	r1, [r0, #12]
 8004e6e:	6643      	str	r3, [r0, #100]	; 0x64
 8004e70:	0019      	movs	r1, r3
 8004e72:	81c2      	strh	r2, [r0, #14]
 8004e74:	6103      	str	r3, [r0, #16]
 8004e76:	6143      	str	r3, [r0, #20]
 8004e78:	6183      	str	r3, [r0, #24]
 8004e7a:	2208      	movs	r2, #8
 8004e7c:	305c      	adds	r0, #92	; 0x5c
 8004e7e:	f7ff ffad 	bl	8004ddc <memset>
 8004e82:	4b05      	ldr	r3, [pc, #20]	; (8004e98 <std+0x38>)
 8004e84:	6263      	str	r3, [r4, #36]	; 0x24
 8004e86:	4b05      	ldr	r3, [pc, #20]	; (8004e9c <std+0x3c>)
 8004e88:	6224      	str	r4, [r4, #32]
 8004e8a:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e8c:	4b04      	ldr	r3, [pc, #16]	; (8004ea0 <std+0x40>)
 8004e8e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e90:	4b04      	ldr	r3, [pc, #16]	; (8004ea4 <std+0x44>)
 8004e92:	6323      	str	r3, [r4, #48]	; 0x30
 8004e94:	bd10      	pop	{r4, pc}
 8004e96:	46c0      	nop			; (mov r8, r8)
 8004e98:	080059d9 	.word	0x080059d9
 8004e9c:	08005a01 	.word	0x08005a01
 8004ea0:	08005a39 	.word	0x08005a39
 8004ea4:	08005a65 	.word	0x08005a65

08004ea8 <_cleanup_r>:
 8004ea8:	b510      	push	{r4, lr}
 8004eaa:	4902      	ldr	r1, [pc, #8]	; (8004eb4 <_cleanup_r+0xc>)
 8004eac:	f000 f8ba 	bl	8005024 <_fwalk_reent>
 8004eb0:	bd10      	pop	{r4, pc}
 8004eb2:	46c0      	nop			; (mov r8, r8)
 8004eb4:	08005d71 	.word	0x08005d71

08004eb8 <__sfmoreglue>:
 8004eb8:	b570      	push	{r4, r5, r6, lr}
 8004eba:	2568      	movs	r5, #104	; 0x68
 8004ebc:	1e4a      	subs	r2, r1, #1
 8004ebe:	4355      	muls	r5, r2
 8004ec0:	000e      	movs	r6, r1
 8004ec2:	0029      	movs	r1, r5
 8004ec4:	3174      	adds	r1, #116	; 0x74
 8004ec6:	f000 f8d1 	bl	800506c <_malloc_r>
 8004eca:	1e04      	subs	r4, r0, #0
 8004ecc:	d008      	beq.n	8004ee0 <__sfmoreglue+0x28>
 8004ece:	2100      	movs	r1, #0
 8004ed0:	002a      	movs	r2, r5
 8004ed2:	6001      	str	r1, [r0, #0]
 8004ed4:	6046      	str	r6, [r0, #4]
 8004ed6:	300c      	adds	r0, #12
 8004ed8:	60a0      	str	r0, [r4, #8]
 8004eda:	3268      	adds	r2, #104	; 0x68
 8004edc:	f7ff ff7e 	bl	8004ddc <memset>
 8004ee0:	0020      	movs	r0, r4
 8004ee2:	bd70      	pop	{r4, r5, r6, pc}

08004ee4 <__sfp_lock_acquire>:
 8004ee4:	b510      	push	{r4, lr}
 8004ee6:	4802      	ldr	r0, [pc, #8]	; (8004ef0 <__sfp_lock_acquire+0xc>)
 8004ee8:	f000 f8bd 	bl	8005066 <__retarget_lock_acquire_recursive>
 8004eec:	bd10      	pop	{r4, pc}
 8004eee:	46c0      	nop			; (mov r8, r8)
 8004ef0:	20000358 	.word	0x20000358

08004ef4 <__sfp_lock_release>:
 8004ef4:	b510      	push	{r4, lr}
 8004ef6:	4802      	ldr	r0, [pc, #8]	; (8004f00 <__sfp_lock_release+0xc>)
 8004ef8:	f000 f8b6 	bl	8005068 <__retarget_lock_release_recursive>
 8004efc:	bd10      	pop	{r4, pc}
 8004efe:	46c0      	nop			; (mov r8, r8)
 8004f00:	20000358 	.word	0x20000358

08004f04 <__sinit_lock_acquire>:
 8004f04:	b510      	push	{r4, lr}
 8004f06:	4802      	ldr	r0, [pc, #8]	; (8004f10 <__sinit_lock_acquire+0xc>)
 8004f08:	f000 f8ad 	bl	8005066 <__retarget_lock_acquire_recursive>
 8004f0c:	bd10      	pop	{r4, pc}
 8004f0e:	46c0      	nop			; (mov r8, r8)
 8004f10:	20000353 	.word	0x20000353

08004f14 <__sinit_lock_release>:
 8004f14:	b510      	push	{r4, lr}
 8004f16:	4802      	ldr	r0, [pc, #8]	; (8004f20 <__sinit_lock_release+0xc>)
 8004f18:	f000 f8a6 	bl	8005068 <__retarget_lock_release_recursive>
 8004f1c:	bd10      	pop	{r4, pc}
 8004f1e:	46c0      	nop			; (mov r8, r8)
 8004f20:	20000353 	.word	0x20000353

08004f24 <__sinit>:
 8004f24:	b513      	push	{r0, r1, r4, lr}
 8004f26:	0004      	movs	r4, r0
 8004f28:	f7ff ffec 	bl	8004f04 <__sinit_lock_acquire>
 8004f2c:	69a3      	ldr	r3, [r4, #24]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d002      	beq.n	8004f38 <__sinit+0x14>
 8004f32:	f7ff ffef 	bl	8004f14 <__sinit_lock_release>
 8004f36:	bd13      	pop	{r0, r1, r4, pc}
 8004f38:	64a3      	str	r3, [r4, #72]	; 0x48
 8004f3a:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004f3c:	6523      	str	r3, [r4, #80]	; 0x50
 8004f3e:	4b13      	ldr	r3, [pc, #76]	; (8004f8c <__sinit+0x68>)
 8004f40:	4a13      	ldr	r2, [pc, #76]	; (8004f90 <__sinit+0x6c>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	62a2      	str	r2, [r4, #40]	; 0x28
 8004f46:	9301      	str	r3, [sp, #4]
 8004f48:	42a3      	cmp	r3, r4
 8004f4a:	d101      	bne.n	8004f50 <__sinit+0x2c>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	61a3      	str	r3, [r4, #24]
 8004f50:	0020      	movs	r0, r4
 8004f52:	f000 f81f 	bl	8004f94 <__sfp>
 8004f56:	6060      	str	r0, [r4, #4]
 8004f58:	0020      	movs	r0, r4
 8004f5a:	f000 f81b 	bl	8004f94 <__sfp>
 8004f5e:	60a0      	str	r0, [r4, #8]
 8004f60:	0020      	movs	r0, r4
 8004f62:	f000 f817 	bl	8004f94 <__sfp>
 8004f66:	2200      	movs	r2, #0
 8004f68:	2104      	movs	r1, #4
 8004f6a:	60e0      	str	r0, [r4, #12]
 8004f6c:	6860      	ldr	r0, [r4, #4]
 8004f6e:	f7ff ff77 	bl	8004e60 <std>
 8004f72:	2201      	movs	r2, #1
 8004f74:	2109      	movs	r1, #9
 8004f76:	68a0      	ldr	r0, [r4, #8]
 8004f78:	f7ff ff72 	bl	8004e60 <std>
 8004f7c:	2202      	movs	r2, #2
 8004f7e:	2112      	movs	r1, #18
 8004f80:	68e0      	ldr	r0, [r4, #12]
 8004f82:	f7ff ff6d 	bl	8004e60 <std>
 8004f86:	2301      	movs	r3, #1
 8004f88:	61a3      	str	r3, [r4, #24]
 8004f8a:	e7d2      	b.n	8004f32 <__sinit+0xe>
 8004f8c:	080062bc 	.word	0x080062bc
 8004f90:	08004ea9 	.word	0x08004ea9

08004f94 <__sfp>:
 8004f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f96:	0007      	movs	r7, r0
 8004f98:	f7ff ffa4 	bl	8004ee4 <__sfp_lock_acquire>
 8004f9c:	4b1f      	ldr	r3, [pc, #124]	; (800501c <__sfp+0x88>)
 8004f9e:	681e      	ldr	r6, [r3, #0]
 8004fa0:	69b3      	ldr	r3, [r6, #24]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d102      	bne.n	8004fac <__sfp+0x18>
 8004fa6:	0030      	movs	r0, r6
 8004fa8:	f7ff ffbc 	bl	8004f24 <__sinit>
 8004fac:	3648      	adds	r6, #72	; 0x48
 8004fae:	68b4      	ldr	r4, [r6, #8]
 8004fb0:	6873      	ldr	r3, [r6, #4]
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	d504      	bpl.n	8004fc0 <__sfp+0x2c>
 8004fb6:	6833      	ldr	r3, [r6, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d022      	beq.n	8005002 <__sfp+0x6e>
 8004fbc:	6836      	ldr	r6, [r6, #0]
 8004fbe:	e7f6      	b.n	8004fae <__sfp+0x1a>
 8004fc0:	220c      	movs	r2, #12
 8004fc2:	5ea5      	ldrsh	r5, [r4, r2]
 8004fc4:	2d00      	cmp	r5, #0
 8004fc6:	d11a      	bne.n	8004ffe <__sfp+0x6a>
 8004fc8:	0020      	movs	r0, r4
 8004fca:	4b15      	ldr	r3, [pc, #84]	; (8005020 <__sfp+0x8c>)
 8004fcc:	3058      	adds	r0, #88	; 0x58
 8004fce:	60e3      	str	r3, [r4, #12]
 8004fd0:	6665      	str	r5, [r4, #100]	; 0x64
 8004fd2:	f000 f847 	bl	8005064 <__retarget_lock_init_recursive>
 8004fd6:	f7ff ff8d 	bl	8004ef4 <__sfp_lock_release>
 8004fda:	0020      	movs	r0, r4
 8004fdc:	2208      	movs	r2, #8
 8004fde:	0029      	movs	r1, r5
 8004fe0:	6025      	str	r5, [r4, #0]
 8004fe2:	60a5      	str	r5, [r4, #8]
 8004fe4:	6065      	str	r5, [r4, #4]
 8004fe6:	6125      	str	r5, [r4, #16]
 8004fe8:	6165      	str	r5, [r4, #20]
 8004fea:	61a5      	str	r5, [r4, #24]
 8004fec:	305c      	adds	r0, #92	; 0x5c
 8004fee:	f7ff fef5 	bl	8004ddc <memset>
 8004ff2:	6365      	str	r5, [r4, #52]	; 0x34
 8004ff4:	63a5      	str	r5, [r4, #56]	; 0x38
 8004ff6:	64a5      	str	r5, [r4, #72]	; 0x48
 8004ff8:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004ffa:	0020      	movs	r0, r4
 8004ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ffe:	3468      	adds	r4, #104	; 0x68
 8005000:	e7d7      	b.n	8004fb2 <__sfp+0x1e>
 8005002:	2104      	movs	r1, #4
 8005004:	0038      	movs	r0, r7
 8005006:	f7ff ff57 	bl	8004eb8 <__sfmoreglue>
 800500a:	1e04      	subs	r4, r0, #0
 800500c:	6030      	str	r0, [r6, #0]
 800500e:	d1d5      	bne.n	8004fbc <__sfp+0x28>
 8005010:	f7ff ff70 	bl	8004ef4 <__sfp_lock_release>
 8005014:	230c      	movs	r3, #12
 8005016:	603b      	str	r3, [r7, #0]
 8005018:	e7ef      	b.n	8004ffa <__sfp+0x66>
 800501a:	46c0      	nop			; (mov r8, r8)
 800501c:	080062bc 	.word	0x080062bc
 8005020:	ffff0001 	.word	0xffff0001

08005024 <_fwalk_reent>:
 8005024:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005026:	0004      	movs	r4, r0
 8005028:	0006      	movs	r6, r0
 800502a:	2700      	movs	r7, #0
 800502c:	9101      	str	r1, [sp, #4]
 800502e:	3448      	adds	r4, #72	; 0x48
 8005030:	6863      	ldr	r3, [r4, #4]
 8005032:	68a5      	ldr	r5, [r4, #8]
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	9b00      	ldr	r3, [sp, #0]
 8005038:	3b01      	subs	r3, #1
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	d504      	bpl.n	8005048 <_fwalk_reent+0x24>
 800503e:	6824      	ldr	r4, [r4, #0]
 8005040:	2c00      	cmp	r4, #0
 8005042:	d1f5      	bne.n	8005030 <_fwalk_reent+0xc>
 8005044:	0038      	movs	r0, r7
 8005046:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005048:	89ab      	ldrh	r3, [r5, #12]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d908      	bls.n	8005060 <_fwalk_reent+0x3c>
 800504e:	220e      	movs	r2, #14
 8005050:	5eab      	ldrsh	r3, [r5, r2]
 8005052:	3301      	adds	r3, #1
 8005054:	d004      	beq.n	8005060 <_fwalk_reent+0x3c>
 8005056:	0029      	movs	r1, r5
 8005058:	0030      	movs	r0, r6
 800505a:	9b01      	ldr	r3, [sp, #4]
 800505c:	4798      	blx	r3
 800505e:	4307      	orrs	r7, r0
 8005060:	3568      	adds	r5, #104	; 0x68
 8005062:	e7e8      	b.n	8005036 <_fwalk_reent+0x12>

08005064 <__retarget_lock_init_recursive>:
 8005064:	4770      	bx	lr

08005066 <__retarget_lock_acquire_recursive>:
 8005066:	4770      	bx	lr

08005068 <__retarget_lock_release_recursive>:
 8005068:	4770      	bx	lr
	...

0800506c <_malloc_r>:
 800506c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800506e:	2303      	movs	r3, #3
 8005070:	1ccd      	adds	r5, r1, #3
 8005072:	439d      	bics	r5, r3
 8005074:	3508      	adds	r5, #8
 8005076:	0006      	movs	r6, r0
 8005078:	2d0c      	cmp	r5, #12
 800507a:	d21f      	bcs.n	80050bc <_malloc_r+0x50>
 800507c:	250c      	movs	r5, #12
 800507e:	42a9      	cmp	r1, r5
 8005080:	d81e      	bhi.n	80050c0 <_malloc_r+0x54>
 8005082:	0030      	movs	r0, r6
 8005084:	f000 ff5c 	bl	8005f40 <__malloc_lock>
 8005088:	4925      	ldr	r1, [pc, #148]	; (8005120 <_malloc_r+0xb4>)
 800508a:	680a      	ldr	r2, [r1, #0]
 800508c:	0014      	movs	r4, r2
 800508e:	2c00      	cmp	r4, #0
 8005090:	d11a      	bne.n	80050c8 <_malloc_r+0x5c>
 8005092:	4f24      	ldr	r7, [pc, #144]	; (8005124 <_malloc_r+0xb8>)
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d104      	bne.n	80050a4 <_malloc_r+0x38>
 800509a:	0021      	movs	r1, r4
 800509c:	0030      	movs	r0, r6
 800509e:	f000 fc89 	bl	80059b4 <_sbrk_r>
 80050a2:	6038      	str	r0, [r7, #0]
 80050a4:	0029      	movs	r1, r5
 80050a6:	0030      	movs	r0, r6
 80050a8:	f000 fc84 	bl	80059b4 <_sbrk_r>
 80050ac:	1c43      	adds	r3, r0, #1
 80050ae:	d12b      	bne.n	8005108 <_malloc_r+0x9c>
 80050b0:	230c      	movs	r3, #12
 80050b2:	0030      	movs	r0, r6
 80050b4:	6033      	str	r3, [r6, #0]
 80050b6:	f000 ff4b 	bl	8005f50 <__malloc_unlock>
 80050ba:	e003      	b.n	80050c4 <_malloc_r+0x58>
 80050bc:	2d00      	cmp	r5, #0
 80050be:	dade      	bge.n	800507e <_malloc_r+0x12>
 80050c0:	230c      	movs	r3, #12
 80050c2:	6033      	str	r3, [r6, #0]
 80050c4:	2000      	movs	r0, #0
 80050c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050c8:	6823      	ldr	r3, [r4, #0]
 80050ca:	1b5b      	subs	r3, r3, r5
 80050cc:	d419      	bmi.n	8005102 <_malloc_r+0x96>
 80050ce:	2b0b      	cmp	r3, #11
 80050d0:	d903      	bls.n	80050da <_malloc_r+0x6e>
 80050d2:	6023      	str	r3, [r4, #0]
 80050d4:	18e4      	adds	r4, r4, r3
 80050d6:	6025      	str	r5, [r4, #0]
 80050d8:	e003      	b.n	80050e2 <_malloc_r+0x76>
 80050da:	6863      	ldr	r3, [r4, #4]
 80050dc:	42a2      	cmp	r2, r4
 80050de:	d10e      	bne.n	80050fe <_malloc_r+0x92>
 80050e0:	600b      	str	r3, [r1, #0]
 80050e2:	0030      	movs	r0, r6
 80050e4:	f000 ff34 	bl	8005f50 <__malloc_unlock>
 80050e8:	0020      	movs	r0, r4
 80050ea:	2207      	movs	r2, #7
 80050ec:	300b      	adds	r0, #11
 80050ee:	1d23      	adds	r3, r4, #4
 80050f0:	4390      	bics	r0, r2
 80050f2:	1ac2      	subs	r2, r0, r3
 80050f4:	4298      	cmp	r0, r3
 80050f6:	d0e6      	beq.n	80050c6 <_malloc_r+0x5a>
 80050f8:	1a1b      	subs	r3, r3, r0
 80050fa:	50a3      	str	r3, [r4, r2]
 80050fc:	e7e3      	b.n	80050c6 <_malloc_r+0x5a>
 80050fe:	6053      	str	r3, [r2, #4]
 8005100:	e7ef      	b.n	80050e2 <_malloc_r+0x76>
 8005102:	0022      	movs	r2, r4
 8005104:	6864      	ldr	r4, [r4, #4]
 8005106:	e7c2      	b.n	800508e <_malloc_r+0x22>
 8005108:	2303      	movs	r3, #3
 800510a:	1cc4      	adds	r4, r0, #3
 800510c:	439c      	bics	r4, r3
 800510e:	42a0      	cmp	r0, r4
 8005110:	d0e1      	beq.n	80050d6 <_malloc_r+0x6a>
 8005112:	1a21      	subs	r1, r4, r0
 8005114:	0030      	movs	r0, r6
 8005116:	f000 fc4d 	bl	80059b4 <_sbrk_r>
 800511a:	1c43      	adds	r3, r0, #1
 800511c:	d1db      	bne.n	80050d6 <_malloc_r+0x6a>
 800511e:	e7c7      	b.n	80050b0 <_malloc_r+0x44>
 8005120:	200001e0 	.word	0x200001e0
 8005124:	200001e4 	.word	0x200001e4

08005128 <__ssputs_r>:
 8005128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800512a:	688e      	ldr	r6, [r1, #8]
 800512c:	b085      	sub	sp, #20
 800512e:	0007      	movs	r7, r0
 8005130:	000c      	movs	r4, r1
 8005132:	9203      	str	r2, [sp, #12]
 8005134:	9301      	str	r3, [sp, #4]
 8005136:	429e      	cmp	r6, r3
 8005138:	d83c      	bhi.n	80051b4 <__ssputs_r+0x8c>
 800513a:	2390      	movs	r3, #144	; 0x90
 800513c:	898a      	ldrh	r2, [r1, #12]
 800513e:	00db      	lsls	r3, r3, #3
 8005140:	421a      	tst	r2, r3
 8005142:	d034      	beq.n	80051ae <__ssputs_r+0x86>
 8005144:	2503      	movs	r5, #3
 8005146:	6909      	ldr	r1, [r1, #16]
 8005148:	6823      	ldr	r3, [r4, #0]
 800514a:	1a5b      	subs	r3, r3, r1
 800514c:	9302      	str	r3, [sp, #8]
 800514e:	6963      	ldr	r3, [r4, #20]
 8005150:	9802      	ldr	r0, [sp, #8]
 8005152:	435d      	muls	r5, r3
 8005154:	0feb      	lsrs	r3, r5, #31
 8005156:	195d      	adds	r5, r3, r5
 8005158:	9b01      	ldr	r3, [sp, #4]
 800515a:	106d      	asrs	r5, r5, #1
 800515c:	3301      	adds	r3, #1
 800515e:	181b      	adds	r3, r3, r0
 8005160:	42ab      	cmp	r3, r5
 8005162:	d900      	bls.n	8005166 <__ssputs_r+0x3e>
 8005164:	001d      	movs	r5, r3
 8005166:	0553      	lsls	r3, r2, #21
 8005168:	d532      	bpl.n	80051d0 <__ssputs_r+0xa8>
 800516a:	0029      	movs	r1, r5
 800516c:	0038      	movs	r0, r7
 800516e:	f7ff ff7d 	bl	800506c <_malloc_r>
 8005172:	1e06      	subs	r6, r0, #0
 8005174:	d109      	bne.n	800518a <__ssputs_r+0x62>
 8005176:	230c      	movs	r3, #12
 8005178:	603b      	str	r3, [r7, #0]
 800517a:	2340      	movs	r3, #64	; 0x40
 800517c:	2001      	movs	r0, #1
 800517e:	89a2      	ldrh	r2, [r4, #12]
 8005180:	4240      	negs	r0, r0
 8005182:	4313      	orrs	r3, r2
 8005184:	81a3      	strh	r3, [r4, #12]
 8005186:	b005      	add	sp, #20
 8005188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800518a:	9a02      	ldr	r2, [sp, #8]
 800518c:	6921      	ldr	r1, [r4, #16]
 800518e:	f000 feba 	bl	8005f06 <memcpy>
 8005192:	89a3      	ldrh	r3, [r4, #12]
 8005194:	4a14      	ldr	r2, [pc, #80]	; (80051e8 <__ssputs_r+0xc0>)
 8005196:	401a      	ands	r2, r3
 8005198:	2380      	movs	r3, #128	; 0x80
 800519a:	4313      	orrs	r3, r2
 800519c:	81a3      	strh	r3, [r4, #12]
 800519e:	9b02      	ldr	r3, [sp, #8]
 80051a0:	6126      	str	r6, [r4, #16]
 80051a2:	18f6      	adds	r6, r6, r3
 80051a4:	6026      	str	r6, [r4, #0]
 80051a6:	6165      	str	r5, [r4, #20]
 80051a8:	9e01      	ldr	r6, [sp, #4]
 80051aa:	1aed      	subs	r5, r5, r3
 80051ac:	60a5      	str	r5, [r4, #8]
 80051ae:	9b01      	ldr	r3, [sp, #4]
 80051b0:	429e      	cmp	r6, r3
 80051b2:	d900      	bls.n	80051b6 <__ssputs_r+0x8e>
 80051b4:	9e01      	ldr	r6, [sp, #4]
 80051b6:	0032      	movs	r2, r6
 80051b8:	9903      	ldr	r1, [sp, #12]
 80051ba:	6820      	ldr	r0, [r4, #0]
 80051bc:	f000 feac 	bl	8005f18 <memmove>
 80051c0:	68a3      	ldr	r3, [r4, #8]
 80051c2:	2000      	movs	r0, #0
 80051c4:	1b9b      	subs	r3, r3, r6
 80051c6:	60a3      	str	r3, [r4, #8]
 80051c8:	6823      	ldr	r3, [r4, #0]
 80051ca:	199e      	adds	r6, r3, r6
 80051cc:	6026      	str	r6, [r4, #0]
 80051ce:	e7da      	b.n	8005186 <__ssputs_r+0x5e>
 80051d0:	002a      	movs	r2, r5
 80051d2:	0038      	movs	r0, r7
 80051d4:	f000 ff0e 	bl	8005ff4 <_realloc_r>
 80051d8:	1e06      	subs	r6, r0, #0
 80051da:	d1e0      	bne.n	800519e <__ssputs_r+0x76>
 80051dc:	0038      	movs	r0, r7
 80051de:	6921      	ldr	r1, [r4, #16]
 80051e0:	f000 febe 	bl	8005f60 <_free_r>
 80051e4:	e7c7      	b.n	8005176 <__ssputs_r+0x4e>
 80051e6:	46c0      	nop			; (mov r8, r8)
 80051e8:	fffffb7f 	.word	0xfffffb7f

080051ec <_svfiprintf_r>:
 80051ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051ee:	b0a1      	sub	sp, #132	; 0x84
 80051f0:	9003      	str	r0, [sp, #12]
 80051f2:	001d      	movs	r5, r3
 80051f4:	898b      	ldrh	r3, [r1, #12]
 80051f6:	000f      	movs	r7, r1
 80051f8:	0016      	movs	r6, r2
 80051fa:	061b      	lsls	r3, r3, #24
 80051fc:	d511      	bpl.n	8005222 <_svfiprintf_r+0x36>
 80051fe:	690b      	ldr	r3, [r1, #16]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d10e      	bne.n	8005222 <_svfiprintf_r+0x36>
 8005204:	2140      	movs	r1, #64	; 0x40
 8005206:	f7ff ff31 	bl	800506c <_malloc_r>
 800520a:	6038      	str	r0, [r7, #0]
 800520c:	6138      	str	r0, [r7, #16]
 800520e:	2800      	cmp	r0, #0
 8005210:	d105      	bne.n	800521e <_svfiprintf_r+0x32>
 8005212:	230c      	movs	r3, #12
 8005214:	9a03      	ldr	r2, [sp, #12]
 8005216:	3801      	subs	r0, #1
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	b021      	add	sp, #132	; 0x84
 800521c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800521e:	2340      	movs	r3, #64	; 0x40
 8005220:	617b      	str	r3, [r7, #20]
 8005222:	2300      	movs	r3, #0
 8005224:	ac08      	add	r4, sp, #32
 8005226:	6163      	str	r3, [r4, #20]
 8005228:	3320      	adds	r3, #32
 800522a:	7663      	strb	r3, [r4, #25]
 800522c:	3310      	adds	r3, #16
 800522e:	76a3      	strb	r3, [r4, #26]
 8005230:	9507      	str	r5, [sp, #28]
 8005232:	0035      	movs	r5, r6
 8005234:	782b      	ldrb	r3, [r5, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d001      	beq.n	800523e <_svfiprintf_r+0x52>
 800523a:	2b25      	cmp	r3, #37	; 0x25
 800523c:	d147      	bne.n	80052ce <_svfiprintf_r+0xe2>
 800523e:	1bab      	subs	r3, r5, r6
 8005240:	9305      	str	r3, [sp, #20]
 8005242:	42b5      	cmp	r5, r6
 8005244:	d00c      	beq.n	8005260 <_svfiprintf_r+0x74>
 8005246:	0032      	movs	r2, r6
 8005248:	0039      	movs	r1, r7
 800524a:	9803      	ldr	r0, [sp, #12]
 800524c:	f7ff ff6c 	bl	8005128 <__ssputs_r>
 8005250:	1c43      	adds	r3, r0, #1
 8005252:	d100      	bne.n	8005256 <_svfiprintf_r+0x6a>
 8005254:	e0ae      	b.n	80053b4 <_svfiprintf_r+0x1c8>
 8005256:	6962      	ldr	r2, [r4, #20]
 8005258:	9b05      	ldr	r3, [sp, #20]
 800525a:	4694      	mov	ip, r2
 800525c:	4463      	add	r3, ip
 800525e:	6163      	str	r3, [r4, #20]
 8005260:	782b      	ldrb	r3, [r5, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d100      	bne.n	8005268 <_svfiprintf_r+0x7c>
 8005266:	e0a5      	b.n	80053b4 <_svfiprintf_r+0x1c8>
 8005268:	2201      	movs	r2, #1
 800526a:	2300      	movs	r3, #0
 800526c:	4252      	negs	r2, r2
 800526e:	6062      	str	r2, [r4, #4]
 8005270:	a904      	add	r1, sp, #16
 8005272:	3254      	adds	r2, #84	; 0x54
 8005274:	1852      	adds	r2, r2, r1
 8005276:	1c6e      	adds	r6, r5, #1
 8005278:	6023      	str	r3, [r4, #0]
 800527a:	60e3      	str	r3, [r4, #12]
 800527c:	60a3      	str	r3, [r4, #8]
 800527e:	7013      	strb	r3, [r2, #0]
 8005280:	65a3      	str	r3, [r4, #88]	; 0x58
 8005282:	2205      	movs	r2, #5
 8005284:	7831      	ldrb	r1, [r6, #0]
 8005286:	4854      	ldr	r0, [pc, #336]	; (80053d8 <_svfiprintf_r+0x1ec>)
 8005288:	f000 fe32 	bl	8005ef0 <memchr>
 800528c:	1c75      	adds	r5, r6, #1
 800528e:	2800      	cmp	r0, #0
 8005290:	d11f      	bne.n	80052d2 <_svfiprintf_r+0xe6>
 8005292:	6822      	ldr	r2, [r4, #0]
 8005294:	06d3      	lsls	r3, r2, #27
 8005296:	d504      	bpl.n	80052a2 <_svfiprintf_r+0xb6>
 8005298:	2353      	movs	r3, #83	; 0x53
 800529a:	a904      	add	r1, sp, #16
 800529c:	185b      	adds	r3, r3, r1
 800529e:	2120      	movs	r1, #32
 80052a0:	7019      	strb	r1, [r3, #0]
 80052a2:	0713      	lsls	r3, r2, #28
 80052a4:	d504      	bpl.n	80052b0 <_svfiprintf_r+0xc4>
 80052a6:	2353      	movs	r3, #83	; 0x53
 80052a8:	a904      	add	r1, sp, #16
 80052aa:	185b      	adds	r3, r3, r1
 80052ac:	212b      	movs	r1, #43	; 0x2b
 80052ae:	7019      	strb	r1, [r3, #0]
 80052b0:	7833      	ldrb	r3, [r6, #0]
 80052b2:	2b2a      	cmp	r3, #42	; 0x2a
 80052b4:	d016      	beq.n	80052e4 <_svfiprintf_r+0xf8>
 80052b6:	0035      	movs	r5, r6
 80052b8:	2100      	movs	r1, #0
 80052ba:	200a      	movs	r0, #10
 80052bc:	68e3      	ldr	r3, [r4, #12]
 80052be:	782a      	ldrb	r2, [r5, #0]
 80052c0:	1c6e      	adds	r6, r5, #1
 80052c2:	3a30      	subs	r2, #48	; 0x30
 80052c4:	2a09      	cmp	r2, #9
 80052c6:	d94e      	bls.n	8005366 <_svfiprintf_r+0x17a>
 80052c8:	2900      	cmp	r1, #0
 80052ca:	d111      	bne.n	80052f0 <_svfiprintf_r+0x104>
 80052cc:	e017      	b.n	80052fe <_svfiprintf_r+0x112>
 80052ce:	3501      	adds	r5, #1
 80052d0:	e7b0      	b.n	8005234 <_svfiprintf_r+0x48>
 80052d2:	4b41      	ldr	r3, [pc, #260]	; (80053d8 <_svfiprintf_r+0x1ec>)
 80052d4:	6822      	ldr	r2, [r4, #0]
 80052d6:	1ac0      	subs	r0, r0, r3
 80052d8:	2301      	movs	r3, #1
 80052da:	4083      	lsls	r3, r0
 80052dc:	4313      	orrs	r3, r2
 80052de:	002e      	movs	r6, r5
 80052e0:	6023      	str	r3, [r4, #0]
 80052e2:	e7ce      	b.n	8005282 <_svfiprintf_r+0x96>
 80052e4:	9b07      	ldr	r3, [sp, #28]
 80052e6:	1d19      	adds	r1, r3, #4
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	9107      	str	r1, [sp, #28]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	db01      	blt.n	80052f4 <_svfiprintf_r+0x108>
 80052f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80052f2:	e004      	b.n	80052fe <_svfiprintf_r+0x112>
 80052f4:	425b      	negs	r3, r3
 80052f6:	60e3      	str	r3, [r4, #12]
 80052f8:	2302      	movs	r3, #2
 80052fa:	4313      	orrs	r3, r2
 80052fc:	6023      	str	r3, [r4, #0]
 80052fe:	782b      	ldrb	r3, [r5, #0]
 8005300:	2b2e      	cmp	r3, #46	; 0x2e
 8005302:	d10a      	bne.n	800531a <_svfiprintf_r+0x12e>
 8005304:	786b      	ldrb	r3, [r5, #1]
 8005306:	2b2a      	cmp	r3, #42	; 0x2a
 8005308:	d135      	bne.n	8005376 <_svfiprintf_r+0x18a>
 800530a:	9b07      	ldr	r3, [sp, #28]
 800530c:	3502      	adds	r5, #2
 800530e:	1d1a      	adds	r2, r3, #4
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	9207      	str	r2, [sp, #28]
 8005314:	2b00      	cmp	r3, #0
 8005316:	db2b      	blt.n	8005370 <_svfiprintf_r+0x184>
 8005318:	9309      	str	r3, [sp, #36]	; 0x24
 800531a:	4e30      	ldr	r6, [pc, #192]	; (80053dc <_svfiprintf_r+0x1f0>)
 800531c:	2203      	movs	r2, #3
 800531e:	0030      	movs	r0, r6
 8005320:	7829      	ldrb	r1, [r5, #0]
 8005322:	f000 fde5 	bl	8005ef0 <memchr>
 8005326:	2800      	cmp	r0, #0
 8005328:	d006      	beq.n	8005338 <_svfiprintf_r+0x14c>
 800532a:	2340      	movs	r3, #64	; 0x40
 800532c:	1b80      	subs	r0, r0, r6
 800532e:	4083      	lsls	r3, r0
 8005330:	6822      	ldr	r2, [r4, #0]
 8005332:	3501      	adds	r5, #1
 8005334:	4313      	orrs	r3, r2
 8005336:	6023      	str	r3, [r4, #0]
 8005338:	7829      	ldrb	r1, [r5, #0]
 800533a:	2206      	movs	r2, #6
 800533c:	4828      	ldr	r0, [pc, #160]	; (80053e0 <_svfiprintf_r+0x1f4>)
 800533e:	1c6e      	adds	r6, r5, #1
 8005340:	7621      	strb	r1, [r4, #24]
 8005342:	f000 fdd5 	bl	8005ef0 <memchr>
 8005346:	2800      	cmp	r0, #0
 8005348:	d03c      	beq.n	80053c4 <_svfiprintf_r+0x1d8>
 800534a:	4b26      	ldr	r3, [pc, #152]	; (80053e4 <_svfiprintf_r+0x1f8>)
 800534c:	2b00      	cmp	r3, #0
 800534e:	d125      	bne.n	800539c <_svfiprintf_r+0x1b0>
 8005350:	2207      	movs	r2, #7
 8005352:	9b07      	ldr	r3, [sp, #28]
 8005354:	3307      	adds	r3, #7
 8005356:	4393      	bics	r3, r2
 8005358:	3308      	adds	r3, #8
 800535a:	9307      	str	r3, [sp, #28]
 800535c:	6963      	ldr	r3, [r4, #20]
 800535e:	9a04      	ldr	r2, [sp, #16]
 8005360:	189b      	adds	r3, r3, r2
 8005362:	6163      	str	r3, [r4, #20]
 8005364:	e765      	b.n	8005232 <_svfiprintf_r+0x46>
 8005366:	4343      	muls	r3, r0
 8005368:	0035      	movs	r5, r6
 800536a:	2101      	movs	r1, #1
 800536c:	189b      	adds	r3, r3, r2
 800536e:	e7a6      	b.n	80052be <_svfiprintf_r+0xd2>
 8005370:	2301      	movs	r3, #1
 8005372:	425b      	negs	r3, r3
 8005374:	e7d0      	b.n	8005318 <_svfiprintf_r+0x12c>
 8005376:	2300      	movs	r3, #0
 8005378:	200a      	movs	r0, #10
 800537a:	001a      	movs	r2, r3
 800537c:	3501      	adds	r5, #1
 800537e:	6063      	str	r3, [r4, #4]
 8005380:	7829      	ldrb	r1, [r5, #0]
 8005382:	1c6e      	adds	r6, r5, #1
 8005384:	3930      	subs	r1, #48	; 0x30
 8005386:	2909      	cmp	r1, #9
 8005388:	d903      	bls.n	8005392 <_svfiprintf_r+0x1a6>
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0c5      	beq.n	800531a <_svfiprintf_r+0x12e>
 800538e:	9209      	str	r2, [sp, #36]	; 0x24
 8005390:	e7c3      	b.n	800531a <_svfiprintf_r+0x12e>
 8005392:	4342      	muls	r2, r0
 8005394:	0035      	movs	r5, r6
 8005396:	2301      	movs	r3, #1
 8005398:	1852      	adds	r2, r2, r1
 800539a:	e7f1      	b.n	8005380 <_svfiprintf_r+0x194>
 800539c:	ab07      	add	r3, sp, #28
 800539e:	9300      	str	r3, [sp, #0]
 80053a0:	003a      	movs	r2, r7
 80053a2:	0021      	movs	r1, r4
 80053a4:	4b10      	ldr	r3, [pc, #64]	; (80053e8 <_svfiprintf_r+0x1fc>)
 80053a6:	9803      	ldr	r0, [sp, #12]
 80053a8:	e000      	b.n	80053ac <_svfiprintf_r+0x1c0>
 80053aa:	bf00      	nop
 80053ac:	9004      	str	r0, [sp, #16]
 80053ae:	9b04      	ldr	r3, [sp, #16]
 80053b0:	3301      	adds	r3, #1
 80053b2:	d1d3      	bne.n	800535c <_svfiprintf_r+0x170>
 80053b4:	89bb      	ldrh	r3, [r7, #12]
 80053b6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80053b8:	065b      	lsls	r3, r3, #25
 80053ba:	d400      	bmi.n	80053be <_svfiprintf_r+0x1d2>
 80053bc:	e72d      	b.n	800521a <_svfiprintf_r+0x2e>
 80053be:	2001      	movs	r0, #1
 80053c0:	4240      	negs	r0, r0
 80053c2:	e72a      	b.n	800521a <_svfiprintf_r+0x2e>
 80053c4:	ab07      	add	r3, sp, #28
 80053c6:	9300      	str	r3, [sp, #0]
 80053c8:	003a      	movs	r2, r7
 80053ca:	0021      	movs	r1, r4
 80053cc:	4b06      	ldr	r3, [pc, #24]	; (80053e8 <_svfiprintf_r+0x1fc>)
 80053ce:	9803      	ldr	r0, [sp, #12]
 80053d0:	f000 f9de 	bl	8005790 <_printf_i>
 80053d4:	e7ea      	b.n	80053ac <_svfiprintf_r+0x1c0>
 80053d6:	46c0      	nop			; (mov r8, r8)
 80053d8:	08006320 	.word	0x08006320
 80053dc:	08006326 	.word	0x08006326
 80053e0:	0800632a 	.word	0x0800632a
 80053e4:	00000000 	.word	0x00000000
 80053e8:	08005129 	.word	0x08005129

080053ec <__sfputc_r>:
 80053ec:	6893      	ldr	r3, [r2, #8]
 80053ee:	b510      	push	{r4, lr}
 80053f0:	3b01      	subs	r3, #1
 80053f2:	6093      	str	r3, [r2, #8]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	da04      	bge.n	8005402 <__sfputc_r+0x16>
 80053f8:	6994      	ldr	r4, [r2, #24]
 80053fa:	42a3      	cmp	r3, r4
 80053fc:	db07      	blt.n	800540e <__sfputc_r+0x22>
 80053fe:	290a      	cmp	r1, #10
 8005400:	d005      	beq.n	800540e <__sfputc_r+0x22>
 8005402:	6813      	ldr	r3, [r2, #0]
 8005404:	1c58      	adds	r0, r3, #1
 8005406:	6010      	str	r0, [r2, #0]
 8005408:	7019      	strb	r1, [r3, #0]
 800540a:	0008      	movs	r0, r1
 800540c:	bd10      	pop	{r4, pc}
 800540e:	f000 fb2f 	bl	8005a70 <__swbuf_r>
 8005412:	0001      	movs	r1, r0
 8005414:	e7f9      	b.n	800540a <__sfputc_r+0x1e>

08005416 <__sfputs_r>:
 8005416:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005418:	0006      	movs	r6, r0
 800541a:	000f      	movs	r7, r1
 800541c:	0014      	movs	r4, r2
 800541e:	18d5      	adds	r5, r2, r3
 8005420:	42ac      	cmp	r4, r5
 8005422:	d101      	bne.n	8005428 <__sfputs_r+0x12>
 8005424:	2000      	movs	r0, #0
 8005426:	e007      	b.n	8005438 <__sfputs_r+0x22>
 8005428:	7821      	ldrb	r1, [r4, #0]
 800542a:	003a      	movs	r2, r7
 800542c:	0030      	movs	r0, r6
 800542e:	f7ff ffdd 	bl	80053ec <__sfputc_r>
 8005432:	3401      	adds	r4, #1
 8005434:	1c43      	adds	r3, r0, #1
 8005436:	d1f3      	bne.n	8005420 <__sfputs_r+0xa>
 8005438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800543c <_vfiprintf_r>:
 800543c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800543e:	b0a1      	sub	sp, #132	; 0x84
 8005440:	0006      	movs	r6, r0
 8005442:	000c      	movs	r4, r1
 8005444:	001f      	movs	r7, r3
 8005446:	9203      	str	r2, [sp, #12]
 8005448:	2800      	cmp	r0, #0
 800544a:	d004      	beq.n	8005456 <_vfiprintf_r+0x1a>
 800544c:	6983      	ldr	r3, [r0, #24]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <_vfiprintf_r+0x1a>
 8005452:	f7ff fd67 	bl	8004f24 <__sinit>
 8005456:	4b8e      	ldr	r3, [pc, #568]	; (8005690 <_vfiprintf_r+0x254>)
 8005458:	429c      	cmp	r4, r3
 800545a:	d11c      	bne.n	8005496 <_vfiprintf_r+0x5a>
 800545c:	6874      	ldr	r4, [r6, #4]
 800545e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005460:	07db      	lsls	r3, r3, #31
 8005462:	d405      	bmi.n	8005470 <_vfiprintf_r+0x34>
 8005464:	89a3      	ldrh	r3, [r4, #12]
 8005466:	059b      	lsls	r3, r3, #22
 8005468:	d402      	bmi.n	8005470 <_vfiprintf_r+0x34>
 800546a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800546c:	f7ff fdfb 	bl	8005066 <__retarget_lock_acquire_recursive>
 8005470:	89a3      	ldrh	r3, [r4, #12]
 8005472:	071b      	lsls	r3, r3, #28
 8005474:	d502      	bpl.n	800547c <_vfiprintf_r+0x40>
 8005476:	6923      	ldr	r3, [r4, #16]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d11d      	bne.n	80054b8 <_vfiprintf_r+0x7c>
 800547c:	0021      	movs	r1, r4
 800547e:	0030      	movs	r0, r6
 8005480:	f000 fb60 	bl	8005b44 <__swsetup_r>
 8005484:	2800      	cmp	r0, #0
 8005486:	d017      	beq.n	80054b8 <_vfiprintf_r+0x7c>
 8005488:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800548a:	07db      	lsls	r3, r3, #31
 800548c:	d50d      	bpl.n	80054aa <_vfiprintf_r+0x6e>
 800548e:	2001      	movs	r0, #1
 8005490:	4240      	negs	r0, r0
 8005492:	b021      	add	sp, #132	; 0x84
 8005494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005496:	4b7f      	ldr	r3, [pc, #508]	; (8005694 <_vfiprintf_r+0x258>)
 8005498:	429c      	cmp	r4, r3
 800549a:	d101      	bne.n	80054a0 <_vfiprintf_r+0x64>
 800549c:	68b4      	ldr	r4, [r6, #8]
 800549e:	e7de      	b.n	800545e <_vfiprintf_r+0x22>
 80054a0:	4b7d      	ldr	r3, [pc, #500]	; (8005698 <_vfiprintf_r+0x25c>)
 80054a2:	429c      	cmp	r4, r3
 80054a4:	d1db      	bne.n	800545e <_vfiprintf_r+0x22>
 80054a6:	68f4      	ldr	r4, [r6, #12]
 80054a8:	e7d9      	b.n	800545e <_vfiprintf_r+0x22>
 80054aa:	89a3      	ldrh	r3, [r4, #12]
 80054ac:	059b      	lsls	r3, r3, #22
 80054ae:	d4ee      	bmi.n	800548e <_vfiprintf_r+0x52>
 80054b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054b2:	f7ff fdd9 	bl	8005068 <__retarget_lock_release_recursive>
 80054b6:	e7ea      	b.n	800548e <_vfiprintf_r+0x52>
 80054b8:	2300      	movs	r3, #0
 80054ba:	ad08      	add	r5, sp, #32
 80054bc:	616b      	str	r3, [r5, #20]
 80054be:	3320      	adds	r3, #32
 80054c0:	766b      	strb	r3, [r5, #25]
 80054c2:	3310      	adds	r3, #16
 80054c4:	76ab      	strb	r3, [r5, #26]
 80054c6:	9707      	str	r7, [sp, #28]
 80054c8:	9f03      	ldr	r7, [sp, #12]
 80054ca:	783b      	ldrb	r3, [r7, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d001      	beq.n	80054d4 <_vfiprintf_r+0x98>
 80054d0:	2b25      	cmp	r3, #37	; 0x25
 80054d2:	d14e      	bne.n	8005572 <_vfiprintf_r+0x136>
 80054d4:	9b03      	ldr	r3, [sp, #12]
 80054d6:	1afb      	subs	r3, r7, r3
 80054d8:	9305      	str	r3, [sp, #20]
 80054da:	9b03      	ldr	r3, [sp, #12]
 80054dc:	429f      	cmp	r7, r3
 80054de:	d00d      	beq.n	80054fc <_vfiprintf_r+0xc0>
 80054e0:	9b05      	ldr	r3, [sp, #20]
 80054e2:	0021      	movs	r1, r4
 80054e4:	0030      	movs	r0, r6
 80054e6:	9a03      	ldr	r2, [sp, #12]
 80054e8:	f7ff ff95 	bl	8005416 <__sfputs_r>
 80054ec:	1c43      	adds	r3, r0, #1
 80054ee:	d100      	bne.n	80054f2 <_vfiprintf_r+0xb6>
 80054f0:	e0b5      	b.n	800565e <_vfiprintf_r+0x222>
 80054f2:	696a      	ldr	r2, [r5, #20]
 80054f4:	9b05      	ldr	r3, [sp, #20]
 80054f6:	4694      	mov	ip, r2
 80054f8:	4463      	add	r3, ip
 80054fa:	616b      	str	r3, [r5, #20]
 80054fc:	783b      	ldrb	r3, [r7, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d100      	bne.n	8005504 <_vfiprintf_r+0xc8>
 8005502:	e0ac      	b.n	800565e <_vfiprintf_r+0x222>
 8005504:	2201      	movs	r2, #1
 8005506:	1c7b      	adds	r3, r7, #1
 8005508:	9303      	str	r3, [sp, #12]
 800550a:	2300      	movs	r3, #0
 800550c:	4252      	negs	r2, r2
 800550e:	606a      	str	r2, [r5, #4]
 8005510:	a904      	add	r1, sp, #16
 8005512:	3254      	adds	r2, #84	; 0x54
 8005514:	1852      	adds	r2, r2, r1
 8005516:	602b      	str	r3, [r5, #0]
 8005518:	60eb      	str	r3, [r5, #12]
 800551a:	60ab      	str	r3, [r5, #8]
 800551c:	7013      	strb	r3, [r2, #0]
 800551e:	65ab      	str	r3, [r5, #88]	; 0x58
 8005520:	9b03      	ldr	r3, [sp, #12]
 8005522:	2205      	movs	r2, #5
 8005524:	7819      	ldrb	r1, [r3, #0]
 8005526:	485d      	ldr	r0, [pc, #372]	; (800569c <_vfiprintf_r+0x260>)
 8005528:	f000 fce2 	bl	8005ef0 <memchr>
 800552c:	9b03      	ldr	r3, [sp, #12]
 800552e:	1c5f      	adds	r7, r3, #1
 8005530:	2800      	cmp	r0, #0
 8005532:	d120      	bne.n	8005576 <_vfiprintf_r+0x13a>
 8005534:	682a      	ldr	r2, [r5, #0]
 8005536:	06d3      	lsls	r3, r2, #27
 8005538:	d504      	bpl.n	8005544 <_vfiprintf_r+0x108>
 800553a:	2353      	movs	r3, #83	; 0x53
 800553c:	a904      	add	r1, sp, #16
 800553e:	185b      	adds	r3, r3, r1
 8005540:	2120      	movs	r1, #32
 8005542:	7019      	strb	r1, [r3, #0]
 8005544:	0713      	lsls	r3, r2, #28
 8005546:	d504      	bpl.n	8005552 <_vfiprintf_r+0x116>
 8005548:	2353      	movs	r3, #83	; 0x53
 800554a:	a904      	add	r1, sp, #16
 800554c:	185b      	adds	r3, r3, r1
 800554e:	212b      	movs	r1, #43	; 0x2b
 8005550:	7019      	strb	r1, [r3, #0]
 8005552:	9b03      	ldr	r3, [sp, #12]
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	2b2a      	cmp	r3, #42	; 0x2a
 8005558:	d016      	beq.n	8005588 <_vfiprintf_r+0x14c>
 800555a:	2100      	movs	r1, #0
 800555c:	68eb      	ldr	r3, [r5, #12]
 800555e:	9f03      	ldr	r7, [sp, #12]
 8005560:	783a      	ldrb	r2, [r7, #0]
 8005562:	1c78      	adds	r0, r7, #1
 8005564:	3a30      	subs	r2, #48	; 0x30
 8005566:	4684      	mov	ip, r0
 8005568:	2a09      	cmp	r2, #9
 800556a:	d94f      	bls.n	800560c <_vfiprintf_r+0x1d0>
 800556c:	2900      	cmp	r1, #0
 800556e:	d111      	bne.n	8005594 <_vfiprintf_r+0x158>
 8005570:	e017      	b.n	80055a2 <_vfiprintf_r+0x166>
 8005572:	3701      	adds	r7, #1
 8005574:	e7a9      	b.n	80054ca <_vfiprintf_r+0x8e>
 8005576:	4b49      	ldr	r3, [pc, #292]	; (800569c <_vfiprintf_r+0x260>)
 8005578:	682a      	ldr	r2, [r5, #0]
 800557a:	1ac0      	subs	r0, r0, r3
 800557c:	2301      	movs	r3, #1
 800557e:	4083      	lsls	r3, r0
 8005580:	4313      	orrs	r3, r2
 8005582:	602b      	str	r3, [r5, #0]
 8005584:	9703      	str	r7, [sp, #12]
 8005586:	e7cb      	b.n	8005520 <_vfiprintf_r+0xe4>
 8005588:	9b07      	ldr	r3, [sp, #28]
 800558a:	1d19      	adds	r1, r3, #4
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	9107      	str	r1, [sp, #28]
 8005590:	2b00      	cmp	r3, #0
 8005592:	db01      	blt.n	8005598 <_vfiprintf_r+0x15c>
 8005594:	930b      	str	r3, [sp, #44]	; 0x2c
 8005596:	e004      	b.n	80055a2 <_vfiprintf_r+0x166>
 8005598:	425b      	negs	r3, r3
 800559a:	60eb      	str	r3, [r5, #12]
 800559c:	2302      	movs	r3, #2
 800559e:	4313      	orrs	r3, r2
 80055a0:	602b      	str	r3, [r5, #0]
 80055a2:	783b      	ldrb	r3, [r7, #0]
 80055a4:	2b2e      	cmp	r3, #46	; 0x2e
 80055a6:	d10a      	bne.n	80055be <_vfiprintf_r+0x182>
 80055a8:	787b      	ldrb	r3, [r7, #1]
 80055aa:	2b2a      	cmp	r3, #42	; 0x2a
 80055ac:	d137      	bne.n	800561e <_vfiprintf_r+0x1e2>
 80055ae:	9b07      	ldr	r3, [sp, #28]
 80055b0:	3702      	adds	r7, #2
 80055b2:	1d1a      	adds	r2, r3, #4
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	9207      	str	r2, [sp, #28]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	db2d      	blt.n	8005618 <_vfiprintf_r+0x1dc>
 80055bc:	9309      	str	r3, [sp, #36]	; 0x24
 80055be:	2203      	movs	r2, #3
 80055c0:	7839      	ldrb	r1, [r7, #0]
 80055c2:	4837      	ldr	r0, [pc, #220]	; (80056a0 <_vfiprintf_r+0x264>)
 80055c4:	f000 fc94 	bl	8005ef0 <memchr>
 80055c8:	2800      	cmp	r0, #0
 80055ca:	d007      	beq.n	80055dc <_vfiprintf_r+0x1a0>
 80055cc:	4b34      	ldr	r3, [pc, #208]	; (80056a0 <_vfiprintf_r+0x264>)
 80055ce:	682a      	ldr	r2, [r5, #0]
 80055d0:	1ac0      	subs	r0, r0, r3
 80055d2:	2340      	movs	r3, #64	; 0x40
 80055d4:	4083      	lsls	r3, r0
 80055d6:	4313      	orrs	r3, r2
 80055d8:	3701      	adds	r7, #1
 80055da:	602b      	str	r3, [r5, #0]
 80055dc:	7839      	ldrb	r1, [r7, #0]
 80055de:	1c7b      	adds	r3, r7, #1
 80055e0:	2206      	movs	r2, #6
 80055e2:	4830      	ldr	r0, [pc, #192]	; (80056a4 <_vfiprintf_r+0x268>)
 80055e4:	9303      	str	r3, [sp, #12]
 80055e6:	7629      	strb	r1, [r5, #24]
 80055e8:	f000 fc82 	bl	8005ef0 <memchr>
 80055ec:	2800      	cmp	r0, #0
 80055ee:	d045      	beq.n	800567c <_vfiprintf_r+0x240>
 80055f0:	4b2d      	ldr	r3, [pc, #180]	; (80056a8 <_vfiprintf_r+0x26c>)
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d127      	bne.n	8005646 <_vfiprintf_r+0x20a>
 80055f6:	2207      	movs	r2, #7
 80055f8:	9b07      	ldr	r3, [sp, #28]
 80055fa:	3307      	adds	r3, #7
 80055fc:	4393      	bics	r3, r2
 80055fe:	3308      	adds	r3, #8
 8005600:	9307      	str	r3, [sp, #28]
 8005602:	696b      	ldr	r3, [r5, #20]
 8005604:	9a04      	ldr	r2, [sp, #16]
 8005606:	189b      	adds	r3, r3, r2
 8005608:	616b      	str	r3, [r5, #20]
 800560a:	e75d      	b.n	80054c8 <_vfiprintf_r+0x8c>
 800560c:	210a      	movs	r1, #10
 800560e:	434b      	muls	r3, r1
 8005610:	4667      	mov	r7, ip
 8005612:	189b      	adds	r3, r3, r2
 8005614:	3909      	subs	r1, #9
 8005616:	e7a3      	b.n	8005560 <_vfiprintf_r+0x124>
 8005618:	2301      	movs	r3, #1
 800561a:	425b      	negs	r3, r3
 800561c:	e7ce      	b.n	80055bc <_vfiprintf_r+0x180>
 800561e:	2300      	movs	r3, #0
 8005620:	001a      	movs	r2, r3
 8005622:	3701      	adds	r7, #1
 8005624:	606b      	str	r3, [r5, #4]
 8005626:	7839      	ldrb	r1, [r7, #0]
 8005628:	1c78      	adds	r0, r7, #1
 800562a:	3930      	subs	r1, #48	; 0x30
 800562c:	4684      	mov	ip, r0
 800562e:	2909      	cmp	r1, #9
 8005630:	d903      	bls.n	800563a <_vfiprintf_r+0x1fe>
 8005632:	2b00      	cmp	r3, #0
 8005634:	d0c3      	beq.n	80055be <_vfiprintf_r+0x182>
 8005636:	9209      	str	r2, [sp, #36]	; 0x24
 8005638:	e7c1      	b.n	80055be <_vfiprintf_r+0x182>
 800563a:	230a      	movs	r3, #10
 800563c:	435a      	muls	r2, r3
 800563e:	4667      	mov	r7, ip
 8005640:	1852      	adds	r2, r2, r1
 8005642:	3b09      	subs	r3, #9
 8005644:	e7ef      	b.n	8005626 <_vfiprintf_r+0x1ea>
 8005646:	ab07      	add	r3, sp, #28
 8005648:	9300      	str	r3, [sp, #0]
 800564a:	0022      	movs	r2, r4
 800564c:	0029      	movs	r1, r5
 800564e:	0030      	movs	r0, r6
 8005650:	4b16      	ldr	r3, [pc, #88]	; (80056ac <_vfiprintf_r+0x270>)
 8005652:	e000      	b.n	8005656 <_vfiprintf_r+0x21a>
 8005654:	bf00      	nop
 8005656:	9004      	str	r0, [sp, #16]
 8005658:	9b04      	ldr	r3, [sp, #16]
 800565a:	3301      	adds	r3, #1
 800565c:	d1d1      	bne.n	8005602 <_vfiprintf_r+0x1c6>
 800565e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005660:	07db      	lsls	r3, r3, #31
 8005662:	d405      	bmi.n	8005670 <_vfiprintf_r+0x234>
 8005664:	89a3      	ldrh	r3, [r4, #12]
 8005666:	059b      	lsls	r3, r3, #22
 8005668:	d402      	bmi.n	8005670 <_vfiprintf_r+0x234>
 800566a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800566c:	f7ff fcfc 	bl	8005068 <__retarget_lock_release_recursive>
 8005670:	89a3      	ldrh	r3, [r4, #12]
 8005672:	065b      	lsls	r3, r3, #25
 8005674:	d500      	bpl.n	8005678 <_vfiprintf_r+0x23c>
 8005676:	e70a      	b.n	800548e <_vfiprintf_r+0x52>
 8005678:	980d      	ldr	r0, [sp, #52]	; 0x34
 800567a:	e70a      	b.n	8005492 <_vfiprintf_r+0x56>
 800567c:	ab07      	add	r3, sp, #28
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	0022      	movs	r2, r4
 8005682:	0029      	movs	r1, r5
 8005684:	0030      	movs	r0, r6
 8005686:	4b09      	ldr	r3, [pc, #36]	; (80056ac <_vfiprintf_r+0x270>)
 8005688:	f000 f882 	bl	8005790 <_printf_i>
 800568c:	e7e3      	b.n	8005656 <_vfiprintf_r+0x21a>
 800568e:	46c0      	nop			; (mov r8, r8)
 8005690:	080062e0 	.word	0x080062e0
 8005694:	08006300 	.word	0x08006300
 8005698:	080062c0 	.word	0x080062c0
 800569c:	08006320 	.word	0x08006320
 80056a0:	08006326 	.word	0x08006326
 80056a4:	0800632a 	.word	0x0800632a
 80056a8:	00000000 	.word	0x00000000
 80056ac:	08005417 	.word	0x08005417

080056b0 <_printf_common>:
 80056b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056b2:	0015      	movs	r5, r2
 80056b4:	9301      	str	r3, [sp, #4]
 80056b6:	688a      	ldr	r2, [r1, #8]
 80056b8:	690b      	ldr	r3, [r1, #16]
 80056ba:	000c      	movs	r4, r1
 80056bc:	9000      	str	r0, [sp, #0]
 80056be:	4293      	cmp	r3, r2
 80056c0:	da00      	bge.n	80056c4 <_printf_common+0x14>
 80056c2:	0013      	movs	r3, r2
 80056c4:	0022      	movs	r2, r4
 80056c6:	602b      	str	r3, [r5, #0]
 80056c8:	3243      	adds	r2, #67	; 0x43
 80056ca:	7812      	ldrb	r2, [r2, #0]
 80056cc:	2a00      	cmp	r2, #0
 80056ce:	d001      	beq.n	80056d4 <_printf_common+0x24>
 80056d0:	3301      	adds	r3, #1
 80056d2:	602b      	str	r3, [r5, #0]
 80056d4:	6823      	ldr	r3, [r4, #0]
 80056d6:	069b      	lsls	r3, r3, #26
 80056d8:	d502      	bpl.n	80056e0 <_printf_common+0x30>
 80056da:	682b      	ldr	r3, [r5, #0]
 80056dc:	3302      	adds	r3, #2
 80056de:	602b      	str	r3, [r5, #0]
 80056e0:	6822      	ldr	r2, [r4, #0]
 80056e2:	2306      	movs	r3, #6
 80056e4:	0017      	movs	r7, r2
 80056e6:	401f      	ands	r7, r3
 80056e8:	421a      	tst	r2, r3
 80056ea:	d027      	beq.n	800573c <_printf_common+0x8c>
 80056ec:	0023      	movs	r3, r4
 80056ee:	3343      	adds	r3, #67	; 0x43
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	1e5a      	subs	r2, r3, #1
 80056f4:	4193      	sbcs	r3, r2
 80056f6:	6822      	ldr	r2, [r4, #0]
 80056f8:	0692      	lsls	r2, r2, #26
 80056fa:	d430      	bmi.n	800575e <_printf_common+0xae>
 80056fc:	0022      	movs	r2, r4
 80056fe:	9901      	ldr	r1, [sp, #4]
 8005700:	9800      	ldr	r0, [sp, #0]
 8005702:	9e08      	ldr	r6, [sp, #32]
 8005704:	3243      	adds	r2, #67	; 0x43
 8005706:	47b0      	blx	r6
 8005708:	1c43      	adds	r3, r0, #1
 800570a:	d025      	beq.n	8005758 <_printf_common+0xa8>
 800570c:	2306      	movs	r3, #6
 800570e:	6820      	ldr	r0, [r4, #0]
 8005710:	682a      	ldr	r2, [r5, #0]
 8005712:	68e1      	ldr	r1, [r4, #12]
 8005714:	2500      	movs	r5, #0
 8005716:	4003      	ands	r3, r0
 8005718:	2b04      	cmp	r3, #4
 800571a:	d103      	bne.n	8005724 <_printf_common+0x74>
 800571c:	1a8d      	subs	r5, r1, r2
 800571e:	43eb      	mvns	r3, r5
 8005720:	17db      	asrs	r3, r3, #31
 8005722:	401d      	ands	r5, r3
 8005724:	68a3      	ldr	r3, [r4, #8]
 8005726:	6922      	ldr	r2, [r4, #16]
 8005728:	4293      	cmp	r3, r2
 800572a:	dd01      	ble.n	8005730 <_printf_common+0x80>
 800572c:	1a9b      	subs	r3, r3, r2
 800572e:	18ed      	adds	r5, r5, r3
 8005730:	2700      	movs	r7, #0
 8005732:	42bd      	cmp	r5, r7
 8005734:	d120      	bne.n	8005778 <_printf_common+0xc8>
 8005736:	2000      	movs	r0, #0
 8005738:	e010      	b.n	800575c <_printf_common+0xac>
 800573a:	3701      	adds	r7, #1
 800573c:	68e3      	ldr	r3, [r4, #12]
 800573e:	682a      	ldr	r2, [r5, #0]
 8005740:	1a9b      	subs	r3, r3, r2
 8005742:	42bb      	cmp	r3, r7
 8005744:	ddd2      	ble.n	80056ec <_printf_common+0x3c>
 8005746:	0022      	movs	r2, r4
 8005748:	2301      	movs	r3, #1
 800574a:	9901      	ldr	r1, [sp, #4]
 800574c:	9800      	ldr	r0, [sp, #0]
 800574e:	9e08      	ldr	r6, [sp, #32]
 8005750:	3219      	adds	r2, #25
 8005752:	47b0      	blx	r6
 8005754:	1c43      	adds	r3, r0, #1
 8005756:	d1f0      	bne.n	800573a <_printf_common+0x8a>
 8005758:	2001      	movs	r0, #1
 800575a:	4240      	negs	r0, r0
 800575c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800575e:	2030      	movs	r0, #48	; 0x30
 8005760:	18e1      	adds	r1, r4, r3
 8005762:	3143      	adds	r1, #67	; 0x43
 8005764:	7008      	strb	r0, [r1, #0]
 8005766:	0021      	movs	r1, r4
 8005768:	1c5a      	adds	r2, r3, #1
 800576a:	3145      	adds	r1, #69	; 0x45
 800576c:	7809      	ldrb	r1, [r1, #0]
 800576e:	18a2      	adds	r2, r4, r2
 8005770:	3243      	adds	r2, #67	; 0x43
 8005772:	3302      	adds	r3, #2
 8005774:	7011      	strb	r1, [r2, #0]
 8005776:	e7c1      	b.n	80056fc <_printf_common+0x4c>
 8005778:	0022      	movs	r2, r4
 800577a:	2301      	movs	r3, #1
 800577c:	9901      	ldr	r1, [sp, #4]
 800577e:	9800      	ldr	r0, [sp, #0]
 8005780:	9e08      	ldr	r6, [sp, #32]
 8005782:	321a      	adds	r2, #26
 8005784:	47b0      	blx	r6
 8005786:	1c43      	adds	r3, r0, #1
 8005788:	d0e6      	beq.n	8005758 <_printf_common+0xa8>
 800578a:	3701      	adds	r7, #1
 800578c:	e7d1      	b.n	8005732 <_printf_common+0x82>
	...

08005790 <_printf_i>:
 8005790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005792:	b08b      	sub	sp, #44	; 0x2c
 8005794:	9206      	str	r2, [sp, #24]
 8005796:	000a      	movs	r2, r1
 8005798:	3243      	adds	r2, #67	; 0x43
 800579a:	9307      	str	r3, [sp, #28]
 800579c:	9005      	str	r0, [sp, #20]
 800579e:	9204      	str	r2, [sp, #16]
 80057a0:	7e0a      	ldrb	r2, [r1, #24]
 80057a2:	000c      	movs	r4, r1
 80057a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80057a6:	2a78      	cmp	r2, #120	; 0x78
 80057a8:	d806      	bhi.n	80057b8 <_printf_i+0x28>
 80057aa:	2a62      	cmp	r2, #98	; 0x62
 80057ac:	d808      	bhi.n	80057c0 <_printf_i+0x30>
 80057ae:	2a00      	cmp	r2, #0
 80057b0:	d100      	bne.n	80057b4 <_printf_i+0x24>
 80057b2:	e0c0      	b.n	8005936 <_printf_i+0x1a6>
 80057b4:	2a58      	cmp	r2, #88	; 0x58
 80057b6:	d052      	beq.n	800585e <_printf_i+0xce>
 80057b8:	0026      	movs	r6, r4
 80057ba:	3642      	adds	r6, #66	; 0x42
 80057bc:	7032      	strb	r2, [r6, #0]
 80057be:	e022      	b.n	8005806 <_printf_i+0x76>
 80057c0:	0010      	movs	r0, r2
 80057c2:	3863      	subs	r0, #99	; 0x63
 80057c4:	2815      	cmp	r0, #21
 80057c6:	d8f7      	bhi.n	80057b8 <_printf_i+0x28>
 80057c8:	f7fa fca6 	bl	8000118 <__gnu_thumb1_case_shi>
 80057cc:	001f0016 	.word	0x001f0016
 80057d0:	fff6fff6 	.word	0xfff6fff6
 80057d4:	fff6fff6 	.word	0xfff6fff6
 80057d8:	fff6001f 	.word	0xfff6001f
 80057dc:	fff6fff6 	.word	0xfff6fff6
 80057e0:	00a8fff6 	.word	0x00a8fff6
 80057e4:	009a0036 	.word	0x009a0036
 80057e8:	fff6fff6 	.word	0xfff6fff6
 80057ec:	fff600b9 	.word	0xfff600b9
 80057f0:	fff60036 	.word	0xfff60036
 80057f4:	009efff6 	.word	0x009efff6
 80057f8:	0026      	movs	r6, r4
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	3642      	adds	r6, #66	; 0x42
 80057fe:	1d11      	adds	r1, r2, #4
 8005800:	6019      	str	r1, [r3, #0]
 8005802:	6813      	ldr	r3, [r2, #0]
 8005804:	7033      	strb	r3, [r6, #0]
 8005806:	2301      	movs	r3, #1
 8005808:	e0a7      	b.n	800595a <_printf_i+0x1ca>
 800580a:	6808      	ldr	r0, [r1, #0]
 800580c:	6819      	ldr	r1, [r3, #0]
 800580e:	1d0a      	adds	r2, r1, #4
 8005810:	0605      	lsls	r5, r0, #24
 8005812:	d50b      	bpl.n	800582c <_printf_i+0x9c>
 8005814:	680d      	ldr	r5, [r1, #0]
 8005816:	601a      	str	r2, [r3, #0]
 8005818:	2d00      	cmp	r5, #0
 800581a:	da03      	bge.n	8005824 <_printf_i+0x94>
 800581c:	232d      	movs	r3, #45	; 0x2d
 800581e:	9a04      	ldr	r2, [sp, #16]
 8005820:	426d      	negs	r5, r5
 8005822:	7013      	strb	r3, [r2, #0]
 8005824:	4b61      	ldr	r3, [pc, #388]	; (80059ac <_printf_i+0x21c>)
 8005826:	270a      	movs	r7, #10
 8005828:	9303      	str	r3, [sp, #12]
 800582a:	e032      	b.n	8005892 <_printf_i+0x102>
 800582c:	680d      	ldr	r5, [r1, #0]
 800582e:	601a      	str	r2, [r3, #0]
 8005830:	0641      	lsls	r1, r0, #25
 8005832:	d5f1      	bpl.n	8005818 <_printf_i+0x88>
 8005834:	b22d      	sxth	r5, r5
 8005836:	e7ef      	b.n	8005818 <_printf_i+0x88>
 8005838:	680d      	ldr	r5, [r1, #0]
 800583a:	6819      	ldr	r1, [r3, #0]
 800583c:	1d08      	adds	r0, r1, #4
 800583e:	6018      	str	r0, [r3, #0]
 8005840:	062e      	lsls	r6, r5, #24
 8005842:	d501      	bpl.n	8005848 <_printf_i+0xb8>
 8005844:	680d      	ldr	r5, [r1, #0]
 8005846:	e003      	b.n	8005850 <_printf_i+0xc0>
 8005848:	066d      	lsls	r5, r5, #25
 800584a:	d5fb      	bpl.n	8005844 <_printf_i+0xb4>
 800584c:	680d      	ldr	r5, [r1, #0]
 800584e:	b2ad      	uxth	r5, r5
 8005850:	4b56      	ldr	r3, [pc, #344]	; (80059ac <_printf_i+0x21c>)
 8005852:	270a      	movs	r7, #10
 8005854:	9303      	str	r3, [sp, #12]
 8005856:	2a6f      	cmp	r2, #111	; 0x6f
 8005858:	d117      	bne.n	800588a <_printf_i+0xfa>
 800585a:	2708      	movs	r7, #8
 800585c:	e015      	b.n	800588a <_printf_i+0xfa>
 800585e:	3145      	adds	r1, #69	; 0x45
 8005860:	700a      	strb	r2, [r1, #0]
 8005862:	4a52      	ldr	r2, [pc, #328]	; (80059ac <_printf_i+0x21c>)
 8005864:	9203      	str	r2, [sp, #12]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	6821      	ldr	r1, [r4, #0]
 800586a:	ca20      	ldmia	r2!, {r5}
 800586c:	601a      	str	r2, [r3, #0]
 800586e:	0608      	lsls	r0, r1, #24
 8005870:	d550      	bpl.n	8005914 <_printf_i+0x184>
 8005872:	07cb      	lsls	r3, r1, #31
 8005874:	d502      	bpl.n	800587c <_printf_i+0xec>
 8005876:	2320      	movs	r3, #32
 8005878:	4319      	orrs	r1, r3
 800587a:	6021      	str	r1, [r4, #0]
 800587c:	2710      	movs	r7, #16
 800587e:	2d00      	cmp	r5, #0
 8005880:	d103      	bne.n	800588a <_printf_i+0xfa>
 8005882:	2320      	movs	r3, #32
 8005884:	6822      	ldr	r2, [r4, #0]
 8005886:	439a      	bics	r2, r3
 8005888:	6022      	str	r2, [r4, #0]
 800588a:	0023      	movs	r3, r4
 800588c:	2200      	movs	r2, #0
 800588e:	3343      	adds	r3, #67	; 0x43
 8005890:	701a      	strb	r2, [r3, #0]
 8005892:	6863      	ldr	r3, [r4, #4]
 8005894:	60a3      	str	r3, [r4, #8]
 8005896:	2b00      	cmp	r3, #0
 8005898:	db03      	blt.n	80058a2 <_printf_i+0x112>
 800589a:	2204      	movs	r2, #4
 800589c:	6821      	ldr	r1, [r4, #0]
 800589e:	4391      	bics	r1, r2
 80058a0:	6021      	str	r1, [r4, #0]
 80058a2:	2d00      	cmp	r5, #0
 80058a4:	d102      	bne.n	80058ac <_printf_i+0x11c>
 80058a6:	9e04      	ldr	r6, [sp, #16]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00c      	beq.n	80058c6 <_printf_i+0x136>
 80058ac:	9e04      	ldr	r6, [sp, #16]
 80058ae:	0028      	movs	r0, r5
 80058b0:	0039      	movs	r1, r7
 80058b2:	f7fa fcc1 	bl	8000238 <__aeabi_uidivmod>
 80058b6:	9b03      	ldr	r3, [sp, #12]
 80058b8:	3e01      	subs	r6, #1
 80058ba:	5c5b      	ldrb	r3, [r3, r1]
 80058bc:	7033      	strb	r3, [r6, #0]
 80058be:	002b      	movs	r3, r5
 80058c0:	0005      	movs	r5, r0
 80058c2:	429f      	cmp	r7, r3
 80058c4:	d9f3      	bls.n	80058ae <_printf_i+0x11e>
 80058c6:	2f08      	cmp	r7, #8
 80058c8:	d109      	bne.n	80058de <_printf_i+0x14e>
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	07db      	lsls	r3, r3, #31
 80058ce:	d506      	bpl.n	80058de <_printf_i+0x14e>
 80058d0:	6863      	ldr	r3, [r4, #4]
 80058d2:	6922      	ldr	r2, [r4, #16]
 80058d4:	4293      	cmp	r3, r2
 80058d6:	dc02      	bgt.n	80058de <_printf_i+0x14e>
 80058d8:	2330      	movs	r3, #48	; 0x30
 80058da:	3e01      	subs	r6, #1
 80058dc:	7033      	strb	r3, [r6, #0]
 80058de:	9b04      	ldr	r3, [sp, #16]
 80058e0:	1b9b      	subs	r3, r3, r6
 80058e2:	6123      	str	r3, [r4, #16]
 80058e4:	9b07      	ldr	r3, [sp, #28]
 80058e6:	0021      	movs	r1, r4
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	9805      	ldr	r0, [sp, #20]
 80058ec:	9b06      	ldr	r3, [sp, #24]
 80058ee:	aa09      	add	r2, sp, #36	; 0x24
 80058f0:	f7ff fede 	bl	80056b0 <_printf_common>
 80058f4:	1c43      	adds	r3, r0, #1
 80058f6:	d135      	bne.n	8005964 <_printf_i+0x1d4>
 80058f8:	2001      	movs	r0, #1
 80058fa:	4240      	negs	r0, r0
 80058fc:	b00b      	add	sp, #44	; 0x2c
 80058fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005900:	2220      	movs	r2, #32
 8005902:	6809      	ldr	r1, [r1, #0]
 8005904:	430a      	orrs	r2, r1
 8005906:	6022      	str	r2, [r4, #0]
 8005908:	0022      	movs	r2, r4
 800590a:	2178      	movs	r1, #120	; 0x78
 800590c:	3245      	adds	r2, #69	; 0x45
 800590e:	7011      	strb	r1, [r2, #0]
 8005910:	4a27      	ldr	r2, [pc, #156]	; (80059b0 <_printf_i+0x220>)
 8005912:	e7a7      	b.n	8005864 <_printf_i+0xd4>
 8005914:	0648      	lsls	r0, r1, #25
 8005916:	d5ac      	bpl.n	8005872 <_printf_i+0xe2>
 8005918:	b2ad      	uxth	r5, r5
 800591a:	e7aa      	b.n	8005872 <_printf_i+0xe2>
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	680d      	ldr	r5, [r1, #0]
 8005920:	1d10      	adds	r0, r2, #4
 8005922:	6949      	ldr	r1, [r1, #20]
 8005924:	6018      	str	r0, [r3, #0]
 8005926:	6813      	ldr	r3, [r2, #0]
 8005928:	062e      	lsls	r6, r5, #24
 800592a:	d501      	bpl.n	8005930 <_printf_i+0x1a0>
 800592c:	6019      	str	r1, [r3, #0]
 800592e:	e002      	b.n	8005936 <_printf_i+0x1a6>
 8005930:	066d      	lsls	r5, r5, #25
 8005932:	d5fb      	bpl.n	800592c <_printf_i+0x19c>
 8005934:	8019      	strh	r1, [r3, #0]
 8005936:	2300      	movs	r3, #0
 8005938:	9e04      	ldr	r6, [sp, #16]
 800593a:	6123      	str	r3, [r4, #16]
 800593c:	e7d2      	b.n	80058e4 <_printf_i+0x154>
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	1d11      	adds	r1, r2, #4
 8005942:	6019      	str	r1, [r3, #0]
 8005944:	6816      	ldr	r6, [r2, #0]
 8005946:	2100      	movs	r1, #0
 8005948:	0030      	movs	r0, r6
 800594a:	6862      	ldr	r2, [r4, #4]
 800594c:	f000 fad0 	bl	8005ef0 <memchr>
 8005950:	2800      	cmp	r0, #0
 8005952:	d001      	beq.n	8005958 <_printf_i+0x1c8>
 8005954:	1b80      	subs	r0, r0, r6
 8005956:	6060      	str	r0, [r4, #4]
 8005958:	6863      	ldr	r3, [r4, #4]
 800595a:	6123      	str	r3, [r4, #16]
 800595c:	2300      	movs	r3, #0
 800595e:	9a04      	ldr	r2, [sp, #16]
 8005960:	7013      	strb	r3, [r2, #0]
 8005962:	e7bf      	b.n	80058e4 <_printf_i+0x154>
 8005964:	6923      	ldr	r3, [r4, #16]
 8005966:	0032      	movs	r2, r6
 8005968:	9906      	ldr	r1, [sp, #24]
 800596a:	9805      	ldr	r0, [sp, #20]
 800596c:	9d07      	ldr	r5, [sp, #28]
 800596e:	47a8      	blx	r5
 8005970:	1c43      	adds	r3, r0, #1
 8005972:	d0c1      	beq.n	80058f8 <_printf_i+0x168>
 8005974:	6823      	ldr	r3, [r4, #0]
 8005976:	079b      	lsls	r3, r3, #30
 8005978:	d415      	bmi.n	80059a6 <_printf_i+0x216>
 800597a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800597c:	68e0      	ldr	r0, [r4, #12]
 800597e:	4298      	cmp	r0, r3
 8005980:	dabc      	bge.n	80058fc <_printf_i+0x16c>
 8005982:	0018      	movs	r0, r3
 8005984:	e7ba      	b.n	80058fc <_printf_i+0x16c>
 8005986:	0022      	movs	r2, r4
 8005988:	2301      	movs	r3, #1
 800598a:	9906      	ldr	r1, [sp, #24]
 800598c:	9805      	ldr	r0, [sp, #20]
 800598e:	9e07      	ldr	r6, [sp, #28]
 8005990:	3219      	adds	r2, #25
 8005992:	47b0      	blx	r6
 8005994:	1c43      	adds	r3, r0, #1
 8005996:	d0af      	beq.n	80058f8 <_printf_i+0x168>
 8005998:	3501      	adds	r5, #1
 800599a:	68e3      	ldr	r3, [r4, #12]
 800599c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800599e:	1a9b      	subs	r3, r3, r2
 80059a0:	42ab      	cmp	r3, r5
 80059a2:	dcf0      	bgt.n	8005986 <_printf_i+0x1f6>
 80059a4:	e7e9      	b.n	800597a <_printf_i+0x1ea>
 80059a6:	2500      	movs	r5, #0
 80059a8:	e7f7      	b.n	800599a <_printf_i+0x20a>
 80059aa:	46c0      	nop			; (mov r8, r8)
 80059ac:	08006331 	.word	0x08006331
 80059b0:	08006342 	.word	0x08006342

080059b4 <_sbrk_r>:
 80059b4:	2300      	movs	r3, #0
 80059b6:	b570      	push	{r4, r5, r6, lr}
 80059b8:	4d06      	ldr	r5, [pc, #24]	; (80059d4 <_sbrk_r+0x20>)
 80059ba:	0004      	movs	r4, r0
 80059bc:	0008      	movs	r0, r1
 80059be:	602b      	str	r3, [r5, #0]
 80059c0:	f7fb fd38 	bl	8001434 <_sbrk>
 80059c4:	1c43      	adds	r3, r0, #1
 80059c6:	d103      	bne.n	80059d0 <_sbrk_r+0x1c>
 80059c8:	682b      	ldr	r3, [r5, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d000      	beq.n	80059d0 <_sbrk_r+0x1c>
 80059ce:	6023      	str	r3, [r4, #0]
 80059d0:	bd70      	pop	{r4, r5, r6, pc}
 80059d2:	46c0      	nop			; (mov r8, r8)
 80059d4:	2000035c 	.word	0x2000035c

080059d8 <__sread>:
 80059d8:	b570      	push	{r4, r5, r6, lr}
 80059da:	000c      	movs	r4, r1
 80059dc:	250e      	movs	r5, #14
 80059de:	5f49      	ldrsh	r1, [r1, r5]
 80059e0:	f000 fb2e 	bl	8006040 <_read_r>
 80059e4:	2800      	cmp	r0, #0
 80059e6:	db03      	blt.n	80059f0 <__sread+0x18>
 80059e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80059ea:	181b      	adds	r3, r3, r0
 80059ec:	6563      	str	r3, [r4, #84]	; 0x54
 80059ee:	bd70      	pop	{r4, r5, r6, pc}
 80059f0:	89a3      	ldrh	r3, [r4, #12]
 80059f2:	4a02      	ldr	r2, [pc, #8]	; (80059fc <__sread+0x24>)
 80059f4:	4013      	ands	r3, r2
 80059f6:	81a3      	strh	r3, [r4, #12]
 80059f8:	e7f9      	b.n	80059ee <__sread+0x16>
 80059fa:	46c0      	nop			; (mov r8, r8)
 80059fc:	ffffefff 	.word	0xffffefff

08005a00 <__swrite>:
 8005a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a02:	001f      	movs	r7, r3
 8005a04:	898b      	ldrh	r3, [r1, #12]
 8005a06:	0005      	movs	r5, r0
 8005a08:	000c      	movs	r4, r1
 8005a0a:	0016      	movs	r6, r2
 8005a0c:	05db      	lsls	r3, r3, #23
 8005a0e:	d505      	bpl.n	8005a1c <__swrite+0x1c>
 8005a10:	230e      	movs	r3, #14
 8005a12:	5ec9      	ldrsh	r1, [r1, r3]
 8005a14:	2200      	movs	r2, #0
 8005a16:	2302      	movs	r3, #2
 8005a18:	f000 f9ea 	bl	8005df0 <_lseek_r>
 8005a1c:	89a3      	ldrh	r3, [r4, #12]
 8005a1e:	4a05      	ldr	r2, [pc, #20]	; (8005a34 <__swrite+0x34>)
 8005a20:	0028      	movs	r0, r5
 8005a22:	4013      	ands	r3, r2
 8005a24:	81a3      	strh	r3, [r4, #12]
 8005a26:	0032      	movs	r2, r6
 8005a28:	230e      	movs	r3, #14
 8005a2a:	5ee1      	ldrsh	r1, [r4, r3]
 8005a2c:	003b      	movs	r3, r7
 8005a2e:	f000 f875 	bl	8005b1c <_write_r>
 8005a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a34:	ffffefff 	.word	0xffffefff

08005a38 <__sseek>:
 8005a38:	b570      	push	{r4, r5, r6, lr}
 8005a3a:	000c      	movs	r4, r1
 8005a3c:	250e      	movs	r5, #14
 8005a3e:	5f49      	ldrsh	r1, [r1, r5]
 8005a40:	f000 f9d6 	bl	8005df0 <_lseek_r>
 8005a44:	89a3      	ldrh	r3, [r4, #12]
 8005a46:	1c42      	adds	r2, r0, #1
 8005a48:	d103      	bne.n	8005a52 <__sseek+0x1a>
 8005a4a:	4a05      	ldr	r2, [pc, #20]	; (8005a60 <__sseek+0x28>)
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	81a3      	strh	r3, [r4, #12]
 8005a50:	bd70      	pop	{r4, r5, r6, pc}
 8005a52:	2280      	movs	r2, #128	; 0x80
 8005a54:	0152      	lsls	r2, r2, #5
 8005a56:	4313      	orrs	r3, r2
 8005a58:	81a3      	strh	r3, [r4, #12]
 8005a5a:	6560      	str	r0, [r4, #84]	; 0x54
 8005a5c:	e7f8      	b.n	8005a50 <__sseek+0x18>
 8005a5e:	46c0      	nop			; (mov r8, r8)
 8005a60:	ffffefff 	.word	0xffffefff

08005a64 <__sclose>:
 8005a64:	b510      	push	{r4, lr}
 8005a66:	230e      	movs	r3, #14
 8005a68:	5ec9      	ldrsh	r1, [r1, r3]
 8005a6a:	f000 f8e3 	bl	8005c34 <_close_r>
 8005a6e:	bd10      	pop	{r4, pc}

08005a70 <__swbuf_r>:
 8005a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a72:	0005      	movs	r5, r0
 8005a74:	000e      	movs	r6, r1
 8005a76:	0014      	movs	r4, r2
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	d004      	beq.n	8005a86 <__swbuf_r+0x16>
 8005a7c:	6983      	ldr	r3, [r0, #24]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <__swbuf_r+0x16>
 8005a82:	f7ff fa4f 	bl	8004f24 <__sinit>
 8005a86:	4b22      	ldr	r3, [pc, #136]	; (8005b10 <__swbuf_r+0xa0>)
 8005a88:	429c      	cmp	r4, r3
 8005a8a:	d12e      	bne.n	8005aea <__swbuf_r+0x7a>
 8005a8c:	686c      	ldr	r4, [r5, #4]
 8005a8e:	69a3      	ldr	r3, [r4, #24]
 8005a90:	60a3      	str	r3, [r4, #8]
 8005a92:	89a3      	ldrh	r3, [r4, #12]
 8005a94:	071b      	lsls	r3, r3, #28
 8005a96:	d532      	bpl.n	8005afe <__swbuf_r+0x8e>
 8005a98:	6923      	ldr	r3, [r4, #16]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d02f      	beq.n	8005afe <__swbuf_r+0x8e>
 8005a9e:	6823      	ldr	r3, [r4, #0]
 8005aa0:	6922      	ldr	r2, [r4, #16]
 8005aa2:	b2f7      	uxtb	r7, r6
 8005aa4:	1a98      	subs	r0, r3, r2
 8005aa6:	6963      	ldr	r3, [r4, #20]
 8005aa8:	b2f6      	uxtb	r6, r6
 8005aaa:	4283      	cmp	r3, r0
 8005aac:	dc05      	bgt.n	8005aba <__swbuf_r+0x4a>
 8005aae:	0021      	movs	r1, r4
 8005ab0:	0028      	movs	r0, r5
 8005ab2:	f000 f95d 	bl	8005d70 <_fflush_r>
 8005ab6:	2800      	cmp	r0, #0
 8005ab8:	d127      	bne.n	8005b0a <__swbuf_r+0x9a>
 8005aba:	68a3      	ldr	r3, [r4, #8]
 8005abc:	3001      	adds	r0, #1
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	60a3      	str	r3, [r4, #8]
 8005ac2:	6823      	ldr	r3, [r4, #0]
 8005ac4:	1c5a      	adds	r2, r3, #1
 8005ac6:	6022      	str	r2, [r4, #0]
 8005ac8:	701f      	strb	r7, [r3, #0]
 8005aca:	6963      	ldr	r3, [r4, #20]
 8005acc:	4283      	cmp	r3, r0
 8005ace:	d004      	beq.n	8005ada <__swbuf_r+0x6a>
 8005ad0:	89a3      	ldrh	r3, [r4, #12]
 8005ad2:	07db      	lsls	r3, r3, #31
 8005ad4:	d507      	bpl.n	8005ae6 <__swbuf_r+0x76>
 8005ad6:	2e0a      	cmp	r6, #10
 8005ad8:	d105      	bne.n	8005ae6 <__swbuf_r+0x76>
 8005ada:	0021      	movs	r1, r4
 8005adc:	0028      	movs	r0, r5
 8005ade:	f000 f947 	bl	8005d70 <_fflush_r>
 8005ae2:	2800      	cmp	r0, #0
 8005ae4:	d111      	bne.n	8005b0a <__swbuf_r+0x9a>
 8005ae6:	0030      	movs	r0, r6
 8005ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005aea:	4b0a      	ldr	r3, [pc, #40]	; (8005b14 <__swbuf_r+0xa4>)
 8005aec:	429c      	cmp	r4, r3
 8005aee:	d101      	bne.n	8005af4 <__swbuf_r+0x84>
 8005af0:	68ac      	ldr	r4, [r5, #8]
 8005af2:	e7cc      	b.n	8005a8e <__swbuf_r+0x1e>
 8005af4:	4b08      	ldr	r3, [pc, #32]	; (8005b18 <__swbuf_r+0xa8>)
 8005af6:	429c      	cmp	r4, r3
 8005af8:	d1c9      	bne.n	8005a8e <__swbuf_r+0x1e>
 8005afa:	68ec      	ldr	r4, [r5, #12]
 8005afc:	e7c7      	b.n	8005a8e <__swbuf_r+0x1e>
 8005afe:	0021      	movs	r1, r4
 8005b00:	0028      	movs	r0, r5
 8005b02:	f000 f81f 	bl	8005b44 <__swsetup_r>
 8005b06:	2800      	cmp	r0, #0
 8005b08:	d0c9      	beq.n	8005a9e <__swbuf_r+0x2e>
 8005b0a:	2601      	movs	r6, #1
 8005b0c:	4276      	negs	r6, r6
 8005b0e:	e7ea      	b.n	8005ae6 <__swbuf_r+0x76>
 8005b10:	080062e0 	.word	0x080062e0
 8005b14:	08006300 	.word	0x08006300
 8005b18:	080062c0 	.word	0x080062c0

08005b1c <_write_r>:
 8005b1c:	b570      	push	{r4, r5, r6, lr}
 8005b1e:	0004      	movs	r4, r0
 8005b20:	0008      	movs	r0, r1
 8005b22:	0011      	movs	r1, r2
 8005b24:	001a      	movs	r2, r3
 8005b26:	2300      	movs	r3, #0
 8005b28:	4d05      	ldr	r5, [pc, #20]	; (8005b40 <_write_r+0x24>)
 8005b2a:	602b      	str	r3, [r5, #0]
 8005b2c:	f7fb f98c 	bl	8000e48 <_write>
 8005b30:	1c43      	adds	r3, r0, #1
 8005b32:	d103      	bne.n	8005b3c <_write_r+0x20>
 8005b34:	682b      	ldr	r3, [r5, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d000      	beq.n	8005b3c <_write_r+0x20>
 8005b3a:	6023      	str	r3, [r4, #0]
 8005b3c:	bd70      	pop	{r4, r5, r6, pc}
 8005b3e:	46c0      	nop			; (mov r8, r8)
 8005b40:	2000035c 	.word	0x2000035c

08005b44 <__swsetup_r>:
 8005b44:	4b37      	ldr	r3, [pc, #220]	; (8005c24 <__swsetup_r+0xe0>)
 8005b46:	b570      	push	{r4, r5, r6, lr}
 8005b48:	681d      	ldr	r5, [r3, #0]
 8005b4a:	0006      	movs	r6, r0
 8005b4c:	000c      	movs	r4, r1
 8005b4e:	2d00      	cmp	r5, #0
 8005b50:	d005      	beq.n	8005b5e <__swsetup_r+0x1a>
 8005b52:	69ab      	ldr	r3, [r5, #24]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d102      	bne.n	8005b5e <__swsetup_r+0x1a>
 8005b58:	0028      	movs	r0, r5
 8005b5a:	f7ff f9e3 	bl	8004f24 <__sinit>
 8005b5e:	4b32      	ldr	r3, [pc, #200]	; (8005c28 <__swsetup_r+0xe4>)
 8005b60:	429c      	cmp	r4, r3
 8005b62:	d10f      	bne.n	8005b84 <__swsetup_r+0x40>
 8005b64:	686c      	ldr	r4, [r5, #4]
 8005b66:	230c      	movs	r3, #12
 8005b68:	5ee2      	ldrsh	r2, [r4, r3]
 8005b6a:	b293      	uxth	r3, r2
 8005b6c:	0711      	lsls	r1, r2, #28
 8005b6e:	d42d      	bmi.n	8005bcc <__swsetup_r+0x88>
 8005b70:	06d9      	lsls	r1, r3, #27
 8005b72:	d411      	bmi.n	8005b98 <__swsetup_r+0x54>
 8005b74:	2309      	movs	r3, #9
 8005b76:	2001      	movs	r0, #1
 8005b78:	6033      	str	r3, [r6, #0]
 8005b7a:	3337      	adds	r3, #55	; 0x37
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	81a3      	strh	r3, [r4, #12]
 8005b80:	4240      	negs	r0, r0
 8005b82:	bd70      	pop	{r4, r5, r6, pc}
 8005b84:	4b29      	ldr	r3, [pc, #164]	; (8005c2c <__swsetup_r+0xe8>)
 8005b86:	429c      	cmp	r4, r3
 8005b88:	d101      	bne.n	8005b8e <__swsetup_r+0x4a>
 8005b8a:	68ac      	ldr	r4, [r5, #8]
 8005b8c:	e7eb      	b.n	8005b66 <__swsetup_r+0x22>
 8005b8e:	4b28      	ldr	r3, [pc, #160]	; (8005c30 <__swsetup_r+0xec>)
 8005b90:	429c      	cmp	r4, r3
 8005b92:	d1e8      	bne.n	8005b66 <__swsetup_r+0x22>
 8005b94:	68ec      	ldr	r4, [r5, #12]
 8005b96:	e7e6      	b.n	8005b66 <__swsetup_r+0x22>
 8005b98:	075b      	lsls	r3, r3, #29
 8005b9a:	d513      	bpl.n	8005bc4 <__swsetup_r+0x80>
 8005b9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b9e:	2900      	cmp	r1, #0
 8005ba0:	d008      	beq.n	8005bb4 <__swsetup_r+0x70>
 8005ba2:	0023      	movs	r3, r4
 8005ba4:	3344      	adds	r3, #68	; 0x44
 8005ba6:	4299      	cmp	r1, r3
 8005ba8:	d002      	beq.n	8005bb0 <__swsetup_r+0x6c>
 8005baa:	0030      	movs	r0, r6
 8005bac:	f000 f9d8 	bl	8005f60 <_free_r>
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	6363      	str	r3, [r4, #52]	; 0x34
 8005bb4:	2224      	movs	r2, #36	; 0x24
 8005bb6:	89a3      	ldrh	r3, [r4, #12]
 8005bb8:	4393      	bics	r3, r2
 8005bba:	81a3      	strh	r3, [r4, #12]
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	6063      	str	r3, [r4, #4]
 8005bc0:	6923      	ldr	r3, [r4, #16]
 8005bc2:	6023      	str	r3, [r4, #0]
 8005bc4:	2308      	movs	r3, #8
 8005bc6:	89a2      	ldrh	r2, [r4, #12]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	81a3      	strh	r3, [r4, #12]
 8005bcc:	6923      	ldr	r3, [r4, #16]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d10b      	bne.n	8005bea <__swsetup_r+0xa6>
 8005bd2:	21a0      	movs	r1, #160	; 0xa0
 8005bd4:	2280      	movs	r2, #128	; 0x80
 8005bd6:	89a3      	ldrh	r3, [r4, #12]
 8005bd8:	0089      	lsls	r1, r1, #2
 8005bda:	0092      	lsls	r2, r2, #2
 8005bdc:	400b      	ands	r3, r1
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d003      	beq.n	8005bea <__swsetup_r+0xa6>
 8005be2:	0021      	movs	r1, r4
 8005be4:	0030      	movs	r0, r6
 8005be6:	f000 f93f 	bl	8005e68 <__smakebuf_r>
 8005bea:	220c      	movs	r2, #12
 8005bec:	5ea3      	ldrsh	r3, [r4, r2]
 8005bee:	2001      	movs	r0, #1
 8005bf0:	001a      	movs	r2, r3
 8005bf2:	b299      	uxth	r1, r3
 8005bf4:	4002      	ands	r2, r0
 8005bf6:	4203      	tst	r3, r0
 8005bf8:	d00f      	beq.n	8005c1a <__swsetup_r+0xd6>
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	60a2      	str	r2, [r4, #8]
 8005bfe:	6962      	ldr	r2, [r4, #20]
 8005c00:	4252      	negs	r2, r2
 8005c02:	61a2      	str	r2, [r4, #24]
 8005c04:	2000      	movs	r0, #0
 8005c06:	6922      	ldr	r2, [r4, #16]
 8005c08:	4282      	cmp	r2, r0
 8005c0a:	d1ba      	bne.n	8005b82 <__swsetup_r+0x3e>
 8005c0c:	060a      	lsls	r2, r1, #24
 8005c0e:	d5b8      	bpl.n	8005b82 <__swsetup_r+0x3e>
 8005c10:	2240      	movs	r2, #64	; 0x40
 8005c12:	4313      	orrs	r3, r2
 8005c14:	81a3      	strh	r3, [r4, #12]
 8005c16:	3801      	subs	r0, #1
 8005c18:	e7b3      	b.n	8005b82 <__swsetup_r+0x3e>
 8005c1a:	0788      	lsls	r0, r1, #30
 8005c1c:	d400      	bmi.n	8005c20 <__swsetup_r+0xdc>
 8005c1e:	6962      	ldr	r2, [r4, #20]
 8005c20:	60a2      	str	r2, [r4, #8]
 8005c22:	e7ef      	b.n	8005c04 <__swsetup_r+0xc0>
 8005c24:	20000010 	.word	0x20000010
 8005c28:	080062e0 	.word	0x080062e0
 8005c2c:	08006300 	.word	0x08006300
 8005c30:	080062c0 	.word	0x080062c0

08005c34 <_close_r>:
 8005c34:	2300      	movs	r3, #0
 8005c36:	b570      	push	{r4, r5, r6, lr}
 8005c38:	4d06      	ldr	r5, [pc, #24]	; (8005c54 <_close_r+0x20>)
 8005c3a:	0004      	movs	r4, r0
 8005c3c:	0008      	movs	r0, r1
 8005c3e:	602b      	str	r3, [r5, #0]
 8005c40:	f7fb fbcb 	bl	80013da <_close>
 8005c44:	1c43      	adds	r3, r0, #1
 8005c46:	d103      	bne.n	8005c50 <_close_r+0x1c>
 8005c48:	682b      	ldr	r3, [r5, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d000      	beq.n	8005c50 <_close_r+0x1c>
 8005c4e:	6023      	str	r3, [r4, #0]
 8005c50:	bd70      	pop	{r4, r5, r6, pc}
 8005c52:	46c0      	nop			; (mov r8, r8)
 8005c54:	2000035c 	.word	0x2000035c

08005c58 <__sflush_r>:
 8005c58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c5a:	898b      	ldrh	r3, [r1, #12]
 8005c5c:	0005      	movs	r5, r0
 8005c5e:	000c      	movs	r4, r1
 8005c60:	071a      	lsls	r2, r3, #28
 8005c62:	d45f      	bmi.n	8005d24 <__sflush_r+0xcc>
 8005c64:	684a      	ldr	r2, [r1, #4]
 8005c66:	2a00      	cmp	r2, #0
 8005c68:	dc04      	bgt.n	8005c74 <__sflush_r+0x1c>
 8005c6a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8005c6c:	2a00      	cmp	r2, #0
 8005c6e:	dc01      	bgt.n	8005c74 <__sflush_r+0x1c>
 8005c70:	2000      	movs	r0, #0
 8005c72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c74:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005c76:	2f00      	cmp	r7, #0
 8005c78:	d0fa      	beq.n	8005c70 <__sflush_r+0x18>
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	2180      	movs	r1, #128	; 0x80
 8005c7e:	682e      	ldr	r6, [r5, #0]
 8005c80:	602a      	str	r2, [r5, #0]
 8005c82:	001a      	movs	r2, r3
 8005c84:	0149      	lsls	r1, r1, #5
 8005c86:	400a      	ands	r2, r1
 8005c88:	420b      	tst	r3, r1
 8005c8a:	d034      	beq.n	8005cf6 <__sflush_r+0x9e>
 8005c8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c8e:	89a3      	ldrh	r3, [r4, #12]
 8005c90:	075b      	lsls	r3, r3, #29
 8005c92:	d506      	bpl.n	8005ca2 <__sflush_r+0x4a>
 8005c94:	6863      	ldr	r3, [r4, #4]
 8005c96:	1ac0      	subs	r0, r0, r3
 8005c98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d001      	beq.n	8005ca2 <__sflush_r+0x4a>
 8005c9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ca0:	1ac0      	subs	r0, r0, r3
 8005ca2:	0002      	movs	r2, r0
 8005ca4:	6a21      	ldr	r1, [r4, #32]
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	0028      	movs	r0, r5
 8005caa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005cac:	47b8      	blx	r7
 8005cae:	89a1      	ldrh	r1, [r4, #12]
 8005cb0:	1c43      	adds	r3, r0, #1
 8005cb2:	d106      	bne.n	8005cc2 <__sflush_r+0x6a>
 8005cb4:	682b      	ldr	r3, [r5, #0]
 8005cb6:	2b1d      	cmp	r3, #29
 8005cb8:	d831      	bhi.n	8005d1e <__sflush_r+0xc6>
 8005cba:	4a2c      	ldr	r2, [pc, #176]	; (8005d6c <__sflush_r+0x114>)
 8005cbc:	40da      	lsrs	r2, r3
 8005cbe:	07d3      	lsls	r3, r2, #31
 8005cc0:	d52d      	bpl.n	8005d1e <__sflush_r+0xc6>
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	6063      	str	r3, [r4, #4]
 8005cc6:	6923      	ldr	r3, [r4, #16]
 8005cc8:	6023      	str	r3, [r4, #0]
 8005cca:	04cb      	lsls	r3, r1, #19
 8005ccc:	d505      	bpl.n	8005cda <__sflush_r+0x82>
 8005cce:	1c43      	adds	r3, r0, #1
 8005cd0:	d102      	bne.n	8005cd8 <__sflush_r+0x80>
 8005cd2:	682b      	ldr	r3, [r5, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d100      	bne.n	8005cda <__sflush_r+0x82>
 8005cd8:	6560      	str	r0, [r4, #84]	; 0x54
 8005cda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cdc:	602e      	str	r6, [r5, #0]
 8005cde:	2900      	cmp	r1, #0
 8005ce0:	d0c6      	beq.n	8005c70 <__sflush_r+0x18>
 8005ce2:	0023      	movs	r3, r4
 8005ce4:	3344      	adds	r3, #68	; 0x44
 8005ce6:	4299      	cmp	r1, r3
 8005ce8:	d002      	beq.n	8005cf0 <__sflush_r+0x98>
 8005cea:	0028      	movs	r0, r5
 8005cec:	f000 f938 	bl	8005f60 <_free_r>
 8005cf0:	2000      	movs	r0, #0
 8005cf2:	6360      	str	r0, [r4, #52]	; 0x34
 8005cf4:	e7bd      	b.n	8005c72 <__sflush_r+0x1a>
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	0028      	movs	r0, r5
 8005cfa:	6a21      	ldr	r1, [r4, #32]
 8005cfc:	47b8      	blx	r7
 8005cfe:	1c43      	adds	r3, r0, #1
 8005d00:	d1c5      	bne.n	8005c8e <__sflush_r+0x36>
 8005d02:	682b      	ldr	r3, [r5, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d0c2      	beq.n	8005c8e <__sflush_r+0x36>
 8005d08:	2b1d      	cmp	r3, #29
 8005d0a:	d001      	beq.n	8005d10 <__sflush_r+0xb8>
 8005d0c:	2b16      	cmp	r3, #22
 8005d0e:	d101      	bne.n	8005d14 <__sflush_r+0xbc>
 8005d10:	602e      	str	r6, [r5, #0]
 8005d12:	e7ad      	b.n	8005c70 <__sflush_r+0x18>
 8005d14:	2340      	movs	r3, #64	; 0x40
 8005d16:	89a2      	ldrh	r2, [r4, #12]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	81a3      	strh	r3, [r4, #12]
 8005d1c:	e7a9      	b.n	8005c72 <__sflush_r+0x1a>
 8005d1e:	2340      	movs	r3, #64	; 0x40
 8005d20:	430b      	orrs	r3, r1
 8005d22:	e7fa      	b.n	8005d1a <__sflush_r+0xc2>
 8005d24:	690f      	ldr	r7, [r1, #16]
 8005d26:	2f00      	cmp	r7, #0
 8005d28:	d0a2      	beq.n	8005c70 <__sflush_r+0x18>
 8005d2a:	680a      	ldr	r2, [r1, #0]
 8005d2c:	600f      	str	r7, [r1, #0]
 8005d2e:	1bd2      	subs	r2, r2, r7
 8005d30:	9201      	str	r2, [sp, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	079b      	lsls	r3, r3, #30
 8005d36:	d100      	bne.n	8005d3a <__sflush_r+0xe2>
 8005d38:	694a      	ldr	r2, [r1, #20]
 8005d3a:	60a2      	str	r2, [r4, #8]
 8005d3c:	9b01      	ldr	r3, [sp, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	dc00      	bgt.n	8005d44 <__sflush_r+0xec>
 8005d42:	e795      	b.n	8005c70 <__sflush_r+0x18>
 8005d44:	003a      	movs	r2, r7
 8005d46:	0028      	movs	r0, r5
 8005d48:	9b01      	ldr	r3, [sp, #4]
 8005d4a:	6a21      	ldr	r1, [r4, #32]
 8005d4c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005d4e:	47b0      	blx	r6
 8005d50:	2800      	cmp	r0, #0
 8005d52:	dc06      	bgt.n	8005d62 <__sflush_r+0x10a>
 8005d54:	2340      	movs	r3, #64	; 0x40
 8005d56:	2001      	movs	r0, #1
 8005d58:	89a2      	ldrh	r2, [r4, #12]
 8005d5a:	4240      	negs	r0, r0
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	81a3      	strh	r3, [r4, #12]
 8005d60:	e787      	b.n	8005c72 <__sflush_r+0x1a>
 8005d62:	9b01      	ldr	r3, [sp, #4]
 8005d64:	183f      	adds	r7, r7, r0
 8005d66:	1a1b      	subs	r3, r3, r0
 8005d68:	9301      	str	r3, [sp, #4]
 8005d6a:	e7e7      	b.n	8005d3c <__sflush_r+0xe4>
 8005d6c:	20400001 	.word	0x20400001

08005d70 <_fflush_r>:
 8005d70:	690b      	ldr	r3, [r1, #16]
 8005d72:	b570      	push	{r4, r5, r6, lr}
 8005d74:	0005      	movs	r5, r0
 8005d76:	000c      	movs	r4, r1
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d102      	bne.n	8005d82 <_fflush_r+0x12>
 8005d7c:	2500      	movs	r5, #0
 8005d7e:	0028      	movs	r0, r5
 8005d80:	bd70      	pop	{r4, r5, r6, pc}
 8005d82:	2800      	cmp	r0, #0
 8005d84:	d004      	beq.n	8005d90 <_fflush_r+0x20>
 8005d86:	6983      	ldr	r3, [r0, #24]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d101      	bne.n	8005d90 <_fflush_r+0x20>
 8005d8c:	f7ff f8ca 	bl	8004f24 <__sinit>
 8005d90:	4b14      	ldr	r3, [pc, #80]	; (8005de4 <_fflush_r+0x74>)
 8005d92:	429c      	cmp	r4, r3
 8005d94:	d11b      	bne.n	8005dce <_fflush_r+0x5e>
 8005d96:	686c      	ldr	r4, [r5, #4]
 8005d98:	220c      	movs	r2, #12
 8005d9a:	5ea3      	ldrsh	r3, [r4, r2]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d0ed      	beq.n	8005d7c <_fflush_r+0xc>
 8005da0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005da2:	07d2      	lsls	r2, r2, #31
 8005da4:	d404      	bmi.n	8005db0 <_fflush_r+0x40>
 8005da6:	059b      	lsls	r3, r3, #22
 8005da8:	d402      	bmi.n	8005db0 <_fflush_r+0x40>
 8005daa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dac:	f7ff f95b 	bl	8005066 <__retarget_lock_acquire_recursive>
 8005db0:	0028      	movs	r0, r5
 8005db2:	0021      	movs	r1, r4
 8005db4:	f7ff ff50 	bl	8005c58 <__sflush_r>
 8005db8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005dba:	0005      	movs	r5, r0
 8005dbc:	07db      	lsls	r3, r3, #31
 8005dbe:	d4de      	bmi.n	8005d7e <_fflush_r+0xe>
 8005dc0:	89a3      	ldrh	r3, [r4, #12]
 8005dc2:	059b      	lsls	r3, r3, #22
 8005dc4:	d4db      	bmi.n	8005d7e <_fflush_r+0xe>
 8005dc6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dc8:	f7ff f94e 	bl	8005068 <__retarget_lock_release_recursive>
 8005dcc:	e7d7      	b.n	8005d7e <_fflush_r+0xe>
 8005dce:	4b06      	ldr	r3, [pc, #24]	; (8005de8 <_fflush_r+0x78>)
 8005dd0:	429c      	cmp	r4, r3
 8005dd2:	d101      	bne.n	8005dd8 <_fflush_r+0x68>
 8005dd4:	68ac      	ldr	r4, [r5, #8]
 8005dd6:	e7df      	b.n	8005d98 <_fflush_r+0x28>
 8005dd8:	4b04      	ldr	r3, [pc, #16]	; (8005dec <_fflush_r+0x7c>)
 8005dda:	429c      	cmp	r4, r3
 8005ddc:	d1dc      	bne.n	8005d98 <_fflush_r+0x28>
 8005dde:	68ec      	ldr	r4, [r5, #12]
 8005de0:	e7da      	b.n	8005d98 <_fflush_r+0x28>
 8005de2:	46c0      	nop			; (mov r8, r8)
 8005de4:	080062e0 	.word	0x080062e0
 8005de8:	08006300 	.word	0x08006300
 8005dec:	080062c0 	.word	0x080062c0

08005df0 <_lseek_r>:
 8005df0:	b570      	push	{r4, r5, r6, lr}
 8005df2:	0004      	movs	r4, r0
 8005df4:	0008      	movs	r0, r1
 8005df6:	0011      	movs	r1, r2
 8005df8:	001a      	movs	r2, r3
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	4d05      	ldr	r5, [pc, #20]	; (8005e14 <_lseek_r+0x24>)
 8005dfe:	602b      	str	r3, [r5, #0]
 8005e00:	f7fb fb0c 	bl	800141c <_lseek>
 8005e04:	1c43      	adds	r3, r0, #1
 8005e06:	d103      	bne.n	8005e10 <_lseek_r+0x20>
 8005e08:	682b      	ldr	r3, [r5, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d000      	beq.n	8005e10 <_lseek_r+0x20>
 8005e0e:	6023      	str	r3, [r4, #0]
 8005e10:	bd70      	pop	{r4, r5, r6, pc}
 8005e12:	46c0      	nop			; (mov r8, r8)
 8005e14:	2000035c 	.word	0x2000035c

08005e18 <__swhatbuf_r>:
 8005e18:	b570      	push	{r4, r5, r6, lr}
 8005e1a:	000e      	movs	r6, r1
 8005e1c:	001d      	movs	r5, r3
 8005e1e:	230e      	movs	r3, #14
 8005e20:	5ec9      	ldrsh	r1, [r1, r3]
 8005e22:	0014      	movs	r4, r2
 8005e24:	b096      	sub	sp, #88	; 0x58
 8005e26:	2900      	cmp	r1, #0
 8005e28:	da07      	bge.n	8005e3a <__swhatbuf_r+0x22>
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	602b      	str	r3, [r5, #0]
 8005e2e:	89b3      	ldrh	r3, [r6, #12]
 8005e30:	061b      	lsls	r3, r3, #24
 8005e32:	d411      	bmi.n	8005e58 <__swhatbuf_r+0x40>
 8005e34:	2380      	movs	r3, #128	; 0x80
 8005e36:	00db      	lsls	r3, r3, #3
 8005e38:	e00f      	b.n	8005e5a <__swhatbuf_r+0x42>
 8005e3a:	466a      	mov	r2, sp
 8005e3c:	f000 f914 	bl	8006068 <_fstat_r>
 8005e40:	2800      	cmp	r0, #0
 8005e42:	dbf2      	blt.n	8005e2a <__swhatbuf_r+0x12>
 8005e44:	23f0      	movs	r3, #240	; 0xf0
 8005e46:	9901      	ldr	r1, [sp, #4]
 8005e48:	021b      	lsls	r3, r3, #8
 8005e4a:	4019      	ands	r1, r3
 8005e4c:	4b05      	ldr	r3, [pc, #20]	; (8005e64 <__swhatbuf_r+0x4c>)
 8005e4e:	18c9      	adds	r1, r1, r3
 8005e50:	424b      	negs	r3, r1
 8005e52:	4159      	adcs	r1, r3
 8005e54:	6029      	str	r1, [r5, #0]
 8005e56:	e7ed      	b.n	8005e34 <__swhatbuf_r+0x1c>
 8005e58:	2340      	movs	r3, #64	; 0x40
 8005e5a:	2000      	movs	r0, #0
 8005e5c:	6023      	str	r3, [r4, #0]
 8005e5e:	b016      	add	sp, #88	; 0x58
 8005e60:	bd70      	pop	{r4, r5, r6, pc}
 8005e62:	46c0      	nop			; (mov r8, r8)
 8005e64:	ffffe000 	.word	0xffffe000

08005e68 <__smakebuf_r>:
 8005e68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e6a:	2602      	movs	r6, #2
 8005e6c:	898b      	ldrh	r3, [r1, #12]
 8005e6e:	0005      	movs	r5, r0
 8005e70:	000c      	movs	r4, r1
 8005e72:	4233      	tst	r3, r6
 8005e74:	d006      	beq.n	8005e84 <__smakebuf_r+0x1c>
 8005e76:	0023      	movs	r3, r4
 8005e78:	3347      	adds	r3, #71	; 0x47
 8005e7a:	6023      	str	r3, [r4, #0]
 8005e7c:	6123      	str	r3, [r4, #16]
 8005e7e:	2301      	movs	r3, #1
 8005e80:	6163      	str	r3, [r4, #20]
 8005e82:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005e84:	466a      	mov	r2, sp
 8005e86:	ab01      	add	r3, sp, #4
 8005e88:	f7ff ffc6 	bl	8005e18 <__swhatbuf_r>
 8005e8c:	9900      	ldr	r1, [sp, #0]
 8005e8e:	0007      	movs	r7, r0
 8005e90:	0028      	movs	r0, r5
 8005e92:	f7ff f8eb 	bl	800506c <_malloc_r>
 8005e96:	2800      	cmp	r0, #0
 8005e98:	d108      	bne.n	8005eac <__smakebuf_r+0x44>
 8005e9a:	220c      	movs	r2, #12
 8005e9c:	5ea3      	ldrsh	r3, [r4, r2]
 8005e9e:	059a      	lsls	r2, r3, #22
 8005ea0:	d4ef      	bmi.n	8005e82 <__smakebuf_r+0x1a>
 8005ea2:	2203      	movs	r2, #3
 8005ea4:	4393      	bics	r3, r2
 8005ea6:	431e      	orrs	r6, r3
 8005ea8:	81a6      	strh	r6, [r4, #12]
 8005eaa:	e7e4      	b.n	8005e76 <__smakebuf_r+0xe>
 8005eac:	4b0f      	ldr	r3, [pc, #60]	; (8005eec <__smakebuf_r+0x84>)
 8005eae:	62ab      	str	r3, [r5, #40]	; 0x28
 8005eb0:	2380      	movs	r3, #128	; 0x80
 8005eb2:	89a2      	ldrh	r2, [r4, #12]
 8005eb4:	6020      	str	r0, [r4, #0]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	81a3      	strh	r3, [r4, #12]
 8005eba:	9b00      	ldr	r3, [sp, #0]
 8005ebc:	6120      	str	r0, [r4, #16]
 8005ebe:	6163      	str	r3, [r4, #20]
 8005ec0:	9b01      	ldr	r3, [sp, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00d      	beq.n	8005ee2 <__smakebuf_r+0x7a>
 8005ec6:	0028      	movs	r0, r5
 8005ec8:	230e      	movs	r3, #14
 8005eca:	5ee1      	ldrsh	r1, [r4, r3]
 8005ecc:	f000 f8de 	bl	800608c <_isatty_r>
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	d006      	beq.n	8005ee2 <__smakebuf_r+0x7a>
 8005ed4:	2203      	movs	r2, #3
 8005ed6:	89a3      	ldrh	r3, [r4, #12]
 8005ed8:	4393      	bics	r3, r2
 8005eda:	001a      	movs	r2, r3
 8005edc:	2301      	movs	r3, #1
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	81a3      	strh	r3, [r4, #12]
 8005ee2:	89a0      	ldrh	r0, [r4, #12]
 8005ee4:	4307      	orrs	r7, r0
 8005ee6:	81a7      	strh	r7, [r4, #12]
 8005ee8:	e7cb      	b.n	8005e82 <__smakebuf_r+0x1a>
 8005eea:	46c0      	nop			; (mov r8, r8)
 8005eec:	08004ea9 	.word	0x08004ea9

08005ef0 <memchr>:
 8005ef0:	b2c9      	uxtb	r1, r1
 8005ef2:	1882      	adds	r2, r0, r2
 8005ef4:	4290      	cmp	r0, r2
 8005ef6:	d101      	bne.n	8005efc <memchr+0xc>
 8005ef8:	2000      	movs	r0, #0
 8005efa:	4770      	bx	lr
 8005efc:	7803      	ldrb	r3, [r0, #0]
 8005efe:	428b      	cmp	r3, r1
 8005f00:	d0fb      	beq.n	8005efa <memchr+0xa>
 8005f02:	3001      	adds	r0, #1
 8005f04:	e7f6      	b.n	8005ef4 <memchr+0x4>

08005f06 <memcpy>:
 8005f06:	2300      	movs	r3, #0
 8005f08:	b510      	push	{r4, lr}
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d100      	bne.n	8005f10 <memcpy+0xa>
 8005f0e:	bd10      	pop	{r4, pc}
 8005f10:	5ccc      	ldrb	r4, [r1, r3]
 8005f12:	54c4      	strb	r4, [r0, r3]
 8005f14:	3301      	adds	r3, #1
 8005f16:	e7f8      	b.n	8005f0a <memcpy+0x4>

08005f18 <memmove>:
 8005f18:	b510      	push	{r4, lr}
 8005f1a:	4288      	cmp	r0, r1
 8005f1c:	d902      	bls.n	8005f24 <memmove+0xc>
 8005f1e:	188b      	adds	r3, r1, r2
 8005f20:	4298      	cmp	r0, r3
 8005f22:	d303      	bcc.n	8005f2c <memmove+0x14>
 8005f24:	2300      	movs	r3, #0
 8005f26:	e007      	b.n	8005f38 <memmove+0x20>
 8005f28:	5c8b      	ldrb	r3, [r1, r2]
 8005f2a:	5483      	strb	r3, [r0, r2]
 8005f2c:	3a01      	subs	r2, #1
 8005f2e:	d2fb      	bcs.n	8005f28 <memmove+0x10>
 8005f30:	bd10      	pop	{r4, pc}
 8005f32:	5ccc      	ldrb	r4, [r1, r3]
 8005f34:	54c4      	strb	r4, [r0, r3]
 8005f36:	3301      	adds	r3, #1
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d1fa      	bne.n	8005f32 <memmove+0x1a>
 8005f3c:	e7f8      	b.n	8005f30 <memmove+0x18>
	...

08005f40 <__malloc_lock>:
 8005f40:	b510      	push	{r4, lr}
 8005f42:	4802      	ldr	r0, [pc, #8]	; (8005f4c <__malloc_lock+0xc>)
 8005f44:	f7ff f88f 	bl	8005066 <__retarget_lock_acquire_recursive>
 8005f48:	bd10      	pop	{r4, pc}
 8005f4a:	46c0      	nop			; (mov r8, r8)
 8005f4c:	20000354 	.word	0x20000354

08005f50 <__malloc_unlock>:
 8005f50:	b510      	push	{r4, lr}
 8005f52:	4802      	ldr	r0, [pc, #8]	; (8005f5c <__malloc_unlock+0xc>)
 8005f54:	f7ff f888 	bl	8005068 <__retarget_lock_release_recursive>
 8005f58:	bd10      	pop	{r4, pc}
 8005f5a:	46c0      	nop			; (mov r8, r8)
 8005f5c:	20000354 	.word	0x20000354

08005f60 <_free_r>:
 8005f60:	b570      	push	{r4, r5, r6, lr}
 8005f62:	0005      	movs	r5, r0
 8005f64:	2900      	cmp	r1, #0
 8005f66:	d010      	beq.n	8005f8a <_free_r+0x2a>
 8005f68:	1f0c      	subs	r4, r1, #4
 8005f6a:	6823      	ldr	r3, [r4, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	da00      	bge.n	8005f72 <_free_r+0x12>
 8005f70:	18e4      	adds	r4, r4, r3
 8005f72:	0028      	movs	r0, r5
 8005f74:	f7ff ffe4 	bl	8005f40 <__malloc_lock>
 8005f78:	4a1d      	ldr	r2, [pc, #116]	; (8005ff0 <_free_r+0x90>)
 8005f7a:	6813      	ldr	r3, [r2, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d105      	bne.n	8005f8c <_free_r+0x2c>
 8005f80:	6063      	str	r3, [r4, #4]
 8005f82:	6014      	str	r4, [r2, #0]
 8005f84:	0028      	movs	r0, r5
 8005f86:	f7ff ffe3 	bl	8005f50 <__malloc_unlock>
 8005f8a:	bd70      	pop	{r4, r5, r6, pc}
 8005f8c:	42a3      	cmp	r3, r4
 8005f8e:	d908      	bls.n	8005fa2 <_free_r+0x42>
 8005f90:	6821      	ldr	r1, [r4, #0]
 8005f92:	1860      	adds	r0, r4, r1
 8005f94:	4283      	cmp	r3, r0
 8005f96:	d1f3      	bne.n	8005f80 <_free_r+0x20>
 8005f98:	6818      	ldr	r0, [r3, #0]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	1841      	adds	r1, r0, r1
 8005f9e:	6021      	str	r1, [r4, #0]
 8005fa0:	e7ee      	b.n	8005f80 <_free_r+0x20>
 8005fa2:	001a      	movs	r2, r3
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d001      	beq.n	8005fae <_free_r+0x4e>
 8005faa:	42a3      	cmp	r3, r4
 8005fac:	d9f9      	bls.n	8005fa2 <_free_r+0x42>
 8005fae:	6811      	ldr	r1, [r2, #0]
 8005fb0:	1850      	adds	r0, r2, r1
 8005fb2:	42a0      	cmp	r0, r4
 8005fb4:	d10b      	bne.n	8005fce <_free_r+0x6e>
 8005fb6:	6820      	ldr	r0, [r4, #0]
 8005fb8:	1809      	adds	r1, r1, r0
 8005fba:	1850      	adds	r0, r2, r1
 8005fbc:	6011      	str	r1, [r2, #0]
 8005fbe:	4283      	cmp	r3, r0
 8005fc0:	d1e0      	bne.n	8005f84 <_free_r+0x24>
 8005fc2:	6818      	ldr	r0, [r3, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	1841      	adds	r1, r0, r1
 8005fc8:	6011      	str	r1, [r2, #0]
 8005fca:	6053      	str	r3, [r2, #4]
 8005fcc:	e7da      	b.n	8005f84 <_free_r+0x24>
 8005fce:	42a0      	cmp	r0, r4
 8005fd0:	d902      	bls.n	8005fd8 <_free_r+0x78>
 8005fd2:	230c      	movs	r3, #12
 8005fd4:	602b      	str	r3, [r5, #0]
 8005fd6:	e7d5      	b.n	8005f84 <_free_r+0x24>
 8005fd8:	6821      	ldr	r1, [r4, #0]
 8005fda:	1860      	adds	r0, r4, r1
 8005fdc:	4283      	cmp	r3, r0
 8005fde:	d103      	bne.n	8005fe8 <_free_r+0x88>
 8005fe0:	6818      	ldr	r0, [r3, #0]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	1841      	adds	r1, r0, r1
 8005fe6:	6021      	str	r1, [r4, #0]
 8005fe8:	6063      	str	r3, [r4, #4]
 8005fea:	6054      	str	r4, [r2, #4]
 8005fec:	e7ca      	b.n	8005f84 <_free_r+0x24>
 8005fee:	46c0      	nop			; (mov r8, r8)
 8005ff0:	200001e0 	.word	0x200001e0

08005ff4 <_realloc_r>:
 8005ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ff6:	0007      	movs	r7, r0
 8005ff8:	000d      	movs	r5, r1
 8005ffa:	0016      	movs	r6, r2
 8005ffc:	2900      	cmp	r1, #0
 8005ffe:	d105      	bne.n	800600c <_realloc_r+0x18>
 8006000:	0011      	movs	r1, r2
 8006002:	f7ff f833 	bl	800506c <_malloc_r>
 8006006:	0004      	movs	r4, r0
 8006008:	0020      	movs	r0, r4
 800600a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800600c:	2a00      	cmp	r2, #0
 800600e:	d103      	bne.n	8006018 <_realloc_r+0x24>
 8006010:	f7ff ffa6 	bl	8005f60 <_free_r>
 8006014:	0034      	movs	r4, r6
 8006016:	e7f7      	b.n	8006008 <_realloc_r+0x14>
 8006018:	f000 f84a 	bl	80060b0 <_malloc_usable_size_r>
 800601c:	002c      	movs	r4, r5
 800601e:	42b0      	cmp	r0, r6
 8006020:	d2f2      	bcs.n	8006008 <_realloc_r+0x14>
 8006022:	0031      	movs	r1, r6
 8006024:	0038      	movs	r0, r7
 8006026:	f7ff f821 	bl	800506c <_malloc_r>
 800602a:	1e04      	subs	r4, r0, #0
 800602c:	d0ec      	beq.n	8006008 <_realloc_r+0x14>
 800602e:	0029      	movs	r1, r5
 8006030:	0032      	movs	r2, r6
 8006032:	f7ff ff68 	bl	8005f06 <memcpy>
 8006036:	0029      	movs	r1, r5
 8006038:	0038      	movs	r0, r7
 800603a:	f7ff ff91 	bl	8005f60 <_free_r>
 800603e:	e7e3      	b.n	8006008 <_realloc_r+0x14>

08006040 <_read_r>:
 8006040:	b570      	push	{r4, r5, r6, lr}
 8006042:	0004      	movs	r4, r0
 8006044:	0008      	movs	r0, r1
 8006046:	0011      	movs	r1, r2
 8006048:	001a      	movs	r2, r3
 800604a:	2300      	movs	r3, #0
 800604c:	4d05      	ldr	r5, [pc, #20]	; (8006064 <_read_r+0x24>)
 800604e:	602b      	str	r3, [r5, #0]
 8006050:	f7fb f9a6 	bl	80013a0 <_read>
 8006054:	1c43      	adds	r3, r0, #1
 8006056:	d103      	bne.n	8006060 <_read_r+0x20>
 8006058:	682b      	ldr	r3, [r5, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d000      	beq.n	8006060 <_read_r+0x20>
 800605e:	6023      	str	r3, [r4, #0]
 8006060:	bd70      	pop	{r4, r5, r6, pc}
 8006062:	46c0      	nop			; (mov r8, r8)
 8006064:	2000035c 	.word	0x2000035c

08006068 <_fstat_r>:
 8006068:	2300      	movs	r3, #0
 800606a:	b570      	push	{r4, r5, r6, lr}
 800606c:	4d06      	ldr	r5, [pc, #24]	; (8006088 <_fstat_r+0x20>)
 800606e:	0004      	movs	r4, r0
 8006070:	0008      	movs	r0, r1
 8006072:	0011      	movs	r1, r2
 8006074:	602b      	str	r3, [r5, #0]
 8006076:	f7fb f9ba 	bl	80013ee <_fstat>
 800607a:	1c43      	adds	r3, r0, #1
 800607c:	d103      	bne.n	8006086 <_fstat_r+0x1e>
 800607e:	682b      	ldr	r3, [r5, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d000      	beq.n	8006086 <_fstat_r+0x1e>
 8006084:	6023      	str	r3, [r4, #0]
 8006086:	bd70      	pop	{r4, r5, r6, pc}
 8006088:	2000035c 	.word	0x2000035c

0800608c <_isatty_r>:
 800608c:	2300      	movs	r3, #0
 800608e:	b570      	push	{r4, r5, r6, lr}
 8006090:	4d06      	ldr	r5, [pc, #24]	; (80060ac <_isatty_r+0x20>)
 8006092:	0004      	movs	r4, r0
 8006094:	0008      	movs	r0, r1
 8006096:	602b      	str	r3, [r5, #0]
 8006098:	f7fb f9b7 	bl	800140a <_isatty>
 800609c:	1c43      	adds	r3, r0, #1
 800609e:	d103      	bne.n	80060a8 <_isatty_r+0x1c>
 80060a0:	682b      	ldr	r3, [r5, #0]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d000      	beq.n	80060a8 <_isatty_r+0x1c>
 80060a6:	6023      	str	r3, [r4, #0]
 80060a8:	bd70      	pop	{r4, r5, r6, pc}
 80060aa:	46c0      	nop			; (mov r8, r8)
 80060ac:	2000035c 	.word	0x2000035c

080060b0 <_malloc_usable_size_r>:
 80060b0:	1f0b      	subs	r3, r1, #4
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	1f18      	subs	r0, r3, #4
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	da01      	bge.n	80060be <_malloc_usable_size_r+0xe>
 80060ba:	580b      	ldr	r3, [r1, r0]
 80060bc:	18c0      	adds	r0, r0, r3
 80060be:	4770      	bx	lr

080060c0 <_init>:
 80060c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060c2:	46c0      	nop			; (mov r8, r8)
 80060c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060c6:	bc08      	pop	{r3}
 80060c8:	469e      	mov	lr, r3
 80060ca:	4770      	bx	lr

080060cc <_fini>:
 80060cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ce:	46c0      	nop			; (mov r8, r8)
 80060d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060d2:	bc08      	pop	{r3}
 80060d4:	469e      	mov	lr, r3
 80060d6:	4770      	bx	lr
